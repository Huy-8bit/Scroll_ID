{"id":"b6c126a81124fa1985f49b9306c0f5aa","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/ethregistrar/BaseRegistrarImplementation.sol":{"content":"pragma solidity >=0.8.4;\n\nimport \"../registry/ENS.sol\";\nimport \"./IBaseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BaseRegistrarImplementation is ERC721, IBaseRegistrar, Ownable {\n    // A map of expiry times\n    mapping(uint256 => uint256) expiries;\n    // The ENS registry\n    ENS public ens;\n    // The namehash of the TLD this registrar owns (eg, .eth)\n    bytes32 public baseNode;\n    // A map of addresses that are authorised to register and renew names.\n    mapping(address => bool) public controllers;\n    uint256 public constant GRACE_PERIOD = 90 days;\n    bytes4 private constant INTERFACE_META_ID =\n        bytes4(keccak256(\"supportsInterface(bytes4)\"));\n    bytes4 private constant ERC721_ID =\n        bytes4(\n            keccak256(\"balanceOf(address)\") ^\n                keccak256(\"ownerOf(uint256)\") ^\n                keccak256(\"approve(address,uint256)\") ^\n                keccak256(\"getApproved(uint256)\") ^\n                keccak256(\"setApprovalForAll(address,bool)\") ^\n                keccak256(\"isApprovedForAll(address,address)\") ^\n                keccak256(\"transferFrom(address,address,uint256)\") ^\n                keccak256(\"safeTransferFrom(address,address,uint256)\") ^\n                keccak256(\"safeTransferFrom(address,address,uint256,bytes)\")\n        );\n    bytes4 private constant RECLAIM_ID =\n        bytes4(keccak256(\"reclaim(uint256,address)\"));\n\n    /**\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view override returns (bool) {\n        address _owner = ownerOf(tokenId);\n        return (spender == _owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(_owner, spender));\n    }\n\n    constructor(ENS _ens, bytes32 _baseNode) ERC721(\"\", \"\") {\n        ens = _ens;\n        baseNode = _baseNode;\n    }\n\n    modifier live() {\n        require(ens.owner(baseNode) == address(this));\n        _;\n    }\n\n    modifier onlyController() {\n        require(controllers[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID. Names become unowned\n     *      when their registration expires.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(\n        uint256 tokenId\n    ) public view override(IERC721, ERC721) returns (address) {\n        require(expiries[tokenId] > block.timestamp);\n        return super.ownerOf(tokenId);\n    }\n\n    // Authorises a controller, who can register and renew domains.\n    function addController(address controller) external override onlyOwner {\n        controllers[controller] = true;\n        emit ControllerAdded(controller);\n    }\n\n    // Revoke controller permission for an address.\n    function removeController(address controller) external override onlyOwner {\n        controllers[controller] = false;\n        emit ControllerRemoved(controller);\n    }\n\n    // Set the resolver for the TLD this registrar manages.\n    function setResolver(address resolver) external override onlyOwner {\n        ens.setResolver(baseNode, resolver);\n    }\n\n    // Returns the expiration timestamp of the specified id.\n    function nameExpires(uint256 id) external view override returns (uint256) {\n        return expiries[id];\n    }\n\n    // Returns true iff the specified name is available for registration.\n    function available(uint256 id) public view override returns (bool) {\n        // Not available if it's registered here or in its grace period.\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\n    }\n\n    /**\n     * @dev Register a name.\n     * @param id The token ID (keccak256 of the label).\n     * @param _owner The address that should own the registration.\n     * @param duration Duration in seconds for the registration.\n     */\n    function register(\n        uint256 id,\n        address _owner,\n        uint256 duration\n    ) external override returns (uint256) {\n        return _register(id, _owner, duration, true);\n    }\n\n    /**\n     * @dev Register a name, without modifying the registry.\n     * @param id The token ID (keccak256 of the label).\n     * @param _owner The address that should own the registration.\n     * @param duration Duration in seconds for the registration.\n     */\n    function registerOnly(\n        uint256 id,\n        address _owner,\n        uint256 duration\n    ) external returns (uint256) {\n        return _register(id, _owner, duration, false);\n    }\n\n    function _register(\n        uint256 id,\n        address _owner,\n        uint256 duration,\n        bool updateRegistry\n    ) internal live onlyController returns (uint256) {\n        require(available(id));\n        require(\n            block.timestamp + duration + GRACE_PERIOD >\n                block.timestamp + GRACE_PERIOD\n        ); // Prevent future overflow\n\n        expiries[id] = block.timestamp + duration;\n        if (_exists(id)) {\n            // Name was previously owned, and expired\n            _burn(id);\n        }\n        _mint(_owner, id);\n        if (updateRegistry) {\n            ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\n        }\n\n        emit NameRegistered(id, _owner, block.timestamp + duration);\n\n        return block.timestamp + duration;\n        // return 0;\n    }\n\n    function renew(\n        uint256 id,\n        uint256 duration\n    ) external override live onlyController returns (uint256) {\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\n        require(\n            expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD\n        ); // Prevent future overflow\n\n        expiries[id] += duration;\n        emit NameRenewed(id, expiries[id]);\n        return expiries[id];\n    }\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(uint256 id, address _owner) external override live {\n        require(_isApprovedOrOwner(msg.sender, id));\n        ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view override(ERC721, IERC165) returns (bool) {\n        return\n            interfaceID == INTERFACE_META_ID ||\n            interfaceID == ERC721_ID ||\n            interfaceID == RECLAIM_ID;\n    }\n}\n"},"contracts/ethregistrar/BulkRenewal.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\nimport \"../registry/ENS.sol\";\nimport \"./ETHRegistrarController.sol\";\nimport \"./IETHRegistrarController.sol\";\nimport \"../resolvers/Resolver.sol\";\nimport \"./IBulkRenewal.sol\";\nimport \"./IPriceOracle.sol\";\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ncontract BulkRenewal is IBulkRenewal {\n    bytes32 private constant ETH_NAMEHASH =\n        0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa; // namehash('scroll')\n\n    ENS public immutable ens;\n\n    constructor(ENS _ens) {\n        ens = _ens;\n    }\n\n    function getController() internal view returns (ETHRegistrarController) {\n        Resolver r = Resolver(ens.resolver(ETH_NAMEHASH));\n        return\n            ETHRegistrarController(\n                r.interfaceImplementer(\n                    ETH_NAMEHASH,\n                    type(IETHRegistrarController).interfaceId\n                )\n            );\n    }\n\n    function rentPrice(\n        string[] calldata names,\n        uint256 duration,\n        address user\n    ) external view override returns (uint256 total) {\n        ETHRegistrarController controller = getController();\n        uint256 length = names.length;\n        for (uint256 i = 0; i < length; ) {\n            IPriceOracle.Price memory price = controller.rentPrice(\n                names[i],\n                duration,\n                user\n            );\n            unchecked {\n                ++i;\n                total += (price.base + price.premium);\n            }\n        }\n    }\n\n    function renewAll(\n        string[] calldata names,\n        uint256 duration\n    ) external payable override {\n        ETHRegistrarController controller = getController();\n        uint256 length = names.length;\n        uint256 total;\n        for (uint256 i = 0; i < length; ) {\n            IPriceOracle.Price memory price = controller.rentPrice(\n                names[i],\n                duration,\n                msg.sender\n            );\n            uint256 totalPrice = price.base + price.premium;\n            controller.renew{value: totalPrice}(names[i], duration);\n            unchecked {\n                ++i;\n                total += totalPrice;\n            }\n        }\n        // Send any excess funds back\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) external pure returns (bool) {\n        return\n            interfaceID == type(IERC165).interfaceId ||\n            interfaceID == type(IBulkRenewal).interfaceId;\n    }\n}\n"},"contracts/ethregistrar/ETHRegistrarController.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\nimport {BaseRegistrarImplementation} from \"./BaseRegistrarImplementation.sol\";\nimport {StringUtils} from \"./StringUtils.sol\";\nimport {Resolver} from \"../resolvers/Resolver.sol\";\nimport {ENS} from \"../registry/ENS.sol\";\nimport {ReverseRegistrar} from \"../reverseRegistrar/ReverseRegistrar.sol\";\nimport {ReverseClaimer} from \"../reverseRegistrar/ReverseClaimer.sol\";\nimport {IETHRegistrarController, IPriceOracle} from \"./IETHRegistrarController.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {INameWrapper} from \"../wrapper/INameWrapper.sol\";\nimport {ERC20Recoverable} from \"../utils/ERC20Recoverable.sol\";\n\nerror CommitmentTooNew(bytes32 commitment);\nerror CommitmentTooOld(bytes32 commitment);\nerror NameNotAvailable(string name);\nerror DurationTooShort(uint256 duration);\nerror ResolverRequiredWhenDataSupplied();\nerror UnexpiredCommitmentExists(bytes32 commitment);\nerror InsufficientValue();\nerror Unauthorised(bytes32 node);\nerror MaxCommitmentAgeTooLow();\nerror MaxCommitmentAgeTooHigh();\n\n/**\n * @dev A registrar controller for registering and renewing names at fixed cost.\n */\ncontract ETHRegistrarController is\n    Ownable,\n    IETHRegistrarController,\n    IERC165,\n    ERC20Recoverable,\n    ReverseClaimer\n{\n    using StringUtils for *;\n    using Address for address;\n\n    uint256 public constant MIN_REGISTRATION_DURATION = 28 days;\n    bytes32 private constant ETH_NODE =\n        0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa; // namehash('scroll')\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\n    BaseRegistrarImplementation immutable base;\n    IPriceOracle public prices;\n    uint256 public immutable minCommitmentAge;\n    uint256 public immutable maxCommitmentAge;\n    ReverseRegistrar public immutable reverseRegistrar;\n    INameWrapper public immutable nameWrapper;\n    uint256 public maxLenght = 3;\n    address public walletDev;\n    mapping(bytes32 => uint256) public commitments;\n\n    event NameRegistered(\n        string name,\n        bytes32 indexed label,\n        address indexed owner,\n        uint256 baseCost,\n        uint256 premium,\n        uint256 expires\n    );\n\n    event NameRenewed(\n        string name,\n        bytes32 indexed label,\n        uint256 cost,\n        uint256 expires\n    );\n\n    event PriceChange(address oldPrice, address newPrice);\n\n    event ChangeMaxLength(uint256 max);\n\n    function setMaxLength(uint256 _max) external onlyOwner {\n        require(_max > 0, \"ERROR: Max must be greater than 0\");\n        maxLenght = _max;\n        emit ChangeMaxLength(maxLenght);\n    }\n\n    function setPrice(IPriceOracle _prices) external onlyOwner {\n        require(\n            address(_prices) != address(0x0),\n            \"ERROR: Prices is zero address\"\n        );\n\n        emit PriceChange(address(prices), address(_prices));\n\n        prices = _prices;\n    }\n\n    constructor(\n        BaseRegistrarImplementation _base,\n        IPriceOracle _prices,\n        uint256 _minCommitmentAge,\n        uint256 _maxCommitmentAge,\n        ReverseRegistrar _reverseRegistrar,\n        INameWrapper _nameWrapper,\n        ENS _ens\n    ) ReverseClaimer(_ens, msg.sender) {\n        if (_maxCommitmentAge <= _minCommitmentAge) {\n            revert MaxCommitmentAgeTooLow();\n        }\n\n        if (_maxCommitmentAge > block.timestamp) {\n            revert MaxCommitmentAgeTooHigh();\n        }\n\n        base = _base;\n        prices = _prices;\n        minCommitmentAge = _minCommitmentAge;\n        maxCommitmentAge = _maxCommitmentAge;\n        reverseRegistrar = _reverseRegistrar;\n        nameWrapper = _nameWrapper;\n    }\n\n    function rentPrice(\n        string memory name,\n        uint256 duration,\n        address user\n    ) public view override returns (IPriceOracle.Price memory price) {\n        bytes32 label = keccak256(bytes(name));\n        price = prices.price(\n            name,\n            base.nameExpires(uint256(label)),\n            duration,\n            user\n        );\n    }\n\n    function valid(string memory name) public view returns (bool) {\n        return name.strlen() >= maxLenght;\n    }\n\n    function available(string memory name) public view override returns (bool) {\n        bytes32 label = keccak256(bytes(name));\n        return valid(name) && base.available(uint256(label));\n    }\n\n    function makeCommitment(\n        string memory name,\n        address _owner,\n        uint256 duration,\n        bytes32 secret,\n        address resolver,\n        bytes[] calldata data,\n        bool reverseRecord,\n        uint16 ownerControlledFuses\n    ) public pure override returns (bytes32) {\n        bytes32 label = keccak256(bytes(name));\n        if (data.length > 0 && resolver == address(0)) {\n            revert ResolverRequiredWhenDataSupplied();\n        }\n        return\n            keccak256(\n                abi.encode(\n                    label,\n                    _owner,\n                    duration,\n                    secret,\n                    resolver,\n                    data,\n                    reverseRecord,\n                    ownerControlledFuses\n                )\n            );\n    }\n\n    function commit(bytes32 commitment) public override {\n        require(\n            commitments[commitment] + maxCommitmentAge < block.timestamp,\n            \"ERROR: UnexpiredCommitmentExists\"\n        );\n        commitments[commitment] = block.timestamp;\n    }\n\n    function register(\n        string calldata name,\n        address _owner,\n        uint256 duration,\n        bytes32 secret,\n        address resolver,\n        bytes[] calldata data,\n        bool reverseRecord,\n        uint16 ownerControlledFuses\n    ) public payable override {\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\n        if (msg.value < price.base + price.premium) {\n            revert InsufficientValue();\n        }\n\n        _consumeCommitment(\n            name,\n            duration,\n            makeCommitment(\n                name,\n                _owner,\n                duration,\n                secret,\n                resolver,\n                data,\n                reverseRecord,\n                ownerControlledFuses\n            )\n        );\n\n        uint256 expires = nameWrapper.registerAndWrapETH2LD(\n            name,\n            _owner,\n            duration,\n            resolver,\n            ownerControlledFuses\n        );\n\n        if (data.length > 0) {\n            _setRecords(resolver, keccak256(bytes(name)), data);\n        }\n\n        if (reverseRecord) {\n            _setReverseRecord(name, resolver, msg.sender);\n        }\n\n        emit NameRegistered(\n            name,\n            keccak256(bytes(name)),\n            _owner,\n            price.base,\n            price.premium,\n            expires\n            // 0\n        );\n\n        if (msg.value > (price.base + price.premium)) {\n            payable(msg.sender).transfer(\n                msg.value - (price.base + price.premium)\n            );\n        }\n    }\n\n    function renew(\n        string calldata name,\n        uint256 duration\n    ) external payable override {\n        bytes32 labelhash = keccak256(bytes(name));\n        uint256 tokenId = uint256(labelhash);\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\n        if (msg.value < price.base) {\n            revert InsufficientValue();\n        }\n        uint256 expires = nameWrapper.renew(tokenId, duration);\n\n        if (msg.value > price.base) {\n            payable(msg.sender).transfer(msg.value - price.base);\n        }\n\n        emit NameRenewed(name, labelhash, price.base, expires);\n    }\n\n    function withdraw() public {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) external pure returns (bool) {\n        return\n            interfaceID == type(IERC165).interfaceId ||\n            interfaceID == type(IETHRegistrarController).interfaceId;\n    }\n\n    /* Internal functions */\n\n    function _consumeCommitment(\n        string memory name,\n        uint256 duration,\n        bytes32 commitment\n    ) internal {\n        // if(minCommitmentAge != 0) {\n        // Require an old enough commitment.\n        require(\n            commitments[commitment] + minCommitmentAge < block.timestamp,\n            \"ERROR: CommitmentTooNew\"\n        );\n\n        // If the commitment is too old, or the name is registered, stop\n        require(\n            commitments[commitment] + maxCommitmentAge > block.timestamp,\n            \"ERROR: Commit to old\"\n        );\n        require(available(name), \"ERROR: NameNotAvailable\");\n\n        delete (commitments[commitment]);\n\n        require(\n            duration > MIN_REGISTRATION_DURATION,\n            \"ERROR: DurationTooShort\"\n        );\n        // }\n    }\n\n    function _setRecords(\n        address resolverAddress,\n        bytes32 label,\n        bytes[] calldata data\n    ) internal {\n        // use hardcoded .eth namehash\n        bytes32 nodehash = keccak256(abi.encodePacked(ETH_NODE, label));\n        Resolver resolver = Resolver(resolverAddress);\n        resolver.multicallWithNodeCheck(nodehash, data);\n    }\n\n    function _setReverseRecord(\n        string memory name,\n        address resolver,\n        address _owner\n    ) internal {\n        reverseRegistrar.setNameForAddr(\n            msg.sender,\n            _owner,\n            resolver,\n            string.concat(name, \".scroll\")\n        );\n    }\n}\n"},"contracts/ethregistrar/IBaseRegistrar.sol":{"content":"import \"../registry/ENS.sol\";\nimport \"./IBaseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IBaseRegistrar is IERC721 {\n    event ControllerAdded(address indexed controller);\n    event ControllerRemoved(address indexed controller);\n    event NameMigrated(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRegistered(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRenewed(uint256 indexed id, uint256 expires);\n\n    // Authorises a controller, who can register and renew domains.\n    function addController(address controller) external;\n\n    // Revoke controller permission for an address.\n    function removeController(address controller) external;\n\n    // Set the resolver for the TLD this registrar manages.\n    function setResolver(address resolver) external;\n\n    // Returns the expiration timestamp of the specified label hash.\n    function nameExpires(uint256 id) external view returns (uint256);\n\n    // Returns true if the specified name is available for registration.\n    function available(uint256 id) external view returns (bool);\n\n    /**\n     * @dev Register a name.\n     */\n    function register(\n        uint256 id,\n        address owner,\n        uint256 duration\n    ) external returns (uint256);\n\n    function renew(uint256 id, uint256 duration) external returns (uint256);\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(uint256 id, address owner) external;\n}\n"},"contracts/ethregistrar/IBulkRenewal.sol":{"content":"interface IBulkRenewal {\n    function rentPrice(\n        string[] calldata names,\n        uint256 duration,\n        address user\n    ) external view returns (uint256 total);\n\n    function renewAll(\n        string[] calldata names,\n        uint256 duration\n    ) external payable;\n}\n"},"contracts/ethregistrar/IETHRegistrarController.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\nimport \"./IPriceOracle.sol\";\n\ninterface IETHRegistrarController {\n    function rentPrice(\n        string memory,\n        uint256,\n        address\n    ) external view returns (IPriceOracle.Price memory);\n\n    function available(string memory) external returns (bool);\n\n    function makeCommitment(\n        string memory,\n        address,\n        uint256,\n        bytes32,\n        address,\n        bytes[] calldata,\n        bool,\n        uint16\n    ) external pure returns (bytes32);\n\n    function commit(bytes32) external;\n\n    function register(\n        string calldata,\n        address,\n        uint256,\n        bytes32,\n        address,\n        bytes[] calldata,\n        bool,\n        uint16\n    ) external payable;\n\n    function renew(string calldata, uint256) external payable;\n}\n"},"contracts/ethregistrar/IPriceOracle.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 <0.9.0;\n\ninterface IPriceOracle {\n    struct Price {\n        uint256 base;\n        uint256 premium;\n    }\n\n    //    struct scrollToken {\n    //        uint256 minAmount;\n    //        uint256 maxRentTime;\n    //    }\n    /**\n     * @dev Returns the price to register or renew a name.\n     * @param name The name being registered or renewed.\n     * @param expires When the name presently expires (0 if this is a new registration).\n     * @param duration How long the name is being registered or extended for, in seconds.\n     * @return base premium tuple of base price + premium price\n     */\n    function price(\n        string calldata name,\n        uint256 expires,\n        uint256 duration,\n        address user\n    ) external view returns (Price calldata);\n}\n"},"contracts/ethregistrar/StaticBulkRenewal.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\nimport \"./ETHRegistrarController.sol\";\nimport \"./IBulkRenewal.sol\";\nimport \"./IPriceOracle.sol\";\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ncontract StaticBulkRenewal is IBulkRenewal {\n    ETHRegistrarController controller;\n\n    constructor(ETHRegistrarController _controller) {\n        controller = _controller;\n    }\n\n    function rentPrice(\n        string[] calldata names,\n        uint256 duration,\n        address user\n    ) external view override returns (uint256 total) {\n        uint256 length = names.length;\n        for (uint256 i = 0; i < length; ) {\n            IPriceOracle.Price memory price = controller.rentPrice(\n                names[i],\n                duration,\n                user\n            );\n            unchecked {\n                ++i;\n                total += (price.base + price.premium);\n            }\n        }\n    }\n\n    function renewAll(\n        string[] calldata names,\n        uint256 duration\n    ) external payable override {\n        uint256 length = names.length;\n        uint256 total;\n        for (uint256 i = 0; i < length; ) {\n            IPriceOracle.Price memory price = controller.rentPrice(\n                names[i],\n                duration,\n                msg.sender\n            );\n            uint256 totalPrice = price.base + price.premium;\n            controller.renew{value: totalPrice}(names[i], duration);\n            unchecked {\n                ++i;\n                total += totalPrice;\n            }\n        }\n        // Send any excess funds back\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) external pure returns (bool) {\n        return\n            interfaceID == type(IERC165).interfaceId ||\n            interfaceID == type(IBulkRenewal).interfaceId;\n    }\n}\n"},"contracts/ethregistrar/StringUtils.sol":{"content":"pragma solidity >=0.8.4;\n\nlibrary StringUtils {\n    /**\n     * @dev Returns the length of a given string\n     *\n     * @param s The string to measure the length of\n     * @return The length of the input string\n     */\n    function strlen(string memory s) internal pure returns (uint256) {\n        uint256 len;\n        uint256 i = 0;\n        uint256 bytelength = bytes(s).length;\n        for (len = 0; i < bytelength; len++) {\n            bytes1 b = bytes(s)[i];\n            if (b < 0x80) {\n                i += 1;\n            } else if (b < 0xE0) {\n                i += 2;\n            } else if (b < 0xF0) {\n                i += 3;\n            } else if (b < 0xF8) {\n                i += 4;\n            } else if (b < 0xFC) {\n                i += 5;\n            } else {\n                i += 6;\n            }\n        }\n        return len;\n    }\n}\n"},"contracts/registry/ENS.sol":{"content":"pragma solidity >=0.8.4;\n\ninterface ENS {\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external returns (bytes32);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setOwner(bytes32 node, address owner) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function owner(bytes32 node) external view returns (address);\n\n    function resolver(bytes32 node) external view returns (address);\n\n    function ttl(bytes32 node) external view returns (uint64);\n\n    function recordExists(bytes32 node) external view returns (bool);\n\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n}\n"},"contracts/resolvers/profiles/IABIResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IABIResolver {\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(\n        bytes32 node,\n        uint256 contentTypes\n    ) external view returns (uint256, bytes memory);\n}\n"},"contracts/resolvers/profiles/IAddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the new (multicoin) addr function.\n */\ninterface IAddressResolver {\n    event AddressChanged(\n        bytes32 indexed node,\n        uint256 coinType,\n        bytes newAddress\n    );\n\n    function addr(\n        bytes32 node,\n        uint256 coinType\n    ) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IAddrResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the legacy (ETH-only) addr function.\n */\ninterface IAddrResolver {\n    event AddrChanged(bytes32 indexed node, address a);\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) external view returns (address payable);\n}\n"},"contracts/resolvers/profiles/IContentHashResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IContentHashResolver {\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n    /**\n     * Returns the contenthash associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function contenthash(bytes32 node) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IDNSRecordResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSRecordResolver {\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\n    event DNSRecordChanged(\n        bytes32 indexed node,\n        bytes name,\n        uint16 resource,\n        bytes record\n    );\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\n\n    /**\n     * Obtain a DNS record.\n     * @param node the namehash of the node for which to fetch the record\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n     * @return the DNS record in wire format if present, otherwise empty\n     */\n    function dnsRecord(\n        bytes32 node,\n        bytes32 name,\n        uint16 resource\n    ) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IDNSZoneResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSZoneResolver {\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\n    event DNSZonehashChanged(\n        bytes32 indexed node,\n        bytes lastzonehash,\n        bytes zonehash\n    );\n\n    /**\n     * zonehash obtains the hash for the zone.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function zonehash(bytes32 node) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IExtendedResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IExtendedResolver {\n    function resolve(\n        bytes memory name,\n        bytes memory data\n    ) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IInterfaceResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IInterfaceResolver {\n    event InterfaceChanged(\n        bytes32 indexed node,\n        bytes4 indexed interfaceID,\n        address implementer\n    );\n\n    /**\n     * Returns the address of a contract that implements the specified interface for this name.\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\n     * will be returned.\n     * @param node The ENS node to query.\n     * @param interfaceID The EIP 165 interface ID to check for.\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\n     */\n    function interfaceImplementer(\n        bytes32 node,\n        bytes4 interfaceID\n    ) external view returns (address);\n}\n"},"contracts/resolvers/profiles/INameResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface INameResolver {\n    event NameChanged(bytes32 indexed node, string name);\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) external view returns (string memory);\n}\n"},"contracts/resolvers/profiles/IPubkeyResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPubkeyResolver {\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x The X coordinate of the curve point for the public key.\n     * @return y The Y coordinate of the curve point for the public key.\n     */\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n}\n"},"contracts/resolvers/profiles/ITextResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n    event TextChanged(\n        bytes32 indexed node,\n        string indexed indexedKey,\n        string key,\n        string value\n    );\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(\n        bytes32 node,\n        string calldata key\n    ) external view returns (string memory);\n}\n"},"contracts/resolvers/Resolver.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./profiles/IABIResolver.sol\";\nimport \"./profiles/IAddressResolver.sol\";\nimport \"./profiles/IAddrResolver.sol\";\nimport \"./profiles/IContentHashResolver.sol\";\nimport \"./profiles/IDNSRecordResolver.sol\";\nimport \"./profiles/IDNSZoneResolver.sol\";\nimport \"./profiles/IInterfaceResolver.sol\";\nimport \"./profiles/INameResolver.sol\";\nimport \"./profiles/IPubkeyResolver.sol\";\nimport \"./profiles/ITextResolver.sol\";\nimport \"./profiles/IExtendedResolver.sol\";\n\n/**\n * A generic resolver interface which includes all the functions including the ones deprecated\n */\ninterface Resolver is\n    IERC165,\n    IABIResolver,\n    IAddressResolver,\n    IAddrResolver,\n    IContentHashResolver,\n    IDNSRecordResolver,\n    IDNSZoneResolver,\n    IInterfaceResolver,\n    INameResolver,\n    IPubkeyResolver,\n    ITextResolver,\n    IExtendedResolver\n{\n    /* Deprecated events */\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n\n    function setApprovalForAll(address, bool) external;\n\n    function approve(bytes32 node, address delegate, bool approved) external;\n\n    function isApprovedForAll(address account, address operator) external;\n\n    function isApprovedFor(\n        address owner,\n        bytes32 node,\n        address delegate\n    ) external;\n\n    function setABI(\n        bytes32 node,\n        uint256 contentType,\n        bytes calldata data\n    ) external;\n\n    function setAddr(bytes32 node, address addr) external;\n\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\n\n    function setContenthash(bytes32 node, bytes calldata hash) external;\n\n    function setDnsrr(bytes32 node, bytes calldata data) external;\n\n    function setName(bytes32 node, string calldata _name) external;\n\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\n\n    function setText(\n        bytes32 node,\n        string calldata key,\n        string calldata value\n    ) external;\n\n    function setInterface(\n        bytes32 node,\n        bytes4 interfaceID,\n        address implementer\n    ) external;\n\n    function multicall(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n\n    function multicallWithNodeCheck(\n        bytes32 nodehash,\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n\n    /* Deprecated functions */\n    function content(bytes32 node) external view returns (bytes32);\n\n    function multihash(bytes32 node) external view returns (bytes memory);\n\n    function setContent(bytes32 node, bytes32 hash) external;\n\n    function setMultihash(bytes32 node, bytes calldata hash) external;\n}\n"},"contracts/reverseRegistrar/IReverseRegistrar.sol":{"content":"pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n    function setDefaultResolver(address resolver) external;\n\n    function claim(address owner) external returns (bytes32);\n\n    function claimForAddr(\n        address addr,\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function claimWithResolver(\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function setName(string memory name) external returns (bytes32);\n\n    function setNameForAddr(\n        address addr,\n        address owner,\n        address resolver,\n        string memory name\n    ) external returns (bytes32);\n\n    function node(address addr) external pure returns (bytes32);\n}\n"},"contracts/reverseRegistrar/ReverseClaimer.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 <0.9.0;\n\nimport {ENS} from \"../registry/ENS.sol\";\nimport {IReverseRegistrar} from \"../reverseRegistrar/IReverseRegistrar.sol\";\n\ncontract ReverseClaimer {\n    bytes32 constant ADDR_REVERSE_NODE =\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    constructor(ENS ens, address claimant) {\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\n            ens.owner(ADDR_REVERSE_NODE)\n        );\n        reverseRegistrar.claim(claimant);\n    }\n}\n"},"contracts/reverseRegistrar/ReverseRegistrar.sol":{"content":"pragma solidity >=0.8.4;\n\nimport \"../registry/ENS.sol\";\nimport \"./IReverseRegistrar.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../root/Controllable.sol\";\n\nabstract contract NameResolver {\n    function setName(bytes32 node, string memory name) public virtual;\n}\n\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\n\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n// namehash('addr.reverse')\n\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\n    ENS public immutable ens;\n    NameResolver public defaultResolver;\n\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\n    event DefaultResolverChanged(NameResolver indexed resolver);\n\n    /**\n     * @dev Constructor\n     * @param ensAddr The address of the ENS registry.\n     */\n    constructor(ENS ensAddr) {\n        ens = ensAddr;\n\n        // Assign ownership of the reverse record to our deployer\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\n            ensAddr.owner(ADDR_REVERSE_NODE)\n        );\n        if (address(oldRegistrar) != address(0x0)) {\n            oldRegistrar.claim(msg.sender);\n        }\n    }\n\n    modifier authorised(address addr) {\n        require(\n            addr == msg.sender ||\n                controllers[msg.sender] ||\n                ens.isApprovedForAll(addr, msg.sender) ||\n                ownsContract(addr),\n            \"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\"\n        );\n        _;\n    }\n\n    function setDefaultResolver(address resolver) public override onlyOwner {\n        require(\n            address(resolver) != address(0),\n            \"ReverseRegistrar: Resolver address must not be 0\"\n        );\n        defaultResolver = NameResolver(resolver);\n        emit DefaultResolverChanged(NameResolver(resolver));\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param _owner The address to set as the owner of the reverse record in ENS.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claim(address _owner) public override returns (bytes32) {\n        return claimForAddr(msg.sender, _owner, address(defaultResolver));\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param addr The reverse record to set\n     * @param _owner The address to set as the owner of the reverse record in ENS.\n     * @param resolver The resolver of the reverse node\n     * @return The ENS node hash of the reverse record.\n     */\n    function claimForAddr(\n        address addr,\n        address _owner,\n        address resolver\n    ) public override authorised(addr) returns (bytes32) {\n        bytes32 labelHash = sha3HexAddress(addr);\n        bytes32 reverseNode = keccak256(\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\n        );\n        emit ReverseClaimed(addr, reverseNode);\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, _owner, resolver, 0);\n        return reverseNode;\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param _owner The address to set as the owner of the reverse record in ENS.\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claimWithResolver(\n        address _owner,\n        address resolver\n    ) public override returns (bytes32) {\n        return claimForAddr(msg.sender, _owner, resolver);\n    }\n\n    /**\n     * @dev Sets the `name()` record for the reverse ENS record associated with\n     * the calling account. First updates the resolver to the default reverse\n     * resolver if necessary.\n     * @param name The name to set for this address.\n     * @return The ENS node hash of the reverse record.\n     */\n    function setName(string memory name) public override returns (bytes32) {\n        return\n            setNameForAddr(\n                msg.sender,\n                msg.sender,\n                address(defaultResolver),\n                name\n            );\n    }\n\n    /**\n     * @dev Sets the `name()` record for the reverse ENS record associated with\n     * the account provided. Updates the resolver to a designated resolver\n     * Only callable by controllers and authorised users\n     * @param addr The reverse record to set\n     * @param _owner The owner of the reverse node\n     * @param resolver The resolver of the reverse node\n     * @param name The name to set for this address.\n     * @return The ENS node hash of the reverse record.\n     */\n    function setNameForAddr(\n        address addr,\n        address _owner,\n        address resolver,\n        string memory name\n    ) public override returns (bytes32) {\n        bytes32 node = claimForAddr(addr, _owner, resolver);\n        NameResolver(resolver).setName(node, name);\n        return node;\n    }\n\n    /**\n     * @dev Returns the node hash for a given account's reverse records.\n     * @param addr The address to hash\n     * @return The ENS node hash.\n     */\n    function node(address addr) public pure override returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\n            );\n    }\n\n    /**\n     * @dev An optimised function to compute the sha3 of the lower-case\n     *      hexadecimal representation of an Ethereum address.\n     * @param addr The address to hash\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\n     *         input address.\n     */\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\n        assembly {\n            for {\n                let i := 40\n            } gt(i, 0) {\n\n            } {\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n            }\n\n            ret := keccak256(0, 40)\n        }\n    }\n\n    function ownsContract(address addr) internal view returns (bool) {\n        try Ownable(addr).owner() returns (address owner) {\n            return owner == msg.sender;\n        } catch {\n            return false;\n        }\n    }\n}\n"},"contracts/root/Controllable.sol":{"content":"pragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Controllable is Ownable {\n    mapping(address => bool) public controllers;\n\n    event ControllerChanged(address indexed controller, bool enabled);\n\n    modifier onlyController() {\n        require(\n            controllers[msg.sender],\n            \"Controllable: Caller is not a controller\"\n        );\n        _;\n    }\n\n    function setController(address controller, bool enabled) public onlyOwner {\n        controllers[controller] = enabled;\n        emit ControllerChanged(controller, enabled);\n    }\n}\n"},"contracts/utils/ERC20Recoverable.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\n */\n\ncontract ERC20Recoverable is Ownable {\n    /**\n    @notice Recover ERC20 tokens sent to the contract by mistake.\n    @dev The contract is Ownable and only the owner can call the recover function.\n    @param _to The address to send the tokens to.\n@param _token The address of the ERC20 token to recover\n    @param _amount The amount of tokens to recover.\n */\n    function recoverFunds(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        IERC20(_token).transfer(_to, _amount);\n    }\n}\n"},"contracts/wrapper/IMetadataService.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\ninterface IMetadataService {\n    function uri(address nft,uint256 tokenId) external view returns (string memory);\n}\n"},"contracts/wrapper/INameWrapper.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\nimport \"../registry/ENS.sol\";\nimport \"../ethregistrar/IBaseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./IMetadataService.sol\";\nimport \"./INameWrapperUpgrade.sol\";\n\nuint32 constant CANNOT_UNWRAP = 1;\nuint32 constant CANNOT_BURN_FUSES = 2;\nuint32 constant CANNOT_TRANSFER = 4;\nuint32 constant CANNOT_SET_RESOLVER = 8;\nuint32 constant CANNOT_SET_TTL = 16;\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\nuint32 constant CANNOT_APPROVE = 64;\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\nuint32 constant IS_DOT_ETH = 1 << 17;\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\nuint32 constant CAN_DO_EVERYTHING = 0;\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\n// all fuses apart from IS_DOT_ETH\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\n\ninterface INameWrapper is IERC1155 {\n    event NameWrapped(\n        bytes32 indexed node,\n        bytes name,\n        address owner,\n        uint32 fuses,\n        uint64 expiry\n    );\n\n    event NameUnwrapped(bytes32 indexed node, address owner);\n\n    event FusesSet(bytes32 indexed node, uint32 fuses);\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\n\n    function ens() external view returns (ENS);\n\n    function registrar() external view returns (IBaseRegistrar);\n\n    function metadataService() external view returns (IMetadataService);\n\n    function names(bytes32) external view returns (bytes memory);\n\n    function name() external view returns (string memory);\n\n    function upgradeContract() external view returns (INameWrapperUpgrade);\n\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n\n    function wrap(\n        bytes calldata name,\n        address wrappedOwner,\n        address resolver\n    ) external;\n\n    function wrapETH2LD(\n        string calldata label,\n        address wrappedOwner,\n        uint16 ownerControlledFuses,\n        address resolver\n    ) external returns (uint64 expires);\n\n    function registerAndWrapETH2LD(\n        string calldata label,\n        address wrappedOwner,\n        uint256 duration,\n        address resolver,\n        uint16 ownerControlledFuses\n    ) external returns (uint256 registrarExpiry);\n\n    function renew(\n        uint256 labelHash,\n        uint256 duration\n    ) external returns (uint256 expires);\n\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\n\n    function unwrapETH2LD(\n        bytes32 label,\n        address newRegistrant,\n        address newController\n    ) external;\n\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\n\n    function setFuses(\n        bytes32 node,\n        uint16 ownerControlledFuses\n    ) external returns (uint32 newFuses);\n\n    function setChildFuses(\n        bytes32 parentNode,\n        bytes32 labelhash,\n        uint32 fuses,\n        uint64 expiry\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        string calldata label,\n        address owner,\n        address resolver,\n        uint64 ttl,\n        uint32 fuses,\n        uint64 expiry\n    ) external returns (bytes32);\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        string calldata label,\n        address newOwner,\n        uint32 fuses,\n        uint64 expiry\n    ) external returns (bytes32);\n\n    function extendExpiry(\n        bytes32 node,\n        bytes32 labelhash,\n        uint64 expiry\n    ) external returns (uint64);\n\n    function canModifyName(\n        bytes32 node,\n        address addr\n    ) external view returns (bool);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function ownerOf(uint256 id) external view returns (address owner);\n\n    function approve(address to, uint256 tokenId) external;\n\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    function getData(\n        uint256 id\n    ) external view returns (address, uint32, uint64);\n\n    function setMetadataService(IMetadataService _metadataService) external;\n\n    function uri(uint256 tokenId) external view returns (string memory);\n\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\n\n    function allFusesBurned(\n        bytes32 node,\n        uint32 fuseMask\n    ) external view returns (bool);\n\n    function isWrapped(bytes32) external view returns (bool);\n\n    function isWrapped(bytes32, bytes32) external view returns (bool);\n}\n"},"contracts/wrapper/INameWrapperUpgrade.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\ninterface INameWrapperUpgrade {\n    function wrapFromUpgrade(\n        bytes calldata name,\n        address wrappedOwner,\n        uint32 fuses,\n        uint64 expiry,\n        address approved,\n        bytes calldata extraData\n    ) external;\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1300},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ethregistrar/BaseRegistrarImplementation.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/BaseRegistrarImplementation.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ethregistrar/IBaseRegistrar.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/IBaseRegistrar.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ethregistrar/IBulkRenewal.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/IBulkRenewal.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ethregistrar/StringUtils.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/StringUtils.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/registry/ENS.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/registry/ENS.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/reverseRegistrar/IReverseRegistrar.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/reverseRegistrar/IReverseRegistrar.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/reverseRegistrar/ReverseRegistrar.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/reverseRegistrar/ReverseRegistrar.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/root/Controllable.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/root/Controllable.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"\n--> contracts/ethregistrar/IBaseRegistrar.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/IBaseRegistrar.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"\n--> contracts/ethregistrar/IBulkRenewal.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/IBulkRenewal.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n   --> contracts/reverseRegistrar/ReverseRegistrar.sol:140:9:\n    |\n140 |         bytes32 node = claimForAddr(addr, _owner, resolver);\n    |         ^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n   --> contracts/reverseRegistrar/ReverseRegistrar.sol:150:5:\n    |\n150 |     function node(address addr) public pure override returns (bytes32) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":5468,"file":"contracts/reverseRegistrar/ReverseRegistrar.sol","message":"The shadowed declaration is here:","start":5267}],"severity":"warning","sourceLocation":{"end":4980,"file":"contracts/reverseRegistrar/ReverseRegistrar.sol","start":4968},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> contracts/ethregistrar/BaseRegistrarImplementation.sol:188:5:\n    |\n188 |     function supportsInterface(\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":7050,"file":"contracts/ethregistrar/BaseRegistrarImplementation.sol","start":6787},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1752],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1753,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1752,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1752],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[234],"IERC165":[2017]},"id":235,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":235,"sourceUnit":2018,"src":"135:47:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":117,"name":"IERC165","nameLocations":["372:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"372:7:1"},"id":118,"nodeType":"InheritanceSpecifier","src":"372:7:1"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"184:165:1","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":234,"linearizedBaseContracts":[234,2017],"name":"IERC1155","nameLocation":"360:8:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"386:121:1","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":131,"name":"TransferSingle","nameLocation":"518:14:1","nodeType":"EventDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"549:8:1","nodeType":"VariableDeclaration","scope":131,"src":"533:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":123,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"575:4:1","nodeType":"VariableDeclaration","scope":131,"src":"559:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":125,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"597:2:1","nodeType":"VariableDeclaration","scope":131,"src":"581:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":127,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"609:2:1","nodeType":"VariableDeclaration","scope":131,"src":"601:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":129,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"621:5:1","nodeType":"VariableDeclaration","scope":131,"src":"613:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:95:1"},"src":"512:116:1"},{"anonymous":false,"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"634:144:1","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":146,"name":"TransferBatch","nameLocation":"789:13:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"828:8:1","nodeType":"VariableDeclaration","scope":146,"src":"812:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"812:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":136,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"862:4:1","nodeType":"VariableDeclaration","scope":146,"src":"846:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":135,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":138,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"892:2:1","nodeType":"VariableDeclaration","scope":146,"src":"876:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":141,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"914:3:1","nodeType":"VariableDeclaration","scope":146,"src":"904:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"904:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":140,"nodeType":"ArrayTypeName","src":"904:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"937:6:1","nodeType":"VariableDeclaration","scope":146,"src":"927:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":143,"nodeType":"ArrayTypeName","src":"927:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"802:147:1"},"src":"783:167:1"},{"anonymous":false,"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"956:147:1","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":155,"name":"ApprovalForAll","nameLocation":"1114:14:1","nodeType":"EventDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1145:7:1","nodeType":"VariableDeclaration","scope":155,"src":"1129:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"1129:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":151,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1170:8:1","nodeType":"VariableDeclaration","scope":155,"src":"1154:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":153,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1185:8:1","nodeType":"VariableDeclaration","scope":155,"src":"1180:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":152,"name":"bool","nodeType":"ElementaryTypeName","src":"1180:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:66:1"},"src":"1108:87:1"},{"anonymous":false,"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"1201:343:1","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":162,"name":"URI","nameLocation":"1555:3:1","nodeType":"EventDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1566:5:1","nodeType":"VariableDeclaration","scope":162,"src":"1559:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":157,"name":"string","nodeType":"ElementaryTypeName","src":"1559:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":160,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1589:2:1","nodeType":"VariableDeclaration","scope":162,"src":"1573:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1558:34:1"},"src":"1549:44:1"},{"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"1599:173:1","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":172,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1786:9:1","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"account","nameLocation":"1804:7:1","nodeType":"VariableDeclaration","scope":172,"src":"1796:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"1796:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"id","nameLocation":"1821:2:1","nodeType":"VariableDeclaration","scope":172,"src":"1813:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1795:29:1"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":172,"src":"1848:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1847:9:1"},"scope":234,"src":"1777:80:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"1863:188:1","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":185,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2065:14:1","nodeType":"FunctionDefinition","parameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"accounts","nameLocation":"2108:8:1","nodeType":"VariableDeclaration","scope":185,"src":"2089:27:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"2089:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":175,"nodeType":"ArrayTypeName","src":"2089:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":179,"mutability":"mutable","name":"ids","nameLocation":"2145:3:1","nodeType":"VariableDeclaration","scope":185,"src":"2126:22:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":177,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":178,"nodeType":"ArrayTypeName","src":"2126:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2079:75:1"},"returnParameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":185,"src":"2178:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"2178:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":182,"nodeType":"ArrayTypeName","src":"2178:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2177:18:1"},"scope":234,"src":"2056:140:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"2202:248:1","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":193,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2464:17:1","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"operator","nameLocation":"2490:8:1","nodeType":"VariableDeclaration","scope":193,"src":"2482:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"2482:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"approved","nameLocation":"2505:8:1","nodeType":"VariableDeclaration","scope":193,"src":"2500:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":189,"name":"bool","nodeType":"ElementaryTypeName","src":"2500:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2481:33:1"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[],"src":"2523:0:1"},"scope":234,"src":"2455:69:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"2530:135:1","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":203,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2679:16:1","nodeType":"FunctionDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"account","nameLocation":"2704:7:1","nodeType":"VariableDeclaration","scope":203,"src":"2696:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"2696:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":198,"mutability":"mutable","name":"operator","nameLocation":"2721:8:1","nodeType":"VariableDeclaration","scope":203,"src":"2713:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"2713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2695:35:1"},"returnParameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":203,"src":"2754:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":200,"name":"bool","nodeType":"ElementaryTypeName","src":"2754:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2753:6:1"},"scope":234,"src":"2670:90:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"2766:556:1","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":217,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3336:16:1","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"from","nameLocation":"3361:4:1","nodeType":"VariableDeclaration","scope":217,"src":"3353:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"3353:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"to","nameLocation":"3375:2:1","nodeType":"VariableDeclaration","scope":217,"src":"3367:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"3367:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"id","nameLocation":"3387:2:1","nodeType":"VariableDeclaration","scope":217,"src":"3379:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":209,"name":"uint256","nodeType":"ElementaryTypeName","src":"3379:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"amount","nameLocation":"3399:6:1","nodeType":"VariableDeclaration","scope":217,"src":"3391:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"3391:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"data","nameLocation":"3422:4:1","nodeType":"VariableDeclaration","scope":217,"src":"3407:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":213,"name":"bytes","nodeType":"ElementaryTypeName","src":"3407:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3352:75:1"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"3436:0:1"},"scope":234,"src":"3327:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"3443:390:1","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":233,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3847:21:1","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"from","nameLocation":"3886:4:1","nodeType":"VariableDeclaration","scope":233,"src":"3878:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"3878:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"to","nameLocation":"3908:2:1","nodeType":"VariableDeclaration","scope":233,"src":"3900:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"3900:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"ids","nameLocation":"3939:3:1","nodeType":"VariableDeclaration","scope":233,"src":"3920:22:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"3920:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":224,"nodeType":"ArrayTypeName","src":"3920:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"amounts","nameLocation":"3971:7:1","nodeType":"VariableDeclaration","scope":233,"src":"3952:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"3952:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":227,"nodeType":"ArrayTypeName","src":"3952:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"data","nameLocation":"4003:4:1","nodeType":"VariableDeclaration","scope":233,"src":"3988:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":229,"name":"bytes","nodeType":"ElementaryTypeName","src":"3988:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3868:145:1"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[],"src":"4022:0:1"},"scope":234,"src":"3838:185:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":235,"src":"350:3675:1","usedErrors":[]}],"src":"110:3916:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[312]},"id":313,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":236,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":312,"linearizedBaseContracts":[312],"name":"IERC20","nameLocation":"212:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"225:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":246,"name":"Transfer","nameLocation":"394:8:2","nodeType":"EventDefinition","parameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:2","nodeType":"VariableDeclaration","scope":246,"src":"403:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":242,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:2","nodeType":"VariableDeclaration","scope":246,"src":"425:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":244,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:2","nodeType":"VariableDeclaration","scope":246,"src":"445:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:2"},"src":"388:72:2"},{"anonymous":false,"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"466:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":255,"name":"Approval","nameLocation":"625:8:2","nodeType":"EventDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:2","nodeType":"VariableDeclaration","scope":255,"src":"634:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":248,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":251,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:2","nodeType":"VariableDeclaration","scope":255,"src":"657:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":250,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":253,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:2","nodeType":"VariableDeclaration","scope":255,"src":"682:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:2"},"src":"619:78:2"},{"documentation":{"id":256,"nodeType":"StructuredDocumentation","src":"703:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":261,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":261,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":312,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":262,"nodeType":"StructuredDocumentation","src":"835:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":269,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":269,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":269,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":312,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":270,"nodeType":"StructuredDocumentation","src":"986:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":279,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:2","nodeType":"FunctionDefinition","parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"to","nameLocation":"1219:2:2","nodeType":"VariableDeclaration","scope":279,"src":"1211:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"amount","nameLocation":"1231:6:2","nodeType":"VariableDeclaration","scope":279,"src":"1223:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:2"},"returnParameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":279,"src":"1257:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":276,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:2"},"scope":312,"src":"1193:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"1269:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":289,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:2","nodeType":"FunctionDefinition","parameters":{"id":285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"owner","nameLocation":"1565:5:2","nodeType":"VariableDeclaration","scope":289,"src":"1557:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":284,"mutability":"mutable","name":"spender","nameLocation":"1580:7:2","nodeType":"VariableDeclaration","scope":289,"src":"1572:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:2"},"returnParameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":289,"src":"1612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:2"},"scope":312,"src":"1538:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"1627:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":299,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:2","nodeType":"FunctionDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"mutability":"mutable","name":"spender","nameLocation":"2299:7:2","nodeType":"VariableDeclaration","scope":299,"src":"2291:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":294,"mutability":"mutable","name":"amount","nameLocation":"2316:6:2","nodeType":"VariableDeclaration","scope":299,"src":"2308:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:2"},"returnParameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"2342:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":296,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:2"},"scope":312,"src":"2274:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"2354:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":311,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:2","nodeType":"FunctionDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"from","nameLocation":"2676:4:2","nodeType":"VariableDeclaration","scope":311,"src":"2668:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":304,"mutability":"mutable","name":"to","nameLocation":"2690:2:2","nodeType":"VariableDeclaration","scope":311,"src":"2682:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":303,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"amount","nameLocation":"2702:6:2","nodeType":"VariableDeclaration","scope":311,"src":"2694:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":305,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:2"},"returnParameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":311,"src":"2728:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":308,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:2"},"scope":312,"src":"2646:88:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":313,"src":"202:2534:2","usedErrors":[]}],"src":"106:2631:2"},"id":2},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1730],"Context":[1752],"ERC165":[2005],"ERC721":[1239],"IERC165":[2017],"IERC721":[1355],"IERC721Metadata":[1400],"IERC721Receiver":[1373],"Math":[2883],"SignedMath":[2988],"Strings":[1981]},"id":1240,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":314,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":315,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":1356,"src":"132:23:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":316,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":1374,"src":"156:31:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":317,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":1401,"src":"188:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":318,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":1731,"src":"231:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":319,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":1753,"src":"265:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":1982,"src":"299:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":321,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1240,"sourceUnit":2006,"src":"333:46:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":323,"name":"Context","nameLocations":["647:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1752,"src":"647:7:3"},"id":324,"nodeType":"InheritanceSpecifier","src":"647:7:3"},{"baseName":{"id":325,"name":"ERC165","nameLocations":["656:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"656:6:3"},"id":326,"nodeType":"InheritanceSpecifier","src":"656:6:3"},{"baseName":{"id":327,"name":"IERC721","nameLocations":["664:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1355,"src":"664:7:3"},"id":328,"nodeType":"InheritanceSpecifier","src":"664:7:3"},{"baseName":{"id":329,"name":"IERC721Metadata","nameLocations":["673:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":1400,"src":"673:15:3"},"id":330,"nodeType":"InheritanceSpecifier","src":"673:15:3"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"381:246:3","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1239,"linearizedBaseContracts":[1239,1400,1355,2005,2017,1752],"name":"ERC721","nameLocation":"637:6:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":333,"libraryName":{"id":331,"name":"Address","nameLocations":["701:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1730,"src":"701:7:3"},"nodeType":"UsingForDirective","src":"695:26:3","typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":336,"libraryName":{"id":334,"name":"Strings","nameLocations":["732:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1981,"src":"732:7:3"},"nodeType":"UsingForDirective","src":"726:26:3","typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":338,"mutability":"mutable","name":"_name","nameLocation":"791:5:3","nodeType":"VariableDeclaration","scope":1239,"src":"776:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":337,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":340,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:3","nodeType":"VariableDeclaration","scope":1239,"src":"823:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":339,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":344,"mutability":"mutable","name":"_owners","nameLocation":"934:7:3","nodeType":"VariableDeclaration","scope":1239,"src":"898:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":343,"keyType":{"id":341,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":348,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:3","nodeType":"VariableDeclaration","scope":1239,"src":"992:45:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":347,"keyType":{"id":345,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":352,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:3","nodeType":"VariableDeclaration","scope":1239,"src":"1093:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":351,"keyType":{"id":349,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":358,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:3","nodeType":"VariableDeclaration","scope":1239,"src":"1199:71:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":357,"keyType":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":356,"keyType":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":355,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":374,"nodeType":"Block","src":"1446:57:3","statements":[{"expression":{"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":366,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"1456:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":367,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"1464:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":369,"nodeType":"ExpressionStatement","src":"1456:13:3"},{"expression":{"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":370,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"1479:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":371,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"1489:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":373,"nodeType":"ExpressionStatement","src":"1479:17:3"}]},"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"1277:108:3","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":375,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"name_","nameLocation":"1416:5:3","nodeType":"VariableDeclaration","scope":375,"src":"1402:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":360,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":363,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:3","nodeType":"VariableDeclaration","scope":375,"src":"1423:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":362,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:3"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[],"src":"1446:0:3"},"scope":1239,"src":"1390:113:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2004,2016],"body":{"id":405,"nodeType":"Block","src":"1678:192:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":386,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1707:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":388,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1355,"src":"1727:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1355_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1355_$","typeString":"type(contract IERC721)"}],"id":387,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1355","typeString":"type(contract IERC721)"}},"id":390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":392,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1763:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":394,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"1783:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1400_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1400_$","typeString":"type(contract IERC721Metadata)"}],"id":393,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1400","typeString":"type(contract IERC721Metadata)"}},"id":396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":401,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1851:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":399,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1239_$","typeString":"type(contract super ERC721)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2004,"src":"1827:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":385,"id":404,"nodeType":"Return","src":"1688:175:3"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1509:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":406,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:3","nodeType":"FunctionDefinition","overrides":{"id":382,"nodeType":"OverrideSpecifier","overrides":[{"id":380,"name":"ERC165","nameLocations":["1646:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"1646:6:3"},{"id":381,"name":"IERC165","nameLocations":["1654:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"1654:7:3"}],"src":"1637:25:3"},"parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:3","nodeType":"VariableDeclaration","scope":406,"src":"1597:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":377,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:3"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":406,"src":"1672:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":383,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:3"},"scope":1239,"src":"1570:300:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1280],"body":{"id":429,"nodeType":"Block","src":"2010:123:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"2028:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":417,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:3","typeDescriptions":{}}},"id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":424,"nodeType":"ExpressionStatement","src":"2020:73:3"},{"expression":{"baseExpression":{"id":425,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"2110:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":427,"indexExpression":{"id":426,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"2120:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":414,"id":428,"nodeType":"Return","src":"2103:23:3"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"1876:48:3","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":430,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:3","nodeType":"FunctionDefinition","overrides":{"id":411,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:3"},"parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"owner","nameLocation":"1956:5:3","nodeType":"VariableDeclaration","scope":430,"src":"1948:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:3"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":430,"src":"2001:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:3"},"scope":1239,"src":"1929:204:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1288],"body":{"id":457,"nodeType":"Block","src":"2271:138:3","statements":[{"assignments":[440],"declarations":[{"constant":false,"id":440,"mutability":"mutable","name":"owner","nameLocation":"2289:5:3","nodeType":"VariableDeclaration","scope":457,"src":"2281:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":444,"initialValue":{"arguments":[{"id":442,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":441,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"2297:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":446,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"2332:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:3","typeDescriptions":{}}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":445,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":454,"nodeType":"ExpressionStatement","src":"2324:56:3"},{"expression":{"id":455,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"2397:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":438,"id":456,"nodeType":"Return","src":"2390:12:3"}]},"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"2139:46:3","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":458,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:3","nodeType":"FunctionDefinition","overrides":{"id":435,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:3"},"parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:3","nodeType":"VariableDeclaration","scope":458,"src":"2207:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:3"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":458,"src":"2262:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":436,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:3"},"scope":1239,"src":"2190:219:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1385],"body":{"id":467,"nodeType":"Block","src":"2540:29:3","statements":[{"expression":{"id":465,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"2557:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":464,"id":466,"nodeType":"Return","src":"2550:12:3"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"2415:51:3","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":468,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:3","nodeType":"FunctionDefinition","overrides":{"id":461,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:3"},"parameters":{"id":460,"nodeType":"ParameterList","parameters":[],"src":"2484:2:3"},"returnParameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":468,"src":"2525:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":462,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:3"},"scope":1239,"src":"2471:98:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1391],"body":{"id":477,"nodeType":"Block","src":"2704:31:3","statements":[{"expression":{"id":475,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"2721:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":474,"id":476,"nodeType":"Return","src":"2714:14:3"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"2575:53:3","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":478,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:3","nodeType":"FunctionDefinition","overrides":{"id":471,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:3"},"parameters":{"id":470,"nodeType":"ParameterList","parameters":[],"src":"2648:2:3"},"returnParameters":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"2689:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":472,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:3"},"scope":1239,"src":"2633:102:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1399],"body":{"id":516,"nodeType":"Block","src":"2889:188:3","statements":[{"expression":{"arguments":[{"id":488,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"2914:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":487,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"2899:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"ExpressionStatement","src":"2899:23:3"},{"assignments":[492],"declarations":[{"constant":false,"id":492,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:3","nodeType":"VariableDeclaration","scope":516,"src":"2933:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":491,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":495,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":493,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2957:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:3"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":498,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"2990:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":496,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:3","typeDescriptions":{}}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:3","memberName":"length","nodeType":"MemberAccess","src":"2984:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:3","trueExpression":{"arguments":[{"arguments":[{"id":507,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"3036:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":508,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"3045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1811,"src":"3045:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":505,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":503,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:3","typeDescriptions":{}}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":486,"id":515,"nodeType":"Return","src":"2977:93:3"}]},"documentation":{"id":479,"nodeType":"StructuredDocumentation","src":"2741:55:3","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":517,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:3","nodeType":"FunctionDefinition","overrides":{"id":483,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:3"},"parameters":{"id":482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:3","nodeType":"VariableDeclaration","scope":517,"src":"2819:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":480,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:3"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":517,"src":"2874:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":484,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:3"},"scope":1239,"src":"2801:276:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":525,"nodeType":"Block","src":"3385:26:3","statements":[{"expression":{"hexValue":"","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":522,"id":524,"nodeType":"Return","src":"3395:9:3"}]},"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"3083:231:3","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":526,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:3","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[],"src":"3336:2:3"},"returnParameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":526,"src":"3370:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":520,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:3"},"scope":1239,"src":"3319:92:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1328],"body":{"id":568,"nodeType":"Block","src":"3538:336:3","statements":[{"assignments":[536],"declarations":[{"constant":false,"id":536,"mutability":"mutable","name":"owner","nameLocation":"3556:5:3","nodeType":"VariableDeclaration","scope":568,"src":"3548:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":535,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":541,"initialValue":{"arguments":[{"id":539,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"3579:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":537,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"3564:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"3564:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":543,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"3605:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":544,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3611:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":542,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":548,"nodeType":"ExpressionStatement","src":"3597:57:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":550,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"3686:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":552,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3702:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":555,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3728:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":556,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"3735:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":554,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"3711:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":562,"nodeType":"ExpressionStatement","src":"3665:170:3"},{"expression":{"arguments":[{"id":564,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"3855:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"3859:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":563,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"3846:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":567,"nodeType":"ExpressionStatement","src":"3846:21:3"}]},"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"3417:46:3","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":569,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:3","nodeType":"FunctionDefinition","overrides":{"id":533,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:3"},"parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"to","nameLocation":"3493:2:3","nodeType":"VariableDeclaration","scope":569,"src":"3485:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:3","nodeType":"VariableDeclaration","scope":569,"src":"3497:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":530,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:3"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"3538:0:3"},"scope":1239,"src":"3468:406:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1344],"body":{"id":586,"nodeType":"Block","src":"4020:82:3","statements":[{"expression":{"arguments":[{"id":579,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":578,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"4030:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":581,"nodeType":"ExpressionStatement","src":"4030:23:3"},{"expression":{"baseExpression":{"id":582,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"4071:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":584,"indexExpression":{"id":583,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4087:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":577,"id":585,"nodeType":"Return","src":"4064:31:3"}]},"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"3880:50:3","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":587,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:3","nodeType":"FunctionDefinition","overrides":{"id":574,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:3"},"parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:3","nodeType":"VariableDeclaration","scope":587,"src":"3956:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:3"},"returnParameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":587,"src":"4011:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:3"},"scope":1239,"src":"3935:167:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1336],"body":{"id":603,"nodeType":"Block","src":"4253:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":597,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"4282:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":599,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"4296:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":600,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4306:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":596,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"4263:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":602,"nodeType":"ExpressionStatement","src":"4263:52:3"}]},"documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"4108:56:3","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":604,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:3","nodeType":"FunctionDefinition","overrides":{"id":594,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:3"},"parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"operator","nameLocation":"4204:8:3","nodeType":"VariableDeclaration","scope":604,"src":"4196:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"approved","nameLocation":"4219:8:3","nodeType":"VariableDeclaration","scope":604,"src":"4214:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":591,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:3"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"4253:0:3"},"scope":1239,"src":"4169:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1354],"body":{"id":621,"nodeType":"Block","src":"4491:59:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":615,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"4508:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":617,"indexExpression":{"id":616,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"4527:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":619,"indexExpression":{"id":618,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"4534:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":614,"id":620,"nodeType":"Return","src":"4501:42:3"}]},"documentation":{"id":605,"nodeType":"StructuredDocumentation","src":"4328:55:3","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":622,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:3","nodeType":"FunctionDefinition","overrides":{"id":611,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:3"},"parameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"owner","nameLocation":"4422:5:3","nodeType":"VariableDeclaration","scope":622,"src":"4414:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":606,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"operator","nameLocation":"4437:8:3","nodeType":"VariableDeclaration","scope":622,"src":"4429:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:3"},"returnParameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":622,"src":"4485:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":612,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:3"},"scope":1239,"src":"4388:162:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1320],"body":{"id":648,"nodeType":"Block","src":"4701:207:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":635,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"4790:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4790:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":637,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"4804:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":634,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"4771:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4814:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":633,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4763:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4763:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":641,"nodeType":"ExpressionStatement","src":"4763:99:3"},{"expression":{"arguments":[{"id":643,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"4883:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":644,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"4889:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":645,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"4893:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":642,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"4873:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":647,"nodeType":"ExpressionStatement","src":"4873:28:3"}]},"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"4556:51:3","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":649,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:3","nodeType":"FunctionDefinition","overrides":{"id":631,"nodeType":"OverrideSpecifier","overrides":[],"src":"4692:8:3"},"parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"from","nameLocation":"4642:4:3","nodeType":"VariableDeclaration","scope":649,"src":"4634:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"4634:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"to","nameLocation":"4656:2:3","nodeType":"VariableDeclaration","scope":649,"src":"4648:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"4648:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"tokenId","nameLocation":"4668:7:3","nodeType":"VariableDeclaration","scope":649,"src":"4660:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"4660:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:43:3"},"returnParameters":{"id":632,"nodeType":"ParameterList","parameters":[],"src":"4701:0:3"},"scope":1239,"src":"4612:296:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1310],"body":{"id":667,"nodeType":"Block","src":"5067:56:3","statements":[{"expression":{"arguments":[{"id":661,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"5094:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":662,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"5100:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":663,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5104:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5113:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":660,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[668,698],"referencedDeclaration":698,"src":"5077:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5077:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":666,"nodeType":"ExpressionStatement","src":"5077:39:3"}]},"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"4914:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":668,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4983:16:3","nodeType":"FunctionDefinition","overrides":{"id":658,"nodeType":"OverrideSpecifier","overrides":[],"src":"5058:8:3"},"parameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"from","nameLocation":"5008:4:3","nodeType":"VariableDeclaration","scope":668,"src":"5000:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"to","nameLocation":"5022:2:3","nodeType":"VariableDeclaration","scope":668,"src":"5014:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"5014:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"tokenId","nameLocation":"5034:7:3","nodeType":"VariableDeclaration","scope":668,"src":"5026:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":655,"name":"uint256","nodeType":"ElementaryTypeName","src":"5026:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4999:43:3"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"5067:0:3"},"scope":1239,"src":"4974:149:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1300],"body":{"id":697,"nodeType":"Block","src":"5301:164:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":683,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"5338:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5338:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":685,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"5352:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":682,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"5319:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5319:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5362:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":681,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5311:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5311:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"ExpressionStatement","src":"5311:99:3"},{"expression":{"arguments":[{"id":691,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"5434:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":692,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"5440:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":693,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"5444:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":694,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"5453:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":690,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"5420:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5420:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":696,"nodeType":"ExpressionStatement","src":"5420:38:3"}]},"documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"5129:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":698,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5198:16:3","nodeType":"FunctionDefinition","overrides":{"id":679,"nodeType":"OverrideSpecifier","overrides":[],"src":"5292:8:3"},"parameters":{"id":678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"mutability":"mutable","name":"from","nameLocation":"5223:4:3","nodeType":"VariableDeclaration","scope":698,"src":"5215:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":670,"name":"address","nodeType":"ElementaryTypeName","src":"5215:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"to","nameLocation":"5237:2:3","nodeType":"VariableDeclaration","scope":698,"src":"5229:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"5229:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"tokenId","nameLocation":"5249:7:3","nodeType":"VariableDeclaration","scope":698,"src":"5241:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":674,"name":"uint256","nodeType":"ElementaryTypeName","src":"5241:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":677,"mutability":"mutable","name":"data","nameLocation":"5271:4:3","nodeType":"VariableDeclaration","scope":698,"src":"5258:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":676,"name":"bytes","nodeType":"ElementaryTypeName","src":"5258:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5214:62:3"},"returnParameters":{"id":680,"nodeType":"ParameterList","parameters":[],"src":"5301:0:3"},"scope":1239,"src":"5189:276:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":726,"nodeType":"Block","src":"6428:165:3","statements":[{"expression":{"arguments":[{"id":711,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"6448:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":712,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"6454:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":713,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"6458:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":710,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"6438:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6438:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"6438:28:3"},{"expression":{"arguments":[{"arguments":[{"id":718,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"6507:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":719,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"6513:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":720,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"6517:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":721,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"6526:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":717,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6484:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6484:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6533:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":716,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6476:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6476:110:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"ExpressionStatement","src":"6476:110:3"}]},"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"5471:850:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":727,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6335:13:3","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"from","nameLocation":"6357:4:3","nodeType":"VariableDeclaration","scope":727,"src":"6349:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"6349:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":703,"mutability":"mutable","name":"to","nameLocation":"6371:2:3","nodeType":"VariableDeclaration","scope":727,"src":"6363:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":702,"name":"address","nodeType":"ElementaryTypeName","src":"6363:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":705,"mutability":"mutable","name":"tokenId","nameLocation":"6383:7:3","nodeType":"VariableDeclaration","scope":727,"src":"6375:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"6375:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"data","nameLocation":"6405:4:3","nodeType":"VariableDeclaration","scope":727,"src":"6392:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":706,"name":"bytes","nodeType":"ElementaryTypeName","src":"6392:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6348:62:3"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[],"src":"6428:0:3"},"scope":1239,"src":"6326:267:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"6777:40:3","statements":[{"expression":{"baseExpression":{"id":735,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"6794:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":737,"indexExpression":{"id":736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"6802:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6794:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":734,"id":738,"nodeType":"Return","src":"6787:23:3"}]},"documentation":{"id":728,"nodeType":"StructuredDocumentation","src":"6599:98:3","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":740,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6711:8:3","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":730,"mutability":"mutable","name":"tokenId","nameLocation":"6728:7:3","nodeType":"VariableDeclaration","scope":740,"src":"6720:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"6720:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6719:17:3"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":740,"src":"6768:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"6768:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6767:9:3"},"scope":1239,"src":"6702:115:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":757,"nodeType":"Block","src":"7191:55:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":749,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"7217:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":748,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"7208:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7208:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7237:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7229:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"7229:7:3","typeDescriptions":{}}},"id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7229:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7208:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":747,"id":756,"nodeType":"Return","src":"7201:38:3"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"6823:292:3","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":758,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7129:7:3","nodeType":"FunctionDefinition","parameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"tokenId","nameLocation":"7145:7:3","nodeType":"VariableDeclaration","scope":758,"src":"7137:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"7137:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7136:17:3"},"returnParameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":758,"src":"7185:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":745,"name":"bool","nodeType":"ElementaryTypeName","src":"7185:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7184:6:3"},"scope":1239,"src":"7120:126:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":791,"nodeType":"Block","src":"7503:162:3","statements":[{"assignments":[769],"declarations":[{"constant":false,"id":769,"mutability":"mutable","name":"owner","nameLocation":"7521:5:3","nodeType":"VariableDeclaration","scope":791,"src":"7513:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"7513:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":774,"initialValue":{"arguments":[{"id":772,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"7544:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":770,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7529:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7536:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"7529:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7529:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7513:39:3"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":775,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"7570:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":776,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"7581:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7570:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":779,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"7607:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":780,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"7614:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":778,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"7590:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":784,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"7638:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":783,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"7626:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7626:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":786,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"7650:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7626:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:87:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7569:89:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":767,"id":790,"nodeType":"Return","src":"7562:96:3"}]},"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"7252:147:3","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":792,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7413:18:3","nodeType":"FunctionDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"spender","nameLocation":"7440:7:3","nodeType":"VariableDeclaration","scope":792,"src":"7432:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"7432:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"tokenId","nameLocation":"7457:7:3","nodeType":"VariableDeclaration","scope":792,"src":"7449:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"7449:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7431:34:3"},"returnParameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":792,"src":"7497:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":765,"name":"bool","nodeType":"ElementaryTypeName","src":"7497:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7496:6:3"},"scope":1239,"src":"7404:261:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":806,"nodeType":"Block","src":"8060:43:3","statements":[{"expression":{"arguments":[{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"8080:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":802,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"8084:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8093:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":800,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[807,836],"referencedDeclaration":836,"src":"8070:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8070:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":805,"nodeType":"ExpressionStatement","src":"8070:26:3"}]},"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"7671:319:3","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":807,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8004:9:3","nodeType":"FunctionDefinition","parameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"to","nameLocation":"8022:2:3","nodeType":"VariableDeclaration","scope":807,"src":"8014:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":794,"name":"address","nodeType":"ElementaryTypeName","src":"8014:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":797,"mutability":"mutable","name":"tokenId","nameLocation":"8034:7:3","nodeType":"VariableDeclaration","scope":807,"src":"8026:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"8026:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8013:29:3"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[],"src":"8060:0:3"},"scope":1239,"src":"7995:108:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":835,"nodeType":"Block","src":"8408:195:3","statements":[{"expression":{"arguments":[{"id":818,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"8424:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":819,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"8428:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":817,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"8418:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8418:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":821,"nodeType":"ExpressionStatement","src":"8418:18:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8498:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8490:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"8490:7:3","typeDescriptions":{}}},"id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8490:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":828,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"8502:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"8506:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":830,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"8515:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":823,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"8467:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8467:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8534:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":822,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8446:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8446:150:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":834,"nodeType":"ExpressionStatement","src":"8446:150:3"}]},"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"8109:210:3","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":836,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8333:9:3","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"to","nameLocation":"8351:2:3","nodeType":"VariableDeclaration","scope":836,"src":"8343:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"8343:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"tokenId","nameLocation":"8363:7:3","nodeType":"VariableDeclaration","scope":836,"src":"8355:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"8355:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"data","nameLocation":"8385:4:3","nodeType":"VariableDeclaration","scope":836,"src":"8372:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":813,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8342:48:3"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"8408:0:3"},"scope":1239,"src":"8324:279:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":912,"nodeType":"Block","src":"8986:859:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":845,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"9004:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9018:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9010:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"9010:7:3","typeDescriptions":{}}},"id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9010:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9004:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9022:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":844,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8996:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":853,"nodeType":"ExpressionStatement","src":"8996:61:3"},{"expression":{"arguments":[{"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9075:17:3","subExpression":{"arguments":[{"id":856,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9084:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":855,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9076:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9076:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9094:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":854,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9067:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"9067:58:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9157:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"9157:7:3","typeDescriptions":{}}},"id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9157:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":867,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"9169:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":868,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9173:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9182:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":862,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"9136:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9136:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":871,"nodeType":"ExpressionStatement","src":"9136:48:3"},{"expression":{"arguments":[{"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9279:17:3","subExpression":{"arguments":[{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9288:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":873,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9280:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9280:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9298:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9271:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9271:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":879,"nodeType":"ExpressionStatement","src":"9271:58:3"},{"id":886,"nodeType":"UncheckedBlock","src":"9340:360:3","statements":[{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":880,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"9671:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":882,"indexExpression":{"id":881,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"9681:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9671:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9688:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9671:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":885,"nodeType":"ExpressionStatement","src":"9671:18:3"}]},{"expression":{"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":887,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"9710:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":889,"indexExpression":{"id":888,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9718:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9710:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":890,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"9729:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9710:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":892,"nodeType":"ExpressionStatement","src":"9710:21:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9764:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9756:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"9756:7:3","typeDescriptions":{}}},"id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9756:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"9768:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9772:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":893,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"9747:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9747:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"EmitStatement","src":"9742:38:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9819:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9811:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":903,"name":"address","nodeType":"ElementaryTypeName","src":"9811:7:3","typeDescriptions":{}}},"id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9811:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":907,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"9823:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":908,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9827:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9836:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":902,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"9791:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9791:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"ExpressionStatement","src":"9791:47:3"}]},"documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"8609:311:3","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":913,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8934:5:3","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"to","nameLocation":"8948:2:3","nodeType":"VariableDeclaration","scope":913,"src":"8940:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"8940:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"tokenId","nameLocation":"8960:7:3","nodeType":"VariableDeclaration","scope":913,"src":"8952:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"8952:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8939:29:3"},"returnParameters":{"id":843,"nodeType":"ParameterList","parameters":[],"src":"8986:0:3"},"scope":1239,"src":"8925:920:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":979,"nodeType":"Block","src":"10220:713:3","statements":[{"assignments":[920],"declarations":[{"constant":false,"id":920,"mutability":"mutable","name":"owner","nameLocation":"10238:5:3","nodeType":"VariableDeclaration","scope":979,"src":"10230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":919,"name":"address","nodeType":"ElementaryTypeName","src":"10230:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":925,"initialValue":{"arguments":[{"id":923,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10261:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":921,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"10246:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10253:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"10246:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10246:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10230:39:3"},{"expression":{"arguments":[{"id":927,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"10301:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10316:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10308:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"10308:7:3","typeDescriptions":{}}},"id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10308:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":932,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10320:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10329:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":926,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"10280:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10280:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"ExpressionStatement","src":"10280:51:3"},{"expression":{"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":936,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"10433:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":939,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10456:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":937,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"10441:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10448:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"10441:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10441:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10433:31:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":942,"nodeType":"ExpressionStatement","src":"10433:31:3"},{"expression":{"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10502:31:3","subExpression":{"baseExpression":{"id":943,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"10509:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":945,"indexExpression":{"id":944,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10525:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10509:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":947,"nodeType":"ExpressionStatement","src":"10502:31:3"},{"id":954,"nodeType":"UncheckedBlock","src":"10544:237:3","statements":[{"expression":{"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":948,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"10749:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":950,"indexExpression":{"id":949,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"10759:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10749:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10769:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10749:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":953,"nodeType":"ExpressionStatement","src":"10749:21:3"}]},{"expression":{"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10790:23:3","subExpression":{"baseExpression":{"id":955,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"10797:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":957,"indexExpression":{"id":956,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10805:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10797:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"10790:23:3"},{"eventCall":{"arguments":[{"id":961,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"10838:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10853:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10845:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":962,"name":"address","nodeType":"ElementaryTypeName","src":"10845:7:3","typeDescriptions":{}}},"id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10845:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":966,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10857:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":960,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"10829:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10829:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":968,"nodeType":"EmitStatement","src":"10824:41:3"},{"expression":{"arguments":[{"id":970,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"10896:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10911:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10903:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"10903:7:3","typeDescriptions":{}}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10903:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":975,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"10915:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10924:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":969,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"10876:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10876:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":978,"nodeType":"ExpressionStatement","src":"10876:50:3"}]},"documentation":{"id":914,"nodeType":"StructuredDocumentation","src":"9851:315:3","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":980,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10180:5:3","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"tokenId","nameLocation":"10194:7:3","nodeType":"VariableDeclaration","scope":980,"src":"10186:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"10186:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10185:17:3"},"returnParameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"10220:0:3"},"scope":1239,"src":"10171:762:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1064,"nodeType":"Block","src":"11336:1124:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":993,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"11369:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":991,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"11354:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11361:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"11354:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11354:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":995,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"11381:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11354:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11387:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11346:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11346:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":999,"nodeType":"ExpressionStatement","src":"11346:81:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1001,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"11445:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11459:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11451:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1002,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:3","typeDescriptions":{}}},"id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11451:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11445:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11463:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":1000,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11437:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11437:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1009,"nodeType":"ExpressionStatement","src":"11437:65:3"},{"expression":{"arguments":[{"id":1011,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"11534:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1012,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"11540:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"11544:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1010,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"11513:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11513:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"ExpressionStatement","src":"11513:42:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1020,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"11670:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1018,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"11655:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11662:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"11655:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11655:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1022,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"11682:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11655:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11688:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":1017,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11647:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1026,"nodeType":"ExpressionStatement","src":"11647:81:3"},{"expression":{"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11790:31:3","subExpression":{"baseExpression":{"id":1027,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"11797:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1029,"indexExpression":{"id":1028,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"11813:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11797:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1031,"nodeType":"ExpressionStatement","src":"11790:31:3"},{"id":1044,"nodeType":"UncheckedBlock","src":"11832:496:3","statements":[{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1032,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"12265:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1034,"indexExpression":{"id":1033,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"12275:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12265:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12284:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12265:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1037,"nodeType":"ExpressionStatement","src":"12265:20:3"},{"expression":{"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1038,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"12299:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1040,"indexExpression":{"id":1039,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"12309:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12299:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12299:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1043,"nodeType":"ExpressionStatement","src":"12299:18:3"}]},{"expression":{"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1045,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"12337:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1047,"indexExpression":{"id":1046,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"12345:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12337:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1048,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"12356:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12337:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1050,"nodeType":"ExpressionStatement","src":"12337:21:3"},{"eventCall":{"arguments":[{"id":1052,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"12383:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1053,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"12389:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1054,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"12393:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1051,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"12374:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12374:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1056,"nodeType":"EmitStatement","src":"12369:32:3"},{"expression":{"arguments":[{"id":1058,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"12432:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1059,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"12438:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1060,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"12442:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1057,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"12412:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12412:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1063,"nodeType":"ExpressionStatement","src":"12412:41:3"}]},"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"10939:313:3","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1065,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11266:9:3","nodeType":"FunctionDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"from","nameLocation":"11284:4:3","nodeType":"VariableDeclaration","scope":1065,"src":"11276:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":982,"name":"address","nodeType":"ElementaryTypeName","src":"11276:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"to","nameLocation":"11298:2:3","nodeType":"VariableDeclaration","scope":1065,"src":"11290:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":984,"name":"address","nodeType":"ElementaryTypeName","src":"11290:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"tokenId","nameLocation":"11310:7:3","nodeType":"VariableDeclaration","scope":1065,"src":"11302:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"11302:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11275:43:3"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"11336:0:3"},"scope":1239,"src":"11257:1203:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1088,"nodeType":"Block","src":"12636:107:3","statements":[{"expression":{"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1073,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"12646:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1075,"indexExpression":{"id":1074,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"12662:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12646:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1076,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"12673:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12646:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1078,"nodeType":"ExpressionStatement","src":"12646:29:3"},{"eventCall":{"arguments":[{"arguments":[{"id":1082,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"12714:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1080,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"12699:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1239_$","typeString":"type(contract ERC721)"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12706:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"12699:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1084,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"12724:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1085,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"12728:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1079,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"12690:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12690:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1087,"nodeType":"EmitStatement","src":"12685:51:3"}]},"documentation":{"id":1066,"nodeType":"StructuredDocumentation","src":"12466:101:3","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":1089,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12581:8:3","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"to","nameLocation":"12598:2:3","nodeType":"VariableDeclaration","scope":1089,"src":"12590:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"tokenId","nameLocation":"12610:7:3","nodeType":"VariableDeclaration","scope":1089,"src":"12602:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"12602:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12589:29:3"},"returnParameters":{"id":1072,"nodeType":"ParameterList","parameters":[],"src":"12636:0:3"},"scope":1239,"src":"12572:171:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1120,"nodeType":"Block","src":"12972:184:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1100,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"12990:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1101,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"12999:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12990:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13009:27:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":1099,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12982:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12982:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1105,"nodeType":"ExpressionStatement","src":"12982:55:3"},{"expression":{"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1106,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"13047:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1109,"indexExpression":{"id":1107,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"13066:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13047:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1110,"indexExpression":{"id":1108,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"13073:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13047:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1111,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"13085:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13047:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1113,"nodeType":"ExpressionStatement","src":"13047:46:3"},{"eventCall":{"arguments":[{"id":1115,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"13123:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1116,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"13130:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1117,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"13140:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1114,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"13108:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13108:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1119,"nodeType":"EmitStatement","src":"13103:46:3"}]},"documentation":{"id":1090,"nodeType":"StructuredDocumentation","src":"12749:125:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1121,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12888:18:3","nodeType":"FunctionDefinition","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"owner","nameLocation":"12915:5:3","nodeType":"VariableDeclaration","scope":1121,"src":"12907:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"12907:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"operator","nameLocation":"12930:8:3","nodeType":"VariableDeclaration","scope":1121,"src":"12922:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"12922:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"approved","nameLocation":"12945:8:3","nodeType":"VariableDeclaration","scope":1121,"src":"12940:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1095,"name":"bool","nodeType":"ElementaryTypeName","src":"12940:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12906:48:3"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[],"src":"12972:0:3"},"scope":1239,"src":"12879:277:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"13303:70:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":1129,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"13329:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1128,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"13321:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13321:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13339:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1127,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13313:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13313:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1133,"nodeType":"ExpressionStatement","src":"13313:53:3"}]},"documentation":{"id":1122,"nodeType":"StructuredDocumentation","src":"13162:73:3","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13249:14:3","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"tokenId","nameLocation":"13272:7:3","nodeType":"VariableDeclaration","scope":1135,"src":"13264:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"13264:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13263:17:3"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[],"src":"13303:0:3"},"scope":1239,"src":"13240:133:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1196,"nodeType":"Block","src":"14080:676:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1149,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"14094:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14097:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1418,"src":"14094:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14094:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1194,"nodeType":"Block","src":"14714:36:3","statements":[{"expression":{"hexValue":"74727565","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14735:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1148,"id":1193,"nodeType":"Return","src":"14728:11:3"}]},"id":1195,"nodeType":"IfStatement","src":"14090:660:3","trueBody":{"id":1191,"nodeType":"Block","src":"14111:597:3","statements":[{"clauses":[{"block":{"id":1171,"nodeType":"Block","src":"14225:91:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"14250:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1166,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"14260:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1373_$","typeString":"type(contract IERC721Receiver)"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14276:16:3","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"14260:32:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14293:8:3","memberName":"selector","nodeType":"MemberAccess","src":"14260:41:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14250:51:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1148,"id":1170,"nodeType":"Return","src":"14243:58:3"}]},"errorName":"","id":1172,"nodeType":"TryCatchClause","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"retval","nameLocation":"14217:6:3","nodeType":"VariableDeclaration","scope":1172,"src":"14210:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1162,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14210:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14209:15:3"},"src":"14201:115:3"},{"block":{"id":1188,"nodeType":"Block","src":"14345:353:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1176,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"14367:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14374:6:3","memberName":"length","nodeType":"MemberAccess","src":"14367:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14384:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14367:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1186,"nodeType":"Block","src":"14494:190:3","statements":[{"AST":{"nodeType":"YulBlock","src":"14580:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14617:2:3","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14621:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14613:3:3"},"nodeType":"YulFunctionCall","src":"14613:15:3"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14636:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14630:5:3"},"nodeType":"YulFunctionCall","src":"14630:13:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14606:6:3"},"nodeType":"YulFunctionCall","src":"14606:38:3"},"nodeType":"YulExpressionStatement","src":"14606:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1174,"isOffset":false,"isSlot":false,"src":"14621:6:3","valueSize":1},{"declaration":1174,"isOffset":false,"isSlot":false,"src":"14636:6:3","valueSize":1}],"id":1185,"nodeType":"InlineAssembly","src":"14571:95:3"}]},"id":1187,"nodeType":"IfStatement","src":"14363:321:3","trueBody":{"id":1184,"nodeType":"Block","src":"14387:101:3","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14416:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1180,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14409:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14409:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"ExpressionStatement","src":"14409:60:3"}]}}]},"errorName":"","id":1189,"nodeType":"TryCatchClause","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"reason","nameLocation":"14337:6:3","nodeType":"VariableDeclaration","scope":1189,"src":"14324:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1173,"name":"bytes","nodeType":"ElementaryTypeName","src":"14324:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14323:21:3"},"src":"14317:381:3"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1156,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"14166:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14166:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1158,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"14180:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1159,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"14186:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1160,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"14195:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1153,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"14145:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1152,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"14129:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1373_$","typeString":"type(contract IERC721Receiver)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1373","typeString":"contract IERC721Receiver"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14149:16:3","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"14129:36:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:71:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1190,"nodeType":"TryStatement","src":"14125:573:3"}]}}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"13379:541:3","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1197,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"13934:22:3","nodeType":"FunctionDefinition","parameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"from","nameLocation":"13974:4:3","nodeType":"VariableDeclaration","scope":1197,"src":"13966:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"13966:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"to","nameLocation":"13996:2:3","nodeType":"VariableDeclaration","scope":1197,"src":"13988:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1139,"name":"address","nodeType":"ElementaryTypeName","src":"13988:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"tokenId","nameLocation":"14016:7:3","nodeType":"VariableDeclaration","scope":1197,"src":"14008:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1141,"name":"uint256","nodeType":"ElementaryTypeName","src":"14008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"data","nameLocation":"14046:4:3","nodeType":"VariableDeclaration","scope":1197,"src":"14033:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1143,"name":"bytes","nodeType":"ElementaryTypeName","src":"14033:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13956:100:3"},"returnParameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1197,"src":"14074:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1146,"name":"bool","nodeType":"ElementaryTypeName","src":"14074:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14073:6:3"},"scope":1239,"src":"13925:831:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1209,"nodeType":"Block","src":"15586:2:3","statements":[]},"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"14762:705:3","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1210,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15481:20:3","nodeType":"FunctionDefinition","parameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"from","nameLocation":"15510:4:3","nodeType":"VariableDeclaration","scope":1210,"src":"15502:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1199,"name":"address","nodeType":"ElementaryTypeName","src":"15502:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"to","nameLocation":"15524:2:3","nodeType":"VariableDeclaration","scope":1210,"src":"15516:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"15516:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1204,"mutability":"mutable","name":"firstTokenId","nameLocation":"15536:12:3","nodeType":"VariableDeclaration","scope":1210,"src":"15528:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"15528:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"batchSize","nameLocation":"15558:9:3","nodeType":"VariableDeclaration","scope":1210,"src":"15550:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"15550:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15501:67:3"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[],"src":"15586:0:3"},"scope":1239,"src":"15472:116:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1222,"nodeType":"Block","src":"16407:2:3","statements":[]},"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"15594:695:3","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1223,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16303:19:3","nodeType":"FunctionDefinition","parameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"from","nameLocation":"16331:4:3","nodeType":"VariableDeclaration","scope":1223,"src":"16323:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1212,"name":"address","nodeType":"ElementaryTypeName","src":"16323:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"to","nameLocation":"16345:2:3","nodeType":"VariableDeclaration","scope":1223,"src":"16337:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"16337:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"firstTokenId","nameLocation":"16357:12:3","nodeType":"VariableDeclaration","scope":1223,"src":"16349:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"16349:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1219,"mutability":"mutable","name":"batchSize","nameLocation":"16379:9:3","nodeType":"VariableDeclaration","scope":1223,"src":"16371:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1218,"name":"uint256","nodeType":"ElementaryTypeName","src":"16371:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16322:67:3"},"returnParameters":{"id":1221,"nodeType":"ParameterList","parameters":[],"src":"16407:0:3"},"scope":1239,"src":"16294:115:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1237,"nodeType":"Block","src":"16958:45:3","statements":[{"expression":{"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1231,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"16968:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1233,"indexExpression":{"id":1232,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"16978:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16968:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1234,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"16990:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16968:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1236,"nodeType":"ExpressionStatement","src":"16968:28:3"}]},"documentation":{"id":1224,"nodeType":"StructuredDocumentation","src":"16415:409:3","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":1238,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"16891:24:3","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"account","nameLocation":"16924:7:3","nodeType":"VariableDeclaration","scope":1238,"src":"16916:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"16916:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"amount","nameLocation":"16941:6:3","nodeType":"VariableDeclaration","scope":1238,"src":"16933:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"16933:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16915:33:3"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[],"src":"16958:0:3"},"scope":1239,"src":"16882:121:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1240,"src":"628:16377:3","usedErrors":[]}],"src":"107:16899:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2017],"IERC721":[1355]},"id":1356,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1241,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1242,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1356,"sourceUnit":2018,"src":"133:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1244,"name":"IERC165","nameLocations":["271:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"271:7:4"},"id":1245,"nodeType":"InheritanceSpecifier","src":"271:7:4"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1243,"nodeType":"StructuredDocumentation","src":"182:67:4","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1355,"linearizedBaseContracts":[1355,2017],"name":"IERC721","nameLocation":"260:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"285:88:4","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1254,"name":"Transfer","nameLocation":"384:8:4","nodeType":"EventDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:4","nodeType":"VariableDeclaration","scope":1254,"src":"393:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1250,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:4","nodeType":"VariableDeclaration","scope":1254,"src":"415:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1249,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1252,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:4","nodeType":"VariableDeclaration","scope":1254,"src":"435:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:4"},"src":"378:82:4"},{"anonymous":false,"documentation":{"id":1255,"nodeType":"StructuredDocumentation","src":"466:94:4","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1263,"name":"Approval","nameLocation":"571:8:4","nodeType":"EventDefinition","parameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:4","nodeType":"VariableDeclaration","scope":1263,"src":"580:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1259,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:4","nodeType":"VariableDeclaration","scope":1263,"src":"603:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1258,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1261,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:4","nodeType":"VariableDeclaration","scope":1263,"src":"629:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:4"},"src":"565:89:4"},{"anonymous":false,"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"660:117:4","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1272,"name":"ApprovalForAll","nameLocation":"788:14:4","nodeType":"EventDefinition","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:4","nodeType":"VariableDeclaration","scope":1272,"src":"803:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1268,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:4","nodeType":"VariableDeclaration","scope":1272,"src":"826:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1270,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:4","nodeType":"VariableDeclaration","scope":1272,"src":"852:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1269,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:4"},"src":"782:85:4"},{"documentation":{"id":1273,"nodeType":"StructuredDocumentation","src":"873:76:4","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1280,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:4","nodeType":"FunctionDefinition","parameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1275,"mutability":"mutable","name":"owner","nameLocation":"981:5:4","nodeType":"VariableDeclaration","scope":1280,"src":"973:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:4"},"returnParameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"balance","nameLocation":"1019:7:4","nodeType":"VariableDeclaration","scope":1280,"src":"1011:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:4"},"scope":1355,"src":"954:74:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"1034:131:4","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1288,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:4","nodeType":"FunctionDefinition","parameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:4","nodeType":"VariableDeclaration","scope":1288,"src":"1187:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1282,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:4"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"owner","nameLocation":"1235:5:4","nodeType":"VariableDeclaration","scope":1288,"src":"1227:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:4"},"scope":1355,"src":"1170:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"1248:556:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1300,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:4","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"from","nameLocation":"1843:4:4","nodeType":"VariableDeclaration","scope":1300,"src":"1835:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"to","nameLocation":"1857:2:4","nodeType":"VariableDeclaration","scope":1300,"src":"1849:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:4","nodeType":"VariableDeclaration","scope":1300,"src":"1861:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"data","nameLocation":"1893:4:4","nodeType":"VariableDeclaration","scope":1300,"src":"1878:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:4"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[],"src":"1907:0:4"},"scope":1355,"src":"1809:99:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"1914:687:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1310,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:4","nodeType":"FunctionDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"from","nameLocation":"2640:4:4","nodeType":"VariableDeclaration","scope":1310,"src":"2632:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"to","nameLocation":"2654:2:4","nodeType":"VariableDeclaration","scope":1310,"src":"2646:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:4","nodeType":"VariableDeclaration","scope":1310,"src":"2658:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:4"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[],"src":"2683:0:4"},"scope":1355,"src":"2606:78:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"2690:732:4","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1320,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:4","nodeType":"FunctionDefinition","parameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"from","nameLocation":"3457:4:4","nodeType":"VariableDeclaration","scope":1320,"src":"3449:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"to","nameLocation":"3471:2:4","nodeType":"VariableDeclaration","scope":1320,"src":"3463:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1314,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1317,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:4","nodeType":"VariableDeclaration","scope":1320,"src":"3475:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1316,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:4"},"returnParameters":{"id":1319,"nodeType":"ParameterList","parameters":[],"src":"3500:0:4"},"scope":1355,"src":"3427:74:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"3507:452:4","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1328,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:4","nodeType":"FunctionDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"to","nameLocation":"3989:2:4","nodeType":"VariableDeclaration","scope":1328,"src":"3981:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:4","nodeType":"VariableDeclaration","scope":1328,"src":"3993:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1324,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:4"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[],"src":"4018:0:4"},"scope":1355,"src":"3964:55:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"4025:309:4","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1336,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:4","nodeType":"FunctionDefinition","parameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"operator","nameLocation":"4374:8:4","nodeType":"VariableDeclaration","scope":1336,"src":"4366:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1330,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"approved","nameLocation":"4389:8:4","nodeType":"VariableDeclaration","scope":1336,"src":"4384:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1332,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:4"},"returnParameters":{"id":1335,"nodeType":"ParameterList","parameters":[],"src":"4407:0:4"},"scope":1355,"src":"4339:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"4414:139:4","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1344,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:4","nodeType":"FunctionDefinition","parameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:4","nodeType":"VariableDeclaration","scope":1344,"src":"4579:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1338,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:4"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"operator","nameLocation":"4627:8:4","nodeType":"VariableDeclaration","scope":1344,"src":"4619:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1341,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:4"},"scope":1355,"src":"4558:79:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1345,"nodeType":"StructuredDocumentation","src":"4643:138:4","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1354,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:4","nodeType":"FunctionDefinition","parameters":{"id":1350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"owner","nameLocation":"4820:5:4","nodeType":"VariableDeclaration","scope":1354,"src":"4812:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1349,"mutability":"mutable","name":"operator","nameLocation":"4835:8:4","nodeType":"VariableDeclaration","scope":1354,"src":"4827:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:4"},"returnParameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1354,"src":"4868:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1351,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:4"},"scope":1355,"src":"4786:88:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1356,"src":"250:4626:4","usedErrors":[]}],"src":"108:4769:4"},"id":4},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1373]},"id":1374,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1357,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1358,"nodeType":"StructuredDocumentation","src":"141:152:5","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1373,"linearizedBaseContracts":[1373],"name":"IERC721Receiver","nameLocation":"304:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1359,"nodeType":"StructuredDocumentation","src":"326:493:5","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1372,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:5","nodeType":"FunctionDefinition","parameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"operator","nameLocation":"867:8:5","nodeType":"VariableDeclaration","scope":1372,"src":"859:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1363,"mutability":"mutable","name":"from","nameLocation":"893:4:5","nodeType":"VariableDeclaration","scope":1372,"src":"885:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1362,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1365,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:5","nodeType":"VariableDeclaration","scope":1372,"src":"907:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1364,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1367,"mutability":"mutable","name":"data","nameLocation":"947:4:5","nodeType":"VariableDeclaration","scope":1372,"src":"932:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1366,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:5"},"returnParameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"976:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1369,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:5"},"scope":1373,"src":"824:160:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1374,"src":"294:692:5","usedErrors":[]}],"src":"116:871:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[2017],"IERC721":[1355],"IERC721Metadata":[1400]},"id":1401,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1375,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1376,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1401,"sourceUnit":1356,"src":"137:24:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1378,"name":"IERC721","nameLocations":["326:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1355,"src":"326:7:6"},"id":1379,"nodeType":"InheritanceSpecifier","src":"326:7:6"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"163:133:6","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1400,"linearizedBaseContracts":[1400,1355,2017],"name":"IERC721Metadata","nameLocation":"307:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"340:58:6","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1385,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:6","nodeType":"FunctionDefinition","parameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"416:2:6"},"returnParameters":{"id":1384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1385,"src":"442:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1382,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:6"},"scope":1400,"src":"403:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1386,"nodeType":"StructuredDocumentation","src":"463:60:6","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1391,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:6","nodeType":"FunctionDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[],"src":"543:2:6"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"569:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1388,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:6"},"scope":1400,"src":"528:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"590:90:6","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1399,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:6","nodeType":"FunctionDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:6","nodeType":"VariableDeclaration","scope":1399,"src":"703:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:6"},"returnParameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1399,"src":"743:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1396,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:6"},"scope":1400,"src":"685:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1401,"src":"297:463:6","usedErrors":[]}],"src":"112:649:6"},"id":6},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1730]},"id":1731,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1402,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1403,"nodeType":"StructuredDocumentation","src":"126:67:7","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1730,"linearizedBaseContracts":[1730],"name":"Address","nameLocation":"202:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1417,"nodeType":"Block","src":"1478:254:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1411,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"1702:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:7","memberName":"code","nodeType":"MemberAccess","src":"1702:12:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:7","memberName":"length","nodeType":"MemberAccess","src":"1702:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1410,"id":1416,"nodeType":"Return","src":"1695:30:7"}]},"documentation":{"id":1404,"nodeType":"StructuredDocumentation","src":"216:1191:7","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1418,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:7","nodeType":"FunctionDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"mutability":"mutable","name":"account","nameLocation":"1440:7:7","nodeType":"VariableDeclaration","scope":1418,"src":"1432:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1405,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:7"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1418,"src":"1472:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1408,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:7"},"scope":1730,"src":"1412:320:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1451,"nodeType":"Block","src":"2718:241:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1429,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1730","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1730","typeString":"library Address"}],"id":1428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:7","typeDescriptions":{}}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:7","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1432,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"2761:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1426,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1436,"nodeType":"ExpressionStatement","src":"2728:73:7"},{"assignments":[1438,null],"declarations":[{"constant":false,"id":1438,"mutability":"mutable","name":"success","nameLocation":"2818:7:7","nodeType":"VariableDeclaration","scope":1451,"src":"2813:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1437,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1445,"initialValue":{"arguments":[{"hexValue":"","id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1439,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"2831:9:7","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:7","memberName":"call","nodeType":"MemberAccess","src":"2831:14:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1441,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"2853:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:7"},{"expression":{"arguments":[{"id":1447,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"2882:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1446,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1450,"nodeType":"ExpressionStatement","src":"2874:78:7"}]},"documentation":{"id":1419,"nodeType":"StructuredDocumentation","src":"1738:904:7","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1452,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:7","nodeType":"FunctionDefinition","parameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:7","nodeType":"VariableDeclaration","scope":1452,"src":"2666:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1420,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1423,"mutability":"mutable","name":"amount","nameLocation":"2701:6:7","nodeType":"VariableDeclaration","scope":1452,"src":"2693:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1422,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:7"},"returnParameters":{"id":1425,"nodeType":"ParameterList","parameters":[],"src":"2718:0:7"},"scope":1730,"src":"2647:312:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1469,"nodeType":"Block","src":"3790:96:7","statements":[{"expression":{"arguments":[{"id":1463,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"3829:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1464,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"3837:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1462,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1510,1554],"referencedDeclaration":1554,"src":"3807:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1461,"id":1468,"nodeType":"Return","src":"3800:79:7"}]},"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"2965:731:7","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1470,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:7","nodeType":"FunctionDefinition","parameters":{"id":1458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"target","nameLocation":"3731:6:7","nodeType":"VariableDeclaration","scope":1470,"src":"3723:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1454,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1457,"mutability":"mutable","name":"data","nameLocation":"3752:4:7","nodeType":"VariableDeclaration","scope":1470,"src":"3739:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1456,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:7"},"returnParameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1470,"src":"3776:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1459,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:7"},"scope":1730,"src":"3701:185:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1489,"nodeType":"Block","src":"4255:76:7","statements":[{"expression":{"arguments":[{"id":1483,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"4294:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1484,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"4302:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1486,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"4311:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1482,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1510,1554],"referencedDeclaration":1554,"src":"4272:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1481,"id":1488,"nodeType":"Return","src":"4265:59:7"}]},"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"3892:211:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1490,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:7","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1473,"mutability":"mutable","name":"target","nameLocation":"4147:6:7","nodeType":"VariableDeclaration","scope":1490,"src":"4139:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1475,"mutability":"mutable","name":"data","nameLocation":"4176:4:7","nodeType":"VariableDeclaration","scope":1490,"src":"4163:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1474,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1477,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:7","nodeType":"VariableDeclaration","scope":1490,"src":"4190:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1476,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:7"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1490,"src":"4241:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1479,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:7"},"scope":1730,"src":"4108:223:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"4806:111:7","statements":[{"expression":{"arguments":[{"id":1503,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"4845:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1504,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"4853:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"4859:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1502,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1510,1554],"referencedDeclaration":1554,"src":"4823:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1501,"id":1508,"nodeType":"Return","src":"4816:94:7"}]},"documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"4337:351:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:7","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"target","nameLocation":"4732:6:7","nodeType":"VariableDeclaration","scope":1510,"src":"4724:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1492,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"data","nameLocation":"4753:4:7","nodeType":"VariableDeclaration","scope":1510,"src":"4740:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1494,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"value","nameLocation":"4767:5:7","nodeType":"VariableDeclaration","scope":1510,"src":"4759:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1496,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:7"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1510,"src":"4792:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1499,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:7"},"scope":1730,"src":"4693:224:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1553,"nodeType":"Block","src":"5344:267:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1527,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1730","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1730","typeString":"library Address"}],"id":1526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1525,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:7","typeDescriptions":{}}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:7","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5387:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1524,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1534,"nodeType":"ExpressionStatement","src":"5354:81:7"},{"assignments":[1536,1538],"declarations":[{"constant":false,"id":1536,"mutability":"mutable","name":"success","nameLocation":"5451:7:7","nodeType":"VariableDeclaration","scope":1553,"src":"5446:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1535,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1538,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:7","nodeType":"VariableDeclaration","scope":1553,"src":"5460:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1537,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1545,"initialValue":{"arguments":[{"id":1543,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"5513:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1539,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"5487:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:7","memberName":"call","nodeType":"MemberAccess","src":"5487:11:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5506:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:7"},{"expression":{"arguments":[{"id":1547,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"5562:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1548,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"5570:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1549,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"5579:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1550,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"5591:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1546,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"5535:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1523,"id":1552,"nodeType":"Return","src":"5528:76:7"}]},"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"4923:237:7","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1554,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:7","nodeType":"FunctionDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"target","nameLocation":"5213:6:7","nodeType":"VariableDeclaration","scope":1554,"src":"5205:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1512,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1515,"mutability":"mutable","name":"data","nameLocation":"5242:4:7","nodeType":"VariableDeclaration","scope":1554,"src":"5229:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1514,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1517,"mutability":"mutable","name":"value","nameLocation":"5264:5:7","nodeType":"VariableDeclaration","scope":1554,"src":"5256:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1516,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:7","nodeType":"VariableDeclaration","scope":1554,"src":"5279:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1518,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:7"},"returnParameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1554,"src":"5330:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1521,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:7"},"scope":1730,"src":"5165:446:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1570,"nodeType":"Block","src":"5888:97:7","statements":[{"expression":{"arguments":[{"id":1565,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"5924:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1566,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"5932:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1564,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1571,1600],"referencedDeclaration":1600,"src":"5905:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1563,"id":1569,"nodeType":"Return","src":"5898:80:7"}]},"documentation":{"id":1555,"nodeType":"StructuredDocumentation","src":"5617:166:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1571,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:7","nodeType":"FunctionDefinition","parameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"target","nameLocation":"5824:6:7","nodeType":"VariableDeclaration","scope":1571,"src":"5816:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1556,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1559,"mutability":"mutable","name":"data","nameLocation":"5845:4:7","nodeType":"VariableDeclaration","scope":1571,"src":"5832:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1558,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:7"},"returnParameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1571,"src":"5874:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1561,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:7"},"scope":1730,"src":"5788:197:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1599,"nodeType":"Block","src":"6327:168:7","statements":[{"assignments":[1584,1586],"declarations":[{"constant":false,"id":1584,"mutability":"mutable","name":"success","nameLocation":"6343:7:7","nodeType":"VariableDeclaration","scope":1599,"src":"6338:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1583,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:7","nodeType":"VariableDeclaration","scope":1599,"src":"6352:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1585,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1591,"initialValue":{"arguments":[{"id":1589,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"6397:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1587,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"6379:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:7","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:7","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:7"},{"expression":{"arguments":[{"id":1593,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"6446:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1594,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6454:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1595,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"6463:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1596,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"6475:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1592,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"6419:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1582,"id":1598,"nodeType":"Return","src":"6412:76:7"}]},"documentation":{"id":1572,"nodeType":"StructuredDocumentation","src":"5991:173:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1600,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:7","nodeType":"FunctionDefinition","parameters":{"id":1579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"target","nameLocation":"6214:6:7","nodeType":"VariableDeclaration","scope":1600,"src":"6206:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1573,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1576,"mutability":"mutable","name":"data","nameLocation":"6243:4:7","nodeType":"VariableDeclaration","scope":1600,"src":"6230:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1575,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1578,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:7","nodeType":"VariableDeclaration","scope":1600,"src":"6257:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1577,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:7"},"returnParameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1600,"src":"6313:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1580,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:7"},"scope":1730,"src":"6169:326:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1616,"nodeType":"Block","src":"6771:101:7","statements":[{"expression":{"arguments":[{"id":1611,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"6809:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1612,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"6817:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1610,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1617,1646],"referencedDeclaration":1646,"src":"6788:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1609,"id":1615,"nodeType":"Return","src":"6781:84:7"}]},"documentation":{"id":1601,"nodeType":"StructuredDocumentation","src":"6501:168:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1617,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:7","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"target","nameLocation":"6712:6:7","nodeType":"VariableDeclaration","scope":1617,"src":"6704:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1602,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1605,"mutability":"mutable","name":"data","nameLocation":"6733:4:7","nodeType":"VariableDeclaration","scope":1617,"src":"6720:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1604,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:7"},"returnParameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1617,"src":"6757:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1607,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:7"},"scope":1730,"src":"6674:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1645,"nodeType":"Block","src":"7213:170:7","statements":[{"assignments":[1630,1632],"declarations":[{"constant":false,"id":1630,"mutability":"mutable","name":"success","nameLocation":"7229:7:7","nodeType":"VariableDeclaration","scope":1645,"src":"7224:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1629,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1632,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:7","nodeType":"VariableDeclaration","scope":1645,"src":"7238:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1631,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1637,"initialValue":{"arguments":[{"id":1635,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"7285:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1633,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"7265:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:7","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:7","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:7"},{"expression":{"arguments":[{"id":1639,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"7334:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1640,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"7342:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1641,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"7351:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1642,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"7363:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1638,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"7307:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1628,"id":1644,"nodeType":"Return","src":"7300:76:7"}]},"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"6878:175:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1646,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:7","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"mutability":"mutable","name":"target","nameLocation":"7105:6:7","nodeType":"VariableDeclaration","scope":1646,"src":"7097:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1619,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1622,"mutability":"mutable","name":"data","nameLocation":"7134:4:7","nodeType":"VariableDeclaration","scope":1646,"src":"7121:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1621,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:7","nodeType":"VariableDeclaration","scope":1646,"src":"7148:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1623,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:7"},"returnParameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1646,"src":"7199:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1626,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:7"},"scope":1730,"src":"7058:325:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1684,"nodeType":"Block","src":"7865:434:7","statements":[{"condition":{"id":1660,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"7879:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1682,"nodeType":"Block","src":"8235:58:7","statements":[{"expression":{"arguments":[{"id":1678,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"8257:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1679,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"8269:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1677,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"8249:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1681,"nodeType":"ExpressionStatement","src":"8249:33:7"}]},"id":1683,"nodeType":"IfStatement","src":"7875:418:7","trueBody":{"id":1676,"nodeType":"Block","src":"7888:341:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1661,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"7906:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:7","memberName":"length","nodeType":"MemberAccess","src":"7906:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1673,"nodeType":"IfStatement","src":"7902:286:7","trueBody":{"id":1672,"nodeType":"Block","src":"7930:258:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1667,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"8132:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1666,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"8121:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1665,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1671,"nodeType":"ExpressionStatement","src":"8113:60:7"}]}},{"expression":{"id":1674,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"8208:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1659,"id":1675,"nodeType":"Return","src":"8201:17:7"}]}}]},"documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"7389:277:7","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1685,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:7","nodeType":"FunctionDefinition","parameters":{"id":1656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"target","nameLocation":"7724:6:7","nodeType":"VariableDeclaration","scope":1685,"src":"7716:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"success","nameLocation":"7745:7:7","nodeType":"VariableDeclaration","scope":1685,"src":"7740:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1650,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:7","nodeType":"VariableDeclaration","scope":1685,"src":"7762:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1652,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1655,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:7","nodeType":"VariableDeclaration","scope":1685,"src":"7795:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1654,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:7"},"returnParameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1685,"src":"7851:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1657,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:7"},"scope":1730,"src":"7671:628:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1708,"nodeType":"Block","src":"8680:135:7","statements":[{"condition":{"id":1697,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"8694:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1706,"nodeType":"Block","src":"8751:58:7","statements":[{"expression":{"arguments":[{"id":1702,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"8773:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1703,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"8785:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1701,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"8765:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1705,"nodeType":"ExpressionStatement","src":"8765:33:7"}]},"id":1707,"nodeType":"IfStatement","src":"8690:119:7","trueBody":{"id":1700,"nodeType":"Block","src":"8703:42:7","statements":[{"expression":{"id":1698,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"8724:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1696,"id":1699,"nodeType":"Return","src":"8717:17:7"}]}}]},"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"8305:210:7","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1709,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:7","nodeType":"FunctionDefinition","parameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"success","nameLocation":"8560:7:7","nodeType":"VariableDeclaration","scope":1709,"src":"8555:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1687,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1690,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:7","nodeType":"VariableDeclaration","scope":1709,"src":"8577:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1689,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:7","nodeType":"VariableDeclaration","scope":1709,"src":"8610:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1691,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:7"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1709,"src":"8666:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1694,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:7"},"scope":1730,"src":"8520:295:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1728,"nodeType":"Block","src":"8904:457:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1716,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"8980:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:7","memberName":"length","nodeType":"MemberAccess","src":"8980:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1726,"nodeType":"Block","src":"9310:45:7","statements":[{"expression":{"arguments":[{"id":1723,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"9331:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1722,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1725,"nodeType":"ExpressionStatement","src":"9324:20:7"}]},"id":1727,"nodeType":"IfStatement","src":"8976:379:7","trueBody":{"id":1721,"nodeType":"Block","src":"9003:301:7","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:7","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:7","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:7"},"nodeType":"YulFunctionCall","src":"9202:17:7"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:7","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:7"},"nodeType":"YulFunctionCall","src":"9243:19:7"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:7"},"nodeType":"YulFunctionCall","src":"9236:44:7"},"nodeType":"YulExpressionStatement","src":"9236:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1711,"isOffset":false,"isSlot":false,"src":"9208:10:7","valueSize":1},{"declaration":1711,"isOffset":false,"isSlot":false,"src":"9251:10:7","valueSize":1}],"id":1720,"nodeType":"InlineAssembly","src":"9152:142:7"}]}}]},"id":1729,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:7","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:7","nodeType":"VariableDeclaration","scope":1729,"src":"8838:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1710,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1713,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:7","nodeType":"VariableDeclaration","scope":1729,"src":"8863:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1712,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:7"},"returnParameters":{"id":1715,"nodeType":"ParameterList","parameters":[],"src":"8904:0:7"},"scope":1730,"src":"8821:540:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1731,"src":"194:9169:7","usedErrors":[]}],"src":"101:9263:7"},"id":7},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1752]},"id":1753,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1732,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:8"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1733,"nodeType":"StructuredDocumentation","src":"111:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1752,"linearizedBaseContracts":[1752],"name":"Context","nameLocation":"626:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1741,"nodeType":"Block","src":"702:34:8","statements":[{"expression":{"expression":{"id":1738,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:8","memberName":"sender","nodeType":"MemberAccess","src":"719:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1737,"id":1740,"nodeType":"Return","src":"712:17:8"}]},"id":1742,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:8","nodeType":"FunctionDefinition","parameters":{"id":1734,"nodeType":"ParameterList","parameters":[],"src":"659:2:8"},"returnParameters":{"id":1737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1742,"src":"693:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:8"},"scope":1752,"src":"640:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1750,"nodeType":"Block","src":"809:32:8","statements":[{"expression":{"expression":{"id":1747,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:8","memberName":"data","nodeType":"MemberAccess","src":"826:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1746,"id":1749,"nodeType":"Return","src":"819:15:8"}]},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:8","nodeType":"FunctionDefinition","parameters":{"id":1743,"nodeType":"ParameterList","parameters":[],"src":"759:2:8"},"returnParameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1751,"src":"793:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1744,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:8"},"scope":1752,"src":"742:99:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1753,"src":"608:235:8","usedErrors":[]}],"src":"86:758:8"},"id":8},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2883],"SignedMath":[2988],"Strings":[1981]},"id":1982,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1754,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1755,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1982,"sourceUnit":2884,"src":"126:25:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1982,"sourceUnit":2989,"src":"152:31:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1757,"nodeType":"StructuredDocumentation","src":"185:34:9","text":" @dev String operations."},"fullyImplemented":true,"id":1981,"linearizedBaseContracts":[1981],"name":"Strings","nameLocation":"228:7:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1760,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:9","nodeType":"VariableDeclaration","scope":1981,"src":"242:54:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1758,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1763,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:9","nodeType":"VariableDeclaration","scope":1981,"src":"302:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1761,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:9","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1810,"nodeType":"Block","src":"518:625:9","statements":[{"id":1809,"nodeType":"UncheckedBlock","src":"528:609:9","statements":[{"assignments":[1772],"declarations":[{"constant":false,"id":1772,"mutability":"mutable","name":"length","nameLocation":"560:6:9","nodeType":"VariableDeclaration","scope":1809,"src":"552:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1779,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"580:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1773,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"569:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2883_$","typeString":"type(library Math)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:9","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2720,"src":"569:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:9"},{"assignments":[1781],"declarations":[{"constant":false,"id":1781,"mutability":"mutable","name":"buffer","nameLocation":"618:6:9","nodeType":"VariableDeclaration","scope":1809,"src":"604:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1780,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1786,"initialValue":{"arguments":[{"id":1784,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"638:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1782,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:9"},{"assignments":[1788],"declarations":[{"constant":false,"id":1788,"mutability":"mutable","name":"ptr","nameLocation":"667:3:9","nodeType":"VariableDeclaration","scope":1809,"src":"659:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1789,"nodeType":"VariableDeclarationStatement","src":"659:11:9"},{"AST":{"nodeType":"YulBlock","src":"740:67:9","statements":[{"nodeType":"YulAssignment","src":"758:35:9","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:9","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:9"},"nodeType":"YulFunctionCall","src":"777:15:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:9"},"nodeType":"YulFunctionCall","src":"765:28:9"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1781,"isOffset":false,"isSlot":false,"src":"769:6:9","valueSize":1},{"declaration":1772,"isOffset":false,"isSlot":false,"src":"785:6:9","valueSize":1},{"declaration":1788,"isOffset":false,"isSlot":false,"src":"758:3:9","valueSize":1}],"id":1790,"nodeType":"InlineAssembly","src":"731:76:9"},{"body":{"id":1805,"nodeType":"Block","src":"833:267:9","statements":[{"expression":{"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:9","subExpression":{"id":1792,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"851:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1794,"nodeType":"ExpressionStatement","src":"851:5:9"},{"AST":{"nodeType":"YulBlock","src":"934:84:9","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:9","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:9"},"nodeType":"YulFunctionCall","src":"974:14:9"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:9"},"nodeType":"YulFunctionCall","src":"969:30:9"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:9"},"nodeType":"YulFunctionCall","src":"956:44:9"},"nodeType":"YulExpressionStatement","src":"956:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1760,"isOffset":false,"isSlot":false,"src":"990:8:9","valueSize":1},{"declaration":1788,"isOffset":false,"isSlot":false,"src":"964:3:9","valueSize":1},{"declaration":1766,"isOffset":false,"isSlot":false,"src":"978:5:9","valueSize":1}],"id":1795,"nodeType":"InlineAssembly","src":"925:93:9"},{"expression":{"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1035:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1799,"nodeType":"ExpressionStatement","src":"1035:11:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1068:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1804,"nodeType":"IfStatement","src":"1064:21:9","trueBody":{"id":1803,"nodeType":"Break","src":"1080:5:9"}}]},"condition":{"hexValue":"74727565","id":1791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1806,"nodeType":"WhileStatement","src":"820:280:9"},{"expression":{"id":1807,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"1120:6:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1770,"id":1808,"nodeType":"Return","src":"1113:13:9"}]}]},"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"352:90:9","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1811,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:9","nodeType":"FunctionDefinition","parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"value","nameLocation":"473:5:9","nodeType":"VariableDeclaration","scope":1811,"src":"465:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:9"},"returnParameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1811,"src":"503:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1768,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:9"},"scope":1981,"src":"447:696:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1838,"nodeType":"Block","src":"1313:103:9","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1354:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:9","trueExpression":{"hexValue":"2d","id":1826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1400:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1830,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"1385:10:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2988_$","typeString":"type(library SignedMath)"}},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:9","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2987,"src":"1385:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1829,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1811,1839],"referencedDeclaration":1811,"src":"1376:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1821,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1819,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:9","typeDescriptions":{}}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1818,"id":1837,"nodeType":"Return","src":"1323:86:9"}]},"documentation":{"id":1812,"nodeType":"StructuredDocumentation","src":"1149:89:9","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1839,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:9","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1814,"mutability":"mutable","name":"value","nameLocation":"1268:5:9","nodeType":"VariableDeclaration","scope":1839,"src":"1261:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1813,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:9"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1839,"src":"1298:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1816,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:9"},"scope":1981,"src":"1243:173:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1858,"nodeType":"Block","src":"1595:100:9","statements":[{"id":1857,"nodeType":"UncheckedBlock","src":"1605:84:9","statements":[{"expression":{"arguments":[{"id":1848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1648:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1667:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1849,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"1655:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2883_$","typeString":"type(library Math)"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:9","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2843,"src":"1655:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1847,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1859,1935,1955],"referencedDeclaration":1935,"src":"1636:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1846,"id":1856,"nodeType":"Return","src":"1629:49:9"}]}]},"documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"1422:94:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1859,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:9","nodeType":"FunctionDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"value","nameLocation":"1550:5:9","nodeType":"VariableDeclaration","scope":1859,"src":"1542:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:9"},"returnParameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1859,"src":"1580:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1844,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:9"},"scope":1981,"src":"1521:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1934,"nodeType":"Block","src":"1908:347:9","statements":[{"assignments":[1870],"declarations":[{"constant":false,"id":1870,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:9","nodeType":"VariableDeclaration","scope":1934,"src":"1918:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1869,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1879,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1874,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"1954:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1871,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:9"},{"expression":{"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1880,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"1975:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1882,"indexExpression":{"hexValue":"30","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1885,"nodeType":"ExpressionStatement","src":"1975:15:9"},{"expression":{"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1886,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"2000:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1888,"indexExpression":{"hexValue":"31","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1891,"nodeType":"ExpressionStatement","src":"2000:15:9"},{"body":{"id":1920,"nodeType":"Block","src":"2070:83:9","statements":[{"expression":{"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1906,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"2084:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1908,"indexExpression":{"id":1907,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"2091:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1909,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2096:8:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1913,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2105:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:9","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1915,"nodeType":"ExpressionStatement","src":"2084:33:9"},{"expression":{"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2131:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1919,"nodeType":"ExpressionStatement","src":"2131:11:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1900,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"2058:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1921,"initializationExpression":{"assignments":[1893],"declarations":[{"constant":false,"id":1893,"mutability":"mutable","name":"i","nameLocation":"2038:1:9","nodeType":"VariableDeclaration","scope":1921,"src":"2030:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1899,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1895,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2046:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:9"},"loopExpression":{"expression":{"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:9","subExpression":{"id":1903,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"2067:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1905,"nodeType":"ExpressionStatement","src":"2065:3:9"},"nodeType":"ForStatement","src":"2025:128:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2170:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1922,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1928,"nodeType":"ExpressionStatement","src":"2162:55:9"},{"expression":{"arguments":[{"id":1931,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"2241:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1929,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:9","typeDescriptions":{}}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1868,"id":1933,"nodeType":"Return","src":"2227:21:9"}]},"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"1701:112:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1935,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:9","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"value","nameLocation":"1847:5:9","nodeType":"VariableDeclaration","scope":1935,"src":"1839:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"length","nameLocation":"1862:6:9","nodeType":"VariableDeclaration","scope":1935,"src":"1854:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:9"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1935,"src":"1893:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1866,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:9"},"scope":1981,"src":"1818:437:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1954,"nodeType":"Block","src":"2480:76:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1948,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"2525:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1946,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:9","typeDescriptions":{}}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:9","typeDescriptions":{}}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1951,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"2533:15:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1943,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1859,1935,1955],"referencedDeclaration":1935,"src":"2497:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1942,"id":1953,"nodeType":"Return","src":"2490:59:9"}]},"documentation":{"id":1936,"nodeType":"StructuredDocumentation","src":"2261:141:9","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1955,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:9","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"addr","nameLocation":"2436:4:9","nodeType":"VariableDeclaration","scope":1955,"src":"2428:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1937,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:9"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1955,"src":"2465:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1940,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:9"},"scope":1981,"src":"2407:149:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1979,"nodeType":"Block","src":"2711:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1968,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"2744:1:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1966,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:9","typeDescriptions":{}}},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1965,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1974,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"2767:1:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1972,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:9","typeDescriptions":{}}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1971,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1964,"id":1978,"nodeType":"Return","src":"2721:49:9"}]},"documentation":{"id":1956,"nodeType":"StructuredDocumentation","src":"2562:66:9","text":" @dev Returns true if the two strings are equal."},"id":1980,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:9","nodeType":"FunctionDefinition","parameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"a","nameLocation":"2662:1:9","nodeType":"VariableDeclaration","scope":1980,"src":"2648:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1957,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1960,"mutability":"mutable","name":"b","nameLocation":"2679:1:9","nodeType":"VariableDeclaration","scope":1980,"src":"2665:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1959,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:9"},"returnParameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1980,"src":"2705:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1962,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:9"},"scope":1981,"src":"2633:144:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1982,"src":"220:2559:9","usedErrors":[]}],"src":"101:2679:9"},"id":9},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2005],"IERC165":[2017]},"id":2006,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1983,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1984,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2006,"sourceUnit":2018,"src":"124:23:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1986,"name":"IERC165","nameLocations":["754:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"754:7:10"},"id":1987,"nodeType":"InheritanceSpecifier","src":"754:7:10"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1985,"nodeType":"StructuredDocumentation","src":"149:576:10","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2005,"linearizedBaseContracts":[2005,2017],"name":"ERC165","nameLocation":"744:6:10","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2016],"body":{"id":2003,"nodeType":"Block","src":"920:64:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1996,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"937:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1998,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"957:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}],"id":1997,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2017","typeString":"type(contract IERC165)"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1995,"id":2002,"nodeType":"Return","src":"930:47:10"}]},"documentation":{"id":1988,"nodeType":"StructuredDocumentation","src":"768:56:10","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2004,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:10","nodeType":"FunctionDefinition","overrides":{"id":1992,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:10"},"parameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:10","nodeType":"VariableDeclaration","scope":2004,"src":"856:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1989,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:10"},"returnParameters":{"id":1995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2004,"src":"914:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1993,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:10"},"scope":2005,"src":"829:155:10","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2006,"src":"726:260:10","usedErrors":[]}],"src":"99:888:10"},"id":10},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2017]},"id":2018,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2007,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2008,"nodeType":"StructuredDocumentation","src":"125:279:11","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2017,"linearizedBaseContracts":[2017],"name":"IERC165","nameLocation":"415:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2009,"nodeType":"StructuredDocumentation","src":"429:340:11","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2016,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:11","nodeType":"FunctionDefinition","parameters":{"id":2012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2011,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:11","nodeType":"VariableDeclaration","scope":2016,"src":"801:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2010,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:11"},"returnParameters":{"id":2015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2016,"src":"844:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2013,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:11"},"scope":2017,"src":"774:76:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2018,"src":"405:447:11","usedErrors":[]}],"src":"100:753:11"},"id":11},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2883]},"id":2884,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2019,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2020,"nodeType":"StructuredDocumentation","src":"128:73:12","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2883,"linearizedBaseContracts":[2883],"name":"Math","nameLocation":"210:4:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2024,"members":[{"id":2021,"name":"Down","nameLocation":"245:4:12","nodeType":"EnumValue","src":"245:4:12"},{"id":2022,"name":"Up","nameLocation":"287:2:12","nodeType":"EnumValue","src":"287:2:12"},{"id":2023,"name":"Zero","nameLocation":"318:4:12","nodeType":"EnumValue","src":"318:4:12"}],"name":"Rounding","nameLocation":"226:8:12","nodeType":"EnumDefinition","src":"221:122:12"},{"body":{"id":2041,"nodeType":"Block","src":"480:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2034,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"497:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2035,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"501:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2038,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"509:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:12","trueExpression":{"id":2037,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"505:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2033,"id":2040,"nodeType":"Return","src":"490:20:12"}]},"documentation":{"id":2025,"nodeType":"StructuredDocumentation","src":"349:59:12","text":" @dev Returns the largest of two numbers."},"id":2042,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:12","nodeType":"FunctionDefinition","parameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2027,"mutability":"mutable","name":"a","nameLocation":"434:1:12","nodeType":"VariableDeclaration","scope":2042,"src":"426:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2029,"mutability":"mutable","name":"b","nameLocation":"445:1:12","nodeType":"VariableDeclaration","scope":2042,"src":"437:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:12"},"returnParameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2042,"src":"471:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:12"},"scope":2883,"src":"413:104:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2059,"nodeType":"Block","src":"655:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2052,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"672:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2053,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"676:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2056,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"684:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:12","trueExpression":{"id":2055,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"680:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2051,"id":2058,"nodeType":"Return","src":"665:20:12"}]},"documentation":{"id":2043,"nodeType":"StructuredDocumentation","src":"523:60:12","text":" @dev Returns the smallest of two numbers."},"id":2060,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:12","nodeType":"FunctionDefinition","parameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2045,"mutability":"mutable","name":"a","nameLocation":"609:1:12","nodeType":"VariableDeclaration","scope":2060,"src":"601:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2044,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"b","nameLocation":"620:1:12","nodeType":"VariableDeclaration","scope":2060,"src":"612:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:12"},"returnParameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2060,"src":"646:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2049,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:12"},"scope":2883,"src":"588:104:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2082,"nodeType":"Block","src":"876:82:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2070,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"931:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2071,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"935:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2074,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"941:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2075,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"945:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2077,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2069,"id":2081,"nodeType":"Return","src":"923:28:12"}]},"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"698:102:12","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2083,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:12","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"a","nameLocation":"830:1:12","nodeType":"VariableDeclaration","scope":2083,"src":"822:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"b","nameLocation":"841:1:12","nodeType":"VariableDeclaration","scope":2083,"src":"833:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2064,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:12"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2083,"src":"867:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:12"},"scope":2883,"src":"805:153:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2107,"nodeType":"Block","src":"1228:123:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"1316:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"1330:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2100,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2101,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"1339:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:12","trueExpression":{"hexValue":"30","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2092,"id":2106,"nodeType":"Return","src":"1309:35:12"}]},"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"964:188:12","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2108,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:12","nodeType":"FunctionDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"a","nameLocation":"1182:1:12","nodeType":"VariableDeclaration","scope":2108,"src":"1174:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2085,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2088,"mutability":"mutable","name":"b","nameLocation":"1193:1:12","nodeType":"VariableDeclaration","scope":2108,"src":"1185:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:12"},"returnParameters":{"id":2092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2108,"src":"1219:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2090,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:12"},"scope":2883,"src":"1157:194:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2230,"nodeType":"Block","src":"1765:4115:12","statements":[{"id":2229,"nodeType":"UncheckedBlock","src":"1775:4099:12","statements":[{"assignments":[2121],"declarations":[{"constant":false,"id":2121,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:12","nodeType":"VariableDeclaration","scope":2229,"src":"2096:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2122,"nodeType":"VariableDeclarationStatement","src":"2096:13:12"},{"assignments":[2124],"declarations":[{"constant":false,"id":2124,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:12","nodeType":"VariableDeclaration","scope":2229,"src":"2168:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2125,"nodeType":"VariableDeclarationStatement","src":"2168:13:12"},{"AST":{"nodeType":"YulBlock","src":"2248:157:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:12"},"nodeType":"YulFunctionCall","src":"2289:6:12"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:12"},"nodeType":"YulFunctionCall","src":"2276:20:12"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:12","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:12"},"nodeType":"YulFunctionCall","src":"2322:9:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:12"}]},{"nodeType":"YulAssignment","src":"2348:43:12","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:12"},"nodeType":"YulFunctionCall","src":"2361:14:12"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:12"},"nodeType":"YulFunctionCall","src":"2377:13:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:12"},"nodeType":"YulFunctionCall","src":"2357:34:12"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2121,"isOffset":false,"isSlot":false,"src":"2313:5:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"2369:5:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"2384:5:12","valueSize":1},{"declaration":2124,"isOffset":false,"isSlot":false,"src":"2348:5:12","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"2283:1:12","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"2326:1:12","valueSize":1},{"declaration":2113,"isOffset":false,"isSlot":false,"src":"2286:1:12","valueSize":1},{"declaration":2113,"isOffset":false,"isSlot":false,"src":"2329:1:12","valueSize":1}],"id":2126,"nodeType":"InlineAssembly","src":"2239:166:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2486:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2135,"nodeType":"IfStatement","src":"2482:368:12","trueBody":{"id":2134,"nodeType":"Block","src":"2498:352:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2130,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"2816:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2131,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"2824:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2119,"id":2133,"nodeType":"Return","src":"2809:26:12"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"2960:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2138,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2974:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2136,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2142,"nodeType":"ExpressionStatement","src":"2952:53:12"},{"assignments":[2144],"declarations":[{"constant":false,"id":2144,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:12","nodeType":"VariableDeclaration","scope":2229,"src":"3261:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2145,"nodeType":"VariableDeclarationStatement","src":"3261:17:12"},{"AST":{"nodeType":"YulBlock","src":"3301:291:12","statements":[{"nodeType":"YulAssignment","src":"3370:38:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:12"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:12"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:12"},"nodeType":"YulFunctionCall","src":"3383:25:12"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:12"}]},{"nodeType":"YulAssignment","src":"3490:41:12","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:12"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:12"},"nodeType":"YulFunctionCall","src":"3510:20:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:12"},"nodeType":"YulFunctionCall","src":"3499:32:12"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:12"}]},{"nodeType":"YulAssignment","src":"3548:30:12","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:12"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:12"},"nodeType":"YulFunctionCall","src":"3557:21:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2115,"isOffset":false,"isSlot":false,"src":"3396:11:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"3524:5:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"3548:5:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"3561:5:12","valueSize":1},{"declaration":2124,"isOffset":false,"isSlot":false,"src":"3490:5:12","valueSize":1},{"declaration":2124,"isOffset":false,"isSlot":false,"src":"3503:5:12","valueSize":1},{"declaration":2144,"isOffset":false,"isSlot":false,"src":"3370:9:12","valueSize":1},{"declaration":2144,"isOffset":false,"isSlot":false,"src":"3513:9:12","valueSize":1},{"declaration":2144,"isOffset":false,"isSlot":false,"src":"3568:9:12","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"3390:1:12","valueSize":1},{"declaration":2113,"isOffset":false,"isSlot":false,"src":"3393:1:12","valueSize":1}],"id":2146,"nodeType":"InlineAssembly","src":"3292:300:12"},{"assignments":[2148],"declarations":[{"constant":false,"id":2148,"mutability":"mutable","name":"twos","nameLocation":"3907:4:12","nodeType":"VariableDeclaration","scope":2229,"src":"3899:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2147,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2156,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"3914:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:12","subExpression":{"id":2150,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"3930:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:12"},{"AST":{"nodeType":"YulBlock","src":"3969:362:12","statements":[{"nodeType":"YulAssignment","src":"4034:37:12","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:12"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:12"},"nodeType":"YulFunctionCall","src":"4049:22:12"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:12"}]},{"nodeType":"YulAssignment","src":"4138:25:12","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:12"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:12"},"nodeType":"YulFunctionCall","src":"4147:16:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:12"}]},{"nodeType":"YulAssignment","src":"4278:39:12","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:12","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:12"},"nodeType":"YulFunctionCall","src":"4294:12:12"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:12"},"nodeType":"YulFunctionCall","src":"4290:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:12"},"nodeType":"YulFunctionCall","src":"4286:31:12"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2115,"isOffset":false,"isSlot":false,"src":"4034:11:12","valueSize":1},{"declaration":2115,"isOffset":false,"isSlot":false,"src":"4053:11:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"4138:5:12","valueSize":1},{"declaration":2121,"isOffset":false,"isSlot":false,"src":"4151:5:12","valueSize":1},{"declaration":2148,"isOffset":false,"isSlot":false,"src":"4066:4:12","valueSize":1},{"declaration":2148,"isOffset":false,"isSlot":false,"src":"4158:4:12","valueSize":1},{"declaration":2148,"isOffset":false,"isSlot":false,"src":"4278:4:12","valueSize":1},{"declaration":2148,"isOffset":false,"isSlot":false,"src":"4301:4:12","valueSize":1},{"declaration":2148,"isOffset":false,"isSlot":false,"src":"4308:4:12","valueSize":1}],"id":2157,"nodeType":"InlineAssembly","src":"3960:371:12"},{"expression":{"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"4397:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"4406:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2160,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"4414:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"nodeType":"ExpressionStatement","src":"4397:21:12"},{"assignments":[2165],"declarations":[{"constant":false,"id":2165,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:12","nodeType":"VariableDeclaration","scope":2229,"src":"4736:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2172,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2167,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"4759:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2169,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:12"},{"expression":{"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"4992:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5007:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2176,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5021:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"nodeType":"ExpressionStatement","src":"4992:36:12"},{"expression":{"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2181,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5061:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2183,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5076:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2184,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5090:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"nodeType":"ExpressionStatement","src":"5061:36:12"},{"expression":{"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2189,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5131:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5146:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2192,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5160:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2196,"nodeType":"ExpressionStatement","src":"5131:36:12"},{"expression":{"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2197,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5201:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2199,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5216:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2200,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5230:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2204,"nodeType":"ExpressionStatement","src":"5201:36:12"},{"expression":{"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2205,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5271:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2207,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5286:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2208,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5300:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2212,"nodeType":"ExpressionStatement","src":"5271:36:12"},{"expression":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2213,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5342:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2215,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5357:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2216,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5371:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2220,"nodeType":"ExpressionStatement","src":"5342:36:12"},{"expression":{"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5812:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2222,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"5821:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2223,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5829:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2226,"nodeType":"ExpressionStatement","src":"5812:24:12"},{"expression":{"id":2227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5857:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2119,"id":2228,"nodeType":"Return","src":"5850:13:12"}]}]},"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"1357:305:12","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2231,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:12","nodeType":"FunctionDefinition","parameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"x","nameLocation":"1691:1:12","nodeType":"VariableDeclaration","scope":2231,"src":"1683:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2113,"mutability":"mutable","name":"y","nameLocation":"1702:1:12","nodeType":"VariableDeclaration","scope":2231,"src":"1694:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2115,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:12","nodeType":"VariableDeclaration","scope":2231,"src":"1705:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:12"},"returnParameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2118,"mutability":"mutable","name":"result","nameLocation":"1757:6:12","nodeType":"VariableDeclaration","scope":2231,"src":"1749:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:12"},"scope":2883,"src":"1667:4213:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2274,"nodeType":"Block","src":"6122:189:12","statements":[{"assignments":[2247],"declarations":[{"constant":false,"id":2247,"mutability":"mutable","name":"result","nameLocation":"6140:6:12","nodeType":"VariableDeclaration","scope":2274,"src":"6132:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2246,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2253,"initialValue":{"arguments":[{"id":2249,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"6156:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2250,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"6159:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2251,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"6162:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2248,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2231,2275],"referencedDeclaration":2231,"src":"6149:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"6188:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2255,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"6200:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2024_$","typeString":"type(enum Math.Rounding)"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2022,"src":"6200:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"src":"6188:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2259,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"6222:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2260,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"6225:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2261,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"6228:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2258,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:12","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2271,"nodeType":"IfStatement","src":"6184:98:12","trueBody":{"id":2270,"nodeType":"Block","src":"6246:36:12","statements":[{"expression":{"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"6260:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2269,"nodeType":"ExpressionStatement","src":"6260:11:12"}]}},{"expression":{"id":2272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"6298:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2245,"id":2273,"nodeType":"Return","src":"6291:13:12"}]},"documentation":{"id":2232,"nodeType":"StructuredDocumentation","src":"5886:121:12","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2275,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:12","nodeType":"FunctionDefinition","parameters":{"id":2242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2234,"mutability":"mutable","name":"x","nameLocation":"6036:1:12","nodeType":"VariableDeclaration","scope":2275,"src":"6028:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2233,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2236,"mutability":"mutable","name":"y","nameLocation":"6047:1:12","nodeType":"VariableDeclaration","scope":2275,"src":"6039:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2235,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2238,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:12","nodeType":"VariableDeclaration","scope":2275,"src":"6050:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2237,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2241,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:12","nodeType":"VariableDeclaration","scope":2275,"src":"6071:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"typeName":{"id":2240,"nodeType":"UserDefinedTypeName","pathNode":{"id":2239,"name":"Rounding","nameLocations":["6071:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"6071:8:12"},"referencedDeclaration":2024,"src":"6071:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:12"},"returnParameters":{"id":2245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2275,"src":"6113:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2243,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:12"},"scope":2883,"src":"6012:299:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2386,"nodeType":"Block","src":"6587:1585:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"6601:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2289,"nodeType":"IfStatement","src":"6597:45:12","trueBody":{"id":2288,"nodeType":"Block","src":"6609:33:12","statements":[{"expression":{"hexValue":"30","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2282,"id":2287,"nodeType":"Return","src":"6623:8:12"}]}},{"assignments":[2291],"declarations":[{"constant":false,"id":2291,"mutability":"mutable","name":"result","nameLocation":"7329:6:12","nodeType":"VariableDeclaration","scope":2386,"src":"7321:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2290,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2300,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2294,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7349:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2293,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2555,2591],"referencedDeclaration":2555,"src":"7344:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:12"},{"id":2385,"nodeType":"UncheckedBlock","src":"7758:408:12","statements":[{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2301,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7782:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7792:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2303,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7801:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2304,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7805:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"7782:35:12"},{"expression":{"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7831:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7841:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7850:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2315,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7854:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2322,"nodeType":"ExpressionStatement","src":"7831:35:12"},{"expression":{"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7880:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7890:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2325,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7899:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7903:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2333,"nodeType":"ExpressionStatement","src":"7880:35:12"},{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2334,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7929:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7939:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7948:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7952:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2340,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"7929:35:12"},{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7978:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"7988:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7997:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8001:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"7978:35:12"},{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8027:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8037:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"8046:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8050:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"8027:35:12"},{"expression":{"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2367,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8076:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8086:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2369,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"8095:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8099:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2373,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2377,"nodeType":"ExpressionStatement","src":"8076:35:12"},{"expression":{"arguments":[{"id":2379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8136:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2380,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"8144:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"8148:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2378,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8132:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2282,"id":2384,"nodeType":"Return","src":"8125:30:12"}]}]},"documentation":{"id":2276,"nodeType":"StructuredDocumentation","src":"6317:208:12","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2387,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:12","nodeType":"FunctionDefinition","parameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"a","nameLocation":"6552:1:12","nodeType":"VariableDeclaration","scope":2387,"src":"6544:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:12"},"returnParameters":{"id":2282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2387,"src":"6578:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:12"},"scope":2883,"src":"6530:1642:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2422,"nodeType":"Block","src":"8348:161:12","statements":[{"id":2421,"nodeType":"UncheckedBlock","src":"8358:145:12","statements":[{"assignments":[2399],"declarations":[{"constant":false,"id":2399,"mutability":"mutable","name":"result","nameLocation":"8390:6:12","nodeType":"VariableDeclaration","scope":2421,"src":"8382:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2398,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2403,"initialValue":{"arguments":[{"id":2401,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8404:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2400,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2387,2423],"referencedDeclaration":2387,"src":"8399:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"8427:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2405,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"8437:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2406,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"8449:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2024_$","typeString":"type(enum Math.Rounding)"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2022,"src":"8449:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"src":"8437:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2409,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"8464:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2410,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"8473:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2412,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8482:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:12","trueExpression":{"hexValue":"31","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2418,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2397,"id":2420,"nodeType":"Return","src":"8420:72:12"}]}]},"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"8178:89:12","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2423,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:12","nodeType":"FunctionDefinition","parameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"a","nameLocation":"8294:1:12","nodeType":"VariableDeclaration","scope":2423,"src":"8286:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:12","nodeType":"VariableDeclaration","scope":2423,"src":"8297:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"typeName":{"id":2392,"nodeType":"UserDefinedTypeName","pathNode":{"id":2391,"name":"Rounding","nameLocations":["8297:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"8297:8:12"},"referencedDeclaration":2024,"src":"8297:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:12"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2423,"src":"8339:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2395,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:12"},"scope":2883,"src":"8272:237:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2554,"nodeType":"Block","src":"8694:922:12","statements":[{"assignments":[2432],"declarations":[{"constant":false,"id":2432,"mutability":"mutable","name":"result","nameLocation":"8712:6:12","nodeType":"VariableDeclaration","scope":2554,"src":"8704:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2431,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2434,"initialValue":{"hexValue":"30","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:12"},{"id":2551,"nodeType":"UncheckedBlock","src":"8732:855:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"8760:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2449,"nodeType":"IfStatement","src":"8756:99:12","trueBody":{"id":2448,"nodeType":"Block","src":"8778:77:12","statements":[{"expression":{"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"8796:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2443,"nodeType":"ExpressionStatement","src":"8796:13:12"},{"expression":{"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2444,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"8827:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2447,"nodeType":"ExpressionStatement","src":"8827:13:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"8872:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2464,"nodeType":"IfStatement","src":"8868:96:12","trueBody":{"id":2463,"nodeType":"Block","src":"8889:75:12","statements":[{"expression":{"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"8907:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2458,"nodeType":"ExpressionStatement","src":"8907:12:12"},{"expression":{"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"8937:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2462,"nodeType":"ExpressionStatement","src":"8937:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"8981:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2479,"nodeType":"IfStatement","src":"8977:96:12","trueBody":{"id":2478,"nodeType":"Block","src":"8998:75:12","statements":[{"expression":{"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9016:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2473,"nodeType":"ExpressionStatement","src":"9016:12:12"},{"expression":{"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2474,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9046:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2477,"nodeType":"ExpressionStatement","src":"9046:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9090:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2494,"nodeType":"IfStatement","src":"9086:96:12","trueBody":{"id":2493,"nodeType":"Block","src":"9107:75:12","statements":[{"expression":{"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9125:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2488,"nodeType":"ExpressionStatement","src":"9125:12:12"},{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9155:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"9155:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9199:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2509,"nodeType":"IfStatement","src":"9195:93:12","trueBody":{"id":2508,"nodeType":"Block","src":"9215:73:12","statements":[{"expression":{"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9233:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2503,"nodeType":"ExpressionStatement","src":"9233:11:12"},{"expression":{"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2504,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9262:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2507,"nodeType":"ExpressionStatement","src":"9262:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9305:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2524,"nodeType":"IfStatement","src":"9301:93:12","trueBody":{"id":2523,"nodeType":"Block","src":"9321:73:12","statements":[{"expression":{"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9339:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2518,"nodeType":"ExpressionStatement","src":"9339:11:12"},{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2519,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9368:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"9368:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9411:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2539,"nodeType":"IfStatement","src":"9407:93:12","trueBody":{"id":2538,"nodeType":"Block","src":"9427:73:12","statements":[{"expression":{"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9445:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2533,"nodeType":"ExpressionStatement","src":"9445:11:12"},{"expression":{"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9474:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2537,"nodeType":"ExpressionStatement","src":"9474:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2540,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"9517:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2550,"nodeType":"IfStatement","src":"9513:64:12","trueBody":{"id":2549,"nodeType":"Block","src":"9533:44:12","statements":[{"expression":{"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9551:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2548,"nodeType":"ExpressionStatement","src":"9551:11:12"}]}}]},{"expression":{"id":2552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"9603:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2430,"id":2553,"nodeType":"Return","src":"9596:13:12"}]},"documentation":{"id":2424,"nodeType":"StructuredDocumentation","src":"8515:113:12","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2555,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:12","nodeType":"FunctionDefinition","parameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"value","nameLocation":"8655:5:12","nodeType":"VariableDeclaration","scope":2555,"src":"8647:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:12"},"returnParameters":{"id":2430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2555,"src":"8685:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2428,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:12"},"scope":2883,"src":"8633:983:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2590,"nodeType":"Block","src":"9849:165:12","statements":[{"id":2589,"nodeType":"UncheckedBlock","src":"9859:149:12","statements":[{"assignments":[2567],"declarations":[{"constant":false,"id":2567,"mutability":"mutable","name":"result","nameLocation":"9891:6:12","nodeType":"VariableDeclaration","scope":2589,"src":"9883:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2571,"initialValue":{"arguments":[{"id":2569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"9905:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2568,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2555,2591],"referencedDeclaration":2555,"src":"9900:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2572,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"9932:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2573,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"9942:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2574,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"9954:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2024_$","typeString":"type(enum Math.Rounding)"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2022,"src":"9954:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"src":"9942:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"9974:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"9983:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:12","trueExpression":{"hexValue":"31","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2586,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2565,"id":2588,"nodeType":"Return","src":"9925:72:12"}]}]},"documentation":{"id":2556,"nodeType":"StructuredDocumentation","src":"9622:142:12","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2591,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:12","nodeType":"FunctionDefinition","parameters":{"id":2562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2558,"mutability":"mutable","name":"value","nameLocation":"9791:5:12","nodeType":"VariableDeclaration","scope":2591,"src":"9783:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2557,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2561,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:12","nodeType":"VariableDeclaration","scope":2591,"src":"9798:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"typeName":{"id":2560,"nodeType":"UserDefinedTypeName","pathNode":{"id":2559,"name":"Rounding","nameLocations":["9798:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"9798:8:12"},"referencedDeclaration":2024,"src":"9798:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:12"},"returnParameters":{"id":2565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2591,"src":"9840:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2563,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:12"},"scope":2883,"src":"9769:245:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2719,"nodeType":"Block","src":"10201:854:12","statements":[{"assignments":[2600],"declarations":[{"constant":false,"id":2600,"mutability":"mutable","name":"result","nameLocation":"10219:6:12","nodeType":"VariableDeclaration","scope":2719,"src":"10211:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2599,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2602,"initialValue":{"hexValue":"30","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:12"},{"id":2716,"nodeType":"UncheckedBlock","src":"10239:787:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10267:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2619,"nodeType":"IfStatement","src":"10263:103:12","trueBody":{"id":2618,"nodeType":"Block","src":"10286:80:12","statements":[{"expression":{"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10304:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2613,"nodeType":"ExpressionStatement","src":"10304:17:12"},{"expression":{"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2614,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10339:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2617,"nodeType":"ExpressionStatement","src":"10339:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10383:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2636,"nodeType":"IfStatement","src":"10379:103:12","trueBody":{"id":2635,"nodeType":"Block","src":"10402:80:12","statements":[{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10420:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"10420:17:12"},{"expression":{"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10455:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2634,"nodeType":"ExpressionStatement","src":"10455:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10499:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2653,"nodeType":"IfStatement","src":"10495:103:12","trueBody":{"id":2652,"nodeType":"Block","src":"10518:80:12","statements":[{"expression":{"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10536:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2647,"nodeType":"ExpressionStatement","src":"10536:17:12"},{"expression":{"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2648,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10571:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2651,"nodeType":"ExpressionStatement","src":"10571:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10615:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2670,"nodeType":"IfStatement","src":"10611:100:12","trueBody":{"id":2669,"nodeType":"Block","src":"10633:78:12","statements":[{"expression":{"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2659,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10651:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2664,"nodeType":"ExpressionStatement","src":"10651:16:12"},{"expression":{"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2665,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10685:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2668,"nodeType":"ExpressionStatement","src":"10685:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10728:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:12","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2687,"nodeType":"IfStatement","src":"10724:100:12","trueBody":{"id":2686,"nodeType":"Block","src":"10746:78:12","statements":[{"expression":{"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10764:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:12","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2681,"nodeType":"ExpressionStatement","src":"10764:16:12"},{"expression":{"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2682,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10798:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2685,"nodeType":"ExpressionStatement","src":"10798:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2688,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10841:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2704,"nodeType":"IfStatement","src":"10837:100:12","trueBody":{"id":2703,"nodeType":"Block","src":"10859:78:12","statements":[{"expression":{"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10877:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2698,"nodeType":"ExpressionStatement","src":"10877:16:12"},{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10911:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2702,"nodeType":"ExpressionStatement","src":"10911:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"10954:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2715,"nodeType":"IfStatement","src":"10950:66:12","trueBody":{"id":2714,"nodeType":"Block","src":"10972:44:12","statements":[{"expression":{"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2710,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"10990:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2713,"nodeType":"ExpressionStatement","src":"10990:11:12"}]}}]},{"expression":{"id":2717,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"11042:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2598,"id":2718,"nodeType":"Return","src":"11035:13:12"}]},"documentation":{"id":2592,"nodeType":"StructuredDocumentation","src":"10020:114:12","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2720,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:12","nodeType":"FunctionDefinition","parameters":{"id":2595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2594,"mutability":"mutable","name":"value","nameLocation":"10162:5:12","nodeType":"VariableDeclaration","scope":2720,"src":"10154:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2593,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:12"},"returnParameters":{"id":2598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2720,"src":"10192:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2596,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:12"},"scope":2883,"src":"10139:916:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2755,"nodeType":"Block","src":"11290:167:12","statements":[{"id":2754,"nodeType":"UncheckedBlock","src":"11300:151:12","statements":[{"assignments":[2732],"declarations":[{"constant":false,"id":2732,"mutability":"mutable","name":"result","nameLocation":"11332:6:12","nodeType":"VariableDeclaration","scope":2754,"src":"11324:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2736,"initialValue":{"arguments":[{"id":2734,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"11347:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2733,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2720,2756],"referencedDeclaration":2720,"src":"11341:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"11374:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"11384:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2739,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"11396:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2024_$","typeString":"type(enum Math.Rounding)"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2022,"src":"11396:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"src":"11384:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"11417:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"11426:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:12","trueExpression":{"hexValue":"31","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2751,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2730,"id":2753,"nodeType":"Return","src":"11367:73:12"}]}]},"documentation":{"id":2721,"nodeType":"StructuredDocumentation","src":"11061:143:12","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2756,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:12","nodeType":"FunctionDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2723,"mutability":"mutable","name":"value","nameLocation":"11232:5:12","nodeType":"VariableDeclaration","scope":2756,"src":"11224:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2726,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:12","nodeType":"VariableDeclaration","scope":2756,"src":"11239:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"typeName":{"id":2725,"nodeType":"UserDefinedTypeName","pathNode":{"id":2724,"name":"Rounding","nameLocations":["11239:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"11239:8:12"},"referencedDeclaration":2024,"src":"11239:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:12"},"returnParameters":{"id":2730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2756,"src":"11281:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2728,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:12"},"scope":2883,"src":"11209:248:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2842,"nodeType":"Block","src":"11771:600:12","statements":[{"assignments":[2765],"declarations":[{"constant":false,"id":2765,"mutability":"mutable","name":"result","nameLocation":"11789:6:12","nodeType":"VariableDeclaration","scope":2842,"src":"11781:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2764,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2767,"initialValue":{"hexValue":"30","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:12"},{"id":2839,"nodeType":"UncheckedBlock","src":"11809:533:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"11837:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2782,"nodeType":"IfStatement","src":"11833:98:12","trueBody":{"id":2781,"nodeType":"Block","src":"11855:76:12","statements":[{"expression":{"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"11873:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2776,"nodeType":"ExpressionStatement","src":"11873:13:12"},{"expression":{"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"11904:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2780,"nodeType":"ExpressionStatement","src":"11904:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"11948:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2797,"nodeType":"IfStatement","src":"11944:95:12","trueBody":{"id":2796,"nodeType":"Block","src":"11965:74:12","statements":[{"expression":{"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"11983:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2791,"nodeType":"ExpressionStatement","src":"11983:12:12"},{"expression":{"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"12013:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2795,"nodeType":"ExpressionStatement","src":"12013:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"12056:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2812,"nodeType":"IfStatement","src":"12052:95:12","trueBody":{"id":2811,"nodeType":"Block","src":"12073:74:12","statements":[{"expression":{"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"12091:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2806,"nodeType":"ExpressionStatement","src":"12091:12:12"},{"expression":{"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2807,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"12121:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2810,"nodeType":"ExpressionStatement","src":"12121:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2813,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"12164:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2827,"nodeType":"IfStatement","src":"12160:95:12","trueBody":{"id":2826,"nodeType":"Block","src":"12181:74:12","statements":[{"expression":{"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"12199:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2821,"nodeType":"ExpressionStatement","src":"12199:12:12"},{"expression":{"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2822,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"12229:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2825,"nodeType":"ExpressionStatement","src":"12229:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"12272:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2838,"nodeType":"IfStatement","src":"12268:64:12","trueBody":{"id":2837,"nodeType":"Block","src":"12288:44:12","statements":[{"expression":{"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2833,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"12306:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2836,"nodeType":"ExpressionStatement","src":"12306:11:12"}]}}]},{"expression":{"id":2840,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"12358:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2763,"id":2841,"nodeType":"Return","src":"12351:13:12"}]},"documentation":{"id":2757,"nodeType":"StructuredDocumentation","src":"11463:240:12","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2843,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:12","nodeType":"FunctionDefinition","parameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2759,"mutability":"mutable","name":"value","nameLocation":"11732:5:12","nodeType":"VariableDeclaration","scope":2843,"src":"11724:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2758,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:12"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2843,"src":"11762:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2761,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:12"},"scope":2883,"src":"11708:663:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2881,"nodeType":"Block","src":"12608:174:12","statements":[{"id":2880,"nodeType":"UncheckedBlock","src":"12618:158:12","statements":[{"assignments":[2855],"declarations":[{"constant":false,"id":2855,"mutability":"mutable","name":"result","nameLocation":"12650:6:12","nodeType":"VariableDeclaration","scope":2880,"src":"12642:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2854,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2859,"initialValue":{"arguments":[{"id":2857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"12666:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2856,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2843,2882],"referencedDeclaration":2843,"src":"12659:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2860,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"12693:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2861,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"12703:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2862,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"12715:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2024_$","typeString":"type(enum Math.Rounding)"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2022,"src":"12715:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"src":"12703:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2866,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"12736:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2869,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"12751:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:12","trueExpression":{"hexValue":"31","id":2874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2877,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2853,"id":2879,"nodeType":"Return","src":"12686:79:12"}]}]},"documentation":{"id":2844,"nodeType":"StructuredDocumentation","src":"12377:144:12","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2882,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:12","nodeType":"FunctionDefinition","parameters":{"id":2850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2846,"mutability":"mutable","name":"value","nameLocation":"12550:5:12","nodeType":"VariableDeclaration","scope":2882,"src":"12542:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2845,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2849,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:12","nodeType":"VariableDeclaration","scope":2882,"src":"12557:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"},"typeName":{"id":2848,"nodeType":"UserDefinedTypeName","pathNode":{"id":2847,"name":"Rounding","nameLocations":["12557:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"12557:8:12"},"referencedDeclaration":2024,"src":"12557:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2024","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:12"},"returnParameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2882,"src":"12599:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2851,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:12"},"scope":2883,"src":"12526:256:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2884,"src":"202:12582:12","usedErrors":[]}],"src":"103:12682:12"},"id":12},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[2988]},"id":2989,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2885,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2886,"nodeType":"StructuredDocumentation","src":"134:80:13","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2988,"linearizedBaseContracts":[2988],"name":"SignedMath","nameLocation":"223:10:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2903,"nodeType":"Block","src":"375:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2896,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"392:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2897,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"396:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2900,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"404:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:13","trueExpression":{"id":2899,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"400:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2895,"id":2902,"nodeType":"Return","src":"385:20:13"}]},"documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"240:66:13","text":" @dev Returns the largest of two signed numbers."},"id":2904,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:13","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"a","nameLocation":"331:1:13","nodeType":"VariableDeclaration","scope":2904,"src":"324:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2888,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"b","nameLocation":"341:1:13","nodeType":"VariableDeclaration","scope":2904,"src":"334:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2890,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:13"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2904,"src":"367:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2893,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:13"},"scope":2988,"src":"311:101:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2921,"nodeType":"Block","src":"554:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2914,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"571:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2915,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"575:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2918,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"583:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:13","trueExpression":{"id":2917,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"579:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2913,"id":2920,"nodeType":"Return","src":"564:20:13"}]},"documentation":{"id":2905,"nodeType":"StructuredDocumentation","src":"418:67:13","text":" @dev Returns the smallest of two signed numbers."},"id":2922,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:13","nodeType":"FunctionDefinition","parameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2907,"mutability":"mutable","name":"a","nameLocation":"510:1:13","nodeType":"VariableDeclaration","scope":2922,"src":"503:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2906,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2909,"mutability":"mutable","name":"b","nameLocation":"520:1:13","nodeType":"VariableDeclaration","scope":2922,"src":"513:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2908,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:13"},"returnParameters":{"id":2913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2922,"src":"546:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2911,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:13"},"scope":2988,"src":"490:101:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2965,"nodeType":"Block","src":"796:162:13","statements":[{"assignments":[2933],"declarations":[{"constant":false,"id":2933,"mutability":"mutable","name":"x","nameLocation":"865:1:13","nodeType":"VariableDeclaration","scope":2965,"src":"858:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2932,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2946,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2934,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"870:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2935,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"874:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2937,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2938,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"881:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2939,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"885:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2941,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:13"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2947,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"910:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2952,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"930:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2950,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:13","typeDescriptions":{}}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2948,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:13","typeDescriptions":{}}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2957,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"944:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2958,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"948:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2962,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2931,"id":2964,"nodeType":"Return","src":"903:48:13"}]},"documentation":{"id":2923,"nodeType":"StructuredDocumentation","src":"597:126:13","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2966,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:13","nodeType":"FunctionDefinition","parameters":{"id":2928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2925,"mutability":"mutable","name":"a","nameLocation":"752:1:13","nodeType":"VariableDeclaration","scope":2966,"src":"745:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2924,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2927,"mutability":"mutable","name":"b","nameLocation":"762:1:13","nodeType":"VariableDeclaration","scope":2966,"src":"755:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2926,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:13"},"returnParameters":{"id":2931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2966,"src":"788:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2929,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:13"},"scope":2988,"src":"728:230:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2986,"nodeType":"Block","src":"1102:158:13","statements":[{"id":2985,"nodeType":"UncheckedBlock","src":"1112:142:13","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2976,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"1227:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:13","subExpression":{"id":2980,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"1241:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:13","trueExpression":{"id":2979,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"1236:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2974,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:13","typeDescriptions":{}}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2973,"id":2984,"nodeType":"Return","src":"1212:31:13"}]}]},"documentation":{"id":2967,"nodeType":"StructuredDocumentation","src":"964:78:13","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2987,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:13","nodeType":"FunctionDefinition","parameters":{"id":2970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"n","nameLocation":"1067:1:13","nodeType":"VariableDeclaration","scope":2987,"src":"1060:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2968,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:13"},"returnParameters":{"id":2973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2987,"src":"1093:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2971,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:13"},"scope":2988,"src":"1047:213:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2989,"src":"215:1047:13","usedErrors":[]}],"src":"109:1154:13"},"id":13},"contracts/ethregistrar/BaseRegistrarImplementation.sol":{"ast":{"absolutePath":"contracts/ethregistrar/BaseRegistrarImplementation.sol","exportedSymbols":{"Address":[1730],"BaseRegistrarImplementation":[3507],"Context":[1752],"ENS":[5200],"ERC165":[2005],"ERC721":[1239],"IBaseRegistrar":[4659],"IERC165":[2017],"IERC721":[1355],"IERC721Metadata":[1400],"IERC721Receiver":[1373],"Math":[2883],"Ownable":[112],"SignedMath":[2988],"Strings":[1981]},"id":3508,"nodeType":"SourceUnit","nodes":[{"id":2990,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:14"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":2991,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":5201,"src":"26:29:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","file":"./IBaseRegistrar.sol","id":2992,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":4660,"src":"56:30:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2993,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":1240,"src":"87:57:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2994,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":113,"src":"145:52:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2995,"name":"ERC721","nameLocations":["239:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1239,"src":"239:6:14"},"id":2996,"nodeType":"InheritanceSpecifier","src":"239:6:14"},{"baseName":{"id":2997,"name":"IBaseRegistrar","nameLocations":["247:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":4659,"src":"247:14:14"},"id":2998,"nodeType":"InheritanceSpecifier","src":"247:14:14"},{"baseName":{"id":2999,"name":"Ownable","nameLocations":["263:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"263:7:14"},"id":3000,"nodeType":"InheritanceSpecifier","src":"263:7:14"}],"canonicalName":"BaseRegistrarImplementation","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3507,"linearizedBaseContracts":[3507,112,4659,1239,1400,1355,2005,2017,1752],"name":"BaseRegistrarImplementation","nameLocation":"208:27:14","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3004,"mutability":"mutable","name":"expiries","nameLocation":"334:8:14","nodeType":"VariableDeclaration","scope":3507,"src":"306:36:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":3003,"keyType":{"id":3001,"name":"uint256","nodeType":"ElementaryTypeName","src":"314:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"306:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":3002,"name":"uint256","nodeType":"ElementaryTypeName","src":"325:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"functionSelector":"3f15457f","id":3007,"mutability":"mutable","name":"ens","nameLocation":"383:3:14","nodeType":"VariableDeclaration","scope":3507,"src":"372:14:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":3006,"nodeType":"UserDefinedTypeName","pathNode":{"id":3005,"name":"ENS","nameLocations":["372:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"372:3:14"},"referencedDeclaration":5200,"src":"372:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"public"},{"constant":false,"functionSelector":"ddf7fcb0","id":3009,"mutability":"mutable","name":"baseNode","nameLocation":"469:8:14","nodeType":"VariableDeclaration","scope":3507,"src":"454:23:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"454:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"da8c229e","id":3013,"mutability":"mutable","name":"controllers","nameLocation":"590:11:14","nodeType":"VariableDeclaration","scope":3507,"src":"558:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3012,"keyType":{"id":3010,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"558:24:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3011,"name":"bool","nodeType":"ElementaryTypeName","src":"577:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":true,"functionSelector":"c1a287e2","id":3016,"mutability":"constant","name":"GRACE_PERIOD","nameLocation":"631:12:14","nodeType":"VariableDeclaration","scope":3507,"src":"607:46:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3014,"name":"uint256","nodeType":"ElementaryTypeName","src":"607:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3930","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"646:7:14","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_7776000_by_1","typeString":"int_const 7776000"},"value":"90"},"visibility":"public"},{"constant":true,"id":3024,"mutability":"constant","name":"INTERFACE_META_ID","nameLocation":"683:17:14","nodeType":"VariableDeclaration","scope":3507,"src":"659:98:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3017,"name":"bytes4","nodeType":"ElementaryTypeName","src":"659:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"arguments":[{"hexValue":"737570706f727473496e746572666163652862797465733429","id":3021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"728:27:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2","typeString":"literal_string \"supportsInterface(bytes4)\""},"value":"supportsInterface(bytes4)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2","typeString":"literal_string \"supportsInterface(bytes4)\""}],"id":3020,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"718:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"718:38:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"711:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3018,"name":"bytes4","nodeType":"ElementaryTypeName","src":"711:6:14","typeDescriptions":{}}},"id":3023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"711:46:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":true,"id":3064,"mutability":"constant","name":"ERC721_ID","nameLocation":"787:9:14","nodeType":"VariableDeclaration","scope":3507,"src":"763:610:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3025,"name":"bytes4","nodeType":"ElementaryTypeName","src":"763:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"62616c616e63654f66286164647265737329","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"837:20:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_70a08231b98ef4ca268c9cc3f6b4590e4bfec28280db06bb5d45e689f2a360be","typeString":"literal_string \"balanceOf(address)\""},"value":"balanceOf(address)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_70a08231b98ef4ca268c9cc3f6b4590e4bfec28280db06bb5d45e689f2a360be","typeString":"literal_string \"balanceOf(address)\""}],"id":3028,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"827:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"827:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"6f776e65724f662875696e7432353629","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"887:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_6352211e6566aa027e75ac9dbf2423197fbd9b82b9d981a3ab367d355866aa1c","typeString":"literal_string \"ownerOf(uint256)\""},"value":"ownerOf(uint256)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6352211e6566aa027e75ac9dbf2423197fbd9b82b9d981a3ab367d355866aa1c","typeString":"literal_string \"ownerOf(uint256)\""}],"id":3031,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"877:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"877:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:79:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"617070726f766528616464726573732c75696e7432353629","id":3036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"935:26:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba","typeString":"literal_string \"approve(address,uint256)\""},"value":"approve(address,uint256)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba","typeString":"literal_string \"approve(address,uint256)\""}],"id":3035,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"925:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:135:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"676574417070726f7665642875696e7432353629","id":3040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"991:22:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_081812fc55e34fdc7cf5d8b5cf4e3621fa6423fde952ec6ab24afdc0d85c0b2e","typeString":"literal_string \"getApproved(uint256)\""},"value":"getApproved(uint256)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_081812fc55e34fdc7cf5d8b5cf4e3621fa6423fde952ec6ab24afdc0d85c0b2e","typeString":"literal_string \"getApproved(uint256)\""}],"id":3039,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"981:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"981:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:187:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"736574417070726f76616c466f72416c6c28616464726573732c626f6f6c29","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1043:33:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_a22cb4651ab9570f89bb516380c40ce76762284fb1f21337ceaf6adab99e7d4a","typeString":"literal_string \"setApprovalForAll(address,bool)\""},"value":"setApprovalForAll(address,bool)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a22cb4651ab9570f89bb516380c40ce76762284fb1f21337ceaf6adab99e7d4a","typeString":"literal_string \"setApprovalForAll(address,bool)\""}],"id":3043,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1033:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1033:44:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:250:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"6973417070726f766564466f72416c6c28616464726573732c6164647265737329","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1106:35:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_e985e9c5c6636c6879256001057b28ccac7718ef0ac56553ff9b926452cab8a3","typeString":"literal_string \"isApprovedForAll(address,address)\""},"value":"isApprovedForAll(address,address)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e985e9c5c6636c6879256001057b28ccac7718ef0ac56553ff9b926452cab8a3","typeString":"literal_string \"isApprovedForAll(address,address)\""}],"id":3047,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1096:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1096:46:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:315:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"7472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1171:39:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b","typeString":"literal_string \"transferFrom(address,address,uint256)\""},"value":"transferFrom(address,address,uint256)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b","typeString":"literal_string \"transferFrom(address,address,uint256)\""}],"id":3051,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1161:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1161:50:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:384:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"736166655472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1240:43:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_42842e0eb38857a7775b4e7364b2775df7325074d088e7fb39590cd6281184ed","typeString":"literal_string \"safeTransferFrom(address,address,uint256)\""},"value":"safeTransferFrom(address,address,uint256)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_42842e0eb38857a7775b4e7364b2775df7325074d088e7fb39590cd6281184ed","typeString":"literal_string \"safeTransferFrom(address,address,uint256)\""}],"id":3055,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1230:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:457:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"arguments":[{"hexValue":"736166655472616e7366657246726f6d28616464726573732c616464726573732c75696e743235362c627974657329","id":3060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1313:49:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_b88d4fde60196325a28bb7f99a2582e0b46de55b18761e960c14ad7a32099465","typeString":"literal_string \"safeTransferFrom(address,address,uint256,bytes)\""},"value":"safeTransferFrom(address,address,uint256,bytes)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b88d4fde60196325a28bb7f99a2582e0b46de55b18761e960c14ad7a32099465","typeString":"literal_string \"safeTransferFrom(address,address,uint256,bytes)\""}],"id":3059,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1303:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1303:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"827:536:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"807:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3026,"name":"bytes4","nodeType":"ElementaryTypeName","src":"807:6:14","typeDescriptions":{}}},"id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"807:566:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":true,"id":3072,"mutability":"constant","name":"RECLAIM_ID","nameLocation":"1403:10:14","nodeType":"VariableDeclaration","scope":3507,"src":"1379:90:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3065,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1379:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"arguments":[{"hexValue":"7265636c61696d2875696e743235362c6164647265737329","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1441:26:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_28ed4f6c74b219a5819055dfbcd2f1837c046c364cf01fabb6799e4f440d6f13","typeString":"literal_string \"reclaim(uint256,address)\""},"value":"reclaim(uint256,address)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_28ed4f6c74b219a5819055dfbcd2f1837c046c364cf01fabb6799e4f440d6f13","typeString":"literal_string \"reclaim(uint256,address)\""}],"id":3068,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1431:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1431:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1424:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3066,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:14","typeDescriptions":{}}},"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1424:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"baseFunctions":[792],"body":{"id":3105,"nodeType":"Block","src":"2219:182:14","statements":[{"assignments":[3084],"declarations":[{"constant":false,"id":3084,"mutability":"mutable","name":"_owner","nameLocation":"2237:6:14","nodeType":"VariableDeclaration","scope":3105,"src":"2229:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3083,"name":"address","nodeType":"ElementaryTypeName","src":"2229:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3088,"initialValue":{"arguments":[{"id":3086,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"2254:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3085,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[3180],"referencedDeclaration":3180,"src":"2246:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2229:33:14"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3089,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"2280:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3090,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2291:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2280:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3093,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"2325:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3092,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2313:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2313:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3095,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"2337:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2313:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2280:64:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3099,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2377:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3100,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"2385:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3098,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"2360:16:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2360:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2280:113:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2279:115:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3082,"id":3104,"nodeType":"Return","src":"2272:122:14"}]},"documentation":{"id":3073,"nodeType":"StructuredDocumentation","src":"1476:616:14","text":" v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\n https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\n @dev Returns whether the given spender can transfer a given token ID\n @param spender address of the spender to query\n @param tokenId uint256 ID of the token to be transferred\n @return bool whether the msg.sender is approved for the given token ID,\n    is an operator of the owner, or is the owner of the token"},"id":3106,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"2106:18:14","nodeType":"FunctionDefinition","overrides":{"id":3079,"nodeType":"OverrideSpecifier","overrides":[],"src":"2195:8:14"},"parameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3075,"mutability":"mutable","name":"spender","nameLocation":"2142:7:14","nodeType":"VariableDeclaration","scope":3106,"src":"2134:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3074,"name":"address","nodeType":"ElementaryTypeName","src":"2134:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3077,"mutability":"mutable","name":"tokenId","nameLocation":"2167:7:14","nodeType":"VariableDeclaration","scope":3106,"src":"2159:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3076,"name":"uint256","nodeType":"ElementaryTypeName","src":"2159:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2124:56:14"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3106,"src":"2213:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3080,"name":"bool","nodeType":"ElementaryTypeName","src":"2213:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2212:6:14"},"scope":3507,"src":"2097:304:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3126,"nodeType":"Block","src":"2463:57:14","statements":[{"expression":{"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3118,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2473:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3119,"name":"_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"2479:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"src":"2473:10:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3121,"nodeType":"ExpressionStatement","src":"2473:10:14"},{"expression":{"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3122,"name":"baseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"2493:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3123,"name":"_baseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"2504:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2493:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3125,"nodeType":"ExpressionStatement","src":"2493:20:14"}]},"id":3127,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"","id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2455:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":3115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2459:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"id":3116,"kind":"baseConstructorSpecifier","modifierName":{"id":3113,"name":"ERC721","nameLocations":["2448:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1239,"src":"2448:6:14"},"nodeType":"ModifierInvocation","src":"2448:14:14"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"_ens","nameLocation":"2423:4:14","nodeType":"VariableDeclaration","scope":3127,"src":"2419:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":3108,"nodeType":"UserDefinedTypeName","pathNode":{"id":3107,"name":"ENS","nameLocations":["2419:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"2419:3:14"},"referencedDeclaration":5200,"src":"2419:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"internal"},{"constant":false,"id":3111,"mutability":"mutable","name":"_baseNode","nameLocation":"2437:9:14","nodeType":"VariableDeclaration","scope":3127,"src":"2429:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2429:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2418:29:14"},"returnParameters":{"id":3117,"nodeType":"ParameterList","parameters":[],"src":"2463:0:14"},"scope":3507,"src":"2407:113:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3142,"nodeType":"Block","src":"2542:73:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3132,"name":"baseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"2570:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3130,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2560:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2564:5:14","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":5169,"src":"2560:9:14","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2560:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3136,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2591:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}],"id":3135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3134,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:14","typeDescriptions":{}}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2560:36:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3129,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2552:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2552:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3140,"nodeType":"ExpressionStatement","src":"2552:45:14"},{"id":3141,"nodeType":"PlaceholderStatement","src":"2607:1:14"}]},"id":3143,"name":"live","nameLocation":"2535:4:14","nodeType":"ModifierDefinition","parameters":{"id":3128,"nodeType":"ParameterList","parameters":[],"src":"2539:2:14"},"src":"2526:89:14","virtual":false,"visibility":"internal"},{"body":{"id":3153,"nodeType":"Block","src":"2647:60:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3146,"name":"controllers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"2665:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3149,"indexExpression":{"expression":{"id":3147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2677:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2681:6:14","memberName":"sender","nodeType":"MemberAccess","src":"2677:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2665:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2657:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2657:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3151,"nodeType":"ExpressionStatement","src":"2657:32:14"},{"id":3152,"nodeType":"PlaceholderStatement","src":"2699:1:14"}]},"id":3154,"name":"onlyController","nameLocation":"2630:14:14","nodeType":"ModifierDefinition","parameters":{"id":3144,"nodeType":"ParameterList","parameters":[],"src":"2644:2:14"},"src":"2621:86:14","virtual":false,"visibility":"internal"},{"baseFunctions":[458,1288],"body":{"id":3179,"nodeType":"Block","src":"3096:100:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3166,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"3114:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3168,"indexExpression":{"id":3167,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"3123:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3114:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3169,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3134:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3140:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"3134:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3114:35:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3106:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3106:44:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3173,"nodeType":"ExpressionStatement","src":"3106:44:14"},{"expression":{"arguments":[{"id":3176,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"3181:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3174,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3167:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_BaseRegistrarImplementation_$3507_$","typeString":"type(contract super BaseRegistrarImplementation)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3173:7:14","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":458,"src":"3167:13:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3167:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3164,"id":3178,"nodeType":"Return","src":"3160:29:14"}]},"documentation":{"id":3155,"nodeType":"StructuredDocumentation","src":"2713:274:14","text":" @dev Gets the owner of the specified token ID. Names become unowned\n      when their registration expires.\n @param tokenId uint256 ID of the token to query the owner of\n @return address currently marked as the owner of the given token ID"},"functionSelector":"6352211e","id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3001:7:14","nodeType":"FunctionDefinition","overrides":{"id":3161,"nodeType":"OverrideSpecifier","overrides":[{"id":3159,"name":"IERC721","nameLocations":["3061:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1355,"src":"3061:7:14"},{"id":3160,"name":"ERC721","nameLocations":["3070:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1239,"src":"3070:6:14"}],"src":"3052:25:14"},"parameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"tokenId","nameLocation":"3026:7:14","nodeType":"VariableDeclaration","scope":3180,"src":"3018:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"3018:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3008:31:14"},"returnParameters":{"id":3164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"3087:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3162,"name":"address","nodeType":"ElementaryTypeName","src":"3087:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:9:14"},"scope":3507,"src":"2992:204:14","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4605],"body":{"id":3198,"nodeType":"Block","src":"3341:89:14","statements":[{"expression":{"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3188,"name":"controllers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"3351:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3190,"indexExpression":{"id":3189,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"3363:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3351:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3377:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3351:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3193,"nodeType":"ExpressionStatement","src":"3351:30:14"},{"eventCall":{"arguments":[{"id":3195,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"3412:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3194,"name":"ControllerAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"3396:15:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3396:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3197,"nodeType":"EmitStatement","src":"3391:32:14"}]},"functionSelector":"a7fc7a07","id":3199,"implemented":true,"kind":"function","modifiers":[{"id":3186,"kind":"modifierInvocation","modifierName":{"id":3185,"name":"onlyOwner","nameLocations":["3331:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3331:9:14"},"nodeType":"ModifierInvocation","src":"3331:9:14"}],"name":"addController","nameLocation":"3279:13:14","nodeType":"FunctionDefinition","overrides":{"id":3184,"nodeType":"OverrideSpecifier","overrides":[],"src":"3322:8:14"},"parameters":{"id":3183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"controller","nameLocation":"3301:10:14","nodeType":"VariableDeclaration","scope":3199,"src":"3293:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3181,"name":"address","nodeType":"ElementaryTypeName","src":"3293:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3292:20:14"},"returnParameters":{"id":3187,"nodeType":"ParameterList","parameters":[],"src":"3341:0:14"},"scope":3507,"src":"3270:160:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4610],"body":{"id":3217,"nodeType":"Block","src":"3562:92:14","statements":[{"expression":{"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3207,"name":"controllers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"3572:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3209,"indexExpression":{"id":3208,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3584:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3572:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3598:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3572:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3212,"nodeType":"ExpressionStatement","src":"3572:31:14"},{"eventCall":{"arguments":[{"id":3214,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3636:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3213,"name":"ControllerRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"3618:17:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3618:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3216,"nodeType":"EmitStatement","src":"3613:34:14"}]},"functionSelector":"f6a74ed7","id":3218,"implemented":true,"kind":"function","modifiers":[{"id":3205,"kind":"modifierInvocation","modifierName":{"id":3204,"name":"onlyOwner","nameLocations":["3552:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3552:9:14"},"nodeType":"ModifierInvocation","src":"3552:9:14"}],"name":"removeController","nameLocation":"3497:16:14","nodeType":"FunctionDefinition","overrides":{"id":3203,"nodeType":"OverrideSpecifier","overrides":[],"src":"3543:8:14"},"parameters":{"id":3202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"controller","nameLocation":"3522:10:14","nodeType":"VariableDeclaration","scope":3218,"src":"3514:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3200,"name":"address","nodeType":"ElementaryTypeName","src":"3514:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3513:20:14"},"returnParameters":{"id":3206,"nodeType":"ParameterList","parameters":[],"src":"3562:0:14"},"scope":3507,"src":"3488:166:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4615],"body":{"id":3233,"nodeType":"Block","src":"3787:52:14","statements":[{"expression":{"arguments":[{"id":3229,"name":"baseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"3813:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3230,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"3823:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3226,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"3797:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3801:11:14","memberName":"setResolver","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"3797:15:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3797:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3232,"nodeType":"ExpressionStatement","src":"3797:35:14"}]},"functionSelector":"4e543b26","id":3234,"implemented":true,"kind":"function","modifiers":[{"id":3224,"kind":"modifierInvocation","modifierName":{"id":3223,"name":"onlyOwner","nameLocations":["3777:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3777:9:14"},"nodeType":"ModifierInvocation","src":"3777:9:14"}],"name":"setResolver","nameLocation":"3729:11:14","nodeType":"FunctionDefinition","overrides":{"id":3222,"nodeType":"OverrideSpecifier","overrides":[],"src":"3768:8:14"},"parameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"resolver","nameLocation":"3749:8:14","nodeType":"VariableDeclaration","scope":3234,"src":"3741:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3219,"name":"address","nodeType":"ElementaryTypeName","src":"3741:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3740:18:14"},"returnParameters":{"id":3225,"nodeType":"ParameterList","parameters":[],"src":"3787:0:14"},"scope":3507,"src":"3720:119:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4622],"body":{"id":3246,"nodeType":"Block","src":"3980:36:14","statements":[{"expression":{"baseExpression":{"id":3242,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"3997:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3244,"indexExpression":{"id":3243,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"4006:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3997:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3241,"id":3245,"nodeType":"Return","src":"3990:19:14"}]},"functionSelector":"d6e4fa86","id":3247,"implemented":true,"kind":"function","modifiers":[],"name":"nameExpires","nameLocation":"3915:11:14","nodeType":"FunctionDefinition","overrides":{"id":3238,"nodeType":"OverrideSpecifier","overrides":[],"src":"3953:8:14"},"parameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"id","nameLocation":"3935:2:14","nodeType":"VariableDeclaration","scope":3247,"src":"3927:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3235,"name":"uint256","nodeType":"ElementaryTypeName","src":"3927:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3926:12:14"},"returnParameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3247,"src":"3971:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"3971:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3970:9:14"},"scope":3507,"src":"3906:110:14","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4629],"body":{"id":3264,"nodeType":"Block","src":"4163:142:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3255,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"4253:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3257,"indexExpression":{"id":3256,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"4262:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4253:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3258,"name":"GRACE_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"4268:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4253:27:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3260,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4283:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4289:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"4283:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4253:45:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3254,"id":3263,"nodeType":"Return","src":"4246:52:14"}]},"functionSelector":"96e494e8","id":3265,"implemented":true,"kind":"function","modifiers":[],"name":"available","nameLocation":"4105:9:14","nodeType":"FunctionDefinition","overrides":{"id":3251,"nodeType":"OverrideSpecifier","overrides":[],"src":"4139:8:14"},"parameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"id","nameLocation":"4123:2:14","nodeType":"VariableDeclaration","scope":3265,"src":"4115:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"4115:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4114:12:14"},"returnParameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3265,"src":"4157:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3252,"name":"bool","nodeType":"ElementaryTypeName","src":"4157:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4156:6:14"},"scope":3507,"src":"4096:209:14","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4641],"body":{"id":3285,"nodeType":"Block","src":"4674:61:14","statements":[{"expression":{"arguments":[{"id":3279,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"4701:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3280,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"4705:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3281,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4713:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":3282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4723:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3278,"name":"_register","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3395,"src":"4691:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,address,uint256,bool) returns (uint256)"}},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4691:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3277,"id":3284,"nodeType":"Return","src":"4684:44:14"}]},"documentation":{"id":3266,"nodeType":"StructuredDocumentation","src":"4311:228:14","text":" @dev Register a name.\n @param id The token ID (keccak256 of the label).\n @param _owner The address that should own the registration.\n @param duration Duration in seconds for the registration."},"functionSelector":"fca247ac","id":3286,"implemented":true,"kind":"function","modifiers":[],"name":"register","nameLocation":"4553:8:14","nodeType":"FunctionDefinition","overrides":{"id":3274,"nodeType":"OverrideSpecifier","overrides":[],"src":"4647:8:14"},"parameters":{"id":3273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3268,"mutability":"mutable","name":"id","nameLocation":"4579:2:14","nodeType":"VariableDeclaration","scope":3286,"src":"4571:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"4571:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3270,"mutability":"mutable","name":"_owner","nameLocation":"4599:6:14","nodeType":"VariableDeclaration","scope":3286,"src":"4591:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3269,"name":"address","nodeType":"ElementaryTypeName","src":"4591:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3272,"mutability":"mutable","name":"duration","nameLocation":"4623:8:14","nodeType":"VariableDeclaration","scope":3286,"src":"4615:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4615:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4561:76:14"},"returnParameters":{"id":3277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3286,"src":"4665:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint256","nodeType":"ElementaryTypeName","src":"4665:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4664:9:14"},"scope":3507,"src":"4544:191:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3305,"nodeType":"Block","src":"5131:62:14","statements":[{"expression":{"arguments":[{"id":3299,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5158:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3300,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"5162:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3301,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5170:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5180:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3298,"name":"_register","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3395,"src":"5148:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,address,uint256,bool) returns (uint256)"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5148:38:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3297,"id":3304,"nodeType":"Return","src":"5141:45:14"}]},"documentation":{"id":3287,"nodeType":"StructuredDocumentation","src":"4741:260:14","text":" @dev Register a name, without modifying the registry.\n @param id The token ID (keccak256 of the label).\n @param _owner The address that should own the registration.\n @param duration Duration in seconds for the registration."},"functionSelector":"0e297b45","id":3306,"implemented":true,"kind":"function","modifiers":[],"name":"registerOnly","nameLocation":"5015:12:14","nodeType":"FunctionDefinition","parameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"id","nameLocation":"5045:2:14","nodeType":"VariableDeclaration","scope":3306,"src":"5037:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3291,"mutability":"mutable","name":"_owner","nameLocation":"5065:6:14","nodeType":"VariableDeclaration","scope":3306,"src":"5057:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3290,"name":"address","nodeType":"ElementaryTypeName","src":"5057:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"duration","nameLocation":"5089:8:14","nodeType":"VariableDeclaration","scope":3306,"src":"5081:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3292,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5027:76:14"},"returnParameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3306,"src":"5122:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3295,"name":"uint256","nodeType":"ElementaryTypeName","src":"5122:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5121:9:14"},"scope":3507,"src":"5006:187:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3394,"nodeType":"Block","src":"5370:629:14","statements":[{"expression":{"arguments":[{"arguments":[{"id":3325,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5398:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3324,"name":"available","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"5388:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5388:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3323,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5380:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5380:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3328,"nodeType":"ExpressionStatement","src":"5380:22:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3330,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5433:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5439:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"5433:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3332,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"5451:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5433:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3334,"name":"GRACE_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"5462:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5433:41:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3336,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5493:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5499:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"5493:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3338,"name":"GRACE_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"5511:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5493:30:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5433:90:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3329,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5412:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5412:121:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3342,"nodeType":"ExpressionStatement","src":"5412:121:14"},{"expression":{"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3343,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"5571:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3345,"indexExpression":{"id":3344,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5580:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5571:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3346,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5586:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5592:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"5586:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3348,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"5604:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5586:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5571:41:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3351,"nodeType":"ExpressionStatement","src":"5571:41:14"},{"condition":{"arguments":[{"id":3353,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5634:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3352,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"5626:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5626:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3360,"nodeType":"IfStatement","src":"5622:105:14","trueBody":{"id":3359,"nodeType":"Block","src":"5639:88:14","statements":[{"expression":{"arguments":[{"id":3356,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5713:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3355,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"5707:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5707:9:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3358,"nodeType":"ExpressionStatement","src":"5707:9:14"}]}},{"expression":{"arguments":[{"id":3362,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"5742:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3363,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5750:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3361,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"5736:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5736:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3365,"nodeType":"ExpressionStatement","src":"5736:17:14"},{"condition":{"id":3366,"name":"updateRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"5767:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3379,"nodeType":"IfStatement","src":"5763:95:14","trueBody":{"id":3378,"nodeType":"Block","src":"5783:75:14","statements":[{"expression":{"arguments":[{"id":3370,"name":"baseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"5817:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3373,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5835:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5827:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5827:7:14","typeDescriptions":{}}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5827:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3375,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"5840:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3367,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"5797:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5801:15:14","memberName":"setSubnodeOwner","nodeType":"MemberAccess","referencedDeclaration":5134,"src":"5797:19:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,address) external returns (bytes32)"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5797:50:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3377,"nodeType":"ExpressionStatement","src":"5797:50:14"}]}},{"eventCall":{"arguments":[{"id":3381,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"5888:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3382,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"5892:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3383,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5900:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5906:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"5900:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3385,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"5918:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5900:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3380,"name":"NameRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"5873:14:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5873:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3388,"nodeType":"EmitStatement","src":"5868:59:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3389,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5945:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5951:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"5945:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3391,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"5963:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5945:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3322,"id":3393,"nodeType":"Return","src":"5938:33:14"}]},"id":3395,"implemented":true,"kind":"function","modifiers":[{"id":3317,"kind":"modifierInvocation","modifierName":{"id":3316,"name":"live","nameLocations":["5332:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":3143,"src":"5332:4:14"},"nodeType":"ModifierInvocation","src":"5332:4:14"},{"id":3319,"kind":"modifierInvocation","modifierName":{"id":3318,"name":"onlyController","nameLocations":["5337:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":3154,"src":"5337:14:14"},"nodeType":"ModifierInvocation","src":"5337:14:14"}],"name":"_register","nameLocation":"5208:9:14","nodeType":"FunctionDefinition","parameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3308,"mutability":"mutable","name":"id","nameLocation":"5235:2:14","nodeType":"VariableDeclaration","scope":3395,"src":"5227:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3307,"name":"uint256","nodeType":"ElementaryTypeName","src":"5227:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"_owner","nameLocation":"5255:6:14","nodeType":"VariableDeclaration","scope":3395,"src":"5247:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3309,"name":"address","nodeType":"ElementaryTypeName","src":"5247:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3312,"mutability":"mutable","name":"duration","nameLocation":"5279:8:14","nodeType":"VariableDeclaration","scope":3395,"src":"5271:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3311,"name":"uint256","nodeType":"ElementaryTypeName","src":"5271:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3314,"mutability":"mutable","name":"updateRegistry","nameLocation":"5302:14:14","nodeType":"VariableDeclaration","scope":3395,"src":"5297:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3313,"name":"bool","nodeType":"ElementaryTypeName","src":"5297:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5217:105:14"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3395,"src":"5361:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3320,"name":"uint256","nodeType":"ElementaryTypeName","src":"5361:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5360:9:14"},"scope":3507,"src":"5199:800:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4650],"body":{"id":3451,"nodeType":"Block","src":"6128:363:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3410,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"6146:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3412,"indexExpression":{"id":3411,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6155:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6146:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3413,"name":"GRACE_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"6161:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6146:27:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":3415,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6177:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6183:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"6177:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6146:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3409,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6138:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6138:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3419,"nodeType":"ExpressionStatement","src":"6138:55:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3421,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"6275:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3423,"indexExpression":{"id":3422,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6284:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6275:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3424,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3399,"src":"6290:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6275:23:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3426,"name":"GRACE_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"6301:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6275:38:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3428,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3399,"src":"6316:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3429,"name":"GRACE_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"6327:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6316:23:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6275:64:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3420,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6254:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6254:95:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3433,"nodeType":"ExpressionStatement","src":"6254:95:14"},{"expression":{"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3434,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"6387:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3436,"indexExpression":{"id":3435,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6396:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6387:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3437,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3399,"src":"6403:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6387:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3439,"nodeType":"ExpressionStatement","src":"6387:24:14"},{"eventCall":{"arguments":[{"id":3441,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6438:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":3442,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"6442:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3444,"indexExpression":{"id":3443,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6451:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6442:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3440,"name":"NameRenewed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4600,"src":"6426:11:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6426:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3446,"nodeType":"EmitStatement","src":"6421:34:14"},{"expression":{"baseExpression":{"id":3447,"name":"expiries","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"6472:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3449,"indexExpression":{"id":3448,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6481:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6472:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3408,"id":3450,"nodeType":"Return","src":"6465:19:14"}]},"functionSelector":"c475abff","id":3452,"implemented":true,"kind":"function","modifiers":[{"id":3403,"kind":"modifierInvocation","modifierName":{"id":3402,"name":"live","nameLocations":["6090:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":3143,"src":"6090:4:14"},"nodeType":"ModifierInvocation","src":"6090:4:14"},{"id":3405,"kind":"modifierInvocation","modifierName":{"id":3404,"name":"onlyController","nameLocations":["6095:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":3154,"src":"6095:14:14"},"nodeType":"ModifierInvocation","src":"6095:14:14"}],"name":"renew","nameLocation":"6014:5:14","nodeType":"FunctionDefinition","overrides":{"id":3401,"nodeType":"OverrideSpecifier","overrides":[],"src":"6081:8:14"},"parameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"id","nameLocation":"6037:2:14","nodeType":"VariableDeclaration","scope":3452,"src":"6029:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3396,"name":"uint256","nodeType":"ElementaryTypeName","src":"6029:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3399,"mutability":"mutable","name":"duration","nameLocation":"6057:8:14","nodeType":"VariableDeclaration","scope":3452,"src":"6049:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3398,"name":"uint256","nodeType":"ElementaryTypeName","src":"6049:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6019:52:14"},"returnParameters":{"id":3408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3452,"src":"6119:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3406,"name":"uint256","nodeType":"ElementaryTypeName","src":"6119:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6118:9:14"},"scope":3507,"src":"6005:486:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4658],"body":{"id":3482,"nodeType":"Block","src":"6661:120:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3465,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6698:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6702:6:14","memberName":"sender","nodeType":"MemberAccess","src":"6698:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3467,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"6710:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3464,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[3106],"referencedDeclaration":3106,"src":"6679:18:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6679:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3463,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6671:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6671:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3470,"nodeType":"ExpressionStatement","src":"6671:43:14"},{"expression":{"arguments":[{"id":3474,"name":"baseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"6744:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3477,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"6762:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6754:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6754:7:14","typeDescriptions":{}}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6754:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3479,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"6767:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3471,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"6724:3:14","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6728:15:14","memberName":"setSubnodeOwner","nodeType":"MemberAccess","referencedDeclaration":5134,"src":"6724:19:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,address) external returns (bytes32)"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6724:50:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3481,"nodeType":"ExpressionStatement","src":"6724:50:14"}]},"documentation":{"id":3453,"nodeType":"StructuredDocumentation","src":"6497:91:14","text":" @dev Reclaim ownership of a name in ENS, if you own it in the registrar."},"functionSelector":"28ed4f6c","id":3483,"implemented":true,"kind":"function","modifiers":[{"id":3461,"kind":"modifierInvocation","modifierName":{"id":3460,"name":"live","nameLocations":["6656:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":3143,"src":"6656:4:14"},"nodeType":"ModifierInvocation","src":"6656:4:14"}],"name":"reclaim","nameLocation":"6602:7:14","nodeType":"FunctionDefinition","overrides":{"id":3459,"nodeType":"OverrideSpecifier","overrides":[],"src":"6647:8:14"},"parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"id","nameLocation":"6618:2:14","nodeType":"VariableDeclaration","scope":3483,"src":"6610:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3454,"name":"uint256","nodeType":"ElementaryTypeName","src":"6610:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"_owner","nameLocation":"6630:6:14","nodeType":"VariableDeclaration","scope":3483,"src":"6622:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3456,"name":"address","nodeType":"ElementaryTypeName","src":"6622:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6609:28:14"},"returnParameters":{"id":3462,"nodeType":"ParameterList","parameters":[],"src":"6661:0:14"},"scope":3507,"src":"6593:188:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[406,2016],"body":{"id":3505,"nodeType":"Block","src":"6901:149:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3493,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"6930:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3494,"name":"INTERFACE_META_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"6945:17:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"6930:32:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3496,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"6978:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3497,"name":"ERC721_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"6993:9:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"6978:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6930:72:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3500,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"7018:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3501,"name":"RECLAIM_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"7033:10:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"7018:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6930:113:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3492,"id":3504,"nodeType":"Return","src":"6911:132:14"}]},"functionSelector":"01ffc9a7","id":3506,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"6796:17:14","nodeType":"FunctionDefinition","overrides":{"id":3489,"nodeType":"OverrideSpecifier","overrides":[{"id":3487,"name":"ERC721","nameLocations":["6869:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1239,"src":"6869:6:14"},{"id":3488,"name":"IERC165","nameLocations":["6877:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"6877:7:14"}],"src":"6860:25:14"},"parameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"interfaceID","nameLocation":"6830:11:14","nodeType":"VariableDeclaration","scope":3506,"src":"6823:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3484,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6823:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"6813:34:14"},"returnParameters":{"id":3492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3506,"src":"6895:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3490,"name":"bool","nodeType":"ElementaryTypeName","src":"6895:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6894:6:14"},"scope":3507,"src":"6787:263:14","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3508,"src":"199:6853:14","usedErrors":[]}],"src":"0:7053:14"},"id":14},"contracts/ethregistrar/BulkRenewal.sol":{"ast":{"absolutePath":"contracts/ethregistrar/BulkRenewal.sol","exportedSymbols":{"Address":[1730],"BaseRegistrarImplementation":[3507],"BulkRenewal":[3735],"CommitmentTooNew":[3766],"CommitmentTooOld":[3770],"DurationTooShort":[3778],"ENS":[5200],"ERC20Recoverable":[6148],"ETHRegistrarController":[4564],"IABIResolver":[5420],"IAddrResolver":[5438],"IAddressResolver":[5459],"IBulkRenewal":[4681],"IContentHashResolver":[5476],"IDNSRecordResolver":[5509],"IDNSZoneResolver":[5528],"IERC165":[2017],"IETHRegistrarController":[4758],"IExtendedResolver":[5540],"IInterfaceResolver":[5561],"INameResolver":[5578],"INameWrapper":[6534],"IPriceOracle":[4781],"IPubkeyResolver":[5599],"ITextResolver":[5622],"InsufficientValue":[3786],"MaxCommitmentAgeTooHigh":[3794],"MaxCommitmentAgeTooLow":[3792],"NameNotAvailable":[3774],"Ownable":[112],"Resolver":[5399],"ResolverRequiredWhenDataSupplied":[3780],"ReverseClaimer":[5719],"ReverseRegistrar":[6070],"StringUtils":[5063],"Unauthorised":[3790],"UnexpiredCommitmentExists":[3784]},"id":3736,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3509,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:15"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":3510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":5201,"src":"57:29:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/ETHRegistrarController.sol","file":"./ETHRegistrarController.sol","id":3511,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":4565,"src":"87:38:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IETHRegistrarController.sol","file":"./IETHRegistrarController.sol","id":3512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":4759,"src":"126:39:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/Resolver.sol","file":"../resolvers/Resolver.sol","id":3513,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":5400,"src":"166:35:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBulkRenewal.sol","file":"./IBulkRenewal.sol","id":3514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":4682,"src":"202:28:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IPriceOracle.sol","file":"./IPriceOracle.sol","id":3515,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":4782,"src":"231:28:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":3516,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3736,"sourceUnit":2018,"src":"261:65:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3517,"name":"IBulkRenewal","nameLocations":["352:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":4681,"src":"352:12:15"},"id":3518,"nodeType":"InheritanceSpecifier","src":"352:12:15"}],"canonicalName":"BulkRenewal","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3735,"linearizedBaseContracts":[3735,4681],"name":"BulkRenewal","nameLocation":"337:11:15","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3521,"mutability":"constant","name":"ETH_NAMEHASH","nameLocation":"396:12:15","nodeType":"VariableDeclaration","scope":3735,"src":"371:114:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"371:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307864303531653466386362313837306638373762303032363665313239323332326265613463343932613939333334383865393464376331613933356538646661","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"419:66:15","typeDescriptions":{"typeIdentifier":"t_rational_94225767423188749387027829997019044638818162593148848315697732301206285356538_by_1","typeString":"int_const 9422...(69 digits omitted)...6538"},"value":"0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa"},"visibility":"private"},{"constant":false,"functionSelector":"3f15457f","id":3524,"mutability":"immutable","name":"ens","nameLocation":"535:3:15","nodeType":"VariableDeclaration","scope":3735,"src":"514:24:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":3523,"nodeType":"UserDefinedTypeName","pathNode":{"id":3522,"name":"ENS","nameLocations":["514:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"514:3:15"},"referencedDeclaration":5200,"src":"514:3:15","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"public"},{"body":{"id":3534,"nodeType":"Block","src":"567:27:15","statements":[{"expression":{"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3530,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"577:3:15","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3531,"name":"_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"583:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"src":"577:10:15","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3533,"nodeType":"ExpressionStatement","src":"577:10:15"}]},"id":3535,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"_ens","nameLocation":"561:4:15","nodeType":"VariableDeclaration","scope":3535,"src":"557:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":3526,"nodeType":"UserDefinedTypeName","pathNode":{"id":3525,"name":"ENS","nameLocations":["557:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"557:3:15"},"referencedDeclaration":5200,"src":"557:3:15","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"internal"}],"src":"556:10:15"},"returnParameters":{"id":3529,"nodeType":"ParameterList","parameters":[],"src":"567:0:15"},"scope":3735,"src":"545:49:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3562,"nodeType":"Block","src":"672:286:15","statements":[{"assignments":[3543],"declarations":[{"constant":false,"id":3543,"mutability":"mutable","name":"r","nameLocation":"691:1:15","nodeType":"VariableDeclaration","scope":3562,"src":"682:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"},"typeName":{"id":3542,"nodeType":"UserDefinedTypeName","pathNode":{"id":3541,"name":"Resolver","nameLocations":["682:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":5399,"src":"682:8:15"},"referencedDeclaration":5399,"src":"682:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"}},"visibility":"internal"}],"id":3550,"initialValue":{"arguments":[{"arguments":[{"id":3547,"name":"ETH_NAMEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"717:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3545,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"704:3:15","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"708:8:15","memberName":"resolver","nodeType":"MemberAccess","referencedDeclaration":5176,"src":"704:12:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"704:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3544,"name":"Resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"695:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Resolver_$5399_$","typeString":"type(contract Resolver)"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"695:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"}},"nodeType":"VariableDeclarationStatement","src":"682:49:15"},{"expression":{"arguments":[{"arguments":[{"id":3554,"name":"ETH_NAMEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"844:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"arguments":[{"id":3556,"name":"IETHRegistrarController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"883:23:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IETHRegistrarController_$4758_$","typeString":"type(contract IETHRegistrarController)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IETHRegistrarController_$4758_$","typeString":"type(contract IETHRegistrarController)"}],"id":3555,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"878:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"878:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IETHRegistrarController_$4758","typeString":"type(contract IETHRegistrarController)"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"908:11:15","memberName":"interfaceId","nodeType":"MemberAccess","src":"878:41:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3552,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"800:1:15","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"}},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"802:20:15","memberName":"interfaceImplementer","nodeType":"MemberAccess","referencedDeclaration":5560,"src":"800:22:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_bytes4_$returns$_t_address_$","typeString":"function (bytes32,bytes4) view external returns (address)"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"800:137:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3551,"name":"ETHRegistrarController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"760:22:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ETHRegistrarController_$4564_$","typeString":"type(contract ETHRegistrarController)"}},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"760:191:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"functionReturnParameters":3540,"id":3561,"nodeType":"Return","src":"741:210:15"}]},"id":3563,"implemented":true,"kind":"function","modifiers":[],"name":"getController","nameLocation":"609:13:15","nodeType":"FunctionDefinition","parameters":{"id":3536,"nodeType":"ParameterList","parameters":[],"src":"622:2:15"},"returnParameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3563,"src":"648:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"},"typeName":{"id":3538,"nodeType":"UserDefinedTypeName","pathNode":{"id":3537,"name":"ETHRegistrarController","nameLocations":["648:22:15"],"nodeType":"IdentifierPath","referencedDeclaration":4564,"src":"648:22:15"},"referencedDeclaration":4564,"src":"648:22:15","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"visibility":"internal"}],"src":"647:24:15"},"scope":3735,"src":"600:358:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[4672],"body":{"id":3623,"nodeType":"Block","src":"1117:431:15","statements":[{"assignments":[3578],"declarations":[{"constant":false,"id":3578,"mutability":"mutable","name":"controller","nameLocation":"1150:10:15","nodeType":"VariableDeclaration","scope":3623,"src":"1127:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"},"typeName":{"id":3577,"nodeType":"UserDefinedTypeName","pathNode":{"id":3576,"name":"ETHRegistrarController","nameLocations":["1127:22:15"],"nodeType":"IdentifierPath","referencedDeclaration":4564,"src":"1127:22:15"},"referencedDeclaration":4564,"src":"1127:22:15","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"visibility":"internal"}],"id":3581,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3579,"name":"getController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"1163:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_ETHRegistrarController_$4564_$","typeString":"function () view returns (contract ETHRegistrarController)"}},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"nodeType":"VariableDeclarationStatement","src":"1127:51:15"},{"assignments":[3583],"declarations":[{"constant":false,"id":3583,"mutability":"mutable","name":"length","nameLocation":"1196:6:15","nodeType":"VariableDeclaration","scope":3623,"src":"1188:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3582,"name":"uint256","nodeType":"ElementaryTypeName","src":"1188:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3586,"initialValue":{"expression":{"id":3584,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"1205:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1211:6:15","memberName":"length","nodeType":"MemberAccess","src":"1205:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1188:29:15"},{"body":{"id":3621,"nodeType":"Block","src":"1261:281:15","statements":[{"assignments":[3598],"declarations":[{"constant":false,"id":3598,"mutability":"mutable","name":"price","nameLocation":"1301:5:15","nodeType":"VariableDeclaration","scope":3621,"src":"1275:31:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":3597,"nodeType":"UserDefinedTypeName","pathNode":{"id":3596,"name":"IPriceOracle.Price","nameLocations":["1275:12:15","1288:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"1275:18:15"},"referencedDeclaration":4765,"src":"1275:18:15","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"id":3607,"initialValue":{"arguments":[{"baseExpression":{"id":3601,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"1347:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":3603,"indexExpression":{"id":3602,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"1353:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1347:8:15","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":3604,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"1373:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3605,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"1399:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3599,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"1309:10:15","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1320:9:15","memberName":"rentPrice","nodeType":"MemberAccess","referencedDeclaration":4050,"src":"1309:20:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,address) view external returns (struct IPriceOracle.Price memory)"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1309:108:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"1275:142:15"},{"id":3620,"nodeType":"UncheckedBlock","src":"1431:101:15","statements":[{"expression":{"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1459:3:15","subExpression":{"id":3608,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"1461:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3610,"nodeType":"ExpressionStatement","src":"1459:3:15"},{"expression":{"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3611,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"1480:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3612,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"1490:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":3613,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1496:4:15","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"1490:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3614,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"1503:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":3615,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1509:7:15","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"1503:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1490:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1489:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1480:37:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3619,"nodeType":"ExpressionStatement","src":"1480:37:15"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3591,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"1247:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3592,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"1251:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1247:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3622,"initializationExpression":{"assignments":[3588],"declarations":[{"constant":false,"id":3588,"mutability":"mutable","name":"i","nameLocation":"1240:1:15","nodeType":"VariableDeclaration","scope":3622,"src":"1232:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3587,"name":"uint256","nodeType":"ElementaryTypeName","src":"1232:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3590,"initialValue":{"hexValue":"30","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1244:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1232:13:15"},"nodeType":"ForStatement","src":"1227:315:15"}]},"functionSelector":"591ebfb4","id":3624,"implemented":true,"kind":"function","modifiers":[],"name":"rentPrice","nameLocation":"973:9:15","nodeType":"FunctionDefinition","overrides":{"id":3572,"nodeType":"OverrideSpecifier","overrides":[],"src":"1084:8:15"},"parameters":{"id":3571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3566,"mutability":"mutable","name":"names","nameLocation":"1010:5:15","nodeType":"VariableDeclaration","scope":3624,"src":"992:23:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3564,"name":"string","nodeType":"ElementaryTypeName","src":"992:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3565,"nodeType":"ArrayTypeName","src":"992:8:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":3568,"mutability":"mutable","name":"duration","nameLocation":"1033:8:15","nodeType":"VariableDeclaration","scope":3624,"src":"1025:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"1025:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3570,"mutability":"mutable","name":"user","nameLocation":"1059:4:15","nodeType":"VariableDeclaration","scope":3624,"src":"1051:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3569,"name":"address","nodeType":"ElementaryTypeName","src":"1051:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"982:87:15"},"returnParameters":{"id":3575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3574,"mutability":"mutable","name":"total","nameLocation":"1110:5:15","nodeType":"VariableDeclaration","scope":3624,"src":"1102:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3573,"name":"uint256","nodeType":"ElementaryTypeName","src":"1102:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1101:15:15"},"scope":3735,"src":"964:584:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4680],"body":{"id":3711,"nodeType":"Block","src":"1663:671:15","statements":[{"assignments":[3635],"declarations":[{"constant":false,"id":3635,"mutability":"mutable","name":"controller","nameLocation":"1696:10:15","nodeType":"VariableDeclaration","scope":3711,"src":"1673:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"},"typeName":{"id":3634,"nodeType":"UserDefinedTypeName","pathNode":{"id":3633,"name":"ETHRegistrarController","nameLocations":["1673:22:15"],"nodeType":"IdentifierPath","referencedDeclaration":4564,"src":"1673:22:15"},"referencedDeclaration":4564,"src":"1673:22:15","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"visibility":"internal"}],"id":3638,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3636,"name":"getController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"1709:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_ETHRegistrarController_$4564_$","typeString":"function () view returns (contract ETHRegistrarController)"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1709:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"nodeType":"VariableDeclarationStatement","src":"1673:51:15"},{"assignments":[3640],"declarations":[{"constant":false,"id":3640,"mutability":"mutable","name":"length","nameLocation":"1742:6:15","nodeType":"VariableDeclaration","scope":3711,"src":"1734:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1734:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3643,"initialValue":{"expression":{"id":3641,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"1751:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1757:6:15","memberName":"length","nodeType":"MemberAccess","src":"1751:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1734:29:15"},{"assignments":[3645],"declarations":[{"constant":false,"id":3645,"mutability":"mutable","name":"total","nameLocation":"1781:5:15","nodeType":"VariableDeclaration","scope":3711,"src":"1773:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3644,"name":"uint256","nodeType":"ElementaryTypeName","src":"1773:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3646,"nodeType":"VariableDeclarationStatement","src":"1773:13:15"},{"body":{"id":3696,"nodeType":"Block","src":"1830:399:15","statements":[{"assignments":[3658],"declarations":[{"constant":false,"id":3658,"mutability":"mutable","name":"price","nameLocation":"1870:5:15","nodeType":"VariableDeclaration","scope":3696,"src":"1844:31:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":3657,"nodeType":"UserDefinedTypeName","pathNode":{"id":3656,"name":"IPriceOracle.Price","nameLocations":["1844:12:15","1857:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"1844:18:15"},"referencedDeclaration":4765,"src":"1844:18:15","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"id":3668,"initialValue":{"arguments":[{"baseExpression":{"id":3661,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"1916:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":3663,"indexExpression":{"id":3662,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"1922:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1916:8:15","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":3664,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"1942:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3665,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1968:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1972:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1968:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3659,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"1878:10:15","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1889:9:15","memberName":"rentPrice","nodeType":"MemberAccess","referencedDeclaration":4050,"src":"1878:20:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,address) view external returns (struct IPriceOracle.Price memory)"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:114:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"1844:148:15"},{"assignments":[3670],"declarations":[{"constant":false,"id":3670,"mutability":"mutable","name":"totalPrice","nameLocation":"2014:10:15","nodeType":"VariableDeclaration","scope":3696,"src":"2006:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3669,"name":"uint256","nodeType":"ElementaryTypeName","src":"2006:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3676,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3671,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"2027:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":3672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2033:4:15","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"2027:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3673,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"2040:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":3674,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2046:7:15","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"2040:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2027:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2006:47:15"},{"expression":{"arguments":[{"baseExpression":{"id":3682,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"2103:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":3684,"indexExpression":{"id":3683,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"2109:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2103:8:15","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":3685,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"2113:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3677,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"2067:10:15","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2078:5:15","memberName":"renew","nodeType":"MemberAccess","referencedDeclaration":4410,"src":"2067:16:15","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) payable external"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3680,"name":"totalPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"2091:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2067:35:15","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_string_memory_ptr_$_t_uint256_$returns$__$value","typeString":"function (string memory,uint256) payable external"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3687,"nodeType":"ExpressionStatement","src":"2067:55:15"},{"id":3695,"nodeType":"UncheckedBlock","src":"2136:83:15","statements":[{"expression":{"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2164:3:15","subExpression":{"id":3688,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"2166:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3690,"nodeType":"ExpressionStatement","src":"2164:3:15"},{"expression":{"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3691,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"2185:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3692,"name":"totalPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"2194:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2185:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3694,"nodeType":"ExpressionStatement","src":"2185:19:15"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3651,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"1816:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3652,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"1820:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1816:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3697,"initializationExpression":{"assignments":[3648],"declarations":[{"constant":false,"id":3648,"mutability":"mutable","name":"i","nameLocation":"1809:1:15","nodeType":"VariableDeclaration","scope":3697,"src":"1801:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3647,"name":"uint256","nodeType":"ElementaryTypeName","src":"1801:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3650,"initialValue":{"hexValue":"30","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1813:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1801:13:15"},"nodeType":"ForStatement","src":"1796:433:15"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":3706,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2313:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_BulkRenewal_$3735","typeString":"contract BulkRenewal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BulkRenewal_$3735","typeString":"contract BulkRenewal"}],"id":3705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2305:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3704,"name":"address","nodeType":"ElementaryTypeName","src":"2305:7:15","typeDescriptions":{}}},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2305:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:7:15","memberName":"balance","nodeType":"MemberAccess","src":"2305:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":3700,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2284:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2288:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2284:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2276:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"2276:8:15","stateMutability":"payable","typeDescriptions":{}}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2276:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2296:8:15","memberName":"transfer","nodeType":"MemberAccess","src":"2276:28:15","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2276:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3710,"nodeType":"ExpressionStatement","src":"2276:51:15"}]},"functionSelector":"e8d6dbb4","id":3712,"implemented":true,"kind":"function","modifiers":[],"name":"renewAll","nameLocation":"1563:8:15","nodeType":"FunctionDefinition","overrides":{"id":3631,"nodeType":"OverrideSpecifier","overrides":[],"src":"1654:8:15"},"parameters":{"id":3630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"mutability":"mutable","name":"names","nameLocation":"1599:5:15","nodeType":"VariableDeclaration","scope":3712,"src":"1581:23:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3625,"name":"string","nodeType":"ElementaryTypeName","src":"1581:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3626,"nodeType":"ArrayTypeName","src":"1581:8:15","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"duration","nameLocation":"1622:8:15","nodeType":"VariableDeclaration","scope":3712,"src":"1614:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1614:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1571:65:15"},"returnParameters":{"id":3632,"nodeType":"ParameterList","parameters":[],"src":"1663:0:15"},"scope":3735,"src":"1554:780:15","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3733,"nodeType":"Block","src":"2430:137:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3719,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2459:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3721,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"2479:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}],"id":3720,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2474:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2474:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2017","typeString":"type(contract IERC165)"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2488:11:15","memberName":"interfaceId","nodeType":"MemberAccess","src":"2474:25:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2459:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3725,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2515:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3727,"name":"IBulkRenewal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"2535:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBulkRenewal_$4681_$","typeString":"type(contract IBulkRenewal)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IBulkRenewal_$4681_$","typeString":"type(contract IBulkRenewal)"}],"id":3726,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2530:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2530:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IBulkRenewal_$4681","typeString":"type(contract IBulkRenewal)"}},"id":3729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2549:11:15","memberName":"interfaceId","nodeType":"MemberAccess","src":"2530:30:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2515:45:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2459:101:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3718,"id":3732,"nodeType":"Return","src":"2440:120:15"}]},"functionSelector":"01ffc9a7","id":3734,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2349:17:15","nodeType":"FunctionDefinition","parameters":{"id":3715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3714,"mutability":"mutable","name":"interfaceID","nameLocation":"2383:11:15","nodeType":"VariableDeclaration","scope":3734,"src":"2376:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3713,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2376:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2366:34:15"},"returnParameters":{"id":3718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3734,"src":"2424:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3716,"name":"bool","nodeType":"ElementaryTypeName","src":"2424:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2423:6:15"},"scope":3735,"src":"2340:227:15","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":3736,"src":"328:2241:15","usedErrors":[]}],"src":"31:2539:15"},"id":15},"contracts/ethregistrar/ETHRegistrarController.sol":{"ast":{"absolutePath":"contracts/ethregistrar/ETHRegistrarController.sol","exportedSymbols":{"Address":[1730],"BaseRegistrarImplementation":[3507],"CommitmentTooNew":[3766],"CommitmentTooOld":[3770],"DurationTooShort":[3778],"ENS":[5200],"ERC20Recoverable":[6148],"ETHRegistrarController":[4564],"IERC165":[2017],"IETHRegistrarController":[4758],"INameWrapper":[6534],"IPriceOracle":[4781],"InsufficientValue":[3786],"MaxCommitmentAgeTooHigh":[3794],"MaxCommitmentAgeTooLow":[3792],"NameNotAvailable":[3774],"Ownable":[112],"Resolver":[5399],"ResolverRequiredWhenDataSupplied":[3780],"ReverseClaimer":[5719],"ReverseRegistrar":[6070],"StringUtils":[5063],"Unauthorised":[3790],"UnexpiredCommitmentExists":[3784]},"id":4565,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3737,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:16"},{"absolutePath":"contracts/ethregistrar/BaseRegistrarImplementation.sol","file":"./BaseRegistrarImplementation.sol","id":3739,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":3508,"src":"57:78:16","symbolAliases":[{"foreign":{"id":3738,"name":"BaseRegistrarImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"65:27:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/StringUtils.sol","file":"./StringUtils.sol","id":3741,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":5064,"src":"136:46:16","symbolAliases":[{"foreign":{"id":3740,"name":"StringUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5063,"src":"144:11:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/resolvers/Resolver.sol","file":"../resolvers/Resolver.sol","id":3743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":5400,"src":"183:51:16","symbolAliases":[{"foreign":{"id":3742,"name":"Resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"191:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":3745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":5201,"src":"235:40:16","symbolAliases":[{"foreign":{"id":3744,"name":"ENS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5200,"src":"243:3:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/reverseRegistrar/ReverseRegistrar.sol","file":"../reverseRegistrar/ReverseRegistrar.sol","id":3747,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":6071,"src":"276:74:16","symbolAliases":[{"foreign":{"id":3746,"name":"ReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6070,"src":"284:16:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/reverseRegistrar/ReverseClaimer.sol","file":"../reverseRegistrar/ReverseClaimer.sol","id":3749,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":5720,"src":"351:70:16","symbolAliases":[{"foreign":{"id":3748,"name":"ReverseClaimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"359:14:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IETHRegistrarController.sol","file":"./IETHRegistrarController.sol","id":3752,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":4759,"src":"422:84:16","symbolAliases":[{"foreign":{"id":3750,"name":"IETHRegistrarController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"430:23:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3751,"name":"IPriceOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4781,"src":"455:12:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":113,"src":"508:67:16","symbolAliases":[{"foreign":{"id":3753,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"516:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":3756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":2018,"src":"576:80:16","symbolAliases":[{"foreign":{"id":3755,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"584:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":3758,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":1731,"src":"657:66:16","symbolAliases":[{"foreign":{"id":3757,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"665:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/wrapper/INameWrapper.sol","file":"../wrapper/INameWrapper.sol","id":3760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":6535,"src":"724:57:16","symbolAliases":[{"foreign":{"id":3759,"name":"INameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6534,"src":"732:12:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/ERC20Recoverable.sol","file":"../utils/ERC20Recoverable.sol","id":3762,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4565,"sourceUnit":6149,"src":"782:63:16","symbolAliases":[{"foreign":{"id":3761,"name":"ERC20Recoverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"790:16:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"errorSelector":"5320bcf9","id":3766,"name":"CommitmentTooNew","nameLocation":"853:16:16","nodeType":"ErrorDefinition","parameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3764,"mutability":"mutable","name":"commitment","nameLocation":"878:10:16","nodeType":"VariableDeclaration","scope":3766,"src":"870:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3763,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"869:20:16"},"src":"847:43:16"},{"errorSelector":"cb7690d7","id":3770,"name":"CommitmentTooOld","nameLocation":"897:16:16","nodeType":"ErrorDefinition","parameters":{"id":3769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3768,"mutability":"mutable","name":"commitment","nameLocation":"922:10:16","nodeType":"VariableDeclaration","scope":3770,"src":"914:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"914:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"913:20:16"},"src":"891:43:16"},{"errorSelector":"477707e8","id":3774,"name":"NameNotAvailable","nameLocation":"941:16:16","nodeType":"ErrorDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"name","nameLocation":"965:4:16","nodeType":"VariableDeclaration","scope":3774,"src":"958:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3771,"name":"string","nodeType":"ElementaryTypeName","src":"958:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"957:13:16"},"src":"935:36:16"},{"errorSelector":"9a71997b","id":3778,"name":"DurationTooShort","nameLocation":"978:16:16","nodeType":"ErrorDefinition","parameters":{"id":3777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3776,"mutability":"mutable","name":"duration","nameLocation":"1003:8:16","nodeType":"VariableDeclaration","scope":3778,"src":"995:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3775,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"994:18:16"},"src":"972:41:16"},{"errorSelector":"d3f605c4","id":3780,"name":"ResolverRequiredWhenDataSupplied","nameLocation":"1020:32:16","nodeType":"ErrorDefinition","parameters":{"id":3779,"nodeType":"ParameterList","parameters":[],"src":"1052:2:16"},"src":"1014:41:16"},{"errorSelector":"0a059d71","id":3784,"name":"UnexpiredCommitmentExists","nameLocation":"1062:25:16","nodeType":"ErrorDefinition","parameters":{"id":3783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3782,"mutability":"mutable","name":"commitment","nameLocation":"1096:10:16","nodeType":"VariableDeclaration","scope":3784,"src":"1088:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1088:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1087:20:16"},"src":"1056:52:16"},{"errorSelector":"11011294","id":3786,"name":"InsufficientValue","nameLocation":"1115:17:16","nodeType":"ErrorDefinition","parameters":{"id":3785,"nodeType":"ParameterList","parameters":[],"src":"1132:2:16"},"src":"1109:26:16"},{"errorSelector":"e4fd57ae","id":3790,"name":"Unauthorised","nameLocation":"1142:12:16","nodeType":"ErrorDefinition","parameters":{"id":3789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3788,"mutability":"mutable","name":"node","nameLocation":"1163:4:16","nodeType":"VariableDeclaration","scope":3790,"src":"1155:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1155:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1154:14:16"},"src":"1136:33:16"},{"errorSelector":"3e5aa838","id":3792,"name":"MaxCommitmentAgeTooLow","nameLocation":"1176:22:16","nodeType":"ErrorDefinition","parameters":{"id":3791,"nodeType":"ParameterList","parameters":[],"src":"1198:2:16"},"src":"1170:31:16"},{"errorSelector":"2d0c6794","id":3794,"name":"MaxCommitmentAgeTooHigh","nameLocation":"1208:23:16","nodeType":"ErrorDefinition","parameters":{"id":3793,"nodeType":"ParameterList","parameters":[],"src":"1231:2:16"},"src":"1202:32:16"},{"abstract":false,"baseContracts":[{"baseName":{"id":3796,"name":"Ownable","nameLocations":["1364:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"1364:7:16"},"id":3797,"nodeType":"InheritanceSpecifier","src":"1364:7:16"},{"baseName":{"id":3798,"name":"IETHRegistrarController","nameLocations":["1377:23:16"],"nodeType":"IdentifierPath","referencedDeclaration":4758,"src":"1377:23:16"},"id":3799,"nodeType":"InheritanceSpecifier","src":"1377:23:16"},{"baseName":{"id":3800,"name":"IERC165","nameLocations":["1406:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"1406:7:16"},"id":3801,"nodeType":"InheritanceSpecifier","src":"1406:7:16"},{"baseName":{"id":3802,"name":"ERC20Recoverable","nameLocations":["1419:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":6148,"src":"1419:16:16"},"id":3803,"nodeType":"InheritanceSpecifier","src":"1419:16:16"},{"baseName":{"id":3804,"name":"ReverseClaimer","nameLocations":["1441:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":5719,"src":"1441:14:16"},"id":3805,"nodeType":"InheritanceSpecifier","src":"1441:14:16"}],"canonicalName":"ETHRegistrarController","contractDependencies":[],"contractKind":"contract","documentation":{"id":3795,"nodeType":"StructuredDocumentation","src":"1236:88:16","text":" @dev A registrar controller for registering and renewing names at fixed cost."},"fullyImplemented":true,"id":4564,"linearizedBaseContracts":[4564,5719,6148,2017,4758,112,1752],"name":"ETHRegistrarController","nameLocation":"1334:22:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3807,"libraryName":{"id":3806,"name":"StringUtils","nameLocations":["1468:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":5063,"src":"1468:11:16"},"nodeType":"UsingForDirective","src":"1462:24:16"},{"global":false,"id":3810,"libraryName":{"id":3808,"name":"Address","nameLocations":["1497:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":1730,"src":"1497:7:16"},"nodeType":"UsingForDirective","src":"1491:26:16","typeName":{"id":3809,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":true,"functionSelector":"8a95b09f","id":3813,"mutability":"constant","name":"MIN_REGISTRATION_DURATION","nameLocation":"1547:25:16","nodeType":"VariableDeclaration","scope":4564,"src":"1523:59:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1523:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3238","id":3812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1575:7:16","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2419200_by_1","typeString":"int_const 2419200"},"value":"28"},"visibility":"public"},{"constant":true,"id":3816,"mutability":"constant","name":"ETH_NODE","nameLocation":"1613:8:16","nodeType":"VariableDeclaration","scope":4564,"src":"1588:110:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1588:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307864303531653466386362313837306638373762303032363665313239323332326265613463343932613939333334383865393464376331613933356538646661","id":3815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:66:16","typeDescriptions":{"typeIdentifier":"t_rational_94225767423188749387027829997019044638818162593148848315697732301206285356538_by_1","typeString":"int_const 9422...(69 digits omitted)...6538"},"value":"0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa"},"visibility":"private"},{"constant":true,"id":3823,"mutability":"constant","name":"MAX_EXPIRY","nameLocation":"1750:10:16","nodeType":"VariableDeclaration","scope":4564,"src":"1726:53:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3817,"name":"uint64","nodeType":"ElementaryTypeName","src":"1726:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"expression":{"arguments":[{"id":3820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1768:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3819,"name":"uint64","nodeType":"ElementaryTypeName","src":"1768:6:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":3818,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1763:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1763:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1776:3:16","memberName":"max","nodeType":"MemberAccess","src":"1763:16:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":3826,"mutability":"immutable","name":"base","nameLocation":"1823:4:16","nodeType":"VariableDeclaration","scope":4564,"src":"1785:42:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"},"typeName":{"id":3825,"nodeType":"UserDefinedTypeName","pathNode":{"id":3824,"name":"BaseRegistrarImplementation","nameLocations":["1785:27:16"],"nodeType":"IdentifierPath","referencedDeclaration":3507,"src":"1785:27:16"},"referencedDeclaration":3507,"src":"1785:27:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"visibility":"internal"},{"constant":false,"functionSelector":"d3419bf3","id":3829,"mutability":"mutable","name":"prices","nameLocation":"1853:6:16","nodeType":"VariableDeclaration","scope":4564,"src":"1833:26:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"},"typeName":{"id":3828,"nodeType":"UserDefinedTypeName","pathNode":{"id":3827,"name":"IPriceOracle","nameLocations":["1833:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":4781,"src":"1833:12:16"},"referencedDeclaration":4781,"src":"1833:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"visibility":"public"},{"constant":false,"functionSelector":"8d839ffe","id":3831,"mutability":"immutable","name":"minCommitmentAge","nameLocation":"1890:16:16","nodeType":"VariableDeclaration","scope":4564,"src":"1865:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1865:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"ce1e09c0","id":3833,"mutability":"immutable","name":"maxCommitmentAge","nameLocation":"1937:16:16","nodeType":"VariableDeclaration","scope":4564,"src":"1912:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1912:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"80869853","id":3836,"mutability":"immutable","name":"reverseRegistrar","nameLocation":"1993:16:16","nodeType":"VariableDeclaration","scope":4564,"src":"1959:50:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"},"typeName":{"id":3835,"nodeType":"UserDefinedTypeName","pathNode":{"id":3834,"name":"ReverseRegistrar","nameLocations":["1959:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":6070,"src":"1959:16:16"},"referencedDeclaration":6070,"src":"1959:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"visibility":"public"},{"constant":false,"functionSelector":"a8e5fbc0","id":3839,"mutability":"immutable","name":"nameWrapper","nameLocation":"2045:11:16","nodeType":"VariableDeclaration","scope":4564,"src":"2015:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"},"typeName":{"id":3838,"nodeType":"UserDefinedTypeName","pathNode":{"id":3837,"name":"INameWrapper","nameLocations":["2015:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":6534,"src":"2015:12:16"},"referencedDeclaration":6534,"src":"2015:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"visibility":"public"},{"constant":false,"functionSelector":"1ee0f10d","id":3842,"mutability":"mutable","name":"maxLenght","nameLocation":"2077:9:16","nodeType":"VariableDeclaration","scope":4564,"src":"2062:28:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3840,"name":"uint256","nodeType":"ElementaryTypeName","src":"2062:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":3841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2089:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"functionSelector":"8c254c0b","id":3844,"mutability":"mutable","name":"walletDev","nameLocation":"2111:9:16","nodeType":"VariableDeclaration","scope":4564,"src":"2096:24:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3843,"name":"address","nodeType":"ElementaryTypeName","src":"2096:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"839df945","id":3848,"mutability":"mutable","name":"commitments","nameLocation":"2161:11:16","nodeType":"VariableDeclaration","scope":4564,"src":"2126:46:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":3847,"keyType":{"id":3845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2134:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2126:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":3846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2145:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"69e37f151eb98a09618ddaa80c8cfaf1ce5996867c489f45b555b412271ebf27","id":3862,"name":"NameRegistered","nameLocation":"2185:14:16","nodeType":"EventDefinition","parameters":{"id":3861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3850,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"2216:4:16","nodeType":"VariableDeclaration","scope":3862,"src":"2209:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3849,"name":"string","nodeType":"ElementaryTypeName","src":"2209:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3852,"indexed":true,"mutability":"mutable","name":"label","nameLocation":"2246:5:16","nodeType":"VariableDeclaration","scope":3862,"src":"2230:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2230:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3854,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2277:5:16","nodeType":"VariableDeclaration","scope":3862,"src":"2261:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3853,"name":"address","nodeType":"ElementaryTypeName","src":"2261:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3856,"indexed":false,"mutability":"mutable","name":"baseCost","nameLocation":"2300:8:16","nodeType":"VariableDeclaration","scope":3862,"src":"2292:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3858,"indexed":false,"mutability":"mutable","name":"premium","nameLocation":"2326:7:16","nodeType":"VariableDeclaration","scope":3862,"src":"2318:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2318:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3860,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"2351:7:16","nodeType":"VariableDeclaration","scope":3862,"src":"2343:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3859,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2199:165:16"},"src":"2179:186:16"},{"anonymous":false,"eventSelector":"3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae","id":3872,"name":"NameRenewed","nameLocation":"2377:11:16","nodeType":"EventDefinition","parameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3864,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"2405:4:16","nodeType":"VariableDeclaration","scope":3872,"src":"2398:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3863,"name":"string","nodeType":"ElementaryTypeName","src":"2398:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3866,"indexed":true,"mutability":"mutable","name":"label","nameLocation":"2435:5:16","nodeType":"VariableDeclaration","scope":3872,"src":"2419:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2419:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3868,"indexed":false,"mutability":"mutable","name":"cost","nameLocation":"2458:4:16","nodeType":"VariableDeclaration","scope":3872,"src":"2450:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3867,"name":"uint256","nodeType":"ElementaryTypeName","src":"2450:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3870,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"2480:7:16","nodeType":"VariableDeclaration","scope":3872,"src":"2472:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3869,"name":"uint256","nodeType":"ElementaryTypeName","src":"2472:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2388:105:16"},"src":"2371:123:16"},{"anonymous":false,"eventSelector":"062da1737d3c3a6daed7e4acf0ffe363e818dc36e1c61230cccf0bae9d217d07","id":3878,"name":"PriceChange","nameLocation":"2506:11:16","nodeType":"EventDefinition","parameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3874,"indexed":false,"mutability":"mutable","name":"oldPrice","nameLocation":"2526:8:16","nodeType":"VariableDeclaration","scope":3878,"src":"2518:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3873,"name":"address","nodeType":"ElementaryTypeName","src":"2518:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3876,"indexed":false,"mutability":"mutable","name":"newPrice","nameLocation":"2544:8:16","nodeType":"VariableDeclaration","scope":3878,"src":"2536:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3875,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2517:36:16"},"src":"2500:54:16"},{"anonymous":false,"eventSelector":"0f520d1e728b5fb14adcc70f7ae7771acffba622d7aa24f66d1493075da5e8ab","id":3882,"name":"ChangeMaxLength","nameLocation":"2566:15:16","nodeType":"EventDefinition","parameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3880,"indexed":false,"mutability":"mutable","name":"max","nameLocation":"2590:3:16","nodeType":"VariableDeclaration","scope":3882,"src":"2582:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3879,"name":"uint256","nodeType":"ElementaryTypeName","src":"2582:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2581:13:16"},"src":"2560:35:16"},{"body":{"id":3904,"nodeType":"Block","src":"2656:138:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3890,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"2674:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2681:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2674:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a204d6178206d7573742062652067726561746572207468616e2030","id":3893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2684:35:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_524d622c2949bd970096a193a14e38cbc02013b101b84cee977074eae8b4d055","typeString":"literal_string \"ERROR: Max must be greater than 0\""},"value":"ERROR: Max must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_524d622c2949bd970096a193a14e38cbc02013b101b84cee977074eae8b4d055","typeString":"literal_string \"ERROR: Max must be greater than 0\""}],"id":3889,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2666:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2666:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3895,"nodeType":"ExpressionStatement","src":"2666:54:16"},{"expression":{"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3896,"name":"maxLenght","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"2730:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3897,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"2742:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2730:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3899,"nodeType":"ExpressionStatement","src":"2730:16:16"},{"eventCall":{"arguments":[{"id":3901,"name":"maxLenght","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"2777:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3900,"name":"ChangeMaxLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"2761:15:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3903,"nodeType":"EmitStatement","src":"2756:31:16"}]},"functionSelector":"dc2f7867","id":3905,"implemented":true,"kind":"function","modifiers":[{"id":3887,"kind":"modifierInvocation","modifierName":{"id":3886,"name":"onlyOwner","nameLocations":["2646:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2646:9:16"},"nodeType":"ModifierInvocation","src":"2646:9:16"}],"name":"setMaxLength","nameLocation":"2610:12:16","nodeType":"FunctionDefinition","parameters":{"id":3885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"_max","nameLocation":"2631:4:16","nodeType":"VariableDeclaration","scope":3905,"src":"2623:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3883,"name":"uint256","nodeType":"ElementaryTypeName","src":"2623:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2622:14:16"},"returnParameters":{"id":3888,"nodeType":"ParameterList","parameters":[],"src":"2656:0:16"},"scope":4564,"src":"2601:193:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3941,"nodeType":"Block","src":"2859:214:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3916,"name":"_prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"2898:7:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}],"id":3915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2890:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3914,"name":"address","nodeType":"ElementaryTypeName","src":"2890:7:16","typeDescriptions":{}}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2890:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"307830","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2918:3:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2910:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3918,"name":"address","nodeType":"ElementaryTypeName","src":"2910:7:16","typeDescriptions":{}}},"id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2910:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2890:32:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a20507269636573206973207a65726f2061646472657373","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2936:31:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d20f9dab246787f8599eac98f253e7599800f7d25f0eb1ccdf4e1fe88cdd5a5","typeString":"literal_string \"ERROR: Prices is zero address\""},"value":"ERROR: Prices is zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d20f9dab246787f8599eac98f253e7599800f7d25f0eb1ccdf4e1fe88cdd5a5","typeString":"literal_string \"ERROR: Prices is zero address\""}],"id":3913,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2869:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2869:108:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3925,"nodeType":"ExpressionStatement","src":"2869:108:16"},{"eventCall":{"arguments":[{"arguments":[{"id":3929,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"3013:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}],"id":3928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3005:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3927,"name":"address","nodeType":"ElementaryTypeName","src":"3005:7:16","typeDescriptions":{}}},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3005:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3933,"name":"_prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"3030:7:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}],"id":3932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3022:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3931,"name":"address","nodeType":"ElementaryTypeName","src":"3022:7:16","typeDescriptions":{}}},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3022:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3926,"name":"PriceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"2993:11:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2993:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3936,"nodeType":"EmitStatement","src":"2988:51:16"},{"expression":{"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3937,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"3050:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3938,"name":"_prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"3059:7:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"src":"3050:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"id":3940,"nodeType":"ExpressionStatement","src":"3050:16:16"}]},"functionSelector":"3b324790","id":3942,"implemented":true,"kind":"function","modifiers":[{"id":3911,"kind":"modifierInvocation","modifierName":{"id":3910,"name":"onlyOwner","nameLocations":["2849:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2849:9:16"},"nodeType":"ModifierInvocation","src":"2849:9:16"}],"name":"setPrice","nameLocation":"2809:8:16","nodeType":"FunctionDefinition","parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"_prices","nameLocation":"2831:7:16","nodeType":"VariableDeclaration","scope":3942,"src":"2818:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"},"typeName":{"id":3907,"nodeType":"UserDefinedTypeName","pathNode":{"id":3906,"name":"IPriceOracle","nameLocations":["2818:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":4781,"src":"2818:12:16"},"referencedDeclaration":4781,"src":"2818:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"visibility":"internal"}],"src":"2817:22:16"},"returnParameters":{"id":3912,"nodeType":"ParameterList","parameters":[],"src":"2859:0:16"},"scope":4564,"src":"2800:273:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4010,"nodeType":"Block","src":"3370:447:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3969,"name":"_maxCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"3384:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3970,"name":"_minCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"3405:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3384:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3976,"nodeType":"IfStatement","src":"3380:100:16","trueBody":{"id":3975,"nodeType":"Block","src":"3424:56:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3972,"name":"MaxCommitmentAgeTooLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"3445:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3445:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3974,"nodeType":"RevertStatement","src":"3438:31:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3977,"name":"_maxCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"3494:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3978,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3514:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3520:9:16","memberName":"timestamp","nodeType":"MemberAccess","src":"3514:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3494:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3985,"nodeType":"IfStatement","src":"3490:98:16","trueBody":{"id":3984,"nodeType":"Block","src":"3531:57:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3981,"name":"MaxCommitmentAgeTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"3552:23:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3983,"nodeType":"RevertStatement","src":"3545:32:16"}]}},{"expression":{"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3986,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"3598:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3987,"name":"_base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"3605:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"src":"3598:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"id":3989,"nodeType":"ExpressionStatement","src":"3598:12:16"},{"expression":{"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3990,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"3620:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3991,"name":"_prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"3629:7:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"src":"3620:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"id":3993,"nodeType":"ExpressionStatement","src":"3620:16:16"},{"expression":{"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3994,"name":"minCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"3646:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3995,"name":"_minCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"3665:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3646:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3997,"nodeType":"ExpressionStatement","src":"3646:36:16"},{"expression":{"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3998,"name":"maxCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"3692:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3999,"name":"_maxCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"3711:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3692:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4001,"nodeType":"ExpressionStatement","src":"3692:36:16"},{"expression":{"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4002,"name":"reverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"3738:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4003,"name":"_reverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"3757:17:16","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"src":"3738:36:16","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"id":4005,"nodeType":"ExpressionStatement","src":"3738:36:16"},{"expression":{"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4006,"name":"nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"3784:11:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4007,"name":"_nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3798:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"src":"3784:26:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"id":4009,"nodeType":"ExpressionStatement","src":"3784:26:16"}]},"id":4011,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3964,"name":"_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"3352:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},{"expression":{"id":3965,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3358:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3362:6:16","memberName":"sender","nodeType":"MemberAccess","src":"3358:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3967,"kind":"baseConstructorSpecifier","modifierName":{"id":3963,"name":"ReverseClaimer","nameLocations":["3337:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":5719,"src":"3337:14:16"},"nodeType":"ModifierInvocation","src":"3337:32:16"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3945,"mutability":"mutable","name":"_base","nameLocation":"3128:5:16","nodeType":"VariableDeclaration","scope":4011,"src":"3100:33:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"},"typeName":{"id":3944,"nodeType":"UserDefinedTypeName","pathNode":{"id":3943,"name":"BaseRegistrarImplementation","nameLocations":["3100:27:16"],"nodeType":"IdentifierPath","referencedDeclaration":3507,"src":"3100:27:16"},"referencedDeclaration":3507,"src":"3100:27:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"_prices","nameLocation":"3156:7:16","nodeType":"VariableDeclaration","scope":4011,"src":"3143:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"},"typeName":{"id":3947,"nodeType":"UserDefinedTypeName","pathNode":{"id":3946,"name":"IPriceOracle","nameLocations":["3143:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":4781,"src":"3143:12:16"},"referencedDeclaration":4781,"src":"3143:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"_minCommitmentAge","nameLocation":"3181:17:16","nodeType":"VariableDeclaration","scope":4011,"src":"3173:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3952,"mutability":"mutable","name":"_maxCommitmentAge","nameLocation":"3216:17:16","nodeType":"VariableDeclaration","scope":4011,"src":"3208:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3951,"name":"uint256","nodeType":"ElementaryTypeName","src":"3208:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3955,"mutability":"mutable","name":"_reverseRegistrar","nameLocation":"3260:17:16","nodeType":"VariableDeclaration","scope":4011,"src":"3243:34:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"},"typeName":{"id":3954,"nodeType":"UserDefinedTypeName","pathNode":{"id":3953,"name":"ReverseRegistrar","nameLocations":["3243:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":6070,"src":"3243:16:16"},"referencedDeclaration":6070,"src":"3243:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"visibility":"internal"},{"constant":false,"id":3958,"mutability":"mutable","name":"_nameWrapper","nameLocation":"3300:12:16","nodeType":"VariableDeclaration","scope":4011,"src":"3287:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"},"typeName":{"id":3957,"nodeType":"UserDefinedTypeName","pathNode":{"id":3956,"name":"INameWrapper","nameLocations":["3287:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":6534,"src":"3287:12:16"},"referencedDeclaration":6534,"src":"3287:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"visibility":"internal"},{"constant":false,"id":3961,"mutability":"mutable","name":"_ens","nameLocation":"3326:4:16","nodeType":"VariableDeclaration","scope":4011,"src":"3322:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":3960,"nodeType":"UserDefinedTypeName","pathNode":{"id":3959,"name":"ENS","nameLocations":["3322:3:16"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"3322:3:16"},"referencedDeclaration":5200,"src":"3322:3:16","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"internal"}],"src":"3090:246:16"},"returnParameters":{"id":3968,"nodeType":"ParameterList","parameters":[],"src":"3370:0:16"},"scope":4564,"src":"3079:738:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4696],"body":{"id":4049,"nodeType":"Block","src":"3987:199:16","statements":[{"assignments":[4025],"declarations":[{"constant":false,"id":4025,"mutability":"mutable","name":"label","nameLocation":"4005:5:16","nodeType":"VariableDeclaration","scope":4049,"src":"3997:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3997:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4032,"initialValue":{"arguments":[{"arguments":[{"id":4029,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"4029:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4023:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4027,"name":"bytes","nodeType":"ElementaryTypeName","src":"4023:5:16","typeDescriptions":{}}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4023:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4026,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4013:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4013:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3997:38:16"},{"expression":{"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4033,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"4045:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4036,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"4079:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":4041,"name":"label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"4122:5:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4114:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4039,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:16","typeDescriptions":{}}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4114:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4037,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"4097:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4102:11:16","memberName":"nameExpires","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"4097:16:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4097:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4044,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"4143:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4045,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"4165:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4034,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"4053:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceOracle_$4781","typeString":"contract IPriceOracle"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4060:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4780,"src":"4053:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,uint256,address) view external returns (struct IPriceOracle.Price memory)"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4053:126:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"src":"4045:134:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4048,"nodeType":"ExpressionStatement","src":"4045:134:16"}]},"functionSelector":"44d31f06","id":4050,"implemented":true,"kind":"function","modifiers":[],"name":"rentPrice","nameLocation":"3832:9:16","nodeType":"FunctionDefinition","overrides":{"id":4019,"nodeType":"OverrideSpecifier","overrides":[],"src":"3936:8:16"},"parameters":{"id":4018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4013,"mutability":"mutable","name":"name","nameLocation":"3865:4:16","nodeType":"VariableDeclaration","scope":4050,"src":"3851:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4012,"name":"string","nodeType":"ElementaryTypeName","src":"3851:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4015,"mutability":"mutable","name":"duration","nameLocation":"3887:8:16","nodeType":"VariableDeclaration","scope":4050,"src":"3879:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4014,"name":"uint256","nodeType":"ElementaryTypeName","src":"3879:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4017,"mutability":"mutable","name":"user","nameLocation":"3913:4:16","nodeType":"VariableDeclaration","scope":4050,"src":"3905:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4016,"name":"address","nodeType":"ElementaryTypeName","src":"3905:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3841:82:16"},"returnParameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4022,"mutability":"mutable","name":"price","nameLocation":"3980:5:16","nodeType":"VariableDeclaration","scope":4050,"src":"3954:31:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4021,"nodeType":"UserDefinedTypeName","pathNode":{"id":4020,"name":"IPriceOracle.Price","nameLocations":["3954:12:16","3967:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"3954:18:16"},"referencedDeclaration":4765,"src":"3954:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"src":"3953:33:16"},"scope":4564,"src":"3823:363:16","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4063,"nodeType":"Block","src":"4254:50:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4057,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"4271:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4276:6:16","memberName":"strlen","nodeType":"MemberAccess","referencedDeclaration":5062,"src":"4271:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (uint256)"}},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4271:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4060,"name":"maxLenght","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"4288:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4271:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4056,"id":4062,"nodeType":"Return","src":"4264:33:16"}]},"functionSelector":"9791c097","id":4064,"implemented":true,"kind":"function","modifiers":[],"name":"valid","nameLocation":"4201:5:16","nodeType":"FunctionDefinition","parameters":{"id":4053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4052,"mutability":"mutable","name":"name","nameLocation":"4221:4:16","nodeType":"VariableDeclaration","scope":4064,"src":"4207:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4051,"name":"string","nodeType":"ElementaryTypeName","src":"4207:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4206:20:16"},"returnParameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4064,"src":"4248:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4054,"name":"bool","nodeType":"ElementaryTypeName","src":"4248:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4247:6:16"},"scope":4564,"src":"4192:112:16","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4703],"body":{"id":4093,"nodeType":"Block","src":"4385:117:16","statements":[{"assignments":[4073],"declarations":[{"constant":false,"id":4073,"mutability":"mutable","name":"label","nameLocation":"4403:5:16","nodeType":"VariableDeclaration","scope":4093,"src":"4395:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4072,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4395:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4080,"initialValue":{"arguments":[{"arguments":[{"id":4077,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"4427:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4421:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4075,"name":"bytes","nodeType":"ElementaryTypeName","src":"4421:5:16","typeDescriptions":{}}},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4421:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4074,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4411:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4411:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4395:38:16"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4082,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"4456:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4081,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4064,"src":"4450:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$returns$_t_bool_$","typeString":"function (string memory) view returns (bool)"}},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4450:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":4088,"name":"label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"4488:5:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4480:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4086,"name":"uint256","nodeType":"ElementaryTypeName","src":"4480:7:16","typeDescriptions":{}}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4480:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4084,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"4465:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseRegistrarImplementation_$3507","typeString":"contract BaseRegistrarImplementation"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4470:9:16","memberName":"available","nodeType":"MemberAccess","referencedDeclaration":3265,"src":"4465:14:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view external returns (bool)"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4465:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4450:45:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4071,"id":4092,"nodeType":"Return","src":"4443:52:16"}]},"functionSelector":"aeb8ce9b","id":4094,"implemented":true,"kind":"function","modifiers":[],"name":"available","nameLocation":"4319:9:16","nodeType":"FunctionDefinition","overrides":{"id":4068,"nodeType":"OverrideSpecifier","overrides":[],"src":"4361:8:16"},"parameters":{"id":4067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4066,"mutability":"mutable","name":"name","nameLocation":"4343:4:16","nodeType":"VariableDeclaration","scope":4094,"src":"4329:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4065,"name":"string","nodeType":"ElementaryTypeName","src":"4329:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4328:20:16"},"returnParameters":{"id":4071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4094,"src":"4379:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4069,"name":"bool","nodeType":"ElementaryTypeName","src":"4379:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4378:6:16"},"scope":4564,"src":"4310:192:16","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4725],"body":{"id":4156,"nodeType":"Block","src":"4801:521:16","statements":[{"assignments":[4118],"declarations":[{"constant":false,"id":4118,"mutability":"mutable","name":"label","nameLocation":"4819:5:16","nodeType":"VariableDeclaration","scope":4156,"src":"4811:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4811:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4125,"initialValue":{"arguments":[{"arguments":[{"id":4122,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4096,"src":"4843:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4837:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4120,"name":"bytes","nodeType":"ElementaryTypeName","src":"4837:5:16","typeDescriptions":{}}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4837:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4119,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4827:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4827:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4811:38:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4126,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"4863:4:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4868:6:16","memberName":"length","nodeType":"MemberAccess","src":"4863:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4877:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4863:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4130,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"4882:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4902:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4894:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4131,"name":"address","nodeType":"ElementaryTypeName","src":"4894:7:16","typeDescriptions":{}}},"id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4894:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4882:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4863:41:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4141,"nodeType":"IfStatement","src":"4859:113:16","trueBody":{"id":4140,"nodeType":"Block","src":"4906:66:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4137,"name":"ResolverRequiredWhenDataSupplied","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"4927:32:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4927:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4139,"nodeType":"RevertStatement","src":"4920:41:16"}]}},{"expression":{"arguments":[{"arguments":[{"id":4145,"name":"label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"5059:5:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4146,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"5086:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4147,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"5114:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4148,"name":"secret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"5144:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4149,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"5172:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4150,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"5202:4:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},{"id":4151,"name":"reverseRecord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"5228:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4152,"name":"ownerControlledFuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5263:20:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":4143,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5027:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5031:6:16","memberName":"encode","nodeType":"MemberAccess","src":"5027:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:274:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4142,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5000:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5000:315:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4116,"id":4155,"nodeType":"Return","src":"4981:334:16"}]},"functionSelector":"65a69dcf","id":4157,"implemented":true,"kind":"function","modifiers":[],"name":"makeCommitment","nameLocation":"4517:14:16","nodeType":"FunctionDefinition","overrides":{"id":4113,"nodeType":"OverrideSpecifier","overrides":[],"src":"4774:8:16"},"parameters":{"id":4112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4096,"mutability":"mutable","name":"name","nameLocation":"4555:4:16","nodeType":"VariableDeclaration","scope":4157,"src":"4541:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4095,"name":"string","nodeType":"ElementaryTypeName","src":"4541:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4098,"mutability":"mutable","name":"_owner","nameLocation":"4577:6:16","nodeType":"VariableDeclaration","scope":4157,"src":"4569:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4097,"name":"address","nodeType":"ElementaryTypeName","src":"4569:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4100,"mutability":"mutable","name":"duration","nameLocation":"4601:8:16","nodeType":"VariableDeclaration","scope":4157,"src":"4593:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4099,"name":"uint256","nodeType":"ElementaryTypeName","src":"4593:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4102,"mutability":"mutable","name":"secret","nameLocation":"4627:6:16","nodeType":"VariableDeclaration","scope":4157,"src":"4619:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4619:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4104,"mutability":"mutable","name":"resolver","nameLocation":"4651:8:16","nodeType":"VariableDeclaration","scope":4157,"src":"4643:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4103,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4107,"mutability":"mutable","name":"data","nameLocation":"4686:4:16","nodeType":"VariableDeclaration","scope":4157,"src":"4669:21:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4105,"name":"bytes","nodeType":"ElementaryTypeName","src":"4669:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4106,"nodeType":"ArrayTypeName","src":"4669:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":4109,"mutability":"mutable","name":"reverseRecord","nameLocation":"4705:13:16","nodeType":"VariableDeclaration","scope":4157,"src":"4700:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4108,"name":"bool","nodeType":"ElementaryTypeName","src":"4700:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"4735:20:16","nodeType":"VariableDeclaration","scope":4157,"src":"4728:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4110,"name":"uint16","nodeType":"ElementaryTypeName","src":"4728:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4531:230:16"},"returnParameters":{"id":4116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4157,"src":"4792:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4792:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4791:9:16"},"scope":4564,"src":"4508:814:16","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[4730],"body":{"id":4182,"nodeType":"Block","src":"5380:207:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4164,"name":"commitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"5411:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4166,"indexExpression":{"id":4165,"name":"commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"5423:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5411:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4167,"name":"maxCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"5437:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5411:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4169,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5456:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5462:9:16","memberName":"timestamp","nodeType":"MemberAccess","src":"5456:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5411:60:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a20556e65787069726564436f6d6d69746d656e74457869737473","id":4172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5485:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_77c5dbfe580780d3ca6c71c18cc08361fbe47934562def7d737755ffabe607b1","typeString":"literal_string \"ERROR: UnexpiredCommitmentExists\""},"value":"ERROR: UnexpiredCommitmentExists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77c5dbfe580780d3ca6c71c18cc08361fbe47934562def7d737755ffabe607b1","typeString":"literal_string \"ERROR: UnexpiredCommitmentExists\""}],"id":4163,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5390:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5390:139:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4174,"nodeType":"ExpressionStatement","src":"5390:139:16"},{"expression":{"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4175,"name":"commitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"5539:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4177,"indexExpression":{"id":4176,"name":"commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"5551:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5539:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4178,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5565:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5571:9:16","memberName":"timestamp","nodeType":"MemberAccess","src":"5565:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5539:41:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4181,"nodeType":"ExpressionStatement","src":"5539:41:16"}]},"functionSelector":"f14fcbc8","id":4183,"implemented":true,"kind":"function","modifiers":[],"name":"commit","nameLocation":"5337:6:16","nodeType":"FunctionDefinition","overrides":{"id":4161,"nodeType":"OverrideSpecifier","overrides":[],"src":"5371:8:16"},"parameters":{"id":4160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"commitment","nameLocation":"5352:10:16","nodeType":"VariableDeclaration","scope":4183,"src":"5344:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5344:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5343:20:16"},"returnParameters":{"id":4162,"nodeType":"ParameterList","parameters":[],"src":"5380:0:16"},"scope":4564,"src":"5328:259:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4750],"body":{"id":4326,"nodeType":"Block","src":"5867:1304:16","statements":[{"assignments":[4208],"declarations":[{"constant":false,"id":4208,"mutability":"mutable","name":"price","nameLocation":"5903:5:16","nodeType":"VariableDeclaration","scope":4326,"src":"5877:31:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4207,"nodeType":"UserDefinedTypeName","pathNode":{"id":4206,"name":"IPriceOracle.Price","nameLocations":["5877:12:16","5890:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"5877:18:16"},"referencedDeclaration":4765,"src":"5877:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"id":4215,"initialValue":{"arguments":[{"id":4210,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"5921:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4211,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"5927:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4212,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5937:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5941:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5937:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4209,"name":"rentPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"5911:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,address) view returns (struct IPriceOracle.Price memory)"}},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5911:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"5877:71:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4216,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5962:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5966:5:16","memberName":"value","nodeType":"MemberAccess","src":"5962:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4218,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"5974:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5980:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"5974:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4220,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"5987:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5993:7:16","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"5987:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5974:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5962:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4228,"nodeType":"IfStatement","src":"5958:95:16","trueBody":{"id":4227,"nodeType":"Block","src":"6002:51:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4224,"name":"InsufficientValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"6023:17:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4226,"nodeType":"RevertStatement","src":"6016:26:16"}]}},{"expression":{"arguments":[{"id":4230,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6095:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4231,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"6113:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4233,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6167:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4234,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"6189:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4235,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"6213:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4236,"name":"secret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"6239:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4237,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"6263:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4238,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"6289:4:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},{"id":4239,"name":"reverseRecord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"6311:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4240,"name":"ownerControlledFuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"6342:20:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4232,"name":"makeCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"6135:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_bytes32_$_t_address_$_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_$_t_bool_$_t_uint16_$returns$_t_bytes32_$","typeString":"function (string memory,address,uint256,bytes32,address,bytes calldata[] calldata,bool,uint16) pure returns (bytes32)"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6135:241:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4229,"name":"_consumeCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"6063:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (string memory,uint256,bytes32)"}},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6063:323:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4243,"nodeType":"ExpressionStatement","src":"6063:323:16"},{"assignments":[4245],"declarations":[{"constant":false,"id":4245,"mutability":"mutable","name":"expires","nameLocation":"6405:7:16","nodeType":"VariableDeclaration","scope":4326,"src":"6397:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4244,"name":"uint256","nodeType":"ElementaryTypeName","src":"6397:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4254,"initialValue":{"arguments":[{"id":4248,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6462:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4249,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"6480:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4250,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"6500:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4251,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"6522:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4252,"name":"ownerControlledFuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"6544:20:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":4246,"name":"nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"6415:11:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6427:21:16","memberName":"registerAndWrapETH2LD","nodeType":"MemberAccess","referencedDeclaration":6324,"src":"6415:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_address_$_t_uint16_$returns$_t_uint256_$","typeString":"function (string memory,address,uint256,address,uint16) external returns (uint256)"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6415:159:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6397:177:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4255,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"6589:4:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6594:6:16","memberName":"length","nodeType":"MemberAccess","src":"6589:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6603:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6589:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4271,"nodeType":"IfStatement","src":"6585:97:16","trueBody":{"id":4270,"nodeType":"Block","src":"6606:76:16","statements":[{"expression":{"arguments":[{"id":4260,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"6632:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":4264,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6658:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6652:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4262,"name":"bytes","nodeType":"ElementaryTypeName","src":"6652:5:16","typeDescriptions":{}}},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6652:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4261,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6642:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6642:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4267,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"6666:4:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}],"id":4259,"name":"_setRecords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4538,"src":"6620:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_$returns$__$","typeString":"function (address,bytes32,bytes calldata[] calldata)"}},"id":4268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4269,"nodeType":"ExpressionStatement","src":"6620:51:16"}]}},{"condition":{"id":4272,"name":"reverseRecord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"6696:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4281,"nodeType":"IfStatement","src":"6692:89:16","trueBody":{"id":4280,"nodeType":"Block","src":"6711:70:16","statements":[{"expression":{"arguments":[{"id":4274,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6743:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4275,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"6749:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4276,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6759:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6763:6:16","memberName":"sender","nodeType":"MemberAccess","src":"6759:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4273,"name":"_setReverseRecord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"6725:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$","typeString":"function (string memory,address,address)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6725:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4279,"nodeType":"ExpressionStatement","src":"6725:45:16"}]}},{"eventCall":{"arguments":[{"id":4283,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6824:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"arguments":[{"arguments":[{"id":4287,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"6858:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6852:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4285,"name":"bytes","nodeType":"ElementaryTypeName","src":"6852:5:16","typeDescriptions":{}}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6852:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4284,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6842:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4290,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"6878:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4291,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"6898:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4292,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6904:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"6898:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4293,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"6922:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6928:7:16","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"6922:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4295,"name":"expires","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"6949:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4282,"name":"NameRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3862,"src":"6796:14:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,bytes32,address,uint256,uint256,uint256)"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6796:187:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4297,"nodeType":"EmitStatement","src":"6791:192:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4298,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6998:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7002:5:16","memberName":"value","nodeType":"MemberAccess","src":"6998:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4300,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"7011:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7017:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"7011:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4302,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"7024:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7030:7:16","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"7024:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7011:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7010:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6998:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4325,"nodeType":"IfStatement","src":"6994:171:16","trueBody":{"id":4324,"nodeType":"Block","src":"7040:125:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4313,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7100:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7104:5:16","memberName":"value","nodeType":"MemberAccess","src":"7100:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4315,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"7113:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7119:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"7113:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4317,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"7126:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7132:7:16","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"7126:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7113:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4320,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7112:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:40:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4309,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7062:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7066:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7062:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7054:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4307,"name":"address","nodeType":"ElementaryTypeName","src":"7054:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7054:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7074:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"7054:28:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7054:100:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4323,"nodeType":"ExpressionStatement","src":"7054:100:16"}]}}]},"functionSelector":"74694a2b","id":4327,"implemented":true,"kind":"function","modifiers":[],"name":"register","nameLocation":"5602:8:16","nodeType":"FunctionDefinition","overrides":{"id":4202,"nodeType":"OverrideSpecifier","overrides":[],"src":"5858:8:16"},"parameters":{"id":4201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4185,"mutability":"mutable","name":"name","nameLocation":"5636:4:16","nodeType":"VariableDeclaration","scope":4327,"src":"5620:20:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4184,"name":"string","nodeType":"ElementaryTypeName","src":"5620:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4187,"mutability":"mutable","name":"_owner","nameLocation":"5658:6:16","nodeType":"VariableDeclaration","scope":4327,"src":"5650:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4186,"name":"address","nodeType":"ElementaryTypeName","src":"5650:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4189,"mutability":"mutable","name":"duration","nameLocation":"5682:8:16","nodeType":"VariableDeclaration","scope":4327,"src":"5674:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4188,"name":"uint256","nodeType":"ElementaryTypeName","src":"5674:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4191,"mutability":"mutable","name":"secret","nameLocation":"5708:6:16","nodeType":"VariableDeclaration","scope":4327,"src":"5700:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4190,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5700:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4193,"mutability":"mutable","name":"resolver","nameLocation":"5732:8:16","nodeType":"VariableDeclaration","scope":4327,"src":"5724:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4192,"name":"address","nodeType":"ElementaryTypeName","src":"5724:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4196,"mutability":"mutable","name":"data","nameLocation":"5767:4:16","nodeType":"VariableDeclaration","scope":4327,"src":"5750:21:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4194,"name":"bytes","nodeType":"ElementaryTypeName","src":"5750:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4195,"nodeType":"ArrayTypeName","src":"5750:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":4198,"mutability":"mutable","name":"reverseRecord","nameLocation":"5786:13:16","nodeType":"VariableDeclaration","scope":4327,"src":"5781:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4197,"name":"bool","nodeType":"ElementaryTypeName","src":"5781:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4200,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"5816:20:16","nodeType":"VariableDeclaration","scope":4327,"src":"5809:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4199,"name":"uint16","nodeType":"ElementaryTypeName","src":"5809:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5610:232:16"},"returnParameters":{"id":4203,"nodeType":"ParameterList","parameters":[],"src":"5867:0:16"},"scope":4564,"src":"5593:1578:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[4757],"body":{"id":4409,"nodeType":"Block","src":"7280:518:16","statements":[{"assignments":[4336],"declarations":[{"constant":false,"id":4336,"mutability":"mutable","name":"labelhash","nameLocation":"7298:9:16","nodeType":"VariableDeclaration","scope":4409,"src":"7290:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7290:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4343,"initialValue":{"arguments":[{"arguments":[{"id":4340,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"7326:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7320:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4338,"name":"bytes","nodeType":"ElementaryTypeName","src":"7320:5:16","typeDescriptions":{}}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7320:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4337,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7310:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7310:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7290:42:16"},{"assignments":[4345],"declarations":[{"constant":false,"id":4345,"mutability":"mutable","name":"tokenId","nameLocation":"7350:7:16","nodeType":"VariableDeclaration","scope":4409,"src":"7342:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4344,"name":"uint256","nodeType":"ElementaryTypeName","src":"7342:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4350,"initialValue":{"arguments":[{"id":4348,"name":"labelhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"7368:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7360:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4346,"name":"uint256","nodeType":"ElementaryTypeName","src":"7360:7:16","typeDescriptions":{}}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7360:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7342:36:16"},{"assignments":[4355],"declarations":[{"constant":false,"id":4355,"mutability":"mutable","name":"price","nameLocation":"7414:5:16","nodeType":"VariableDeclaration","scope":4409,"src":"7388:31:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4354,"nodeType":"UserDefinedTypeName","pathNode":{"id":4353,"name":"IPriceOracle.Price","nameLocations":["7388:12:16","7401:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"7388:18:16"},"referencedDeclaration":4765,"src":"7388:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"id":4362,"initialValue":{"arguments":[{"id":4357,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"7432:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4358,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"7438:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4359,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7448:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7452:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7448:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4356,"name":"rentPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"7422:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,address) view returns (struct IPriceOracle.Price memory)"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7422:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"7388:71:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4363,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7473:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7477:5:16","memberName":"value","nodeType":"MemberAccess","src":"7473:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4365,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"7485:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7491:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"7485:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7473:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4372,"nodeType":"IfStatement","src":"7469:79:16","trueBody":{"id":4371,"nodeType":"Block","src":"7497:51:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4368,"name":"InsufficientValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"7518:17:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7518:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4370,"nodeType":"RevertStatement","src":"7511:26:16"}]}},{"assignments":[4374],"declarations":[{"constant":false,"id":4374,"mutability":"mutable","name":"expires","nameLocation":"7565:7:16","nodeType":"VariableDeclaration","scope":4409,"src":"7557:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4373,"name":"uint256","nodeType":"ElementaryTypeName","src":"7557:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4380,"initialValue":{"arguments":[{"id":4377,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"7593:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4378,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"7602:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4375,"name":"nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"7575:11:16","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6534","typeString":"contract INameWrapper"}},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7587:5:16","memberName":"renew","nodeType":"MemberAccess","referencedDeclaration":6333,"src":"7575:17:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) external returns (uint256)"}},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7575:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7557:54:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4381,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7626:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7630:5:16","memberName":"value","nodeType":"MemberAccess","src":"7626:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4383,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"7638:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7644:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"7638:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7626:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4400,"nodeType":"IfStatement","src":"7622:105:16","trueBody":{"id":4399,"nodeType":"Block","src":"7650:77:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7693:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7697:5:16","memberName":"value","nodeType":"MemberAccess","src":"7693:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4394,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"7705:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7711:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"7705:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7693:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4388,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7672:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7676:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7672:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7664:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4386,"name":"address","nodeType":"ElementaryTypeName","src":"7664:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7664:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7684:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"7664:28:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7664:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4398,"nodeType":"ExpressionStatement","src":"7664:52:16"}]}},{"eventCall":{"arguments":[{"id":4402,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"7754:4:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4403,"name":"labelhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"7760:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4404,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"7771:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7777:4:16","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"7771:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4406,"name":"expires","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"7783:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4401,"name":"NameRenewed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"7742:11:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,bytes32,uint256,uint256)"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7742:49:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4408,"nodeType":"EmitStatement","src":"7737:54:16"}]},"functionSelector":"acf1a841","id":4410,"implemented":true,"kind":"function","modifiers":[],"name":"renew","nameLocation":"7186:5:16","nodeType":"FunctionDefinition","overrides":{"id":4333,"nodeType":"OverrideSpecifier","overrides":[],"src":"7271:8:16"},"parameters":{"id":4332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4329,"mutability":"mutable","name":"name","nameLocation":"7217:4:16","nodeType":"VariableDeclaration","scope":4410,"src":"7201:20:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4328,"name":"string","nodeType":"ElementaryTypeName","src":"7201:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4331,"mutability":"mutable","name":"duration","nameLocation":"7239:8:16","nodeType":"VariableDeclaration","scope":4410,"src":"7231:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"7231:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7191:62:16"},"returnParameters":{"id":4334,"nodeType":"ParameterList","parameters":[],"src":"7280:0:16"},"scope":4564,"src":"7177:621:16","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4426,"nodeType":"Block","src":"7831:65:16","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":4421,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7875:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}],"id":4420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7867:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4419,"name":"address","nodeType":"ElementaryTypeName","src":"7867:7:16","typeDescriptions":{}}},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7867:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7881:7:16","memberName":"balance","nodeType":"MemberAccess","src":"7867:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4415,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"7849:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7849:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7841:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4413,"name":"address","nodeType":"ElementaryTypeName","src":"7841:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7841:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7858:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"7841:25:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7841:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4425,"nodeType":"ExpressionStatement","src":"7841:48:16"}]},"functionSelector":"3ccfd60b","id":4427,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"7813:8:16","nodeType":"FunctionDefinition","parameters":{"id":4411,"nodeType":"ParameterList","parameters":[],"src":"7821:2:16"},"returnParameters":{"id":4412,"nodeType":"ParameterList","parameters":[],"src":"7831:0:16"},"scope":4564,"src":"7804:92:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2016],"body":{"id":4448,"nodeType":"Block","src":"7992:148:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4434,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"8021:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"8041:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}],"id":4435,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8036:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8036:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2017","typeString":"type(contract IERC165)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8050:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"8036:25:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8021:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4440,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"8077:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4442,"name":"IETHRegistrarController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"8097:23:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IETHRegistrarController_$4758_$","typeString":"type(contract IETHRegistrarController)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IETHRegistrarController_$4758_$","typeString":"type(contract IETHRegistrarController)"}],"id":4441,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8092:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8092:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IETHRegistrarController_$4758","typeString":"type(contract IETHRegistrarController)"}},"id":4444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8122:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"8092:41:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8077:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8021:112:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4433,"id":4447,"nodeType":"Return","src":"8002:131:16"}]},"functionSelector":"01ffc9a7","id":4449,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"7911:17:16","nodeType":"FunctionDefinition","parameters":{"id":4430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4429,"mutability":"mutable","name":"interfaceID","nameLocation":"7945:11:16","nodeType":"VariableDeclaration","scope":4449,"src":"7938:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4428,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7938:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7928:34:16"},"returnParameters":{"id":4433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4449,"src":"7986:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4431,"name":"bool","nodeType":"ElementaryTypeName","src":"7986:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7985:6:16"},"scope":4564,"src":"7902:238:16","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":4502,"nodeType":"Block","src":"8301:676:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4459,"name":"commitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"8416:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4461,"indexExpression":{"id":4460,"name":"commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"8428:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8416:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4462,"name":"minCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"8442:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8416:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4464,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8461:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8467:9:16","memberName":"timestamp","nodeType":"MemberAccess","src":"8461:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8416:60:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a20436f6d6d69746d656e74546f6f4e6577","id":4467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8490:25:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_0946b459a596337816182edac2ea275fcc985f1d2d06a59a8c54634faab47cc4","typeString":"literal_string \"ERROR: CommitmentTooNew\""},"value":"ERROR: CommitmentTooNew"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0946b459a596337816182edac2ea275fcc985f1d2d06a59a8c54634faab47cc4","typeString":"literal_string \"ERROR: CommitmentTooNew\""}],"id":4458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8395:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8395:130:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4469,"nodeType":"ExpressionStatement","src":"8395:130:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4471,"name":"commitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"8630:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4473,"indexExpression":{"id":4472,"name":"commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"8642:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8630:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4474,"name":"maxCommitmentAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"8656:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8630:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4476,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8675:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8681:9:16","memberName":"timestamp","nodeType":"MemberAccess","src":"8675:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8630:60:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a20436f6d6d697420746f206f6c64","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8704:22:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_b155139f4d9af66fe418bbae7016d6081fd7e4aa1c9e91687a03e845c67c18ba","typeString":"literal_string \"ERROR: Commit to old\""},"value":"ERROR: Commit to old"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b155139f4d9af66fe418bbae7016d6081fd7e4aa1c9e91687a03e845c67c18ba","typeString":"literal_string \"ERROR: Commit to old\""}],"id":4470,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8609:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8609:127:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4481,"nodeType":"ExpressionStatement","src":"8609:127:16"},{"expression":{"arguments":[{"arguments":[{"id":4484,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"8764:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4483,"name":"available","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"8754:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$returns$_t_bool_$","typeString":"function (string memory) view returns (bool)"}},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8754:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a204e616d654e6f74417661696c61626c65","id":4486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8771:25:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_93aa46ffb1c824c622f14fbb64b4e96e92451c6f04c2d36c76124e75c7832bb1","typeString":"literal_string \"ERROR: NameNotAvailable\""},"value":"ERROR: NameNotAvailable"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93aa46ffb1c824c622f14fbb64b4e96e92451c6f04c2d36c76124e75c7832bb1","typeString":"literal_string \"ERROR: NameNotAvailable\""}],"id":4482,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8746:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8746:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4488,"nodeType":"ExpressionStatement","src":"8746:51:16"},{"expression":{"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8808:32:16","subExpression":{"components":[{"baseExpression":{"id":4489,"name":"commitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"8816:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4491,"indexExpression":{"id":4490,"name":"commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"8828:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8816:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4492,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"8815:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4494,"nodeType":"ExpressionStatement","src":"8808:32:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4496,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"8872:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4497,"name":"MIN_REGISTRATION_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"8883:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8872:36:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552524f523a204475726174696f6e546f6f53686f7274","id":4499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8922:25:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_68b779a79149660b9f0778d5ad863a8a14900dfe8663fef7c749148c60821a91","typeString":"literal_string \"ERROR: DurationTooShort\""},"value":"ERROR: DurationTooShort"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68b779a79149660b9f0778d5ad863a8a14900dfe8663fef7c749148c60821a91","typeString":"literal_string \"ERROR: DurationTooShort\""}],"id":4495,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8851:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8851:106:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4501,"nodeType":"ExpressionStatement","src":"8851:106:16"}]},"id":4503,"implemented":true,"kind":"function","modifiers":[],"name":"_consumeCommitment","nameLocation":"8185:18:16","nodeType":"FunctionDefinition","parameters":{"id":4456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4451,"mutability":"mutable","name":"name","nameLocation":"8227:4:16","nodeType":"VariableDeclaration","scope":4503,"src":"8213:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4450,"name":"string","nodeType":"ElementaryTypeName","src":"8213:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4453,"mutability":"mutable","name":"duration","nameLocation":"8249:8:16","nodeType":"VariableDeclaration","scope":4503,"src":"8241:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4452,"name":"uint256","nodeType":"ElementaryTypeName","src":"8241:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4455,"mutability":"mutable","name":"commitment","nameLocation":"8275:10:16","nodeType":"VariableDeclaration","scope":4503,"src":"8267:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8267:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8203:88:16"},"returnParameters":{"id":4457,"nodeType":"ParameterList","parameters":[],"src":"8301:0:16"},"scope":4564,"src":"8176:801:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4537,"nodeType":"Block","src":"9106:231:16","statements":[{"assignments":[4514],"declarations":[{"constant":false,"id":4514,"mutability":"mutable","name":"nodehash","nameLocation":"9163:8:16","nodeType":"VariableDeclaration","scope":4537,"src":"9155:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4513,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9155:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4522,"initialValue":{"arguments":[{"arguments":[{"id":4518,"name":"ETH_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"9201:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4519,"name":"label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4507,"src":"9211:5:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4516,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9184:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9188:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"9184:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9184:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4515,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9174:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9174:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9155:63:16"},{"assignments":[4525],"declarations":[{"constant":false,"id":4525,"mutability":"mutable","name":"resolver","nameLocation":"9237:8:16","nodeType":"VariableDeclaration","scope":4537,"src":"9228:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"},"typeName":{"id":4524,"nodeType":"UserDefinedTypeName","pathNode":{"id":4523,"name":"Resolver","nameLocations":["9228:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":5399,"src":"9228:8:16"},"referencedDeclaration":5399,"src":"9228:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"}},"visibility":"internal"}],"id":4529,"initialValue":{"arguments":[{"id":4527,"name":"resolverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"9257:15:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4526,"name":"Resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"9248:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Resolver_$5399_$","typeString":"type(contract Resolver)"}},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9248:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"}},"nodeType":"VariableDeclarationStatement","src":"9228:45:16"},{"expression":{"arguments":[{"id":4533,"name":"nodehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"9315:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4534,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"9325:4:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}],"expression":{"id":4530,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"9283:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$5399","typeString":"contract Resolver"}},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9292:22:16","memberName":"multicallWithNodeCheck","nodeType":"MemberAccess","referencedDeclaration":5370,"src":"9283:31:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (bytes32,bytes memory[] memory) external returns (bytes memory[] memory)"}},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9283:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":4536,"nodeType":"ExpressionStatement","src":"9283:47:16"}]},"id":4538,"implemented":true,"kind":"function","modifiers":[],"name":"_setRecords","nameLocation":"8992:11:16","nodeType":"FunctionDefinition","parameters":{"id":4511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4505,"mutability":"mutable","name":"resolverAddress","nameLocation":"9021:15:16","nodeType":"VariableDeclaration","scope":4538,"src":"9013:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4504,"name":"address","nodeType":"ElementaryTypeName","src":"9013:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4507,"mutability":"mutable","name":"label","nameLocation":"9054:5:16","nodeType":"VariableDeclaration","scope":4538,"src":"9046:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9046:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4510,"mutability":"mutable","name":"data","nameLocation":"9086:4:16","nodeType":"VariableDeclaration","scope":4538,"src":"9069:21:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4508,"name":"bytes","nodeType":"ElementaryTypeName","src":"9069:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4509,"nodeType":"ArrayTypeName","src":"9069:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"9003:93:16"},"returnParameters":{"id":4512,"nodeType":"ParameterList","parameters":[],"src":"9106:0:16"},"scope":4564,"src":"8983:354:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4562,"nodeType":"Block","src":"9463:168:16","statements":[{"expression":{"arguments":[{"expression":{"id":4550,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9518:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9522:6:16","memberName":"sender","nodeType":"MemberAccess","src":"9518:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4552,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"9542:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4553,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4542,"src":"9562:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4557,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4540,"src":"9598:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e7363726f6c6c","id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9604:9:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_57ae72296e25032322448e68a0e7df77959fa47379785e14db110b4b10b9a238","typeString":"literal_string \".scroll\""},"value":".scroll"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_57ae72296e25032322448e68a0e7df77959fa47379785e14db110b4b10b9a238","typeString":"literal_string \".scroll\""}],"expression":{"id":4555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9584:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4554,"name":"string","nodeType":"ElementaryTypeName","src":"9584:6:16","typeDescriptions":{}}},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9591:6:16","memberName":"concat","nodeType":"MemberAccess","src":"9584:13:16","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9584:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4547,"name":"reverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"9473:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9490:14:16","memberName":"setNameForAddr","nodeType":"MemberAccess","referencedDeclaration":6011,"src":"9473:31:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,address,string memory) external returns (bytes32)"}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9473:151:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4561,"nodeType":"ExpressionStatement","src":"9473:151:16"}]},"id":4563,"implemented":true,"kind":"function","modifiers":[],"name":"_setReverseRecord","nameLocation":"9352:17:16","nodeType":"FunctionDefinition","parameters":{"id":4545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4540,"mutability":"mutable","name":"name","nameLocation":"9393:4:16","nodeType":"VariableDeclaration","scope":4563,"src":"9379:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4539,"name":"string","nodeType":"ElementaryTypeName","src":"9379:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4542,"mutability":"mutable","name":"resolver","nameLocation":"9415:8:16","nodeType":"VariableDeclaration","scope":4563,"src":"9407:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4541,"name":"address","nodeType":"ElementaryTypeName","src":"9407:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4544,"mutability":"mutable","name":"_owner","nameLocation":"9441:6:16","nodeType":"VariableDeclaration","scope":4563,"src":"9433:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4543,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9369:84:16"},"returnParameters":{"id":4546,"nodeType":"ParameterList","parameters":[],"src":"9463:0:16"},"scope":4564,"src":"9343:288:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4565,"src":"1325:8308:16","usedErrors":[3780,3786,3792,3794]}],"src":"31:9603:16"},"id":16},"contracts/ethregistrar/IBaseRegistrar.sol":{"ast":{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","exportedSymbols":{"ENS":[5200],"IBaseRegistrar":[4659],"IERC165":[2017],"IERC721":[1355]},"id":4660,"nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":4566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4660,"sourceUnit":5201,"src":"0:29:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","file":"./IBaseRegistrar.sol","id":4567,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4660,"sourceUnit":4660,"src":"30:30:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":4568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4660,"sourceUnit":1356,"src":"61:58:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4569,"name":"IERC721","nameLocations":["149:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":1355,"src":"149:7:17"},"id":4570,"nodeType":"InheritanceSpecifier","src":"149:7:17"}],"canonicalName":"IBaseRegistrar","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4659,"linearizedBaseContracts":[4659,1355,2017],"name":"IBaseRegistrar","nameLocation":"131:14:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d7474","id":4574,"name":"ControllerAdded","nameLocation":"169:15:17","nodeType":"EventDefinition","parameters":{"id":4573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4572,"indexed":true,"mutability":"mutable","name":"controller","nameLocation":"201:10:17","nodeType":"VariableDeclaration","scope":4574,"src":"185:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4571,"name":"address","nodeType":"ElementaryTypeName","src":"185:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"184:28:17"},"src":"163:50:17"},{"anonymous":false,"eventSelector":"33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e81113","id":4578,"name":"ControllerRemoved","nameLocation":"224:17:17","nodeType":"EventDefinition","parameters":{"id":4577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4576,"indexed":true,"mutability":"mutable","name":"controller","nameLocation":"258:10:17","nodeType":"VariableDeclaration","scope":4578,"src":"242:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4575,"name":"address","nodeType":"ElementaryTypeName","src":"242:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"241:28:17"},"src":"218:52:17"},{"anonymous":false,"eventSelector":"ea3d7e1195a15d2ddcd859b01abd4c6b960fa9f9264e499a70a90c7f0c64b717","id":4586,"name":"NameMigrated","nameLocation":"281:12:17","nodeType":"EventDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4580,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"319:2:17","nodeType":"VariableDeclaration","scope":4586,"src":"303:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4579,"name":"uint256","nodeType":"ElementaryTypeName","src":"303:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4582,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"347:5:17","nodeType":"VariableDeclaration","scope":4586,"src":"331:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4581,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4584,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"370:7:17","nodeType":"VariableDeclaration","scope":4586,"src":"362:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"293:90:17"},"src":"275:109:17"},{"anonymous":false,"eventSelector":"b3d987963d01b2f68493b4bdb130988f157ea43070d4ad840fee0466ed9370d9","id":4594,"name":"NameRegistered","nameLocation":"395:14:17","nodeType":"EventDefinition","parameters":{"id":4593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4588,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"435:2:17","nodeType":"VariableDeclaration","scope":4594,"src":"419:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4587,"name":"uint256","nodeType":"ElementaryTypeName","src":"419:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4590,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"463:5:17","nodeType":"VariableDeclaration","scope":4594,"src":"447:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4589,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4592,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"486:7:17","nodeType":"VariableDeclaration","scope":4594,"src":"478:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4591,"name":"uint256","nodeType":"ElementaryTypeName","src":"478:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"409:90:17"},"src":"389:111:17"},{"anonymous":false,"eventSelector":"9b87a00e30f1ac65d898f070f8a3488fe60517182d0a2098e1b4b93a54aa9bd6","id":4600,"name":"NameRenewed","nameLocation":"511:11:17","nodeType":"EventDefinition","parameters":{"id":4599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4596,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"539:2:17","nodeType":"VariableDeclaration","scope":4600,"src":"523:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4595,"name":"uint256","nodeType":"ElementaryTypeName","src":"523:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4598,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"551:7:17","nodeType":"VariableDeclaration","scope":4600,"src":"543:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4597,"name":"uint256","nodeType":"ElementaryTypeName","src":"543:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:37:17"},"src":"505:55:17"},{"functionSelector":"a7fc7a07","id":4605,"implemented":false,"kind":"function","modifiers":[],"name":"addController","nameLocation":"643:13:17","nodeType":"FunctionDefinition","parameters":{"id":4603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4602,"mutability":"mutable","name":"controller","nameLocation":"665:10:17","nodeType":"VariableDeclaration","scope":4605,"src":"657:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4601,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"656:20:17"},"returnParameters":{"id":4604,"nodeType":"ParameterList","parameters":[],"src":"685:0:17"},"scope":4659,"src":"634:52:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f6a74ed7","id":4610,"implemented":false,"kind":"function","modifiers":[],"name":"removeController","nameLocation":"753:16:17","nodeType":"FunctionDefinition","parameters":{"id":4608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4607,"mutability":"mutable","name":"controller","nameLocation":"778:10:17","nodeType":"VariableDeclaration","scope":4610,"src":"770:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4606,"name":"address","nodeType":"ElementaryTypeName","src":"770:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"769:20:17"},"returnParameters":{"id":4609,"nodeType":"ParameterList","parameters":[],"src":"798:0:17"},"scope":4659,"src":"744:55:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4e543b26","id":4615,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"874:11:17","nodeType":"FunctionDefinition","parameters":{"id":4613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4612,"mutability":"mutable","name":"resolver","nameLocation":"894:8:17","nodeType":"VariableDeclaration","scope":4615,"src":"886:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4611,"name":"address","nodeType":"ElementaryTypeName","src":"886:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"885:18:17"},"returnParameters":{"id":4614,"nodeType":"ParameterList","parameters":[],"src":"912:0:17"},"scope":4659,"src":"865:48:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d6e4fa86","id":4622,"implemented":false,"kind":"function","modifiers":[],"name":"nameExpires","nameLocation":"997:11:17","nodeType":"FunctionDefinition","parameters":{"id":4618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4617,"mutability":"mutable","name":"id","nameLocation":"1017:2:17","nodeType":"VariableDeclaration","scope":4622,"src":"1009:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1009:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1008:12:17"},"returnParameters":{"id":4621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4622,"src":"1044:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:9:17"},"scope":4659,"src":"988:65:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"96e494e8","id":4629,"implemented":false,"kind":"function","modifiers":[],"name":"available","nameLocation":"1141:9:17","nodeType":"FunctionDefinition","parameters":{"id":4625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4624,"mutability":"mutable","name":"id","nameLocation":"1159:2:17","nodeType":"VariableDeclaration","scope":4629,"src":"1151:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4623,"name":"uint256","nodeType":"ElementaryTypeName","src":"1151:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1150:12:17"},"returnParameters":{"id":4628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4629,"src":"1186:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4626,"name":"bool","nodeType":"ElementaryTypeName","src":"1186:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1185:6:17"},"scope":4659,"src":"1132:60:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4630,"nodeType":"StructuredDocumentation","src":"1198:40:17","text":" @dev Register a name."},"functionSelector":"fca247ac","id":4641,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"1252:8:17","nodeType":"FunctionDefinition","parameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4632,"mutability":"mutable","name":"id","nameLocation":"1278:2:17","nodeType":"VariableDeclaration","scope":4641,"src":"1270:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4634,"mutability":"mutable","name":"owner","nameLocation":"1298:5:17","nodeType":"VariableDeclaration","scope":4641,"src":"1290:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4633,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4636,"mutability":"mutable","name":"duration","nameLocation":"1321:8:17","nodeType":"VariableDeclaration","scope":4641,"src":"1313:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4635,"name":"uint256","nodeType":"ElementaryTypeName","src":"1313:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1260:75:17"},"returnParameters":{"id":4640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4641,"src":"1354:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4638,"name":"uint256","nodeType":"ElementaryTypeName","src":"1354:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1353:9:17"},"scope":4659,"src":"1243:120:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c475abff","id":4650,"implemented":false,"kind":"function","modifiers":[],"name":"renew","nameLocation":"1378:5:17","nodeType":"FunctionDefinition","parameters":{"id":4646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4643,"mutability":"mutable","name":"id","nameLocation":"1392:2:17","nodeType":"VariableDeclaration","scope":4650,"src":"1384:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1384:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4645,"mutability":"mutable","name":"duration","nameLocation":"1404:8:17","nodeType":"VariableDeclaration","scope":4650,"src":"1396:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4644,"name":"uint256","nodeType":"ElementaryTypeName","src":"1396:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1383:30:17"},"returnParameters":{"id":4649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4650,"src":"1432:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4647,"name":"uint256","nodeType":"ElementaryTypeName","src":"1432:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1431:9:17"},"scope":4659,"src":"1369:72:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4651,"nodeType":"StructuredDocumentation","src":"1447:91:17","text":" @dev Reclaim ownership of a name in ENS, if you own it in the registrar."},"functionSelector":"28ed4f6c","id":4658,"implemented":false,"kind":"function","modifiers":[],"name":"reclaim","nameLocation":"1552:7:17","nodeType":"FunctionDefinition","parameters":{"id":4656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4653,"mutability":"mutable","name":"id","nameLocation":"1568:2:17","nodeType":"VariableDeclaration","scope":4658,"src":"1560:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4652,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4655,"mutability":"mutable","name":"owner","nameLocation":"1580:5:17","nodeType":"VariableDeclaration","scope":4658,"src":"1572:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4654,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1559:27:17"},"returnParameters":{"id":4657,"nodeType":"ParameterList","parameters":[],"src":"1595:0:17"},"scope":4659,"src":"1543:53:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4660,"src":"121:1477:17","usedErrors":[]}],"src":"0:1599:17"},"id":17},"contracts/ethregistrar/IBulkRenewal.sol":{"ast":{"absolutePath":"contracts/ethregistrar/IBulkRenewal.sol","exportedSymbols":{"IBulkRenewal":[4681]},"id":4682,"nodeType":"SourceUnit","nodes":[{"abstract":false,"baseContracts":[],"canonicalName":"IBulkRenewal","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4681,"linearizedBaseContracts":[4681],"name":"IBulkRenewal","nameLocation":"10:12:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"591ebfb4","id":4672,"implemented":false,"kind":"function","modifiers":[],"name":"rentPrice","nameLocation":"38:9:18","nodeType":"FunctionDefinition","parameters":{"id":4668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4663,"mutability":"mutable","name":"names","nameLocation":"75:5:18","nodeType":"VariableDeclaration","scope":4672,"src":"57:23:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":4661,"name":"string","nodeType":"ElementaryTypeName","src":"57:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":4662,"nodeType":"ArrayTypeName","src":"57:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":4665,"mutability":"mutable","name":"duration","nameLocation":"98:8:18","nodeType":"VariableDeclaration","scope":4672,"src":"90:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4664,"name":"uint256","nodeType":"ElementaryTypeName","src":"90:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4667,"mutability":"mutable","name":"user","nameLocation":"124:4:18","nodeType":"VariableDeclaration","scope":4672,"src":"116:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4666,"name":"address","nodeType":"ElementaryTypeName","src":"116:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"47:87:18"},"returnParameters":{"id":4671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4670,"mutability":"mutable","name":"total","nameLocation":"166:5:18","nodeType":"VariableDeclaration","scope":4672,"src":"158:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4669,"name":"uint256","nodeType":"ElementaryTypeName","src":"158:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"157:15:18"},"scope":4681,"src":"29:144:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e8d6dbb4","id":4680,"implemented":false,"kind":"function","modifiers":[],"name":"renewAll","nameLocation":"188:8:18","nodeType":"FunctionDefinition","parameters":{"id":4678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4675,"mutability":"mutable","name":"names","nameLocation":"224:5:18","nodeType":"VariableDeclaration","scope":4680,"src":"206:23:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":4673,"name":"string","nodeType":"ElementaryTypeName","src":"206:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":4674,"nodeType":"ArrayTypeName","src":"206:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":4677,"mutability":"mutable","name":"duration","nameLocation":"247:8:18","nodeType":"VariableDeclaration","scope":4680,"src":"239:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4676,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"196:65:18"},"returnParameters":{"id":4679,"nodeType":"ParameterList","parameters":[],"src":"278:0:18"},"scope":4681,"src":"179:100:18","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4682,"src":"0:281:18","usedErrors":[]}],"src":"0:282:18"},"id":18},"contracts/ethregistrar/IETHRegistrarController.sol":{"ast":{"absolutePath":"contracts/ethregistrar/IETHRegistrarController.sol","exportedSymbols":{"IETHRegistrarController":[4758],"IPriceOracle":[4781]},"id":4759,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4683,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:19"},{"absolutePath":"contracts/ethregistrar/IPriceOracle.sol","file":"./IPriceOracle.sol","id":4684,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4759,"sourceUnit":4782,"src":"57:28:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IETHRegistrarController","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4758,"linearizedBaseContracts":[4758],"name":"IETHRegistrarController","nameLocation":"97:23:19","nodeType":"ContractDefinition","nodes":[{"functionSelector":"44d31f06","id":4696,"implemented":false,"kind":"function","modifiers":[],"name":"rentPrice","nameLocation":"136:9:19","nodeType":"FunctionDefinition","parameters":{"id":4691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4696,"src":"155:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4685,"name":"string","nodeType":"ElementaryTypeName","src":"155:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4696,"src":"178:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4687,"name":"uint256","nodeType":"ElementaryTypeName","src":"178:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4696,"src":"195:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4689,"name":"address","nodeType":"ElementaryTypeName","src":"195:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"145:63:19"},"returnParameters":{"id":4695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4696,"src":"232:25:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4693,"nodeType":"UserDefinedTypeName","pathNode":{"id":4692,"name":"IPriceOracle.Price","nameLocations":["232:12:19","245:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"232:18:19"},"referencedDeclaration":4765,"src":"232:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"src":"231:27:19"},"scope":4758,"src":"127:132:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"aeb8ce9b","id":4703,"implemented":false,"kind":"function","modifiers":[],"name":"available","nameLocation":"274:9:19","nodeType":"FunctionDefinition","parameters":{"id":4699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4703,"src":"284:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4697,"name":"string","nodeType":"ElementaryTypeName","src":"284:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"283:15:19"},"returnParameters":{"id":4702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4703,"src":"317:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4700,"name":"bool","nodeType":"ElementaryTypeName","src":"317:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"316:6:19"},"scope":4758,"src":"265:58:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"65a69dcf","id":4725,"implemented":false,"kind":"function","modifiers":[],"name":"makeCommitment","nameLocation":"338:14:19","nodeType":"FunctionDefinition","parameters":{"id":4721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"362:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4704,"name":"string","nodeType":"ElementaryTypeName","src":"362:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"385:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4706,"name":"address","nodeType":"ElementaryTypeName","src":"385:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4709,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"402:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4708,"name":"uint256","nodeType":"ElementaryTypeName","src":"402:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"419:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"419:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"436:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4712,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"453:16:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4714,"name":"bytes","nodeType":"ElementaryTypeName","src":"453:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4715,"nodeType":"ArrayTypeName","src":"453:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":4718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"479:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4717,"name":"bool","nodeType":"ElementaryTypeName","src":"479:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"493:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4719,"name":"uint16","nodeType":"ElementaryTypeName","src":"493:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"352:153:19"},"returnParameters":{"id":4724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4725,"src":"529:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"529:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"528:9:19"},"scope":4758,"src":"329:209:19","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"f14fcbc8","id":4730,"implemented":false,"kind":"function","modifiers":[],"name":"commit","nameLocation":"553:6:19","nodeType":"FunctionDefinition","parameters":{"id":4728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4730,"src":"560:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:9:19"},"returnParameters":{"id":4729,"nodeType":"ParameterList","parameters":[],"src":"577:0:19"},"scope":4758,"src":"544:34:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"74694a2b","id":4750,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"593:8:19","nodeType":"FunctionDefinition","parameters":{"id":4748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"611:15:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4731,"name":"string","nodeType":"ElementaryTypeName","src":"611:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"636:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4733,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"653:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4735,"name":"uint256","nodeType":"ElementaryTypeName","src":"653:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"670:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"670:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"687:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4739,"name":"address","nodeType":"ElementaryTypeName","src":"687:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"704:16:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4741,"name":"bytes","nodeType":"ElementaryTypeName","src":"704:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4742,"nodeType":"ArrayTypeName","src":"704:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":4745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"730:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4744,"name":"bool","nodeType":"ElementaryTypeName","src":"730:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"744:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4746,"name":"uint16","nodeType":"ElementaryTypeName","src":"744:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"601:155:19"},"returnParameters":{"id":4749,"nodeType":"ParameterList","parameters":[],"src":"773:0:19"},"scope":4758,"src":"584:190:19","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"acf1a841","id":4757,"implemented":false,"kind":"function","modifiers":[],"name":"renew","nameLocation":"789:5:19","nodeType":"FunctionDefinition","parameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4757,"src":"795:15:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4751,"name":"string","nodeType":"ElementaryTypeName","src":"795:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4757,"src":"812:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4753,"name":"uint256","nodeType":"ElementaryTypeName","src":"812:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"794:26:19"},"returnParameters":{"id":4756,"nodeType":"ParameterList","parameters":[],"src":"837:0:19"},"scope":4758,"src":"780:58:19","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4759,"src":"87:753:19","usedErrors":[]}],"src":"31:810:19"},"id":19},"contracts/ethregistrar/IPriceOracle.sol":{"ast":{"absolutePath":"contracts/ethregistrar/IPriceOracle.sol","exportedSymbols":{"IPriceOracle":[4781]},"id":4782,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4760,"literals":["solidity",">=","0.8",".17","<","0.9",".0"],"nodeType":"PragmaDirective","src":"31:32:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IPriceOracle","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4781,"linearizedBaseContracts":[4781],"name":"IPriceOracle","nameLocation":"75:12:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IPriceOracle.Price","id":4765,"members":[{"constant":false,"id":4762,"mutability":"mutable","name":"base","nameLocation":"125:4:20","nodeType":"VariableDeclaration","scope":4765,"src":"117:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4761,"name":"uint256","nodeType":"ElementaryTypeName","src":"117:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4764,"mutability":"mutable","name":"premium","nameLocation":"147:7:20","nodeType":"VariableDeclaration","scope":4765,"src":"139:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4763,"name":"uint256","nodeType":"ElementaryTypeName","src":"139:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Price","nameLocation":"101:5:20","nodeType":"StructDefinition","scope":4781,"src":"94:67:20","visibility":"public"},{"documentation":{"id":4766,"nodeType":"StructuredDocumentation","src":"278:370:20","text":" @dev Returns the price to register or renew a name.\n @param name The name being registered or renewed.\n @param expires When the name presently expires (0 if this is a new registration).\n @param duration How long the name is being registered or extended for, in seconds.\n @return base premium tuple of base price + premium price"},"functionSelector":"89fce619","id":4780,"implemented":false,"kind":"function","modifiers":[],"name":"price","nameLocation":"662:5:20","nodeType":"FunctionDefinition","parameters":{"id":4775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4768,"mutability":"mutable","name":"name","nameLocation":"693:4:20","nodeType":"VariableDeclaration","scope":4780,"src":"677:20:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4767,"name":"string","nodeType":"ElementaryTypeName","src":"677:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4770,"mutability":"mutable","name":"expires","nameLocation":"715:7:20","nodeType":"VariableDeclaration","scope":4780,"src":"707:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4769,"name":"uint256","nodeType":"ElementaryTypeName","src":"707:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4772,"mutability":"mutable","name":"duration","nameLocation":"740:8:20","nodeType":"VariableDeclaration","scope":4780,"src":"732:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4771,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4774,"mutability":"mutable","name":"user","nameLocation":"766:4:20","nodeType":"VariableDeclaration","scope":4780,"src":"758:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4773,"name":"address","nodeType":"ElementaryTypeName","src":"758:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"667:109:20"},"returnParameters":{"id":4779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4780,"src":"800:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_calldata_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4777,"nodeType":"UserDefinedTypeName","pathNode":{"id":4776,"name":"Price","nameLocations":["800:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"800:5:20"},"referencedDeclaration":4765,"src":"800:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"src":"799:16:20"},"scope":4781,"src":"653:163:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4782,"src":"65:753:20","usedErrors":[]}],"src":"31:788:20"},"id":20},"contracts/ethregistrar/StaticBulkRenewal.sol":{"ast":{"absolutePath":"contracts/ethregistrar/StaticBulkRenewal.sol","exportedSymbols":{"Address":[1730],"BaseRegistrarImplementation":[3507],"CommitmentTooNew":[3766],"CommitmentTooOld":[3770],"DurationTooShort":[3778],"ENS":[5200],"ERC20Recoverable":[6148],"ETHRegistrarController":[4564],"IBulkRenewal":[4681],"IERC165":[2017],"IETHRegistrarController":[4758],"INameWrapper":[6534],"IPriceOracle":[4781],"InsufficientValue":[3786],"MaxCommitmentAgeTooHigh":[3794],"MaxCommitmentAgeTooLow":[3792],"NameNotAvailable":[3774],"Ownable":[112],"Resolver":[5399],"ResolverRequiredWhenDataSupplied":[3780],"ReverseClaimer":[5719],"ReverseRegistrar":[6070],"StaticBulkRenewal":[4963],"StringUtils":[5063],"Unauthorised":[3790],"UnexpiredCommitmentExists":[3784]},"id":4964,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4783,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:21"},{"absolutePath":"contracts/ethregistrar/ETHRegistrarController.sol","file":"./ETHRegistrarController.sol","id":4784,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4964,"sourceUnit":4565,"src":"57:38:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBulkRenewal.sol","file":"./IBulkRenewal.sol","id":4785,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4964,"sourceUnit":4682,"src":"96:28:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IPriceOracle.sol","file":"./IPriceOracle.sol","id":4786,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4964,"sourceUnit":4782,"src":"125:28:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":4787,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4964,"sourceUnit":2018,"src":"155:65:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4788,"name":"IBulkRenewal","nameLocations":["252:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":4681,"src":"252:12:21"},"id":4789,"nodeType":"InheritanceSpecifier","src":"252:12:21"}],"canonicalName":"StaticBulkRenewal","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4963,"linearizedBaseContracts":[4963,4681],"name":"StaticBulkRenewal","nameLocation":"231:17:21","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4792,"mutability":"mutable","name":"controller","nameLocation":"294:10:21","nodeType":"VariableDeclaration","scope":4963,"src":"271:33:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"},"typeName":{"id":4791,"nodeType":"UserDefinedTypeName","pathNode":{"id":4790,"name":"ETHRegistrarController","nameLocations":["271:22:21"],"nodeType":"IdentifierPath","referencedDeclaration":4564,"src":"271:22:21"},"referencedDeclaration":4564,"src":"271:22:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"visibility":"internal"},{"body":{"id":4802,"nodeType":"Block","src":"359:41:21","statements":[{"expression":{"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4798,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"369:10:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4799,"name":"_controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4795,"src":"382:11:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"src":"369:24:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":4801,"nodeType":"ExpressionStatement","src":"369:24:21"}]},"id":4803,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4795,"mutability":"mutable","name":"_controller","nameLocation":"346:11:21","nodeType":"VariableDeclaration","scope":4803,"src":"323:34:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"},"typeName":{"id":4794,"nodeType":"UserDefinedTypeName","pathNode":{"id":4793,"name":"ETHRegistrarController","nameLocations":["323:22:21"],"nodeType":"IdentifierPath","referencedDeclaration":4564,"src":"323:22:21"},"referencedDeclaration":4564,"src":"323:22:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"visibility":"internal"}],"src":"322:36:21"},"returnParameters":{"id":4797,"nodeType":"ParameterList","parameters":[],"src":"359:0:21"},"scope":4963,"src":"311:89:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4672],"body":{"id":4857,"nodeType":"Block","src":"559:370:21","statements":[{"assignments":[4817],"declarations":[{"constant":false,"id":4817,"mutability":"mutable","name":"length","nameLocation":"577:6:21","nodeType":"VariableDeclaration","scope":4857,"src":"569:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4816,"name":"uint256","nodeType":"ElementaryTypeName","src":"569:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4820,"initialValue":{"expression":{"id":4818,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"586:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"592:6:21","memberName":"length","nodeType":"MemberAccess","src":"586:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"569:29:21"},{"body":{"id":4855,"nodeType":"Block","src":"642:281:21","statements":[{"assignments":[4832],"declarations":[{"constant":false,"id":4832,"mutability":"mutable","name":"price","nameLocation":"682:5:21","nodeType":"VariableDeclaration","scope":4855,"src":"656:31:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4831,"nodeType":"UserDefinedTypeName","pathNode":{"id":4830,"name":"IPriceOracle.Price","nameLocations":["656:12:21","669:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"656:18:21"},"referencedDeclaration":4765,"src":"656:18:21","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"id":4841,"initialValue":{"arguments":[{"baseExpression":{"id":4835,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"728:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":4837,"indexExpression":{"id":4836,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"734:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"728:8:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4838,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"754:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4839,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"780:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4833,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"690:10:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":4834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"701:9:21","memberName":"rentPrice","nodeType":"MemberAccess","referencedDeclaration":4050,"src":"690:20:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,address) view external returns (struct IPriceOracle.Price memory)"}},"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"690:108:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"656:142:21"},{"id":4854,"nodeType":"UncheckedBlock","src":"812:101:21","statements":[{"expression":{"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"840:3:21","subExpression":{"id":4842,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"842:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4844,"nodeType":"ExpressionStatement","src":"840:3:21"},{"expression":{"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4845,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"861:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4846,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"871:5:21","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"877:4:21","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"871:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4848,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"884:5:21","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4849,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"890:7:21","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"884:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"871:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4851,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:28:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"861:37:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4853,"nodeType":"ExpressionStatement","src":"861:37:21"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4825,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"628:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4826,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4817,"src":"632:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"628:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4856,"initializationExpression":{"assignments":[4822],"declarations":[{"constant":false,"id":4822,"mutability":"mutable","name":"i","nameLocation":"621:1:21","nodeType":"VariableDeclaration","scope":4856,"src":"613:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4821,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4824,"initialValue":{"hexValue":"30","id":4823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"625:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"613:13:21"},"nodeType":"ForStatement","src":"608:315:21"}]},"functionSelector":"591ebfb4","id":4858,"implemented":true,"kind":"function","modifiers":[],"name":"rentPrice","nameLocation":"415:9:21","nodeType":"FunctionDefinition","overrides":{"id":4812,"nodeType":"OverrideSpecifier","overrides":[],"src":"526:8:21"},"parameters":{"id":4811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4806,"mutability":"mutable","name":"names","nameLocation":"452:5:21","nodeType":"VariableDeclaration","scope":4858,"src":"434:23:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":4804,"name":"string","nodeType":"ElementaryTypeName","src":"434:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":4805,"nodeType":"ArrayTypeName","src":"434:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":4808,"mutability":"mutable","name":"duration","nameLocation":"475:8:21","nodeType":"VariableDeclaration","scope":4858,"src":"467:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4807,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4810,"mutability":"mutable","name":"user","nameLocation":"501:4:21","nodeType":"VariableDeclaration","scope":4858,"src":"493:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4809,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"424:87:21"},"returnParameters":{"id":4815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4814,"mutability":"mutable","name":"total","nameLocation":"552:5:21","nodeType":"VariableDeclaration","scope":4858,"src":"544:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4813,"name":"uint256","nodeType":"ElementaryTypeName","src":"544:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"543:15:21"},"scope":4963,"src":"406:523:21","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4680],"body":{"id":4939,"nodeType":"Block","src":"1044:610:21","statements":[{"assignments":[4868],"declarations":[{"constant":false,"id":4868,"mutability":"mutable","name":"length","nameLocation":"1062:6:21","nodeType":"VariableDeclaration","scope":4939,"src":"1054:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1054:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4871,"initialValue":{"expression":{"id":4869,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"1071:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1077:6:21","memberName":"length","nodeType":"MemberAccess","src":"1071:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1054:29:21"},{"assignments":[4873],"declarations":[{"constant":false,"id":4873,"mutability":"mutable","name":"total","nameLocation":"1101:5:21","nodeType":"VariableDeclaration","scope":4939,"src":"1093:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4872,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4874,"nodeType":"VariableDeclarationStatement","src":"1093:13:21"},{"body":{"id":4924,"nodeType":"Block","src":"1150:399:21","statements":[{"assignments":[4886],"declarations":[{"constant":false,"id":4886,"mutability":"mutable","name":"price","nameLocation":"1190:5:21","nodeType":"VariableDeclaration","scope":4924,"src":"1164:31:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price"},"typeName":{"id":4885,"nodeType":"UserDefinedTypeName","pathNode":{"id":4884,"name":"IPriceOracle.Price","nameLocations":["1164:12:21","1177:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":4765,"src":"1164:18:21"},"referencedDeclaration":4765,"src":"1164:18:21","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_storage_ptr","typeString":"struct IPriceOracle.Price"}},"visibility":"internal"}],"id":4896,"initialValue":{"arguments":[{"baseExpression":{"id":4889,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"1236:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":4891,"indexExpression":{"id":4890,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1242:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1236:8:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4892,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"1262:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4893,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1288:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1292:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1288:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4887,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"1198:10:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1209:9:21","memberName":"rentPrice","nodeType":"MemberAccess","referencedDeclaration":4050,"src":"1198:20:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$_t_struct$_Price_$4765_memory_ptr_$","typeString":"function (string memory,uint256,address) view external returns (struct IPriceOracle.Price memory)"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1198:114:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"1164:148:21"},{"assignments":[4898],"declarations":[{"constant":false,"id":4898,"mutability":"mutable","name":"totalPrice","nameLocation":"1334:10:21","nodeType":"VariableDeclaration","scope":4924,"src":"1326:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1326:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4904,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4899,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"1347:5:21","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4900,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1353:4:21","memberName":"base","nodeType":"MemberAccess","referencedDeclaration":4762,"src":"1347:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4901,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"1360:5:21","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$4765_memory_ptr","typeString":"struct IPriceOracle.Price memory"}},"id":4902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1366:7:21","memberName":"premium","nodeType":"MemberAccess","referencedDeclaration":4764,"src":"1360:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1347:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1326:47:21"},{"expression":{"arguments":[{"baseExpression":{"id":4910,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"1423:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":4912,"indexExpression":{"id":4911,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1429:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1423:8:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4913,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"1433:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4905,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"1387:10:21","typeDescriptions":{"typeIdentifier":"t_contract$_ETHRegistrarController_$4564","typeString":"contract ETHRegistrarController"}},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1398:5:21","memberName":"renew","nodeType":"MemberAccess","referencedDeclaration":4410,"src":"1387:16:21","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) payable external"}},"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4908,"name":"totalPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"1411:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1387:35:21","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_string_memory_ptr_$_t_uint256_$returns$__$value","typeString":"function (string memory,uint256) payable external"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1387:55:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4915,"nodeType":"ExpressionStatement","src":"1387:55:21"},{"id":4923,"nodeType":"UncheckedBlock","src":"1456:83:21","statements":[{"expression":{"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1484:3:21","subExpression":{"id":4916,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1486:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4918,"nodeType":"ExpressionStatement","src":"1484:3:21"},{"expression":{"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4919,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"1505:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4920,"name":"totalPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"1514:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1505:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4922,"nodeType":"ExpressionStatement","src":"1505:19:21"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4879,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1136:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4880,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"1140:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1136:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4925,"initializationExpression":{"assignments":[4876],"declarations":[{"constant":false,"id":4876,"mutability":"mutable","name":"i","nameLocation":"1129:1:21","nodeType":"VariableDeclaration","scope":4925,"src":"1121:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1121:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4878,"initialValue":{"hexValue":"30","id":4877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1133:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1121:13:21"},"nodeType":"ForStatement","src":"1116:433:21"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":4934,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1633:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_StaticBulkRenewal_$4963","typeString":"contract StaticBulkRenewal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StaticBulkRenewal_$4963","typeString":"contract StaticBulkRenewal"}],"id":4933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1625:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4932,"name":"address","nodeType":"ElementaryTypeName","src":"1625:7:21","typeDescriptions":{}}},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1625:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1639:7:21","memberName":"balance","nodeType":"MemberAccess","src":"1625:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4928,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1604:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1608:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1604:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1596:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4926,"name":"address","nodeType":"ElementaryTypeName","src":"1596:8:21","stateMutability":"payable","typeDescriptions":{}}},"id":4930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1596:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1616:8:21","memberName":"transfer","nodeType":"MemberAccess","src":"1596:28:21","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1596:51:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4938,"nodeType":"ExpressionStatement","src":"1596:51:21"}]},"functionSelector":"e8d6dbb4","id":4940,"implemented":true,"kind":"function","modifiers":[],"name":"renewAll","nameLocation":"944:8:21","nodeType":"FunctionDefinition","overrides":{"id":4865,"nodeType":"OverrideSpecifier","overrides":[],"src":"1035:8:21"},"parameters":{"id":4864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4861,"mutability":"mutable","name":"names","nameLocation":"980:5:21","nodeType":"VariableDeclaration","scope":4940,"src":"962:23:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":4859,"name":"string","nodeType":"ElementaryTypeName","src":"962:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":4860,"nodeType":"ArrayTypeName","src":"962:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":4863,"mutability":"mutable","name":"duration","nameLocation":"1003:8:21","nodeType":"VariableDeclaration","scope":4940,"src":"995:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4862,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"952:65:21"},"returnParameters":{"id":4866,"nodeType":"ParameterList","parameters":[],"src":"1044:0:21"},"scope":4963,"src":"935:719:21","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4961,"nodeType":"Block","src":"1750:137:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4947,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"1779:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4949,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"1799:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2017_$","typeString":"type(contract IERC165)"}],"id":4948,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1794:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1794:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2017","typeString":"type(contract IERC165)"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1808:11:21","memberName":"interfaceId","nodeType":"MemberAccess","src":"1794:25:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1779:40:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4953,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"1835:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4955,"name":"IBulkRenewal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"1855:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBulkRenewal_$4681_$","typeString":"type(contract IBulkRenewal)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IBulkRenewal_$4681_$","typeString":"type(contract IBulkRenewal)"}],"id":4954,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1850:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1850:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IBulkRenewal_$4681","typeString":"type(contract IBulkRenewal)"}},"id":4957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1869:11:21","memberName":"interfaceId","nodeType":"MemberAccess","src":"1850:30:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1835:45:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1779:101:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4946,"id":4960,"nodeType":"Return","src":"1760:120:21"}]},"functionSelector":"01ffc9a7","id":4962,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1669:17:21","nodeType":"FunctionDefinition","parameters":{"id":4943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4942,"mutability":"mutable","name":"interfaceID","nameLocation":"1703:11:21","nodeType":"VariableDeclaration","scope":4962,"src":"1696:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4941,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1696:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1686:34:21"},"returnParameters":{"id":4946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4962,"src":"1744:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4944,"name":"bool","nodeType":"ElementaryTypeName","src":"1744:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1743:6:21"},"scope":4963,"src":"1660:227:21","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":4964,"src":"222:1667:21","usedErrors":[]}],"src":"31:1859:21"},"id":21},"contracts/ethregistrar/StringUtils.sol":{"ast":{"absolutePath":"contracts/ethregistrar/StringUtils.sol","exportedSymbols":{"StringUtils":[5063]},"id":5064,"nodeType":"SourceUnit","nodes":[{"id":4965,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"StringUtils","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5063,"linearizedBaseContracts":[5063],"name":"StringUtils","nameLocation":"34:11:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":5061,"nodeType":"Block","src":"287:557:22","statements":[{"assignments":[4974],"declarations":[{"constant":false,"id":4974,"mutability":"mutable","name":"len","nameLocation":"305:3:22","nodeType":"VariableDeclaration","scope":5061,"src":"297:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4973,"name":"uint256","nodeType":"ElementaryTypeName","src":"297:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4975,"nodeType":"VariableDeclarationStatement","src":"297:11:22"},{"assignments":[4977],"declarations":[{"constant":false,"id":4977,"mutability":"mutable","name":"i","nameLocation":"326:1:22","nodeType":"VariableDeclaration","scope":5061,"src":"318:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4976,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4979,"initialValue":{"hexValue":"30","id":4978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"330:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"318:13:22"},{"assignments":[4981],"declarations":[{"constant":false,"id":4981,"mutability":"mutable","name":"bytelength","nameLocation":"349:10:22","nodeType":"VariableDeclaration","scope":5061,"src":"341:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4980,"name":"uint256","nodeType":"ElementaryTypeName","src":"341:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4987,"initialValue":{"expression":{"arguments":[{"id":4984,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"368:1:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"362:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4982,"name":"bytes","nodeType":"ElementaryTypeName","src":"362:5:22","typeDescriptions":{}}},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"362:8:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"371:6:22","memberName":"length","nodeType":"MemberAccess","src":"362:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"341:36:22"},{"body":{"id":5057,"nodeType":"Block","src":"424:394:22","statements":[{"assignments":[4999],"declarations":[{"constant":false,"id":4999,"mutability":"mutable","name":"b","nameLocation":"445:1:22","nodeType":"VariableDeclaration","scope":5057,"src":"438:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":4998,"name":"bytes1","nodeType":"ElementaryTypeName","src":"438:6:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":5006,"initialValue":{"baseExpression":{"arguments":[{"id":5002,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"455:1:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"449:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5000,"name":"bytes","nodeType":"ElementaryTypeName","src":"449:5:22","typeDescriptions":{}}},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"449:8:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5005,"indexExpression":{"id":5004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"458:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"449:11:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"438:22:22"},{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5007,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"478:1:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30783830","id":5008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"482:4:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"src":"478:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5015,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"537:1:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30784530","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"541:4:22","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"0xE0"},"src":"537:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5023,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"596:1:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30784630","id":5024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"600:4:22","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"0xF0"},"src":"596:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5031,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"655:1:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30784638","id":5032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"659:4:22","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"0xF8"},"src":"655:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5039,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"714:1:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30784643","id":5040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"718:4:22","typeDescriptions":{"typeIdentifier":"t_rational_252_by_1","typeString":"int_const 252"},"value":"0xFC"},"src":"714:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5051,"nodeType":"Block","src":"769:39:22","statements":[{"expression":{"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5047,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"787:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"36","id":5048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"792:1:22","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"787:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5050,"nodeType":"ExpressionStatement","src":"787:6:22"}]},"id":5052,"nodeType":"IfStatement","src":"710:98:22","trueBody":{"id":5046,"nodeType":"Block","src":"724:39:22","statements":[{"expression":{"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5042,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"742:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"35","id":5043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"747:1:22","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"742:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5045,"nodeType":"ExpressionStatement","src":"742:6:22"}]}},"id":5053,"nodeType":"IfStatement","src":"651:157:22","trueBody":{"id":5038,"nodeType":"Block","src":"665:39:22","statements":[{"expression":{"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5034,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"683:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"688:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"683:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5037,"nodeType":"ExpressionStatement","src":"683:6:22"}]}},"id":5054,"nodeType":"IfStatement","src":"592:216:22","trueBody":{"id":5030,"nodeType":"Block","src":"606:39:22","statements":[{"expression":{"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5026,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"624:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"33","id":5027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"629:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"624:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5029,"nodeType":"ExpressionStatement","src":"624:6:22"}]}},"id":5055,"nodeType":"IfStatement","src":"533:275:22","trueBody":{"id":5022,"nodeType":"Block","src":"547:39:22","statements":[{"expression":{"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5018,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"565:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"570:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"565:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5021,"nodeType":"ExpressionStatement","src":"565:6:22"}]}},"id":5056,"nodeType":"IfStatement","src":"474:334:22","trueBody":{"id":5014,"nodeType":"Block","src":"488:39:22","statements":[{"expression":{"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5010,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"506:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"511:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"506:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5013,"nodeType":"ExpressionStatement","src":"506:6:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4992,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"401:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4993,"name":"bytelength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"405:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"401:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5058,"initializationExpression":{"expression":{"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4988,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"392:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"398:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"392:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4991,"nodeType":"ExpressionStatement","src":"392:7:22"},"loopExpression":{"expression":{"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"417:5:22","subExpression":{"id":4995,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"417:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4997,"nodeType":"ExpressionStatement","src":"417:5:22"},"nodeType":"ForStatement","src":"387:431:22"},{"expression":{"id":5059,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"834:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4972,"id":5060,"nodeType":"Return","src":"827:10:22"}]},"documentation":{"id":4966,"nodeType":"StructuredDocumentation","src":"52:165:22","text":" @dev Returns the length of a given string\n @param s The string to measure the length of\n @return The length of the input string"},"id":5062,"implemented":true,"kind":"function","modifiers":[],"name":"strlen","nameLocation":"231:6:22","nodeType":"FunctionDefinition","parameters":{"id":4969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4968,"mutability":"mutable","name":"s","nameLocation":"252:1:22","nodeType":"VariableDeclaration","scope":5062,"src":"238:15:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4967,"name":"string","nodeType":"ElementaryTypeName","src":"238:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"237:17:22"},"returnParameters":{"id":4972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5062,"src":"278:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4970,"name":"uint256","nodeType":"ElementaryTypeName","src":"278:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"277:9:22"},"scope":5063,"src":"222:622:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5064,"src":"26:820:22","usedErrors":[]}],"src":"0:847:22"},"id":22},"contracts/registry/ENS.sol":{"ast":{"absolutePath":"contracts/registry/ENS.sol","exportedSymbols":{"ENS":[5200]},"id":5201,"nodeType":"SourceUnit","nodes":[{"id":5065,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"ENS","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5200,"linearizedBaseContracts":[5200],"name":"ENS","nameLocation":"36:3:23","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"ce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82","id":5073,"name":"NewOwner","nameLocation":"125:8:23","nodeType":"EventDefinition","parameters":{"id":5072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5067,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"150:4:23","nodeType":"VariableDeclaration","scope":5073,"src":"134:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5066,"name":"bytes32","nodeType":"ElementaryTypeName","src":"134:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5069,"indexed":true,"mutability":"mutable","name":"label","nameLocation":"172:5:23","nodeType":"VariableDeclaration","scope":5073,"src":"156:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"156:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5071,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"187:5:23","nodeType":"VariableDeclaration","scope":5073,"src":"179:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5070,"name":"address","nodeType":"ElementaryTypeName","src":"179:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"133:60:23"},"src":"119:75:23"},{"anonymous":false,"eventSelector":"d4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d266","id":5079,"name":"Transfer","nameLocation":"283:8:23","nodeType":"EventDefinition","parameters":{"id":5078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5075,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"308:4:23","nodeType":"VariableDeclaration","scope":5079,"src":"292:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"292:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5077,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"322:5:23","nodeType":"VariableDeclaration","scope":5079,"src":"314:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5076,"name":"address","nodeType":"ElementaryTypeName","src":"314:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"291:37:23"},"src":"277:52:23"},{"anonymous":false,"eventSelector":"335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0","id":5085,"name":"NewResolver","nameLocation":"393:11:23","nodeType":"EventDefinition","parameters":{"id":5084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5081,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"421:4:23","nodeType":"VariableDeclaration","scope":5085,"src":"405:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"405:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5083,"indexed":false,"mutability":"mutable","name":"resolver","nameLocation":"435:8:23","nodeType":"VariableDeclaration","scope":5085,"src":"427:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5082,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"404:40:23"},"src":"387:58:23"},{"anonymous":false,"eventSelector":"1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68","id":5091,"name":"NewTTL","nameLocation":"502:6:23","nodeType":"EventDefinition","parameters":{"id":5090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5087,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"525:4:23","nodeType":"VariableDeclaration","scope":5091,"src":"509:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5086,"name":"bytes32","nodeType":"ElementaryTypeName","src":"509:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5089,"indexed":false,"mutability":"mutable","name":"ttl","nameLocation":"538:3:23","nodeType":"VariableDeclaration","scope":5091,"src":"531:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5088,"name":"uint64","nodeType":"ElementaryTypeName","src":"531:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"508:34:23"},"src":"496:47:23"},{"anonymous":false,"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":5099,"name":"ApprovalForAll","nameLocation":"607:14:23","nodeType":"EventDefinition","parameters":{"id":5098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5093,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"647:5:23","nodeType":"VariableDeclaration","scope":5099,"src":"631:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5092,"name":"address","nodeType":"ElementaryTypeName","src":"631:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5095,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"678:8:23","nodeType":"VariableDeclaration","scope":5099,"src":"662:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5094,"name":"address","nodeType":"ElementaryTypeName","src":"662:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5097,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"701:8:23","nodeType":"VariableDeclaration","scope":5099,"src":"696:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5096,"name":"bool","nodeType":"ElementaryTypeName","src":"696:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"621:94:23"},"src":"601:115:23"},{"functionSelector":"cf408823","id":5110,"implemented":false,"kind":"function","modifiers":[],"name":"setRecord","nameLocation":"731:9:23","nodeType":"FunctionDefinition","parameters":{"id":5108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5101,"mutability":"mutable","name":"node","nameLocation":"758:4:23","nodeType":"VariableDeclaration","scope":5110,"src":"750:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"750:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5103,"mutability":"mutable","name":"owner","nameLocation":"780:5:23","nodeType":"VariableDeclaration","scope":5110,"src":"772:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5102,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5105,"mutability":"mutable","name":"resolver","nameLocation":"803:8:23","nodeType":"VariableDeclaration","scope":5110,"src":"795:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5104,"name":"address","nodeType":"ElementaryTypeName","src":"795:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5107,"mutability":"mutable","name":"ttl","nameLocation":"828:3:23","nodeType":"VariableDeclaration","scope":5110,"src":"821:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5106,"name":"uint64","nodeType":"ElementaryTypeName","src":"821:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"740:97:23"},"returnParameters":{"id":5109,"nodeType":"ParameterList","parameters":[],"src":"846:0:23"},"scope":5200,"src":"722:125:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5ef2c7f0","id":5123,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeRecord","nameLocation":"862:16:23","nodeType":"FunctionDefinition","parameters":{"id":5121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5112,"mutability":"mutable","name":"node","nameLocation":"896:4:23","nodeType":"VariableDeclaration","scope":5123,"src":"888:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5114,"mutability":"mutable","name":"label","nameLocation":"918:5:23","nodeType":"VariableDeclaration","scope":5123,"src":"910:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"910:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5116,"mutability":"mutable","name":"owner","nameLocation":"941:5:23","nodeType":"VariableDeclaration","scope":5123,"src":"933:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5115,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5118,"mutability":"mutable","name":"resolver","nameLocation":"964:8:23","nodeType":"VariableDeclaration","scope":5123,"src":"956:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5117,"name":"address","nodeType":"ElementaryTypeName","src":"956:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5120,"mutability":"mutable","name":"ttl","nameLocation":"989:3:23","nodeType":"VariableDeclaration","scope":5123,"src":"982:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5119,"name":"uint64","nodeType":"ElementaryTypeName","src":"982:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"878:120:23"},"returnParameters":{"id":5122,"nodeType":"ParameterList","parameters":[],"src":"1007:0:23"},"scope":5200,"src":"853:155:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06ab5923","id":5134,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeOwner","nameLocation":"1023:15:23","nodeType":"FunctionDefinition","parameters":{"id":5130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5125,"mutability":"mutable","name":"node","nameLocation":"1056:4:23","nodeType":"VariableDeclaration","scope":5134,"src":"1048:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5127,"mutability":"mutable","name":"label","nameLocation":"1078:5:23","nodeType":"VariableDeclaration","scope":5134,"src":"1070:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1070:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5129,"mutability":"mutable","name":"owner","nameLocation":"1101:5:23","nodeType":"VariableDeclaration","scope":5134,"src":"1093:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5128,"name":"address","nodeType":"ElementaryTypeName","src":"1093:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1038:74:23"},"returnParameters":{"id":5133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5134,"src":"1131:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1131:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1130:9:23"},"scope":5200,"src":"1014:126:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1896f70a","id":5141,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"1155:11:23","nodeType":"FunctionDefinition","parameters":{"id":5139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5136,"mutability":"mutable","name":"node","nameLocation":"1175:4:23","nodeType":"VariableDeclaration","scope":5141,"src":"1167:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1167:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5138,"mutability":"mutable","name":"resolver","nameLocation":"1189:8:23","nodeType":"VariableDeclaration","scope":5141,"src":"1181:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5137,"name":"address","nodeType":"ElementaryTypeName","src":"1181:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1166:32:23"},"returnParameters":{"id":5140,"nodeType":"ParameterList","parameters":[],"src":"1207:0:23"},"scope":5200,"src":"1146:62:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5b0fc9c3","id":5148,"implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"1223:8:23","nodeType":"FunctionDefinition","parameters":{"id":5146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5143,"mutability":"mutable","name":"node","nameLocation":"1240:4:23","nodeType":"VariableDeclaration","scope":5148,"src":"1232:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1232:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5145,"mutability":"mutable","name":"owner","nameLocation":"1254:5:23","nodeType":"VariableDeclaration","scope":5148,"src":"1246:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5144,"name":"address","nodeType":"ElementaryTypeName","src":"1246:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1231:29:23"},"returnParameters":{"id":5147,"nodeType":"ParameterList","parameters":[],"src":"1269:0:23"},"scope":5200,"src":"1214:56:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"14ab9038","id":5155,"implemented":false,"kind":"function","modifiers":[],"name":"setTTL","nameLocation":"1285:6:23","nodeType":"FunctionDefinition","parameters":{"id":5153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5150,"mutability":"mutable","name":"node","nameLocation":"1300:4:23","nodeType":"VariableDeclaration","scope":5155,"src":"1292:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1292:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5152,"mutability":"mutable","name":"ttl","nameLocation":"1313:3:23","nodeType":"VariableDeclaration","scope":5155,"src":"1306:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5151,"name":"uint64","nodeType":"ElementaryTypeName","src":"1306:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1291:26:23"},"returnParameters":{"id":5154,"nodeType":"ParameterList","parameters":[],"src":"1326:0:23"},"scope":5200,"src":"1276:51:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a22cb465","id":5162,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1342:17:23","nodeType":"FunctionDefinition","parameters":{"id":5160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5157,"mutability":"mutable","name":"operator","nameLocation":"1368:8:23","nodeType":"VariableDeclaration","scope":5162,"src":"1360:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5156,"name":"address","nodeType":"ElementaryTypeName","src":"1360:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5159,"mutability":"mutable","name":"approved","nameLocation":"1383:8:23","nodeType":"VariableDeclaration","scope":5162,"src":"1378:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5158,"name":"bool","nodeType":"ElementaryTypeName","src":"1378:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1359:33:23"},"returnParameters":{"id":5161,"nodeType":"ParameterList","parameters":[],"src":"1401:0:23"},"scope":5200,"src":"1333:69:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"02571be3","id":5169,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1417:5:23","nodeType":"FunctionDefinition","parameters":{"id":5165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5164,"mutability":"mutable","name":"node","nameLocation":"1431:4:23","nodeType":"VariableDeclaration","scope":5169,"src":"1423:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1423:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1422:14:23"},"returnParameters":{"id":5168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5169,"src":"1460:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5166,"name":"address","nodeType":"ElementaryTypeName","src":"1460:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1459:9:23"},"scope":5200,"src":"1408:61:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0178b8bf","id":5176,"implemented":false,"kind":"function","modifiers":[],"name":"resolver","nameLocation":"1484:8:23","nodeType":"FunctionDefinition","parameters":{"id":5172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"node","nameLocation":"1501:4:23","nodeType":"VariableDeclaration","scope":5176,"src":"1493:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1493:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1492:14:23"},"returnParameters":{"id":5175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5176,"src":"1530:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5173,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1529:9:23"},"scope":5200,"src":"1475:64:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"16a25cbd","id":5183,"implemented":false,"kind":"function","modifiers":[],"name":"ttl","nameLocation":"1554:3:23","nodeType":"FunctionDefinition","parameters":{"id":5179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5178,"mutability":"mutable","name":"node","nameLocation":"1566:4:23","nodeType":"VariableDeclaration","scope":5183,"src":"1558:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1558:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1557:14:23"},"returnParameters":{"id":5182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5183,"src":"1595:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5180,"name":"uint64","nodeType":"ElementaryTypeName","src":"1595:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1594:8:23"},"scope":5200,"src":"1545:58:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f79fe538","id":5190,"implemented":false,"kind":"function","modifiers":[],"name":"recordExists","nameLocation":"1618:12:23","nodeType":"FunctionDefinition","parameters":{"id":5186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5185,"mutability":"mutable","name":"node","nameLocation":"1639:4:23","nodeType":"VariableDeclaration","scope":5190,"src":"1631:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1631:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1630:14:23"},"returnParameters":{"id":5189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5190,"src":"1668:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5187,"name":"bool","nodeType":"ElementaryTypeName","src":"1668:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1667:6:23"},"scope":5200,"src":"1609:65:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":5199,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1689:16:23","nodeType":"FunctionDefinition","parameters":{"id":5195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5192,"mutability":"mutable","name":"owner","nameLocation":"1723:5:23","nodeType":"VariableDeclaration","scope":5199,"src":"1715:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5191,"name":"address","nodeType":"ElementaryTypeName","src":"1715:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5194,"mutability":"mutable","name":"operator","nameLocation":"1746:8:23","nodeType":"VariableDeclaration","scope":5199,"src":"1738:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5193,"name":"address","nodeType":"ElementaryTypeName","src":"1738:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1705:55:23"},"returnParameters":{"id":5198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5199,"src":"1784:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5196,"name":"bool","nodeType":"ElementaryTypeName","src":"1784:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1783:6:23"},"scope":5200,"src":"1680:110:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5201,"src":"26:1766:23","usedErrors":[]}],"src":"0:1793:23"},"id":23},"contracts/resolvers/Resolver.sol":{"ast":{"absolutePath":"contracts/resolvers/Resolver.sol","exportedSymbols":{"IABIResolver":[5420],"IAddrResolver":[5438],"IAddressResolver":[5459],"IContentHashResolver":[5476],"IDNSRecordResolver":[5509],"IDNSZoneResolver":[5528],"IERC165":[2017],"IExtendedResolver":[5540],"IInterfaceResolver":[5561],"INameResolver":[5578],"IPubkeyResolver":[5599],"ITextResolver":[5622],"Resolver":[5399]},"id":5400,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5202,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"31:24:24"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":5203,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":2018,"src":"57:65:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IABIResolver.sol","file":"./profiles/IABIResolver.sol","id":5204,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5421,"src":"123:37:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IAddressResolver.sol","file":"./profiles/IAddressResolver.sol","id":5205,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5460,"src":"161:41:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IAddrResolver.sol","file":"./profiles/IAddrResolver.sol","id":5206,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5439,"src":"203:38:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IContentHashResolver.sol","file":"./profiles/IContentHashResolver.sol","id":5207,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5477,"src":"242:45:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IDNSRecordResolver.sol","file":"./profiles/IDNSRecordResolver.sol","id":5208,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5510,"src":"288:43:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IDNSZoneResolver.sol","file":"./profiles/IDNSZoneResolver.sol","id":5209,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5529,"src":"332:41:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IInterfaceResolver.sol","file":"./profiles/IInterfaceResolver.sol","id":5210,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5562,"src":"374:43:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/INameResolver.sol","file":"./profiles/INameResolver.sol","id":5211,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5579,"src":"418:38:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IPubkeyResolver.sol","file":"./profiles/IPubkeyResolver.sol","id":5212,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5600,"src":"457:40:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/ITextResolver.sol","file":"./profiles/ITextResolver.sol","id":5213,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5623,"src":"498:38:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IExtendedResolver.sol","file":"./profiles/IExtendedResolver.sol","id":5214,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5400,"sourceUnit":5541,"src":"537:42:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5216,"name":"IERC165","nameLocations":["710:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"710:7:24"},"id":5217,"nodeType":"InheritanceSpecifier","src":"710:7:24"},{"baseName":{"id":5218,"name":"IABIResolver","nameLocations":["723:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":5420,"src":"723:12:24"},"id":5219,"nodeType":"InheritanceSpecifier","src":"723:12:24"},{"baseName":{"id":5220,"name":"IAddressResolver","nameLocations":["741:16:24"],"nodeType":"IdentifierPath","referencedDeclaration":5459,"src":"741:16:24"},"id":5221,"nodeType":"InheritanceSpecifier","src":"741:16:24"},{"baseName":{"id":5222,"name":"IAddrResolver","nameLocations":["763:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":5438,"src":"763:13:24"},"id":5223,"nodeType":"InheritanceSpecifier","src":"763:13:24"},{"baseName":{"id":5224,"name":"IContentHashResolver","nameLocations":["782:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":5476,"src":"782:20:24"},"id":5225,"nodeType":"InheritanceSpecifier","src":"782:20:24"},{"baseName":{"id":5226,"name":"IDNSRecordResolver","nameLocations":["808:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":5509,"src":"808:18:24"},"id":5227,"nodeType":"InheritanceSpecifier","src":"808:18:24"},{"baseName":{"id":5228,"name":"IDNSZoneResolver","nameLocations":["832:16:24"],"nodeType":"IdentifierPath","referencedDeclaration":5528,"src":"832:16:24"},"id":5229,"nodeType":"InheritanceSpecifier","src":"832:16:24"},{"baseName":{"id":5230,"name":"IInterfaceResolver","nameLocations":["854:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":5561,"src":"854:18:24"},"id":5231,"nodeType":"InheritanceSpecifier","src":"854:18:24"},{"baseName":{"id":5232,"name":"INameResolver","nameLocations":["878:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":5578,"src":"878:13:24"},"id":5233,"nodeType":"InheritanceSpecifier","src":"878:13:24"},{"baseName":{"id":5234,"name":"IPubkeyResolver","nameLocations":["897:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":5599,"src":"897:15:24"},"id":5235,"nodeType":"InheritanceSpecifier","src":"897:15:24"},{"baseName":{"id":5236,"name":"ITextResolver","nameLocations":["918:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":5622,"src":"918:13:24"},"id":5237,"nodeType":"InheritanceSpecifier","src":"918:13:24"},{"baseName":{"id":5238,"name":"IExtendedResolver","nameLocations":["937:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":5540,"src":"937:17:24"},"id":5239,"nodeType":"InheritanceSpecifier","src":"937:17:24"}],"canonicalName":"Resolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":5215,"nodeType":"StructuredDocumentation","src":"581:102:24","text":" A generic resolver interface which includes all the functions including the ones deprecated"},"fullyImplemented":false,"id":5399,"linearizedBaseContracts":[5399,5540,5622,5599,5578,5561,5528,5509,5476,5438,5459,5420,2017],"name":"Resolver","nameLocation":"694:8:24","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"0424b6fe0d9c3bdbece0e7879dc241bb0c22e900be8b6c168b4ee08bd9bf83bc","id":5245,"name":"ContentChanged","nameLocation":"995:14:24","nodeType":"EventDefinition","parameters":{"id":5244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5241,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1026:4:24","nodeType":"VariableDeclaration","scope":5245,"src":"1010:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1010:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5243,"indexed":false,"mutability":"mutable","name":"hash","nameLocation":"1040:4:24","nodeType":"VariableDeclaration","scope":5245,"src":"1032:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1032:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1009:36:24"},"src":"989:57:24"},{"functionSelector":"a22cb465","id":5252,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1061:17:24","nodeType":"FunctionDefinition","parameters":{"id":5250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5247,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5252,"src":"1079:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5246,"name":"address","nodeType":"ElementaryTypeName","src":"1079:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5252,"src":"1088:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5248,"name":"bool","nodeType":"ElementaryTypeName","src":"1088:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1078:15:24"},"returnParameters":{"id":5251,"nodeType":"ParameterList","parameters":[],"src":"1102:0:24"},"scope":5399,"src":"1052:51:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a4b91a01","id":5261,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1118:7:24","nodeType":"FunctionDefinition","parameters":{"id":5259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5254,"mutability":"mutable","name":"node","nameLocation":"1134:4:24","nodeType":"VariableDeclaration","scope":5261,"src":"1126:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1126:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5256,"mutability":"mutable","name":"delegate","nameLocation":"1148:8:24","nodeType":"VariableDeclaration","scope":5261,"src":"1140:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5255,"name":"address","nodeType":"ElementaryTypeName","src":"1140:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5258,"mutability":"mutable","name":"approved","nameLocation":"1163:8:24","nodeType":"VariableDeclaration","scope":5261,"src":"1158:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5257,"name":"bool","nodeType":"ElementaryTypeName","src":"1158:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1125:47:24"},"returnParameters":{"id":5260,"nodeType":"ParameterList","parameters":[],"src":"1181:0:24"},"scope":5399,"src":"1109:73:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":5268,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1197:16:24","nodeType":"FunctionDefinition","parameters":{"id":5266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"account","nameLocation":"1222:7:24","nodeType":"VariableDeclaration","scope":5268,"src":"1214:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5262,"name":"address","nodeType":"ElementaryTypeName","src":"1214:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5265,"mutability":"mutable","name":"operator","nameLocation":"1239:8:24","nodeType":"VariableDeclaration","scope":5268,"src":"1231:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5264,"name":"address","nodeType":"ElementaryTypeName","src":"1231:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1213:35:24"},"returnParameters":{"id":5267,"nodeType":"ParameterList","parameters":[],"src":"1257:0:24"},"scope":5399,"src":"1188:70:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9784b3e","id":5277,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedFor","nameLocation":"1273:13:24","nodeType":"FunctionDefinition","parameters":{"id":5275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5270,"mutability":"mutable","name":"owner","nameLocation":"1304:5:24","nodeType":"VariableDeclaration","scope":5277,"src":"1296:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5269,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5272,"mutability":"mutable","name":"node","nameLocation":"1327:4:24","nodeType":"VariableDeclaration","scope":5277,"src":"1319:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5271,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1319:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5274,"mutability":"mutable","name":"delegate","nameLocation":"1349:8:24","nodeType":"VariableDeclaration","scope":5277,"src":"1341:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5273,"name":"address","nodeType":"ElementaryTypeName","src":"1341:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1286:77:24"},"returnParameters":{"id":5276,"nodeType":"ParameterList","parameters":[],"src":"1372:0:24"},"scope":5399,"src":"1264:109:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"623195b0","id":5286,"implemented":false,"kind":"function","modifiers":[],"name":"setABI","nameLocation":"1388:6:24","nodeType":"FunctionDefinition","parameters":{"id":5284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5279,"mutability":"mutable","name":"node","nameLocation":"1412:4:24","nodeType":"VariableDeclaration","scope":5286,"src":"1404:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1404:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5281,"mutability":"mutable","name":"contentType","nameLocation":"1434:11:24","nodeType":"VariableDeclaration","scope":5286,"src":"1426:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5280,"name":"uint256","nodeType":"ElementaryTypeName","src":"1426:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5283,"mutability":"mutable","name":"data","nameLocation":"1470:4:24","nodeType":"VariableDeclaration","scope":5286,"src":"1455:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5282,"name":"bytes","nodeType":"ElementaryTypeName","src":"1455:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1394:86:24"},"returnParameters":{"id":5285,"nodeType":"ParameterList","parameters":[],"src":"1489:0:24"},"scope":5399,"src":"1379:111:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d5fa2b00","id":5293,"implemented":false,"kind":"function","modifiers":[],"name":"setAddr","nameLocation":"1505:7:24","nodeType":"FunctionDefinition","parameters":{"id":5291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5288,"mutability":"mutable","name":"node","nameLocation":"1521:4:24","nodeType":"VariableDeclaration","scope":5293,"src":"1513:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1513:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5290,"mutability":"mutable","name":"addr","nameLocation":"1535:4:24","nodeType":"VariableDeclaration","scope":5293,"src":"1527:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5289,"name":"address","nodeType":"ElementaryTypeName","src":"1527:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1512:28:24"},"returnParameters":{"id":5292,"nodeType":"ParameterList","parameters":[],"src":"1549:0:24"},"scope":5399,"src":"1496:54:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8b95dd71","id":5302,"implemented":false,"kind":"function","modifiers":[],"name":"setAddr","nameLocation":"1565:7:24","nodeType":"FunctionDefinition","parameters":{"id":5300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5295,"mutability":"mutable","name":"node","nameLocation":"1581:4:24","nodeType":"VariableDeclaration","scope":5302,"src":"1573:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1573:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5297,"mutability":"mutable","name":"coinType","nameLocation":"1595:8:24","nodeType":"VariableDeclaration","scope":5302,"src":"1587:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1587:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5299,"mutability":"mutable","name":"a","nameLocation":"1620:1:24","nodeType":"VariableDeclaration","scope":5302,"src":"1605:16:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5298,"name":"bytes","nodeType":"ElementaryTypeName","src":"1605:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1572:50:24"},"returnParameters":{"id":5301,"nodeType":"ParameterList","parameters":[],"src":"1631:0:24"},"scope":5399,"src":"1556:76:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"304e6ade","id":5309,"implemented":false,"kind":"function","modifiers":[],"name":"setContenthash","nameLocation":"1647:14:24","nodeType":"FunctionDefinition","parameters":{"id":5307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5304,"mutability":"mutable","name":"node","nameLocation":"1670:4:24","nodeType":"VariableDeclaration","scope":5309,"src":"1662:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1662:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5306,"mutability":"mutable","name":"hash","nameLocation":"1691:4:24","nodeType":"VariableDeclaration","scope":5309,"src":"1676:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5305,"name":"bytes","nodeType":"ElementaryTypeName","src":"1676:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1661:35:24"},"returnParameters":{"id":5308,"nodeType":"ParameterList","parameters":[],"src":"1705:0:24"},"scope":5399,"src":"1638:68:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"76196c88","id":5316,"implemented":false,"kind":"function","modifiers":[],"name":"setDnsrr","nameLocation":"1721:8:24","nodeType":"FunctionDefinition","parameters":{"id":5314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5311,"mutability":"mutable","name":"node","nameLocation":"1738:4:24","nodeType":"VariableDeclaration","scope":5316,"src":"1730:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1730:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5313,"mutability":"mutable","name":"data","nameLocation":"1759:4:24","nodeType":"VariableDeclaration","scope":5316,"src":"1744:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5312,"name":"bytes","nodeType":"ElementaryTypeName","src":"1744:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1729:35:24"},"returnParameters":{"id":5315,"nodeType":"ParameterList","parameters":[],"src":"1773:0:24"},"scope":5399,"src":"1712:62:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"77372213","id":5323,"implemented":false,"kind":"function","modifiers":[],"name":"setName","nameLocation":"1789:7:24","nodeType":"FunctionDefinition","parameters":{"id":5321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5318,"mutability":"mutable","name":"node","nameLocation":"1805:4:24","nodeType":"VariableDeclaration","scope":5323,"src":"1797:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1797:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5320,"mutability":"mutable","name":"_name","nameLocation":"1827:5:24","nodeType":"VariableDeclaration","scope":5323,"src":"1811:21:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5319,"name":"string","nodeType":"ElementaryTypeName","src":"1811:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1796:37:24"},"returnParameters":{"id":5322,"nodeType":"ParameterList","parameters":[],"src":"1842:0:24"},"scope":5399,"src":"1780:63:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"29cd62ea","id":5332,"implemented":false,"kind":"function","modifiers":[],"name":"setPubkey","nameLocation":"1858:9:24","nodeType":"FunctionDefinition","parameters":{"id":5330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5325,"mutability":"mutable","name":"node","nameLocation":"1876:4:24","nodeType":"VariableDeclaration","scope":5332,"src":"1868:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1868:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5327,"mutability":"mutable","name":"x","nameLocation":"1890:1:24","nodeType":"VariableDeclaration","scope":5332,"src":"1882:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1882:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5329,"mutability":"mutable","name":"y","nameLocation":"1901:1:24","nodeType":"VariableDeclaration","scope":5332,"src":"1893:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1893:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1867:36:24"},"returnParameters":{"id":5331,"nodeType":"ParameterList","parameters":[],"src":"1912:0:24"},"scope":5399,"src":"1849:64:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"10f13a8c","id":5341,"implemented":false,"kind":"function","modifiers":[],"name":"setText","nameLocation":"1928:7:24","nodeType":"FunctionDefinition","parameters":{"id":5339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5334,"mutability":"mutable","name":"node","nameLocation":"1953:4:24","nodeType":"VariableDeclaration","scope":5341,"src":"1945:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5333,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1945:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5336,"mutability":"mutable","name":"key","nameLocation":"1983:3:24","nodeType":"VariableDeclaration","scope":5341,"src":"1967:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5335,"name":"string","nodeType":"ElementaryTypeName","src":"1967:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5338,"mutability":"mutable","name":"value","nameLocation":"2012:5:24","nodeType":"VariableDeclaration","scope":5341,"src":"1996:21:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5337,"name":"string","nodeType":"ElementaryTypeName","src":"1996:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1935:88:24"},"returnParameters":{"id":5340,"nodeType":"ParameterList","parameters":[],"src":"2032:0:24"},"scope":5399,"src":"1919:114:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e59d895d","id":5350,"implemented":false,"kind":"function","modifiers":[],"name":"setInterface","nameLocation":"2048:12:24","nodeType":"FunctionDefinition","parameters":{"id":5348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5343,"mutability":"mutable","name":"node","nameLocation":"2078:4:24","nodeType":"VariableDeclaration","scope":5350,"src":"2070:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2070:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5345,"mutability":"mutable","name":"interfaceID","nameLocation":"2099:11:24","nodeType":"VariableDeclaration","scope":5350,"src":"2092:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5344,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2092:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":5347,"mutability":"mutable","name":"implementer","nameLocation":"2128:11:24","nodeType":"VariableDeclaration","scope":5350,"src":"2120:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5346,"name":"address","nodeType":"ElementaryTypeName","src":"2120:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2060:85:24"},"returnParameters":{"id":5349,"nodeType":"ParameterList","parameters":[],"src":"2154:0:24"},"scope":5399,"src":"2039:116:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ac9650d8","id":5359,"implemented":false,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"2170:9:24","nodeType":"FunctionDefinition","parameters":{"id":5354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5353,"mutability":"mutable","name":"data","nameLocation":"2206:4:24","nodeType":"VariableDeclaration","scope":5359,"src":"2189:21:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5351,"name":"bytes","nodeType":"ElementaryTypeName","src":"2189:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5352,"nodeType":"ArrayTypeName","src":"2189:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2179:37:24"},"returnParameters":{"id":5358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5357,"mutability":"mutable","name":"results","nameLocation":"2250:7:24","nodeType":"VariableDeclaration","scope":5359,"src":"2235:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5355,"name":"bytes","nodeType":"ElementaryTypeName","src":"2235:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5356,"nodeType":"ArrayTypeName","src":"2235:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2234:24:24"},"scope":5399,"src":"2161:98:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e32954eb","id":5370,"implemented":false,"kind":"function","modifiers":[],"name":"multicallWithNodeCheck","nameLocation":"2274:22:24","nodeType":"FunctionDefinition","parameters":{"id":5365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5361,"mutability":"mutable","name":"nodehash","nameLocation":"2314:8:24","nodeType":"VariableDeclaration","scope":5370,"src":"2306:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2306:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5364,"mutability":"mutable","name":"data","nameLocation":"2349:4:24","nodeType":"VariableDeclaration","scope":5370,"src":"2332:21:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5362,"name":"bytes","nodeType":"ElementaryTypeName","src":"2332:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5363,"nodeType":"ArrayTypeName","src":"2332:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2296:63:24"},"returnParameters":{"id":5369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5368,"mutability":"mutable","name":"results","nameLocation":"2393:7:24","nodeType":"VariableDeclaration","scope":5370,"src":"2378:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5366,"name":"bytes","nodeType":"ElementaryTypeName","src":"2378:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5367,"nodeType":"ArrayTypeName","src":"2378:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2377:24:24"},"scope":5399,"src":"2265:137:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2dff6941","id":5377,"implemented":false,"kind":"function","modifiers":[],"name":"content","nameLocation":"2448:7:24","nodeType":"FunctionDefinition","parameters":{"id":5373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5372,"mutability":"mutable","name":"node","nameLocation":"2464:4:24","nodeType":"VariableDeclaration","scope":5377,"src":"2456:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2456:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2455:14:24"},"returnParameters":{"id":5376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5377,"src":"2493:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2493:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2492:9:24"},"scope":5399,"src":"2439:63:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e89401a1","id":5384,"implemented":false,"kind":"function","modifiers":[],"name":"multihash","nameLocation":"2517:9:24","nodeType":"FunctionDefinition","parameters":{"id":5380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5379,"mutability":"mutable","name":"node","nameLocation":"2535:4:24","nodeType":"VariableDeclaration","scope":5384,"src":"2527:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2527:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2526:14:24"},"returnParameters":{"id":5383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5384,"src":"2564:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5381,"name":"bytes","nodeType":"ElementaryTypeName","src":"2564:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2563:14:24"},"scope":5399,"src":"2508:70:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c3d014d6","id":5391,"implemented":false,"kind":"function","modifiers":[],"name":"setContent","nameLocation":"2593:10:24","nodeType":"FunctionDefinition","parameters":{"id":5389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5386,"mutability":"mutable","name":"node","nameLocation":"2612:4:24","nodeType":"VariableDeclaration","scope":5391,"src":"2604:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2604:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5388,"mutability":"mutable","name":"hash","nameLocation":"2626:4:24","nodeType":"VariableDeclaration","scope":5391,"src":"2618:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2618:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2603:28:24"},"returnParameters":{"id":5390,"nodeType":"ParameterList","parameters":[],"src":"2640:0:24"},"scope":5399,"src":"2584:57:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"aa4cb547","id":5398,"implemented":false,"kind":"function","modifiers":[],"name":"setMultihash","nameLocation":"2656:12:24","nodeType":"FunctionDefinition","parameters":{"id":5396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5393,"mutability":"mutable","name":"node","nameLocation":"2677:4:24","nodeType":"VariableDeclaration","scope":5398,"src":"2669:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2669:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5395,"mutability":"mutable","name":"hash","nameLocation":"2698:4:24","nodeType":"VariableDeclaration","scope":5398,"src":"2683:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5394,"name":"bytes","nodeType":"ElementaryTypeName","src":"2683:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2668:35:24"},"returnParameters":{"id":5397,"nodeType":"ParameterList","parameters":[],"src":"2712:0:24"},"scope":5399,"src":"2647:66:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5400,"src":"684:2031:24","usedErrors":[]}],"src":"31:2685:24"},"id":24},"contracts/resolvers/profiles/IABIResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IABIResolver.sol","exportedSymbols":{"IABIResolver":[5420]},"id":5421,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5401,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IABIResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5420,"linearizedBaseContracts":[5420],"name":"IABIResolver","nameLocation":"68:12:25","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"aa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3","id":5407,"name":"ABIChanged","nameLocation":"93:10:25","nodeType":"EventDefinition","parameters":{"id":5406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5403,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"120:4:25","nodeType":"VariableDeclaration","scope":5407,"src":"104:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"104:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5405,"indexed":true,"mutability":"mutable","name":"contentType","nameLocation":"142:11:25","nodeType":"VariableDeclaration","scope":5407,"src":"126:27:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5404,"name":"uint256","nodeType":"ElementaryTypeName","src":"126:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"103:51:25"},"src":"87:68:25"},{"documentation":{"id":5408,"nodeType":"StructuredDocumentation","src":"161:310:25","text":" Returns the ABI associated with an ENS node.\n Defined in EIP205.\n @param node The ENS node to query\n @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n @return contentType The content type of the return value\n @return data The ABI data"},"functionSelector":"2203ab56","id":5419,"implemented":false,"kind":"function","modifiers":[],"name":"ABI","nameLocation":"485:3:25","nodeType":"FunctionDefinition","parameters":{"id":5413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5410,"mutability":"mutable","name":"node","nameLocation":"506:4:25","nodeType":"VariableDeclaration","scope":5419,"src":"498:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"498:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5412,"mutability":"mutable","name":"contentTypes","nameLocation":"528:12:25","nodeType":"VariableDeclaration","scope":5419,"src":"520:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5411,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"488:58:25"},"returnParameters":{"id":5418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5419,"src":"570:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5414,"name":"uint256","nodeType":"ElementaryTypeName","src":"570:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5419,"src":"579:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5416,"name":"bytes","nodeType":"ElementaryTypeName","src":"579:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"569:23:25"},"scope":5420,"src":"476:117:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5421,"src":"58:537:25","usedErrors":[]}],"src":"32:564:25"},"id":25},"contracts/resolvers/profiles/IAddrResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IAddrResolver.sol","exportedSymbols":{"IAddrResolver":[5438]},"id":5439,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5422,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IAddrResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":5423,"nodeType":"StructuredDocumentation","src":"58:61:26","text":" Interface for the legacy (ETH-only) addr function."},"fullyImplemented":false,"id":5438,"linearizedBaseContracts":[5438],"name":"IAddrResolver","nameLocation":"130:13:26","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2","id":5429,"name":"AddrChanged","nameLocation":"156:11:26","nodeType":"EventDefinition","parameters":{"id":5428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5425,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"184:4:26","nodeType":"VariableDeclaration","scope":5429,"src":"168:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"168:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5427,"indexed":false,"mutability":"mutable","name":"a","nameLocation":"198:1:26","nodeType":"VariableDeclaration","scope":5429,"src":"190:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5426,"name":"address","nodeType":"ElementaryTypeName","src":"190:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"167:33:26"},"src":"150:51:26"},{"documentation":{"id":5430,"nodeType":"StructuredDocumentation","src":"207:148:26","text":" Returns the address associated with an ENS node.\n @param node The ENS node to query.\n @return The associated address."},"functionSelector":"3b3b57de","id":5437,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"369:4:26","nodeType":"FunctionDefinition","parameters":{"id":5433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5432,"mutability":"mutable","name":"node","nameLocation":"382:4:26","nodeType":"VariableDeclaration","scope":5437,"src":"374:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"373:14:26"},"returnParameters":{"id":5436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5437,"src":"411:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5434,"name":"address","nodeType":"ElementaryTypeName","src":"411:15:26","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"410:17:26"},"scope":5438,"src":"360:68:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5439,"src":"120:310:26","usedErrors":[]}],"src":"32:399:26"},"id":26},"contracts/resolvers/profiles/IAddressResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IAddressResolver.sol","exportedSymbols":{"IAddressResolver":[5459]},"id":5460,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5440,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IAddressResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":5441,"nodeType":"StructuredDocumentation","src":"58:59:27","text":" Interface for the new (multicoin) addr function."},"fullyImplemented":false,"id":5459,"linearizedBaseContracts":[5459],"name":"IAddressResolver","nameLocation":"128:16:27","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752","id":5449,"name":"AddressChanged","nameLocation":"157:14:27","nodeType":"EventDefinition","parameters":{"id":5448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5443,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"197:4:27","nodeType":"VariableDeclaration","scope":5449,"src":"181:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"181:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5445,"indexed":false,"mutability":"mutable","name":"coinType","nameLocation":"219:8:27","nodeType":"VariableDeclaration","scope":5449,"src":"211:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5444,"name":"uint256","nodeType":"ElementaryTypeName","src":"211:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5447,"indexed":false,"mutability":"mutable","name":"newAddress","nameLocation":"243:10:27","nodeType":"VariableDeclaration","scope":5449,"src":"237:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5446,"name":"bytes","nodeType":"ElementaryTypeName","src":"237:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"171:88:27"},"src":"151:109:27"},{"functionSelector":"f1cb7e06","id":5458,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"275:4:27","nodeType":"FunctionDefinition","parameters":{"id":5454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5451,"mutability":"mutable","name":"node","nameLocation":"297:4:27","nodeType":"VariableDeclaration","scope":5458,"src":"289:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5450,"name":"bytes32","nodeType":"ElementaryTypeName","src":"289:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5453,"mutability":"mutable","name":"coinType","nameLocation":"319:8:27","nodeType":"VariableDeclaration","scope":5458,"src":"311:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5452,"name":"uint256","nodeType":"ElementaryTypeName","src":"311:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"279:54:27"},"returnParameters":{"id":5457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5458,"src":"357:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5455,"name":"bytes","nodeType":"ElementaryTypeName","src":"357:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"356:14:27"},"scope":5459,"src":"266:105:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5460,"src":"118:255:27","usedErrors":[]}],"src":"32:342:27"},"id":27},"contracts/resolvers/profiles/IContentHashResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IContentHashResolver.sol","exportedSymbols":{"IContentHashResolver":[5476]},"id":5477,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5461,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IContentHashResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5476,"linearizedBaseContracts":[5476],"name":"IContentHashResolver","nameLocation":"68:20:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"e379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578","id":5467,"name":"ContenthashChanged","nameLocation":"101:18:28","nodeType":"EventDefinition","parameters":{"id":5466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5463,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"136:4:28","nodeType":"VariableDeclaration","scope":5467,"src":"120:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"120:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5465,"indexed":false,"mutability":"mutable","name":"hash","nameLocation":"148:4:28","nodeType":"VariableDeclaration","scope":5467,"src":"142:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5464,"name":"bytes","nodeType":"ElementaryTypeName","src":"142:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"119:34:28"},"src":"95:59:28"},{"documentation":{"id":5468,"nodeType":"StructuredDocumentation","src":"160:156:28","text":" Returns the contenthash associated with an ENS node.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"bc1c58d1","id":5475,"implemented":false,"kind":"function","modifiers":[],"name":"contenthash","nameLocation":"330:11:28","nodeType":"FunctionDefinition","parameters":{"id":5471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5470,"mutability":"mutable","name":"node","nameLocation":"350:4:28","nodeType":"VariableDeclaration","scope":5475,"src":"342:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"342:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"341:14:28"},"returnParameters":{"id":5474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5475,"src":"379:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5472,"name":"bytes","nodeType":"ElementaryTypeName","src":"379:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"378:14:28"},"scope":5476,"src":"321:72:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5477,"src":"58:337:28","usedErrors":[]}],"src":"32:364:28"},"id":28},"contracts/resolvers/profiles/IDNSRecordResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IDNSRecordResolver.sol","exportedSymbols":{"IDNSRecordResolver":[5509]},"id":5510,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5478,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IDNSRecordResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5509,"linearizedBaseContracts":[5509],"name":"IDNSRecordResolver","nameLocation":"68:18:29","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b","id":5488,"name":"DNSRecordChanged","nameLocation":"190:16:29","nodeType":"EventDefinition","parameters":{"id":5487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5480,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"232:4:29","nodeType":"VariableDeclaration","scope":5488,"src":"216:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"216:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5482,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"252:4:29","nodeType":"VariableDeclaration","scope":5488,"src":"246:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5481,"name":"bytes","nodeType":"ElementaryTypeName","src":"246:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5484,"indexed":false,"mutability":"mutable","name":"resource","nameLocation":"273:8:29","nodeType":"VariableDeclaration","scope":5488,"src":"266:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5483,"name":"uint16","nodeType":"ElementaryTypeName","src":"266:6:29","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5486,"indexed":false,"mutability":"mutable","name":"record","nameLocation":"297:6:29","nodeType":"VariableDeclaration","scope":5488,"src":"291:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5485,"name":"bytes","nodeType":"ElementaryTypeName","src":"291:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"206:103:29"},"src":"184:126:29"},{"anonymous":false,"eventSelector":"03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a1207","id":5496,"name":"DNSRecordDeleted","nameLocation":"412:16:29","nodeType":"EventDefinition","parameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5490,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"445:4:29","nodeType":"VariableDeclaration","scope":5496,"src":"429:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5489,"name":"bytes32","nodeType":"ElementaryTypeName","src":"429:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5492,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"457:4:29","nodeType":"VariableDeclaration","scope":5496,"src":"451:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5491,"name":"bytes","nodeType":"ElementaryTypeName","src":"451:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5494,"indexed":false,"mutability":"mutable","name":"resource","nameLocation":"470:8:29","nodeType":"VariableDeclaration","scope":5496,"src":"463:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5493,"name":"uint16","nodeType":"ElementaryTypeName","src":"463:6:29","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"428:51:29"},"src":"406:74:29"},{"documentation":{"id":5497,"nodeType":"StructuredDocumentation","src":"486:391:29","text":" Obtain a DNS record.\n @param node the namehash of the node for which to fetch the record\n @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n @return the DNS record in wire format if present, otherwise empty"},"functionSelector":"a8fa5682","id":5508,"implemented":false,"kind":"function","modifiers":[],"name":"dnsRecord","nameLocation":"891:9:29","nodeType":"FunctionDefinition","parameters":{"id":5504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5499,"mutability":"mutable","name":"node","nameLocation":"918:4:29","nodeType":"VariableDeclaration","scope":5508,"src":"910:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"910:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5501,"mutability":"mutable","name":"name","nameLocation":"940:4:29","nodeType":"VariableDeclaration","scope":5508,"src":"932:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"932:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5503,"mutability":"mutable","name":"resource","nameLocation":"961:8:29","nodeType":"VariableDeclaration","scope":5508,"src":"954:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5502,"name":"uint16","nodeType":"ElementaryTypeName","src":"954:6:29","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"900:75:29"},"returnParameters":{"id":5507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5508,"src":"999:12:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5505,"name":"bytes","nodeType":"ElementaryTypeName","src":"999:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"998:14:29"},"scope":5509,"src":"882:131:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5510,"src":"58:957:29","usedErrors":[]}],"src":"32:984:29"},"id":29},"contracts/resolvers/profiles/IDNSZoneResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IDNSZoneResolver.sol","exportedSymbols":{"IDNSZoneResolver":[5528]},"id":5529,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5511,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:30"},{"abstract":false,"baseContracts":[],"canonicalName":"IDNSZoneResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5528,"linearizedBaseContracts":[5528],"name":"IDNSZoneResolver","nameLocation":"68:16:30","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85","id":5519,"name":"DNSZonehashChanged","nameLocation":"180:18:30","nodeType":"EventDefinition","parameters":{"id":5518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5513,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"224:4:30","nodeType":"VariableDeclaration","scope":5519,"src":"208:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"208:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5515,"indexed":false,"mutability":"mutable","name":"lastzonehash","nameLocation":"244:12:30","nodeType":"VariableDeclaration","scope":5519,"src":"238:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5514,"name":"bytes","nodeType":"ElementaryTypeName","src":"238:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5517,"indexed":false,"mutability":"mutable","name":"zonehash","nameLocation":"272:8:30","nodeType":"VariableDeclaration","scope":5519,"src":"266:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5516,"name":"bytes","nodeType":"ElementaryTypeName","src":"266:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"198:88:30"},"src":"174:113:30"},{"documentation":{"id":5520,"nodeType":"StructuredDocumentation","src":"293:143:30","text":" zonehash obtains the hash for the zone.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"5c98042b","id":5527,"implemented":false,"kind":"function","modifiers":[],"name":"zonehash","nameLocation":"450:8:30","nodeType":"FunctionDefinition","parameters":{"id":5523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5522,"mutability":"mutable","name":"node","nameLocation":"467:4:30","nodeType":"VariableDeclaration","scope":5527,"src":"459:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"459:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"458:14:30"},"returnParameters":{"id":5526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5527,"src":"496:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5524,"name":"bytes","nodeType":"ElementaryTypeName","src":"496:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"495:14:30"},"scope":5528,"src":"441:69:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5529,"src":"58:454:30","usedErrors":[]}],"src":"32:481:30"},"id":30},"contracts/resolvers/profiles/IExtendedResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IExtendedResolver.sol","exportedSymbols":{"IExtendedResolver":[5540]},"id":5541,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5530,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IExtendedResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5540,"linearizedBaseContracts":[5540],"name":"IExtendedResolver","nameLocation":"67:17:31","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9061b923","id":5539,"implemented":false,"kind":"function","modifiers":[],"name":"resolve","nameLocation":"100:7:31","nodeType":"FunctionDefinition","parameters":{"id":5535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5532,"mutability":"mutable","name":"name","nameLocation":"130:4:31","nodeType":"VariableDeclaration","scope":5539,"src":"117:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5531,"name":"bytes","nodeType":"ElementaryTypeName","src":"117:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5534,"mutability":"mutable","name":"data","nameLocation":"157:4:31","nodeType":"VariableDeclaration","scope":5539,"src":"144:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5533,"name":"bytes","nodeType":"ElementaryTypeName","src":"144:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"107:60:31"},"returnParameters":{"id":5538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5539,"src":"191:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5536,"name":"bytes","nodeType":"ElementaryTypeName","src":"191:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"190:14:31"},"scope":5540,"src":"91:114:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5541,"src":"57:150:31","usedErrors":[]}],"src":"32:176:31"},"id":31},"contracts/resolvers/profiles/IInterfaceResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IInterfaceResolver.sol","exportedSymbols":{"IInterfaceResolver":[5561]},"id":5562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5542,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IInterfaceResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5561,"linearizedBaseContracts":[5561],"name":"IInterfaceResolver","nameLocation":"68:18:32","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa","id":5550,"name":"InterfaceChanged","nameLocation":"99:16:32","nodeType":"EventDefinition","parameters":{"id":5549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5544,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"141:4:32","nodeType":"VariableDeclaration","scope":5550,"src":"125:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5543,"name":"bytes32","nodeType":"ElementaryTypeName","src":"125:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5546,"indexed":true,"mutability":"mutable","name":"interfaceID","nameLocation":"170:11:32","nodeType":"VariableDeclaration","scope":5550,"src":"155:26:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5545,"name":"bytes4","nodeType":"ElementaryTypeName","src":"155:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":5548,"indexed":false,"mutability":"mutable","name":"implementer","nameLocation":"199:11:32","nodeType":"VariableDeclaration","scope":5550,"src":"191:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5547,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"115:101:32"},"src":"93:124:32"},{"documentation":{"id":5551,"nodeType":"StructuredDocumentation","src":"223:626:32","text":" Returns the address of a contract that implements the specified interface for this name.\n If an implementer has not been set for this interfaceID and name, the resolver will query\n the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n contract implements EIP165 and returns `true` for the specified interfaceID, its address\n will be returned.\n @param node The ENS node to query.\n @param interfaceID The EIP 165 interface ID to check for.\n @return The address that implements this interface, or 0 if the interface is unsupported."},"functionSelector":"124a319c","id":5560,"implemented":false,"kind":"function","modifiers":[],"name":"interfaceImplementer","nameLocation":"863:20:32","nodeType":"FunctionDefinition","parameters":{"id":5556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5553,"mutability":"mutable","name":"node","nameLocation":"901:4:32","nodeType":"VariableDeclaration","scope":5560,"src":"893:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"893:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5555,"mutability":"mutable","name":"interfaceID","nameLocation":"922:11:32","nodeType":"VariableDeclaration","scope":5560,"src":"915:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5554,"name":"bytes4","nodeType":"ElementaryTypeName","src":"915:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"883:56:32"},"returnParameters":{"id":5559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5560,"src":"963:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5557,"name":"address","nodeType":"ElementaryTypeName","src":"963:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"962:9:32"},"scope":5561,"src":"854:118:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5562,"src":"58:916:32","usedErrors":[]}],"src":"32:943:32"},"id":32},"contracts/resolvers/profiles/INameResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/INameResolver.sol","exportedSymbols":{"INameResolver":[5578]},"id":5579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5563,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:33"},{"abstract":false,"baseContracts":[],"canonicalName":"INameResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5578,"linearizedBaseContracts":[5578],"name":"INameResolver","nameLocation":"68:13:33","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"b7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7","id":5569,"name":"NameChanged","nameLocation":"94:11:33","nodeType":"EventDefinition","parameters":{"id":5568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5565,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"122:4:33","nodeType":"VariableDeclaration","scope":5569,"src":"106:20:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"106:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5567,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"135:4:33","nodeType":"VariableDeclaration","scope":5569,"src":"128:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5566,"name":"string","nodeType":"ElementaryTypeName","src":"128:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"105:35:33"},"src":"88:53:33"},{"documentation":{"id":5570,"nodeType":"StructuredDocumentation","src":"147:189:33","text":" Returns the name associated with an ENS node, for reverse records.\n Defined in EIP181.\n @param node The ENS node to query.\n @return The associated name."},"functionSelector":"691f3431","id":5577,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"350:4:33","nodeType":"FunctionDefinition","parameters":{"id":5573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5572,"mutability":"mutable","name":"node","nameLocation":"363:4:33","nodeType":"VariableDeclaration","scope":5577,"src":"355:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"355:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"354:14:33"},"returnParameters":{"id":5576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5577,"src":"392:13:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5574,"name":"string","nodeType":"ElementaryTypeName","src":"392:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"391:15:33"},"scope":5578,"src":"341:66:33","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5579,"src":"58:351:33","usedErrors":[]}],"src":"32:378:33"},"id":33},"contracts/resolvers/profiles/IPubkeyResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IPubkeyResolver.sol","exportedSymbols":{"IPubkeyResolver":[5599]},"id":5600,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5580,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IPubkeyResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5599,"linearizedBaseContracts":[5599],"name":"IPubkeyResolver","nameLocation":"68:15:34","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46","id":5588,"name":"PubkeyChanged","nameLocation":"96:13:34","nodeType":"EventDefinition","parameters":{"id":5587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5582,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"126:4:34","nodeType":"VariableDeclaration","scope":5588,"src":"110:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"110:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5584,"indexed":false,"mutability":"mutable","name":"x","nameLocation":"140:1:34","nodeType":"VariableDeclaration","scope":5588,"src":"132:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"132:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5586,"indexed":false,"mutability":"mutable","name":"y","nameLocation":"151:1:34","nodeType":"VariableDeclaration","scope":5588,"src":"143:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"143:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"109:44:34"},"src":"90:64:34"},{"documentation":{"id":5589,"nodeType":"StructuredDocumentation","src":"160:294:34","text":" Returns the SECP256k1 public key associated with an ENS node.\n Defined in EIP 619.\n @param node The ENS node to query\n @return x The X coordinate of the curve point for the public key.\n @return y The Y coordinate of the curve point for the public key."},"functionSelector":"c8690233","id":5598,"implemented":false,"kind":"function","modifiers":[],"name":"pubkey","nameLocation":"468:6:34","nodeType":"FunctionDefinition","parameters":{"id":5592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5591,"mutability":"mutable","name":"node","nameLocation":"483:4:34","nodeType":"VariableDeclaration","scope":5598,"src":"475:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"475:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"474:14:34"},"returnParameters":{"id":5597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5594,"mutability":"mutable","name":"x","nameLocation":"520:1:34","nodeType":"VariableDeclaration","scope":5598,"src":"512:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"512:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5596,"mutability":"mutable","name":"y","nameLocation":"531:1:34","nodeType":"VariableDeclaration","scope":5598,"src":"523:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"523:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"511:22:34"},"scope":5599,"src":"459:75:34","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5600,"src":"58:478:34","usedErrors":[]}],"src":"32:505:34"},"id":34},"contracts/resolvers/profiles/ITextResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/ITextResolver.sol","exportedSymbols":{"ITextResolver":[5622]},"id":5623,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5601,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:35"},{"abstract":false,"baseContracts":[],"canonicalName":"ITextResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5622,"linearizedBaseContracts":[5622],"name":"ITextResolver","nameLocation":"68:13:35","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1","id":5611,"name":"TextChanged","nameLocation":"94:11:35","nodeType":"EventDefinition","parameters":{"id":5610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5603,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"131:4:35","nodeType":"VariableDeclaration","scope":5611,"src":"115:20:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"115:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5605,"indexed":true,"mutability":"mutable","name":"indexedKey","nameLocation":"160:10:35","nodeType":"VariableDeclaration","scope":5611,"src":"145:25:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5604,"name":"string","nodeType":"ElementaryTypeName","src":"145:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5607,"indexed":false,"mutability":"mutable","name":"key","nameLocation":"187:3:35","nodeType":"VariableDeclaration","scope":5611,"src":"180:10:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5606,"name":"string","nodeType":"ElementaryTypeName","src":"180:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5609,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"207:5:35","nodeType":"VariableDeclaration","scope":5611,"src":"200:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5608,"name":"string","nodeType":"ElementaryTypeName","src":"200:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"105:113:35"},"src":"88:131:35"},{"documentation":{"id":5612,"nodeType":"StructuredDocumentation","src":"225:206:35","text":" Returns the text data associated with an ENS node and key.\n @param node The ENS node to query.\n @param key The text data key to query.\n @return The associated text data."},"functionSelector":"59d1d43c","id":5621,"implemented":false,"kind":"function","modifiers":[],"name":"text","nameLocation":"445:4:35","nodeType":"FunctionDefinition","parameters":{"id":5617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5614,"mutability":"mutable","name":"node","nameLocation":"467:4:35","nodeType":"VariableDeclaration","scope":5621,"src":"459:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"459:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5616,"mutability":"mutable","name":"key","nameLocation":"497:3:35","nodeType":"VariableDeclaration","scope":5621,"src":"481:19:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5615,"name":"string","nodeType":"ElementaryTypeName","src":"481:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"449:57:35"},"returnParameters":{"id":5620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5621,"src":"530:13:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5618,"name":"string","nodeType":"ElementaryTypeName","src":"530:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"529:15:35"},"scope":5622,"src":"436:109:35","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5623,"src":"58:489:35","usedErrors":[]}],"src":"32:516:35"},"id":35},"contracts/reverseRegistrar/IReverseRegistrar.sol":{"ast":{"absolutePath":"contracts/reverseRegistrar/IReverseRegistrar.sol","exportedSymbols":{"IReverseRegistrar":[5684]},"id":5685,"nodeType":"SourceUnit","nodes":[{"id":5624,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:36"},{"abstract":false,"baseContracts":[],"canonicalName":"IReverseRegistrar","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5684,"linearizedBaseContracts":[5684],"name":"IReverseRegistrar","nameLocation":"36:17:36","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c66485b2","id":5629,"implemented":false,"kind":"function","modifiers":[],"name":"setDefaultResolver","nameLocation":"69:18:36","nodeType":"FunctionDefinition","parameters":{"id":5627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5626,"mutability":"mutable","name":"resolver","nameLocation":"96:8:36","nodeType":"VariableDeclaration","scope":5629,"src":"88:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5625,"name":"address","nodeType":"ElementaryTypeName","src":"88:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"87:18:36"},"returnParameters":{"id":5628,"nodeType":"ParameterList","parameters":[],"src":"114:0:36"},"scope":5684,"src":"60:55:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1e83409a","id":5636,"implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"130:5:36","nodeType":"FunctionDefinition","parameters":{"id":5632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5631,"mutability":"mutable","name":"owner","nameLocation":"144:5:36","nodeType":"VariableDeclaration","scope":5636,"src":"136:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5630,"name":"address","nodeType":"ElementaryTypeName","src":"136:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"135:15:36"},"returnParameters":{"id":5635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5636,"src":"169:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5633,"name":"bytes32","nodeType":"ElementaryTypeName","src":"169:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"168:9:36"},"scope":5684,"src":"121:57:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"65669631","id":5647,"implemented":false,"kind":"function","modifiers":[],"name":"claimForAddr","nameLocation":"193:12:36","nodeType":"FunctionDefinition","parameters":{"id":5643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5638,"mutability":"mutable","name":"addr","nameLocation":"223:4:36","nodeType":"VariableDeclaration","scope":5647,"src":"215:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5637,"name":"address","nodeType":"ElementaryTypeName","src":"215:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5640,"mutability":"mutable","name":"owner","nameLocation":"245:5:36","nodeType":"VariableDeclaration","scope":5647,"src":"237:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5639,"name":"address","nodeType":"ElementaryTypeName","src":"237:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5642,"mutability":"mutable","name":"resolver","nameLocation":"268:8:36","nodeType":"VariableDeclaration","scope":5647,"src":"260:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5641,"name":"address","nodeType":"ElementaryTypeName","src":"260:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"205:77:36"},"returnParameters":{"id":5646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5647,"src":"301:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"301:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"300:9:36"},"scope":5684,"src":"184:126:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0f5a5466","id":5656,"implemented":false,"kind":"function","modifiers":[],"name":"claimWithResolver","nameLocation":"325:17:36","nodeType":"FunctionDefinition","parameters":{"id":5652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5649,"mutability":"mutable","name":"owner","nameLocation":"360:5:36","nodeType":"VariableDeclaration","scope":5656,"src":"352:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5648,"name":"address","nodeType":"ElementaryTypeName","src":"352:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5651,"mutability":"mutable","name":"resolver","nameLocation":"383:8:36","nodeType":"VariableDeclaration","scope":5656,"src":"375:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5650,"name":"address","nodeType":"ElementaryTypeName","src":"375:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"342:55:36"},"returnParameters":{"id":5655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5656,"src":"416:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"416:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"415:9:36"},"scope":5684,"src":"316:109:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c47f0027","id":5663,"implemented":false,"kind":"function","modifiers":[],"name":"setName","nameLocation":"440:7:36","nodeType":"FunctionDefinition","parameters":{"id":5659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5658,"mutability":"mutable","name":"name","nameLocation":"462:4:36","nodeType":"VariableDeclaration","scope":5663,"src":"448:18:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5657,"name":"string","nodeType":"ElementaryTypeName","src":"448:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"447:20:36"},"returnParameters":{"id":5662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5663,"src":"486:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"486:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"485:9:36"},"scope":5684,"src":"431:64:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"7a806d6b","id":5676,"implemented":false,"kind":"function","modifiers":[],"name":"setNameForAddr","nameLocation":"510:14:36","nodeType":"FunctionDefinition","parameters":{"id":5672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5665,"mutability":"mutable","name":"addr","nameLocation":"542:4:36","nodeType":"VariableDeclaration","scope":5676,"src":"534:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5664,"name":"address","nodeType":"ElementaryTypeName","src":"534:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5667,"mutability":"mutable","name":"owner","nameLocation":"564:5:36","nodeType":"VariableDeclaration","scope":5676,"src":"556:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5666,"name":"address","nodeType":"ElementaryTypeName","src":"556:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5669,"mutability":"mutable","name":"resolver","nameLocation":"587:8:36","nodeType":"VariableDeclaration","scope":5676,"src":"579:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5668,"name":"address","nodeType":"ElementaryTypeName","src":"579:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5671,"mutability":"mutable","name":"name","nameLocation":"619:4:36","nodeType":"VariableDeclaration","scope":5676,"src":"605:18:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5670,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"524:105:36"},"returnParameters":{"id":5675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5676,"src":"648:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"648:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"647:9:36"},"scope":5684,"src":"501:156:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bffbe61c","id":5683,"implemented":false,"kind":"function","modifiers":[],"name":"node","nameLocation":"672:4:36","nodeType":"FunctionDefinition","parameters":{"id":5679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5678,"mutability":"mutable","name":"addr","nameLocation":"685:4:36","nodeType":"VariableDeclaration","scope":5683,"src":"677:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5677,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"676:14:36"},"returnParameters":{"id":5682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5683,"src":"714:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"714:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"713:9:36"},"scope":5684,"src":"663:60:36","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":5685,"src":"26:699:36","usedErrors":[]}],"src":"0:726:36"},"id":36},"contracts/reverseRegistrar/ReverseClaimer.sol":{"ast":{"absolutePath":"contracts/reverseRegistrar/ReverseClaimer.sol","exportedSymbols":{"ENS":[5200],"IReverseRegistrar":[5684],"ReverseClaimer":[5719]},"id":5720,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5686,"literals":["solidity",">=","0.8",".17","<","0.9",".0"],"nodeType":"PragmaDirective","src":"31:32:37"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":5688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5720,"sourceUnit":5201,"src":"65:40:37","symbolAliases":[{"foreign":{"id":5687,"name":"ENS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5200,"src":"73:3:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/reverseRegistrar/IReverseRegistrar.sol","file":"../reverseRegistrar/IReverseRegistrar.sol","id":5690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5720,"sourceUnit":5685,"src":"106:76:37","symbolAliases":[{"foreign":{"id":5689,"name":"IReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"114:17:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ReverseClaimer","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5719,"linearizedBaseContracts":[5719],"name":"ReverseClaimer","nameLocation":"193:14:37","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5693,"mutability":"constant","name":"ADDR_REVERSE_NODE","nameLocation":"231:17:37","nodeType":"VariableDeclaration","scope":5719,"src":"214:111:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"214:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532","id":5692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"259:66:37","typeDescriptions":{"typeIdentifier":"t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1","typeString":"int_const 6595...(69 digits omitted)...3154"},"value":"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"},"visibility":"internal"},{"body":{"id":5717,"nodeType":"Block","src":"371:165:37","statements":[{"assignments":[5703],"declarations":[{"constant":false,"id":5703,"mutability":"mutable","name":"reverseRegistrar","nameLocation":"399:16:37","nodeType":"VariableDeclaration","scope":5717,"src":"381:34:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5684","typeString":"contract IReverseRegistrar"},"typeName":{"id":5702,"nodeType":"UserDefinedTypeName","pathNode":{"id":5701,"name":"IReverseRegistrar","nameLocations":["381:17:37"],"nodeType":"IdentifierPath","referencedDeclaration":5684,"src":"381:17:37"},"referencedDeclaration":5684,"src":"381:17:37","typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5684","typeString":"contract IReverseRegistrar"}},"visibility":"internal"}],"id":5710,"initialValue":{"arguments":[{"arguments":[{"id":5707,"name":"ADDR_REVERSE_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"459:17:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5705,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"449:3:37","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"453:5:37","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":5169,"src":"449:9:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"449:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5704,"name":"IReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"418:17:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IReverseRegistrar_$5684_$","typeString":"type(contract IReverseRegistrar)"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"418:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5684","typeString":"contract IReverseRegistrar"}},"nodeType":"VariableDeclarationStatement","src":"381:106:37"},{"expression":{"arguments":[{"id":5714,"name":"claimant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5698,"src":"520:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5711,"name":"reverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"497:16:37","typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5684","typeString":"contract IReverseRegistrar"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"514:5:37","memberName":"claim","nodeType":"MemberAccess","referencedDeclaration":5636,"src":"497:22:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$","typeString":"function (address) external returns (bytes32)"}},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"497:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5716,"nodeType":"ExpressionStatement","src":"497:32:37"}]},"id":5718,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5696,"mutability":"mutable","name":"ens","nameLocation":"348:3:37","nodeType":"VariableDeclaration","scope":5718,"src":"344:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":5695,"nodeType":"UserDefinedTypeName","pathNode":{"id":5694,"name":"ENS","nameLocations":["344:3:37"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"344:3:37"},"referencedDeclaration":5200,"src":"344:3:37","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"internal"},{"constant":false,"id":5698,"mutability":"mutable","name":"claimant","nameLocation":"361:8:37","nodeType":"VariableDeclaration","scope":5718,"src":"353:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5697,"name":"address","nodeType":"ElementaryTypeName","src":"353:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"343:27:37"},"returnParameters":{"id":5700,"nodeType":"ParameterList","parameters":[],"src":"371:0:37"},"scope":5719,"src":"332:204:37","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5720,"src":"184:354:37","usedErrors":[]}],"src":"31:508:37"},"id":37},"contracts/reverseRegistrar/ReverseRegistrar.sol":{"ast":{"absolutePath":"contracts/reverseRegistrar/ReverseRegistrar.sol","exportedSymbols":{"ADDR_REVERSE_NODE":[5739],"Context":[1752],"Controllable":[6119],"ENS":[5200],"IReverseRegistrar":[5684],"NameResolver":[5733],"Ownable":[112],"ReverseRegistrar":[6070],"lookup":[5736]},"id":6071,"nodeType":"SourceUnit","nodes":[{"id":5721,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:38"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":5722,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6071,"sourceUnit":5201,"src":"26:29:38","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/reverseRegistrar/IReverseRegistrar.sol","file":"./IReverseRegistrar.sol","id":5723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6071,"sourceUnit":5685,"src":"56:33:38","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5724,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6071,"sourceUnit":113,"src":"90:52:38","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/root/Controllable.sol","file":"../root/Controllable.sol","id":5725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6071,"sourceUnit":6120,"src":"143:34:38","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"NameResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":5733,"linearizedBaseContracts":[5733],"name":"NameResolver","nameLocation":"197:12:38","nodeType":"ContractDefinition","nodes":[{"functionSelector":"77372213","id":5732,"implemented":false,"kind":"function","modifiers":[],"name":"setName","nameLocation":"225:7:38","nodeType":"FunctionDefinition","parameters":{"id":5730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5727,"mutability":"mutable","name":"node","nameLocation":"241:4:38","nodeType":"VariableDeclaration","scope":5732,"src":"233:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"233:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5729,"mutability":"mutable","name":"name","nameLocation":"261:4:38","nodeType":"VariableDeclaration","scope":5732,"src":"247:18:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5728,"name":"string","nodeType":"ElementaryTypeName","src":"247:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"232:34:38"},"returnParameters":{"id":5731,"nodeType":"ParameterList","parameters":[],"src":"281:0:38"},"scope":5733,"src":"216:66:38","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":6071,"src":"179:105:38","usedErrors":[]},{"constant":true,"id":5736,"mutability":"constant","name":"lookup","nameLocation":"303:6:38","nodeType":"VariableDeclaration","scope":6071,"src":"286:92:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"286:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833303331333233333334333533363337333833393631363236333634363536363030303030303030303030303030303030303030303030303030303030303030","id":5735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"312:66:38","typeDescriptions":{"typeIdentifier":"t_rational_21797938705943676250364219608352299876616432895080889470814659460585888940032_by_1","typeString":"int_const 2179...(69 digits omitted)...0032"},"value":"0x3031323334353637383961626364656600000000000000000000000000000000"},"visibility":"internal"},{"constant":true,"id":5739,"mutability":"constant","name":"ADDR_REVERSE_NODE","nameLocation":"398:17:38","nodeType":"VariableDeclaration","scope":6071,"src":"381:103:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"381:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532","id":5738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"418:66:38","typeDescriptions":{"typeIdentifier":"t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1","typeString":"int_const 6595...(69 digits omitted)...3154"},"value":"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"},"visibility":"internal"},{"abstract":false,"baseContracts":[{"baseName":{"id":5740,"name":"Ownable","nameLocations":["545:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"545:7:38"},"id":5741,"nodeType":"InheritanceSpecifier","src":"545:7:38"},{"baseName":{"id":5742,"name":"Controllable","nameLocations":["554:12:38"],"nodeType":"IdentifierPath","referencedDeclaration":6119,"src":"554:12:38"},"id":5743,"nodeType":"InheritanceSpecifier","src":"554:12:38"},{"baseName":{"id":5744,"name":"IReverseRegistrar","nameLocations":["568:17:38"],"nodeType":"IdentifierPath","referencedDeclaration":5684,"src":"568:17:38"},"id":5745,"nodeType":"InheritanceSpecifier","src":"568:17:38"}],"canonicalName":"ReverseRegistrar","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6070,"linearizedBaseContracts":[6070,5684,6119,112,1752],"name":"ReverseRegistrar","nameLocation":"525:16:38","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"3f15457f","id":5748,"mutability":"immutable","name":"ens","nameLocation":"613:3:38","nodeType":"VariableDeclaration","scope":6070,"src":"592:24:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":5747,"nodeType":"UserDefinedTypeName","pathNode":{"id":5746,"name":"ENS","nameLocations":["592:3:38"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"592:3:38"},"referencedDeclaration":5200,"src":"592:3:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"public"},{"constant":false,"functionSelector":"828eab0e","id":5751,"mutability":"mutable","name":"defaultResolver","nameLocation":"642:15:38","nodeType":"VariableDeclaration","scope":6070,"src":"622:35:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"},"typeName":{"id":5750,"nodeType":"UserDefinedTypeName","pathNode":{"id":5749,"name":"NameResolver","nameLocations":["622:12:38"],"nodeType":"IdentifierPath","referencedDeclaration":5733,"src":"622:12:38"},"referencedDeclaration":5733,"src":"622:12:38","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}},"visibility":"public"},{"anonymous":false,"eventSelector":"6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92","id":5757,"name":"ReverseClaimed","nameLocation":"670:14:38","nodeType":"EventDefinition","parameters":{"id":5756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5753,"indexed":true,"mutability":"mutable","name":"addr","nameLocation":"701:4:38","nodeType":"VariableDeclaration","scope":5757,"src":"685:20:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5752,"name":"address","nodeType":"ElementaryTypeName","src":"685:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5755,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"723:4:38","nodeType":"VariableDeclaration","scope":5757,"src":"707:20:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"707:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"684:44:38"},"src":"664:65:38"},{"anonymous":false,"eventSelector":"eae17a84d9eb83d8c8eb317f9e7d64857bc363fa51674d996c023f4340c577cf","id":5762,"name":"DefaultResolverChanged","nameLocation":"740:22:38","nodeType":"EventDefinition","parameters":{"id":5761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5760,"indexed":true,"mutability":"mutable","name":"resolver","nameLocation":"784:8:38","nodeType":"VariableDeclaration","scope":5762,"src":"763:29:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"},"typeName":{"id":5759,"nodeType":"UserDefinedTypeName","pathNode":{"id":5758,"name":"NameResolver","nameLocations":["763:12:38"],"nodeType":"IdentifierPath","referencedDeclaration":5733,"src":"763:12:38"},"referencedDeclaration":5733,"src":"763:12:38","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}},"visibility":"internal"}],"src":"762:31:38"},"src":"734:60:38"},{"body":{"id":5801,"nodeType":"Block","src":"920:318:38","statements":[{"expression":{"id":5771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5769,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"930:3:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5770,"name":"ensAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5766,"src":"936:7:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"src":"930:13:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":5772,"nodeType":"ExpressionStatement","src":"930:13:38"},{"assignments":[5775],"declarations":[{"constant":false,"id":5775,"mutability":"mutable","name":"oldRegistrar","nameLocation":"1037:12:38","nodeType":"VariableDeclaration","scope":5801,"src":"1020:29:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"},"typeName":{"id":5774,"nodeType":"UserDefinedTypeName","pathNode":{"id":5773,"name":"ReverseRegistrar","nameLocations":["1020:16:38"],"nodeType":"IdentifierPath","referencedDeclaration":6070,"src":"1020:16:38"},"referencedDeclaration":6070,"src":"1020:16:38","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"visibility":"internal"}],"id":5782,"initialValue":{"arguments":[{"arguments":[{"id":5779,"name":"ADDR_REVERSE_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"1096:17:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5777,"name":"ensAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5766,"src":"1082:7:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":5778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1090:5:38","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":5169,"src":"1082:13:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":5780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1082:32:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5776,"name":"ReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6070,"src":"1052:16:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ReverseRegistrar_$6070_$","typeString":"type(contract ReverseRegistrar)"}},"id":5781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1052:72:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"nodeType":"VariableDeclarationStatement","src":"1020:104:38"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5785,"name":"oldRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"1146:12:38","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}],"id":5784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1138:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5783,"name":"address","nodeType":"ElementaryTypeName","src":"1138:7:38","typeDescriptions":{}}},"id":5786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1138:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"307830","id":5789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1171:3:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1163:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5787,"name":"address","nodeType":"ElementaryTypeName","src":"1163:7:38","typeDescriptions":{}}},"id":5790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:12:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1138:37:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5800,"nodeType":"IfStatement","src":"1134:98:38","trueBody":{"id":5799,"nodeType":"Block","src":"1177:55:38","statements":[{"expression":{"arguments":[{"expression":{"id":5795,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1210:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1214:6:38","memberName":"sender","nodeType":"MemberAccess","src":"1210:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5792,"name":"oldRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"1191:12:38","typeDescriptions":{"typeIdentifier":"t_contract$_ReverseRegistrar_$6070","typeString":"contract ReverseRegistrar"}},"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1204:5:38","memberName":"claim","nodeType":"MemberAccess","referencedDeclaration":5886,"src":"1191:18:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$","typeString":"function (address) external returns (bytes32)"}},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1191:30:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5798,"nodeType":"ExpressionStatement","src":"1191:30:38"}]}}]},"documentation":{"id":5763,"nodeType":"StructuredDocumentation","src":"800:90:38","text":" @dev Constructor\n @param ensAddr The address of the ENS registry."},"id":5802,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5766,"mutability":"mutable","name":"ensAddr","nameLocation":"911:7:38","nodeType":"VariableDeclaration","scope":5802,"src":"907:11:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":5765,"nodeType":"UserDefinedTypeName","pathNode":{"id":5764,"name":"ENS","nameLocations":["907:3:38"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"907:3:38"},"referencedDeclaration":5200,"src":"907:3:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"internal"}],"src":"906:13:38"},"returnParameters":{"id":5768,"nodeType":"ParameterList","parameters":[],"src":"920:0:38"},"scope":6070,"src":"895:343:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5831,"nodeType":"Block","src":"1278:323:38","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5807,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"1309:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5808,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1317:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1321:6:38","memberName":"sender","nodeType":"MemberAccess","src":"1317:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1309:18:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"baseExpression":{"id":5811,"name":"controllers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6079,"src":"1347:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5814,"indexExpression":{"expression":{"id":5812,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1359:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1363:6:38","memberName":"sender","nodeType":"MemberAccess","src":"1359:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1347:23:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1309:61:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5818,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"1411:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5819,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1417:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1421:6:38","memberName":"sender","nodeType":"MemberAccess","src":"1417:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5816,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"1390:3:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":5817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1394:16:38","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":5199,"src":"1390:20:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":5821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1390:38:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1309:119:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5824,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"1461:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5823,"name":"ownsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6069,"src":"1448:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1448:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1309:157:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526576657273655265676973747261723a2043616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617574686f72697365642062792061646472657373206f7220746865206164647265737320697473656c66","id":5827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1480:93:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_fe4e6cb0d911fbb084bbc1b17d0a5ac5b55e0dd119afa63b9e266f785db0c22d","typeString":"literal_string \"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\""},"value":"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fe4e6cb0d911fbb084bbc1b17d0a5ac5b55e0dd119afa63b9e266f785db0c22d","typeString":"literal_string \"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\""}],"id":5806,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1288:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1288:295:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5829,"nodeType":"ExpressionStatement","src":"1288:295:38"},{"id":5830,"nodeType":"PlaceholderStatement","src":"1593:1:38"}]},"id":5832,"name":"authorised","nameLocation":"1253:10:38","nodeType":"ModifierDefinition","parameters":{"id":5805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5804,"mutability":"mutable","name":"addr","nameLocation":"1272:4:38","nodeType":"VariableDeclaration","scope":5832,"src":"1264:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5803,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1263:14:38"},"src":"1244:357:38","virtual":false,"visibility":"internal"},{"baseFunctions":[5629],"body":{"id":5865,"nodeType":"Block","src":"1679:254:38","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5843,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"1718:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1710:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5841,"name":"address","nodeType":"ElementaryTypeName","src":"1710:7:38","typeDescriptions":{}}},"id":5844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:17:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1739:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1731:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5845,"name":"address","nodeType":"ElementaryTypeName","src":"1731:7:38","typeDescriptions":{}}},"id":5848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1731:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1710:31:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526576657273655265676973747261723a205265736f6c7665722061646472657373206d757374206e6f742062652030","id":5850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1755:50:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb02bca886b66c8cccb8ebdd5f9e523f0cb437ea36db9ae94c35db86f94aa5fa","typeString":"literal_string \"ReverseRegistrar: Resolver address must not be 0\""},"value":"ReverseRegistrar: Resolver address must not be 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb02bca886b66c8cccb8ebdd5f9e523f0cb437ea36db9ae94c35db86f94aa5fa","typeString":"literal_string \"ReverseRegistrar: Resolver address must not be 0\""}],"id":5840,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1689:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1689:126:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5852,"nodeType":"ExpressionStatement","src":"1689:126:38"},{"expression":{"id":5857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5853,"name":"defaultResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"1825:15:38","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5855,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"1856:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5854,"name":"NameResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"1843:12:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_NameResolver_$5733_$","typeString":"type(contract NameResolver)"}},"id":5856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1843:22:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}},"src":"1825:40:38","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}},"id":5858,"nodeType":"ExpressionStatement","src":"1825:40:38"},{"eventCall":{"arguments":[{"arguments":[{"id":5861,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"1916:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5860,"name":"NameResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"1903:12:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_NameResolver_$5733_$","typeString":"type(contract NameResolver)"}},"id":5862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1903:22:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}],"id":5859,"name":"DefaultResolverChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5762,"src":"1880:22:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_NameResolver_$5733_$returns$__$","typeString":"function (contract NameResolver)"}},"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1880:46:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5864,"nodeType":"EmitStatement","src":"1875:51:38"}]},"functionSelector":"c66485b2","id":5866,"implemented":true,"kind":"function","modifiers":[{"id":5838,"kind":"modifierInvocation","modifierName":{"id":5837,"name":"onlyOwner","nameLocations":["1669:9:38"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1669:9:38"},"nodeType":"ModifierInvocation","src":"1669:9:38"}],"name":"setDefaultResolver","nameLocation":"1616:18:38","nodeType":"FunctionDefinition","overrides":{"id":5836,"nodeType":"OverrideSpecifier","overrides":[],"src":"1660:8:38"},"parameters":{"id":5835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5834,"mutability":"mutable","name":"resolver","nameLocation":"1643:8:38","nodeType":"VariableDeclaration","scope":5866,"src":"1635:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5833,"name":"address","nodeType":"ElementaryTypeName","src":"1635:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1634:18:38"},"returnParameters":{"id":5839,"nodeType":"ParameterList","parameters":[],"src":"1679:0:38"},"scope":6070,"src":"1607:326:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5636],"body":{"id":5885,"nodeType":"Block","src":"2266:82:38","statements":[{"expression":{"arguments":[{"expression":{"id":5876,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2296:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2300:6:38","memberName":"sender","nodeType":"MemberAccess","src":"2296:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5878,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"2308:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5881,"name":"defaultResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"2324:15:38","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}],"id":5880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5879,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:38","typeDescriptions":{}}},"id":5882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5875,"name":"claimForAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5936,"src":"2283:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$_t_bytes32_$","typeString":"function (address,address,address) returns (bytes32)"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2283:58:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5874,"id":5884,"nodeType":"Return","src":"2276:65:38"}]},"documentation":{"id":5867,"nodeType":"StructuredDocumentation","src":"1939:257:38","text":" @dev Transfers ownership of the reverse ENS record associated with the\n      calling account.\n @param _owner The address to set as the owner of the reverse record in ENS.\n @return The ENS node hash of the reverse record."},"functionSelector":"1e83409a","id":5886,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"2210:5:38","nodeType":"FunctionDefinition","overrides":{"id":5871,"nodeType":"OverrideSpecifier","overrides":[],"src":"2239:8:38"},"parameters":{"id":5870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5869,"mutability":"mutable","name":"_owner","nameLocation":"2224:6:38","nodeType":"VariableDeclaration","scope":5886,"src":"2216:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5868,"name":"address","nodeType":"ElementaryTypeName","src":"2216:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2215:16:38"},"returnParameters":{"id":5874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5886,"src":"2257:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2257:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2256:9:38"},"scope":6070,"src":"2201:147:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5647],"body":{"id":5935,"nodeType":"Block","src":"2868:325:38","statements":[{"assignments":[5903],"declarations":[{"constant":false,"id":5903,"mutability":"mutable","name":"labelHash","nameLocation":"2886:9:38","nodeType":"VariableDeclaration","scope":5935,"src":"2878:17:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2878:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5907,"initialValue":{"arguments":[{"id":5905,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"2913:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5904,"name":"sha3HexAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6041,"src":"2898:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2898:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2878:40:38"},{"assignments":[5909],"declarations":[{"constant":false,"id":5909,"mutability":"mutable","name":"reverseNode","nameLocation":"2936:11:38","nodeType":"VariableDeclaration","scope":5935,"src":"2928:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2928:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5917,"initialValue":{"arguments":[{"arguments":[{"id":5913,"name":"ADDR_REVERSE_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"2990:17:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5914,"name":"labelHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5903,"src":"3009:9:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5911,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2973:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2977:12:38","memberName":"encodePacked","nodeType":"MemberAccess","src":"2973:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2973:46:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5910,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2950:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2950:79:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2928:101:38"},{"eventCall":{"arguments":[{"id":5919,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"3059:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5920,"name":"reverseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"3065:11:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5918,"name":"ReverseClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"3044:14:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32)"}},"id":5921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3044:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5922,"nodeType":"EmitStatement","src":"3039:38:38"},{"expression":{"arguments":[{"id":5926,"name":"ADDR_REVERSE_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"3108:17:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5927,"name":"labelHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5903,"src":"3127:9:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5928,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"3138:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5929,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"3146:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":5930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3156:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":5923,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"3087:3:38","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"id":5925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3091:16:38","memberName":"setSubnodeRecord","nodeType":"MemberAccess","referencedDeclaration":5123,"src":"3087:20:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$_t_address_$_t_uint64_$returns$__$","typeString":"function (bytes32,bytes32,address,address,uint64) external"}},"id":5931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3087:71:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5932,"nodeType":"ExpressionStatement","src":"3087:71:38"},{"expression":{"id":5933,"name":"reverseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"3175:11:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5901,"id":5934,"nodeType":"Return","src":"3168:18:38"}]},"documentation":{"id":5887,"nodeType":"StructuredDocumentation","src":"2354:358:38","text":" @dev Transfers ownership of the reverse ENS record associated with the\n      calling account.\n @param addr The reverse record to set\n @param _owner The address to set as the owner of the reverse record in ENS.\n @param resolver The resolver of the reverse node\n @return The ENS node hash of the reverse record."},"functionSelector":"65669631","id":5936,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5897,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"2844:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5898,"kind":"modifierInvocation","modifierName":{"id":5896,"name":"authorised","nameLocations":["2833:10:38"],"nodeType":"IdentifierPath","referencedDeclaration":5832,"src":"2833:10:38"},"nodeType":"ModifierInvocation","src":"2833:16:38"}],"name":"claimForAddr","nameLocation":"2726:12:38","nodeType":"FunctionDefinition","overrides":{"id":5895,"nodeType":"OverrideSpecifier","overrides":[],"src":"2824:8:38"},"parameters":{"id":5894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5889,"mutability":"mutable","name":"addr","nameLocation":"2756:4:38","nodeType":"VariableDeclaration","scope":5936,"src":"2748:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5888,"name":"address","nodeType":"ElementaryTypeName","src":"2748:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5891,"mutability":"mutable","name":"_owner","nameLocation":"2778:6:38","nodeType":"VariableDeclaration","scope":5936,"src":"2770:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5890,"name":"address","nodeType":"ElementaryTypeName","src":"2770:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5893,"mutability":"mutable","name":"resolver","nameLocation":"2802:8:38","nodeType":"VariableDeclaration","scope":5936,"src":"2794:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5892,"name":"address","nodeType":"ElementaryTypeName","src":"2794:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2738:78:38"},"returnParameters":{"id":5901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5936,"src":"2859:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2859:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2858:9:38"},"scope":6070,"src":"2717:476:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5656],"body":{"id":5954,"nodeType":"Block","src":"3659:66:38","statements":[{"expression":{"arguments":[{"expression":{"id":5948,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3689:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3693:6:38","memberName":"sender","nodeType":"MemberAccess","src":"3689:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5950,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"3701:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5951,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5941,"src":"3709:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5947,"name":"claimForAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5936,"src":"3676:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$_t_bytes32_$","typeString":"function (address,address,address) returns (bytes32)"}},"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3676:42:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5946,"id":5953,"nodeType":"Return","src":"3669:49:38"}]},"documentation":{"id":5937,"nodeType":"StructuredDocumentation","src":"3199:338:38","text":" @dev Transfers ownership of the reverse ENS record associated with the\n      calling account.\n @param _owner The address to set as the owner of the reverse record in ENS.\n @param resolver The address of the resolver to set; 0 to leave unchanged.\n @return The ENS node hash of the reverse record."},"functionSelector":"0f5a5466","id":5955,"implemented":true,"kind":"function","modifiers":[],"name":"claimWithResolver","nameLocation":"3551:17:38","nodeType":"FunctionDefinition","overrides":{"id":5943,"nodeType":"OverrideSpecifier","overrides":[],"src":"3632:8:38"},"parameters":{"id":5942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5939,"mutability":"mutable","name":"_owner","nameLocation":"3586:6:38","nodeType":"VariableDeclaration","scope":5955,"src":"3578:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5938,"name":"address","nodeType":"ElementaryTypeName","src":"3578:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5941,"mutability":"mutable","name":"resolver","nameLocation":"3610:8:38","nodeType":"VariableDeclaration","scope":5955,"src":"3602:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5940,"name":"address","nodeType":"ElementaryTypeName","src":"3602:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3568:56:38"},"returnParameters":{"id":5946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5955,"src":"3650:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3650:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3649:9:38"},"scope":6070,"src":"3542:183:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5663],"body":{"id":5976,"nodeType":"Block","src":"4115:184:38","statements":[{"expression":{"arguments":[{"expression":{"id":5965,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4176:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4180:6:38","memberName":"sender","nodeType":"MemberAccess","src":"4176:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5967,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4204:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4208:6:38","memberName":"sender","nodeType":"MemberAccess","src":"4204:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5971,"name":"defaultResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"4240:15:38","typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}],"id":5970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4232:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5969,"name":"address","nodeType":"ElementaryTypeName","src":"4232:7:38","typeDescriptions":{}}},"id":5972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4232:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5973,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"4274:4:38","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5964,"name":"setNameForAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6011,"src":"4144:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,address,string memory) returns (bytes32)"}},"id":5974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4144:148:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5963,"id":5975,"nodeType":"Return","src":"4125:167:38"}]},"documentation":{"id":5956,"nodeType":"StructuredDocumentation","src":"3731:308:38","text":" @dev Sets the `name()` record for the reverse ENS record associated with\n the calling account. First updates the resolver to the default reverse\n resolver if necessary.\n @param name The name to set for this address.\n @return The ENS node hash of the reverse record."},"functionSelector":"c47f0027","id":5977,"implemented":true,"kind":"function","modifiers":[],"name":"setName","nameLocation":"4053:7:38","nodeType":"FunctionDefinition","overrides":{"id":5960,"nodeType":"OverrideSpecifier","overrides":[],"src":"4088:8:38"},"parameters":{"id":5959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5958,"mutability":"mutable","name":"name","nameLocation":"4075:4:38","nodeType":"VariableDeclaration","scope":5977,"src":"4061:18:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5957,"name":"string","nodeType":"ElementaryTypeName","src":"4061:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4060:20:38"},"returnParameters":{"id":5963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5977,"src":"4106:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5961,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4106:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4105:9:38"},"scope":6070,"src":"4044:255:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5676],"body":{"id":6010,"nodeType":"Block","src":"4958:141:38","statements":[{"assignments":[5993],"declarations":[{"constant":false,"id":5993,"mutability":"mutable","name":"node","nameLocation":"4976:4:38","nodeType":"VariableDeclaration","scope":6010,"src":"4968:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4968:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5999,"initialValue":{"arguments":[{"id":5995,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"4996:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5996,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5982,"src":"5002:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5997,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"5010:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5994,"name":"claimForAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5936,"src":"4983:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$_t_bytes32_$","typeString":"function (address,address,address) returns (bytes32)"}},"id":5998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4983:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4968:51:38"},{"expression":{"arguments":[{"id":6004,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5060:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6005,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5986,"src":"5066:4:38","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"arguments":[{"id":6001,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"5042:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6000,"name":"NameResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"5029:12:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_NameResolver_$5733_$","typeString":"type(contract NameResolver)"}},"id":6002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5029:22:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_NameResolver_$5733","typeString":"contract NameResolver"}},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5052:7:38","memberName":"setName","nodeType":"MemberAccess","referencedDeclaration":5732,"src":"5029:30:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,string memory) external"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5029:42:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6007,"nodeType":"ExpressionStatement","src":"5029:42:38"},{"expression":{"id":6008,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5088:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5991,"id":6009,"nodeType":"Return","src":"5081:11:38"}]},"documentation":{"id":5978,"nodeType":"StructuredDocumentation","src":"4305:484:38","text":" @dev Sets the `name()` record for the reverse ENS record associated with\n the account provided. Updates the resolver to a designated resolver\n Only callable by controllers and authorised users\n @param addr The reverse record to set\n @param _owner The owner of the reverse node\n @param resolver The resolver of the reverse node\n @param name The name to set for this address.\n @return The ENS node hash of the reverse record."},"functionSelector":"7a806d6b","id":6011,"implemented":true,"kind":"function","modifiers":[],"name":"setNameForAddr","nameLocation":"4803:14:38","nodeType":"FunctionDefinition","overrides":{"id":5988,"nodeType":"OverrideSpecifier","overrides":[],"src":"4931:8:38"},"parameters":{"id":5987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5980,"mutability":"mutable","name":"addr","nameLocation":"4835:4:38","nodeType":"VariableDeclaration","scope":6011,"src":"4827:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5979,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5982,"mutability":"mutable","name":"_owner","nameLocation":"4857:6:38","nodeType":"VariableDeclaration","scope":6011,"src":"4849:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5981,"name":"address","nodeType":"ElementaryTypeName","src":"4849:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5984,"mutability":"mutable","name":"resolver","nameLocation":"4881:8:38","nodeType":"VariableDeclaration","scope":6011,"src":"4873:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5983,"name":"address","nodeType":"ElementaryTypeName","src":"4873:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5986,"mutability":"mutable","name":"name","nameLocation":"4913:4:38","nodeType":"VariableDeclaration","scope":6011,"src":"4899:18:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5985,"name":"string","nodeType":"ElementaryTypeName","src":"4899:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4817:106:38"},"returnParameters":{"id":5991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6011,"src":"4949:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5989,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4949:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4948:9:38"},"scope":6070,"src":"4794:305:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5683],"body":{"id":6030,"nodeType":"Block","src":"5334:134:38","statements":[{"expression":{"arguments":[{"arguments":[{"id":6023,"name":"ADDR_REVERSE_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"5407:17:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":6025,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6014,"src":"5441:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6024,"name":"sha3HexAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6041,"src":"5426:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":6026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5426:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5390:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5394:12:38","memberName":"encodePacked","nodeType":"MemberAccess","src":"5390:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5390:57:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6020,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5363:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5363:98:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6019,"id":6029,"nodeType":"Return","src":"5344:117:38"}]},"documentation":{"id":6012,"nodeType":"StructuredDocumentation","src":"5105:157:38","text":" @dev Returns the node hash for a given account's reverse records.\n @param addr The address to hash\n @return The ENS node hash."},"functionSelector":"bffbe61c","id":6031,"implemented":true,"kind":"function","modifiers":[],"name":"node","nameLocation":"5276:4:38","nodeType":"FunctionDefinition","overrides":{"id":6016,"nodeType":"OverrideSpecifier","overrides":[],"src":"5307:8:38"},"parameters":{"id":6015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6014,"mutability":"mutable","name":"addr","nameLocation":"5289:4:38","nodeType":"VariableDeclaration","scope":6031,"src":"5281:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6013,"name":"address","nodeType":"ElementaryTypeName","src":"5281:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5280:14:38"},"returnParameters":{"id":6019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6031,"src":"5325:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5325:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5324:9:38"},"scope":6070,"src":"5267:201:38","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":6040,"nodeType":"Block","src":"5846:431:38","statements":[{"AST":{"nodeType":"YulBlock","src":"5865:406:38","statements":[{"body":{"nodeType":"YulBlock","src":"5953:271:38","statements":[{"nodeType":"YulAssignment","src":"5971:14:38","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5980:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"5983:1:38","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5976:3:38"},"nodeType":"YulFunctionCall","src":"5976:9:38"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5971:1:38"}]},{"expression":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6010:1:38"},{"arguments":[{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"6022:4:38"},{"kind":"number","nodeType":"YulLiteral","src":"6028:3:38","type":"","value":"0xf"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6018:3:38"},"nodeType":"YulFunctionCall","src":"6018:14:38"},{"name":"lookup","nodeType":"YulIdentifier","src":"6034:6:38"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"6013:4:38"},"nodeType":"YulFunctionCall","src":"6013:28:38"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"6002:7:38"},"nodeType":"YulFunctionCall","src":"6002:40:38"},"nodeType":"YulExpressionStatement","src":"6002:40:38"},{"nodeType":"YulAssignment","src":"6059:23:38","value":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"6071:4:38"},{"kind":"number","nodeType":"YulLiteral","src":"6077:4:38","type":"","value":"0x10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6067:3:38"},"nodeType":"YulFunctionCall","src":"6067:15:38"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"6059:4:38"}]},{"nodeType":"YulAssignment","src":"6099:14:38","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6108:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"6111:1:38","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6104:3:38"},"nodeType":"YulFunctionCall","src":"6104:9:38"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6099:1:38"}]},{"expression":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6138:1:38"},{"arguments":[{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"6150:4:38"},{"kind":"number","nodeType":"YulLiteral","src":"6156:3:38","type":"","value":"0xf"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6146:3:38"},"nodeType":"YulFunctionCall","src":"6146:14:38"},{"name":"lookup","nodeType":"YulIdentifier","src":"6162:6:38"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"6141:4:38"},"nodeType":"YulFunctionCall","src":"6141:28:38"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"6130:7:38"},"nodeType":"YulFunctionCall","src":"6130:40:38"},"nodeType":"YulExpressionStatement","src":"6130:40:38"},{"nodeType":"YulAssignment","src":"6187:23:38","value":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"6199:4:38"},{"kind":"number","nodeType":"YulLiteral","src":"6205:4:38","type":"","value":"0x10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6195:3:38"},"nodeType":"YulFunctionCall","src":"6195:15:38"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"6187:4:38"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5930:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"5933:1:38","type":"","value":"0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5927:2:38"},"nodeType":"YulFunctionCall","src":"5927:8:38"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5936:16:38","statements":[]},"pre":{"nodeType":"YulBlock","src":"5883:43:38","statements":[{"nodeType":"YulVariableDeclaration","src":"5901:11:38","value":{"kind":"number","nodeType":"YulLiteral","src":"5910:2:38","type":"","value":"40"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5905:1:38","type":""}]}]},"src":"5879:345:38"},{"nodeType":"YulAssignment","src":"6238:23:38","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6255:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6258:2:38","type":"","value":"40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"6245:9:38"},"nodeType":"YulFunctionCall","src":"6245:16:38"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6238:3:38"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6034,"isOffset":false,"isSlot":false,"src":"6022:4:38","valueSize":1},{"declaration":6034,"isOffset":false,"isSlot":false,"src":"6059:4:38","valueSize":1},{"declaration":6034,"isOffset":false,"isSlot":false,"src":"6071:4:38","valueSize":1},{"declaration":6034,"isOffset":false,"isSlot":false,"src":"6150:4:38","valueSize":1},{"declaration":6034,"isOffset":false,"isSlot":false,"src":"6187:4:38","valueSize":1},{"declaration":6034,"isOffset":false,"isSlot":false,"src":"6199:4:38","valueSize":1},{"declaration":5736,"isOffset":false,"isSlot":false,"src":"6034:6:38","valueSize":1},{"declaration":5736,"isOffset":false,"isSlot":false,"src":"6162:6:38","valueSize":1},{"declaration":6037,"isOffset":false,"isSlot":false,"src":"6238:3:38","valueSize":1}],"id":6039,"nodeType":"InlineAssembly","src":"5856:415:38"}]},"documentation":{"id":6032,"nodeType":"StructuredDocumentation","src":"5474:294:38","text":" @dev An optimised function to compute the sha3 of the lower-case\n      hexadecimal representation of an Ethereum address.\n @param addr The address to hash\n @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\n         input address."},"id":6041,"implemented":true,"kind":"function","modifiers":[],"name":"sha3HexAddress","nameLocation":"5782:14:38","nodeType":"FunctionDefinition","parameters":{"id":6035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6034,"mutability":"mutable","name":"addr","nameLocation":"5805:4:38","nodeType":"VariableDeclaration","scope":6041,"src":"5797:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6033,"name":"address","nodeType":"ElementaryTypeName","src":"5797:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5796:14:38"},"returnParameters":{"id":6038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6037,"mutability":"mutable","name":"ret","nameLocation":"5841:3:38","nodeType":"VariableDeclaration","scope":6041,"src":"5833:11:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5833:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5832:13:38"},"scope":6070,"src":"5773:504:38","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6068,"nodeType":"Block","src":"6348:161:38","statements":[{"clauses":[{"block":{"id":6061,"nodeType":"Block","src":"6408:51:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6056,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6054,"src":"6429:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6057,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6438:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6442:6:38","memberName":"sender","nodeType":"MemberAccess","src":"6438:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6429:19:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6047,"id":6060,"nodeType":"Return","src":"6422:26:38"}]},"errorName":"","id":6062,"nodeType":"TryCatchClause","parameters":{"id":6055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6054,"mutability":"mutable","name":"owner","nameLocation":"6401:5:38","nodeType":"VariableDeclaration","scope":6062,"src":"6393:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6053,"name":"address","nodeType":"ElementaryTypeName","src":"6393:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6392:15:38"},"src":"6384:75:38"},{"block":{"id":6065,"nodeType":"Block","src":"6466:37:38","statements":[{"expression":{"hexValue":"66616c7365","id":6063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6487:5:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":6047,"id":6064,"nodeType":"Return","src":"6480:12:38"}]},"errorName":"","id":6066,"nodeType":"TryCatchClause","src":"6460:43:38"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6049,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"6370:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6048,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"6362:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Ownable_$112_$","typeString":"type(contract Ownable)"}},"id":6050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6362:13:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Ownable_$112","typeString":"contract Ownable"}},"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6376:5:38","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":40,"src":"6362:19:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6362:21:38","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6067,"nodeType":"TryStatement","src":"6358:145:38"}]},"id":6069,"implemented":true,"kind":"function","modifiers":[],"name":"ownsContract","nameLocation":"6292:12:38","nodeType":"FunctionDefinition","parameters":{"id":6044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6043,"mutability":"mutable","name":"addr","nameLocation":"6313:4:38","nodeType":"VariableDeclaration","scope":6069,"src":"6305:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6042,"name":"address","nodeType":"ElementaryTypeName","src":"6305:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6304:14:38"},"returnParameters":{"id":6047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6069,"src":"6342:4:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6045,"name":"bool","nodeType":"ElementaryTypeName","src":"6342:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6341:6:38"},"scope":6070,"src":"6283:226:38","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":6071,"src":"516:5995:38","usedErrors":[]}],"src":"0:6512:38"},"id":38},"contracts/root/Controllable.sol":{"ast":{"absolutePath":"contracts/root/Controllable.sol","exportedSymbols":{"Context":[1752],"Controllable":[6119],"Ownable":[112]},"id":6120,"nodeType":"SourceUnit","nodes":[{"id":6072,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"0:23:39"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":6073,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6120,"sourceUnit":113,"src":"25:52:39","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6074,"name":"Ownable","nameLocations":["104:7:39"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"104:7:39"},"id":6075,"nodeType":"InheritanceSpecifier","src":"104:7:39"}],"canonicalName":"Controllable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6119,"linearizedBaseContracts":[6119,112,1752],"name":"Controllable","nameLocation":"88:12:39","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"da8c229e","id":6079,"mutability":"mutable","name":"controllers","nameLocation":"150:11:39","nodeType":"VariableDeclaration","scope":6119,"src":"118:43:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":6078,"keyType":{"id":6076,"name":"address","nodeType":"ElementaryTypeName","src":"126:7:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"118:24:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":6077,"name":"bool","nodeType":"ElementaryTypeName","src":"137:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87","id":6085,"name":"ControllerChanged","nameLocation":"174:17:39","nodeType":"EventDefinition","parameters":{"id":6084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6081,"indexed":true,"mutability":"mutable","name":"controller","nameLocation":"208:10:39","nodeType":"VariableDeclaration","scope":6085,"src":"192:26:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6080,"name":"address","nodeType":"ElementaryTypeName","src":"192:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6083,"indexed":false,"mutability":"mutable","name":"enabled","nameLocation":"225:7:39","nodeType":"VariableDeclaration","scope":6085,"src":"220:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6082,"name":"bool","nodeType":"ElementaryTypeName","src":"220:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"191:42:39"},"src":"168:66:39"},{"body":{"id":6096,"nodeType":"Block","src":"266:138:39","statements":[{"expression":{"arguments":[{"baseExpression":{"id":6088,"name":"controllers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6079,"src":"297:11:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6091,"indexExpression":{"expression":{"id":6089,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"309:3:39","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"313:6:39","memberName":"sender","nodeType":"MemberAccess","src":"309:10:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"297:23:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f6e74726f6c6c6572","id":6092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"334:42:39","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a494915be969f0305371ebdb09944c6f39346fa8227994f38a7231f6aafbd7b","typeString":"literal_string \"Controllable: Caller is not a controller\""},"value":"Controllable: Caller is not a controller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a494915be969f0305371ebdb09944c6f39346fa8227994f38a7231f6aafbd7b","typeString":"literal_string \"Controllable: Caller is not a controller\""}],"id":6087,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"276:7:39","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"276:110:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6094,"nodeType":"ExpressionStatement","src":"276:110:39"},{"id":6095,"nodeType":"PlaceholderStatement","src":"396:1:39"}]},"id":6097,"name":"onlyController","nameLocation":"249:14:39","nodeType":"ModifierDefinition","parameters":{"id":6086,"nodeType":"ParameterList","parameters":[],"src":"263:2:39"},"src":"240:164:39","virtual":false,"visibility":"internal"},{"body":{"id":6117,"nodeType":"Block","src":"484:103:39","statements":[{"expression":{"id":6110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6106,"name":"controllers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6079,"src":"494:11:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6108,"indexExpression":{"id":6107,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"506:10:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"494:23:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6109,"name":"enabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6101,"src":"520:7:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"494:33:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6111,"nodeType":"ExpressionStatement","src":"494:33:39"},{"eventCall":{"arguments":[{"id":6113,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"560:10:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6114,"name":"enabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6101,"src":"572:7:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6112,"name":"ControllerChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6085,"src":"542:17:39","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":6115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"542:38:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6116,"nodeType":"EmitStatement","src":"537:43:39"}]},"functionSelector":"e0dba60f","id":6118,"implemented":true,"kind":"function","modifiers":[{"id":6104,"kind":"modifierInvocation","modifierName":{"id":6103,"name":"onlyOwner","nameLocations":["474:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"474:9:39"},"nodeType":"ModifierInvocation","src":"474:9:39"}],"name":"setController","nameLocation":"419:13:39","nodeType":"FunctionDefinition","parameters":{"id":6102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6099,"mutability":"mutable","name":"controller","nameLocation":"441:10:39","nodeType":"VariableDeclaration","scope":6118,"src":"433:18:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6098,"name":"address","nodeType":"ElementaryTypeName","src":"433:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6101,"mutability":"mutable","name":"enabled","nameLocation":"458:7:39","nodeType":"VariableDeclaration","scope":6118,"src":"453:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6100,"name":"bool","nodeType":"ElementaryTypeName","src":"453:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"432:34:39"},"returnParameters":{"id":6105,"nodeType":"ParameterList","parameters":[],"src":"484:0:39"},"scope":6119,"src":"410:177:39","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":6120,"src":"79:510:39","usedErrors":[]}],"src":"0:590:39"},"id":39},"contracts/utils/ERC20Recoverable.sol":{"ast":{"absolutePath":"contracts/utils/ERC20Recoverable.sol","exportedSymbols":{"Context":[1752],"ERC20Recoverable":[6148],"IERC20":[312],"Ownable":[112]},"id":6149,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6121,"literals":["solidity",">=","0.8",".17","<","0.9",".0"],"nodeType":"PragmaDirective","src":"31:32:40"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":6122,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6149,"sourceUnit":113,"src":"65:52:40","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":6123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6149,"sourceUnit":313,"src":"118:56:40","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6125,"name":"Ownable","nameLocations":["300:7:40"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"300:7:40"},"id":6126,"nodeType":"InheritanceSpecifier","src":"300:7:40"}],"canonicalName":"ERC20Recoverable","contractDependencies":[],"contractKind":"contract","documentation":{"id":6124,"nodeType":"StructuredDocumentation","src":"176:93:40","text":"@notice Contract is used to recover ERC20 tokens sent to the contract by mistake."},"fullyImplemented":true,"id":6148,"linearizedBaseContracts":[6148,112,1752],"name":"ERC20Recoverable","nameLocation":"280:16:40","nodeType":"ContractDefinition","nodes":[{"body":{"id":6146,"nodeType":"Block","src":"750:54:40","statements":[{"expression":{"arguments":[{"id":6142,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6131,"src":"784:3:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6143,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"789:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6139,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6129,"src":"767:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6138,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"760:6:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$312_$","typeString":"type(contract IERC20)"}},"id":6140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"760:14:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$312","typeString":"contract IERC20"}},"id":6141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"775:8:40","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":279,"src":"760:23:40","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"760:37:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6145,"nodeType":"ExpressionStatement","src":"760:37:40"}]},"documentation":{"id":6127,"nodeType":"StructuredDocumentation","src":"314:314:40","text":"@notice Recover ERC20 tokens sent to the contract by mistake.\n@dev The contract is Ownable and only the owner can call the recover function.\n@param _to The address to send the tokens to.\n@param _token The address of the ERC20 token to recover\n@param _amount The amount of tokens to recover."},"functionSelector":"5d3590d5","id":6147,"implemented":true,"kind":"function","modifiers":[{"id":6136,"kind":"modifierInvocation","modifierName":{"id":6135,"name":"onlyOwner","nameLocations":["740:9:40"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"740:9:40"},"nodeType":"ModifierInvocation","src":"740:9:40"}],"name":"recoverFunds","nameLocation":"642:12:40","nodeType":"FunctionDefinition","parameters":{"id":6134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6129,"mutability":"mutable","name":"_token","nameLocation":"672:6:40","nodeType":"VariableDeclaration","scope":6147,"src":"664:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6128,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6131,"mutability":"mutable","name":"_to","nameLocation":"696:3:40","nodeType":"VariableDeclaration","scope":6147,"src":"688:11:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6130,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6133,"mutability":"mutable","name":"_amount","nameLocation":"717:7:40","nodeType":"VariableDeclaration","scope":6147,"src":"709:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6132,"name":"uint256","nodeType":"ElementaryTypeName","src":"709:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:76:40"},"returnParameters":{"id":6137,"nodeType":"ParameterList","parameters":[],"src":"750:0:40"},"scope":6148,"src":"633:171:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6149,"src":"271:535:40","usedErrors":[]}],"src":"31:776:40"},"id":40},"contracts/wrapper/IMetadataService.sol":{"ast":{"absolutePath":"contracts/wrapper/IMetadataService.sol","exportedSymbols":{"IMetadataService":[6160]},"id":6161,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6150,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:41"},{"abstract":false,"baseContracts":[],"canonicalName":"IMetadataService","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6160,"linearizedBaseContracts":[6160],"name":"IMetadataService","nameLocation":"67:16:41","nodeType":"ContractDefinition","nodes":[{"functionSelector":"28205a93","id":6159,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"99:3:41","nodeType":"FunctionDefinition","parameters":{"id":6155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6152,"mutability":"mutable","name":"nft","nameLocation":"111:3:41","nodeType":"VariableDeclaration","scope":6159,"src":"103:11:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6151,"name":"address","nodeType":"ElementaryTypeName","src":"103:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6154,"mutability":"mutable","name":"tokenId","nameLocation":"123:7:41","nodeType":"VariableDeclaration","scope":6159,"src":"115:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6153,"name":"uint256","nodeType":"ElementaryTypeName","src":"115:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"102:29:41"},"returnParameters":{"id":6158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6159,"src":"155:13:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6156,"name":"string","nodeType":"ElementaryTypeName","src":"155:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"154:15:41"},"scope":6160,"src":"90:80:41","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6161,"src":"57:115:41","usedErrors":[]}],"src":"31:142:41"},"id":41},"contracts/wrapper/INameWrapper.sol":{"ast":{"absolutePath":"contracts/wrapper/INameWrapper.sol","exportedSymbols":{"CANNOT_APPROVE":[6188],"CANNOT_BURN_FUSES":[6173],"CANNOT_CREATE_SUBDOMAIN":[6185],"CANNOT_SET_RESOLVER":[6179],"CANNOT_SET_TTL":[6182],"CANNOT_TRANSFER":[6176],"CANNOT_UNWRAP":[6170],"CAN_DO_EVERYTHING":[6206],"CAN_EXTEND_EXPIRY":[6203],"ENS":[5200],"IBaseRegistrar":[4659],"IERC1155":[234],"IERC165":[2017],"IERC721":[1355],"IMetadataService":[6160],"INameWrapper":[6534],"INameWrapperUpgrade":[6552],"IS_DOT_ETH":[6198],"PARENT_CANNOT_CONTROL":[6193],"PARENT_CONTROLLED_FUSES":[6209],"USER_SETTABLE_FUSES":[6212]},"id":6535,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6162,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:42"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":6163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6535,"sourceUnit":5201,"src":"57:29:42","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","file":"../ethregistrar/IBaseRegistrar.sol","id":6164,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6535,"sourceUnit":4660,"src":"87:44:42","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","id":6165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6535,"sourceUnit":235,"src":"132:60:42","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/wrapper/IMetadataService.sol","file":"./IMetadataService.sol","id":6166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6535,"sourceUnit":6161,"src":"193:32:42","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/wrapper/INameWrapperUpgrade.sol","file":"./INameWrapperUpgrade.sol","id":6167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6535,"sourceUnit":6553,"src":"226:35:42","symbolAliases":[],"unitAlias":""},{"constant":true,"id":6170,"mutability":"constant","name":"CANNOT_UNWRAP","nameLocation":"279:13:42","nodeType":"VariableDeclaration","scope":6535,"src":"263:33:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6168,"name":"uint32","nodeType":"ElementaryTypeName","src":"263:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":6169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"295:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":6173,"mutability":"constant","name":"CANNOT_BURN_FUSES","nameLocation":"314:17:42","nodeType":"VariableDeclaration","scope":6535,"src":"298:37:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6171,"name":"uint32","nodeType":"ElementaryTypeName","src":"298:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"32","id":6172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"334:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":6176,"mutability":"constant","name":"CANNOT_TRANSFER","nameLocation":"353:15:42","nodeType":"VariableDeclaration","scope":6535,"src":"337:35:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6174,"name":"uint32","nodeType":"ElementaryTypeName","src":"337:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"34","id":6175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"371:1:42","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"constant":true,"id":6179,"mutability":"constant","name":"CANNOT_SET_RESOLVER","nameLocation":"390:19:42","nodeType":"VariableDeclaration","scope":6535,"src":"374:39:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6177,"name":"uint32","nodeType":"ElementaryTypeName","src":"374:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"38","id":6178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"412:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"visibility":"internal"},{"constant":true,"id":6182,"mutability":"constant","name":"CANNOT_SET_TTL","nameLocation":"431:14:42","nodeType":"VariableDeclaration","scope":6535,"src":"415:35:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6180,"name":"uint32","nodeType":"ElementaryTypeName","src":"415:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3136","id":6181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"448:2:42","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"internal"},{"constant":true,"id":6185,"mutability":"constant","name":"CANNOT_CREATE_SUBDOMAIN","nameLocation":"468:23:42","nodeType":"VariableDeclaration","scope":6535,"src":"452:44:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6183,"name":"uint32","nodeType":"ElementaryTypeName","src":"452:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3332","id":6184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"494:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"visibility":"internal"},{"constant":true,"id":6188,"mutability":"constant","name":"CANNOT_APPROVE","nameLocation":"514:14:42","nodeType":"VariableDeclaration","scope":6535,"src":"498:35:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6186,"name":"uint32","nodeType":"ElementaryTypeName","src":"498:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3634","id":6187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"531:2:42","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"visibility":"internal"},{"constant":true,"id":6193,"mutability":"constant","name":"PARENT_CANNOT_CONTROL","nameLocation":"619:21:42","nodeType":"VariableDeclaration","scope":6535,"src":"603:47:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6189,"name":"uint32","nodeType":"ElementaryTypeName","src":"603:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":6192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"643:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":6191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"648:2:42","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"643:7:42","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"visibility":"internal"},{"constant":true,"id":6198,"mutability":"constant","name":"IS_DOT_ETH","nameLocation":"668:10:42","nodeType":"VariableDeclaration","scope":6535,"src":"652:36:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6194,"name":"uint32","nodeType":"ElementaryTypeName","src":"652:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"},"id":6197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"681:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3137","id":6196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"686:2:42","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"17"},"src":"681:7:42","typeDescriptions":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"}},"visibility":"internal"},{"constant":true,"id":6203,"mutability":"constant","name":"CAN_EXTEND_EXPIRY","nameLocation":"706:17:42","nodeType":"VariableDeclaration","scope":6535,"src":"690:43:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6199,"name":"uint32","nodeType":"ElementaryTypeName","src":"690:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"},"id":6202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"726:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3138","id":6201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"731:2:42","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"726:7:42","typeDescriptions":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"}},"visibility":"internal"},{"constant":true,"id":6206,"mutability":"constant","name":"CAN_DO_EVERYTHING","nameLocation":"751:17:42","nodeType":"VariableDeclaration","scope":6535,"src":"735:37:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6204,"name":"uint32","nodeType":"ElementaryTypeName","src":"735:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"30","id":6205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"771:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":6209,"mutability":"constant","name":"PARENT_CONTROLLED_FUSES","nameLocation":"790:23:42","nodeType":"VariableDeclaration","scope":6535,"src":"774:52:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6207,"name":"uint32","nodeType":"ElementaryTypeName","src":"774:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"30784646464630303030","id":6208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"816:10:42","typeDescriptions":{"typeIdentifier":"t_rational_4294901760_by_1","typeString":"int_const 4294901760"},"value":"0xFFFF0000"},"visibility":"internal"},{"constant":true,"id":6212,"mutability":"constant","name":"USER_SETTABLE_FUSES","nameLocation":"879:19:42","nodeType":"VariableDeclaration","scope":6535,"src":"863:48:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6210,"name":"uint32","nodeType":"ElementaryTypeName","src":"863:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"30784646464446464646","id":6211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"901:10:42","typeDescriptions":{"typeIdentifier":"t_rational_4294836223_by_1","typeString":"int_const 4294836223"},"value":"0xFFFDFFFF"},"visibility":"internal"},{"abstract":false,"baseContracts":[{"baseName":{"id":6213,"name":"IERC1155","nameLocations":["940:8:42"],"nodeType":"IdentifierPath","referencedDeclaration":234,"src":"940:8:42"},"id":6214,"nodeType":"InheritanceSpecifier","src":"940:8:42"}],"canonicalName":"INameWrapper","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6534,"linearizedBaseContracts":[6534,234,2017],"name":"INameWrapper","nameLocation":"924:12:42","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8ce7013e8abebc55c3890a68f5a27c67c3f7efa64e584de5fb22363c606fd340","id":6226,"name":"NameWrapped","nameLocation":"961:11:42","nodeType":"EventDefinition","parameters":{"id":6225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6216,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"998:4:42","nodeType":"VariableDeclaration","scope":6226,"src":"982:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"982:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6218,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"1018:4:42","nodeType":"VariableDeclaration","scope":6226,"src":"1012:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6217,"name":"bytes","nodeType":"ElementaryTypeName","src":"1012:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6220,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"1040:5:42","nodeType":"VariableDeclaration","scope":6226,"src":"1032:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6219,"name":"address","nodeType":"ElementaryTypeName","src":"1032:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6222,"indexed":false,"mutability":"mutable","name":"fuses","nameLocation":"1062:5:42","nodeType":"VariableDeclaration","scope":6226,"src":"1055:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6221,"name":"uint32","nodeType":"ElementaryTypeName","src":"1055:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6224,"indexed":false,"mutability":"mutable","name":"expiry","nameLocation":"1084:6:42","nodeType":"VariableDeclaration","scope":6226,"src":"1077:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6223,"name":"uint64","nodeType":"ElementaryTypeName","src":"1077:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"972:124:42"},"src":"955:142:42"},{"anonymous":false,"eventSelector":"ee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c4","id":6232,"name":"NameUnwrapped","nameLocation":"1109:13:42","nodeType":"EventDefinition","parameters":{"id":6231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6228,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1139:4:42","nodeType":"VariableDeclaration","scope":6232,"src":"1123:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1123:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6230,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"1153:5:42","nodeType":"VariableDeclaration","scope":6232,"src":"1145:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6229,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1122:37:42"},"src":"1103:57:42"},{"anonymous":false,"eventSelector":"39873f00c80f4f94b7bd1594aebcf650f003545b74824d57ddf4939e3ff3a34b","id":6238,"name":"FusesSet","nameLocation":"1172:8:42","nodeType":"EventDefinition","parameters":{"id":6237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6234,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1197:4:42","nodeType":"VariableDeclaration","scope":6238,"src":"1181:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6236,"indexed":false,"mutability":"mutable","name":"fuses","nameLocation":"1210:5:42","nodeType":"VariableDeclaration","scope":6238,"src":"1203:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6235,"name":"uint32","nodeType":"ElementaryTypeName","src":"1203:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1180:36:42"},"src":"1166:51:42"},{"anonymous":false,"eventSelector":"f675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b132","id":6244,"name":"ExpiryExtended","nameLocation":"1228:14:42","nodeType":"EventDefinition","parameters":{"id":6243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6240,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1259:4:42","nodeType":"VariableDeclaration","scope":6244,"src":"1243:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6242,"indexed":false,"mutability":"mutable","name":"expiry","nameLocation":"1272:6:42","nodeType":"VariableDeclaration","scope":6244,"src":"1265:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6241,"name":"uint64","nodeType":"ElementaryTypeName","src":"1265:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1242:37:42"},"src":"1222:58:42"},{"functionSelector":"3f15457f","id":6250,"implemented":false,"kind":"function","modifiers":[],"name":"ens","nameLocation":"1295:3:42","nodeType":"FunctionDefinition","parameters":{"id":6245,"nodeType":"ParameterList","parameters":[],"src":"1298:2:42"},"returnParameters":{"id":6249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6250,"src":"1324:3:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"},"typeName":{"id":6247,"nodeType":"UserDefinedTypeName","pathNode":{"id":6246,"name":"ENS","nameLocations":["1324:3:42"],"nodeType":"IdentifierPath","referencedDeclaration":5200,"src":"1324:3:42"},"referencedDeclaration":5200,"src":"1324:3:42","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$5200","typeString":"contract ENS"}},"visibility":"internal"}],"src":"1323:5:42"},"scope":6534,"src":"1286:43:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2b20e397","id":6256,"implemented":false,"kind":"function","modifiers":[],"name":"registrar","nameLocation":"1344:9:42","nodeType":"FunctionDefinition","parameters":{"id":6251,"nodeType":"ParameterList","parameters":[],"src":"1353:2:42"},"returnParameters":{"id":6255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6256,"src":"1379:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBaseRegistrar_$4659","typeString":"contract IBaseRegistrar"},"typeName":{"id":6253,"nodeType":"UserDefinedTypeName","pathNode":{"id":6252,"name":"IBaseRegistrar","nameLocations":["1379:14:42"],"nodeType":"IdentifierPath","referencedDeclaration":4659,"src":"1379:14:42"},"referencedDeclaration":4659,"src":"1379:14:42","typeDescriptions":{"typeIdentifier":"t_contract$_IBaseRegistrar_$4659","typeString":"contract IBaseRegistrar"}},"visibility":"internal"}],"src":"1378:16:42"},"scope":6534,"src":"1335:60:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"53095467","id":6262,"implemented":false,"kind":"function","modifiers":[],"name":"metadataService","nameLocation":"1410:15:42","nodeType":"FunctionDefinition","parameters":{"id":6257,"nodeType":"ParameterList","parameters":[],"src":"1425:2:42"},"returnParameters":{"id":6261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6262,"src":"1451:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6160","typeString":"contract IMetadataService"},"typeName":{"id":6259,"nodeType":"UserDefinedTypeName","pathNode":{"id":6258,"name":"IMetadataService","nameLocations":["1451:16:42"],"nodeType":"IdentifierPath","referencedDeclaration":6160,"src":"1451:16:42"},"referencedDeclaration":6160,"src":"1451:16:42","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6160","typeString":"contract IMetadataService"}},"visibility":"internal"}],"src":"1450:18:42"},"scope":6534,"src":"1401:68:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"20c38e2b","id":6269,"implemented":false,"kind":"function","modifiers":[],"name":"names","nameLocation":"1484:5:42","nodeType":"FunctionDefinition","parameters":{"id":6265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6269,"src":"1490:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1490:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1489:9:42"},"returnParameters":{"id":6268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6269,"src":"1522:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6266,"name":"bytes","nodeType":"ElementaryTypeName","src":"1522:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1521:14:42"},"scope":6534,"src":"1475:61:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":6274,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"1551:4:42","nodeType":"FunctionDefinition","parameters":{"id":6270,"nodeType":"ParameterList","parameters":[],"src":"1555:2:42"},"returnParameters":{"id":6273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6274,"src":"1581:13:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6271,"name":"string","nodeType":"ElementaryTypeName","src":"1581:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1580:15:42"},"scope":6534,"src":"1542:54:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1f4e1504","id":6280,"implemented":false,"kind":"function","modifiers":[],"name":"upgradeContract","nameLocation":"1611:15:42","nodeType":"FunctionDefinition","parameters":{"id":6275,"nodeType":"ParameterList","parameters":[],"src":"1626:2:42"},"returnParameters":{"id":6279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6280,"src":"1652:19:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6552","typeString":"contract INameWrapperUpgrade"},"typeName":{"id":6277,"nodeType":"UserDefinedTypeName","pathNode":{"id":6276,"name":"INameWrapperUpgrade","nameLocations":["1652:19:42"],"nodeType":"IdentifierPath","referencedDeclaration":6552,"src":"1652:19:42"},"referencedDeclaration":6552,"src":"1652:19:42","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6552","typeString":"contract INameWrapperUpgrade"}},"visibility":"internal"}],"src":"1651:21:42"},"scope":6534,"src":"1602:71:42","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2016],"functionSelector":"01ffc9a7","id":6287,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1688:17:42","nodeType":"FunctionDefinition","parameters":{"id":6283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6282,"mutability":"mutable","name":"interfaceID","nameLocation":"1713:11:42","nodeType":"VariableDeclaration","scope":6287,"src":"1706:18:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6281,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1706:6:42","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1705:20:42"},"returnParameters":{"id":6286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6287,"src":"1749:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6284,"name":"bool","nodeType":"ElementaryTypeName","src":"1749:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1748:6:42"},"scope":6534,"src":"1679:76:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"eb8ae530","id":6296,"implemented":false,"kind":"function","modifiers":[],"name":"wrap","nameLocation":"1770:4:42","nodeType":"FunctionDefinition","parameters":{"id":6294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6289,"mutability":"mutable","name":"name","nameLocation":"1799:4:42","nodeType":"VariableDeclaration","scope":6296,"src":"1784:19:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6288,"name":"bytes","nodeType":"ElementaryTypeName","src":"1784:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6291,"mutability":"mutable","name":"wrappedOwner","nameLocation":"1821:12:42","nodeType":"VariableDeclaration","scope":6296,"src":"1813:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6290,"name":"address","nodeType":"ElementaryTypeName","src":"1813:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6293,"mutability":"mutable","name":"resolver","nameLocation":"1851:8:42","nodeType":"VariableDeclaration","scope":6296,"src":"1843:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6292,"name":"address","nodeType":"ElementaryTypeName","src":"1843:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1774:91:42"},"returnParameters":{"id":6295,"nodeType":"ParameterList","parameters":[],"src":"1874:0:42"},"scope":6534,"src":"1761:114:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8cf8b41e","id":6309,"implemented":false,"kind":"function","modifiers":[],"name":"wrapETH2LD","nameLocation":"1890:10:42","nodeType":"FunctionDefinition","parameters":{"id":6305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6298,"mutability":"mutable","name":"label","nameLocation":"1926:5:42","nodeType":"VariableDeclaration","scope":6309,"src":"1910:21:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6297,"name":"string","nodeType":"ElementaryTypeName","src":"1910:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6300,"mutability":"mutable","name":"wrappedOwner","nameLocation":"1949:12:42","nodeType":"VariableDeclaration","scope":6309,"src":"1941:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6299,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6302,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"1978:20:42","nodeType":"VariableDeclaration","scope":6309,"src":"1971:27:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6301,"name":"uint16","nodeType":"ElementaryTypeName","src":"1971:6:42","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6304,"mutability":"mutable","name":"resolver","nameLocation":"2016:8:42","nodeType":"VariableDeclaration","scope":6309,"src":"2008:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6303,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1900:130:42"},"returnParameters":{"id":6308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6307,"mutability":"mutable","name":"expires","nameLocation":"2056:7:42","nodeType":"VariableDeclaration","scope":6309,"src":"2049:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6306,"name":"uint64","nodeType":"ElementaryTypeName","src":"2049:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2048:16:42"},"scope":6534,"src":"1881:184:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a4014982","id":6324,"implemented":false,"kind":"function","modifiers":[],"name":"registerAndWrapETH2LD","nameLocation":"2080:21:42","nodeType":"FunctionDefinition","parameters":{"id":6320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6311,"mutability":"mutable","name":"label","nameLocation":"2127:5:42","nodeType":"VariableDeclaration","scope":6324,"src":"2111:21:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6310,"name":"string","nodeType":"ElementaryTypeName","src":"2111:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6313,"mutability":"mutable","name":"wrappedOwner","nameLocation":"2150:12:42","nodeType":"VariableDeclaration","scope":6324,"src":"2142:20:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6312,"name":"address","nodeType":"ElementaryTypeName","src":"2142:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6315,"mutability":"mutable","name":"duration","nameLocation":"2180:8:42","nodeType":"VariableDeclaration","scope":6324,"src":"2172:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2172:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6317,"mutability":"mutable","name":"resolver","nameLocation":"2206:8:42","nodeType":"VariableDeclaration","scope":6324,"src":"2198:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6316,"name":"address","nodeType":"ElementaryTypeName","src":"2198:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6319,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"2231:20:42","nodeType":"VariableDeclaration","scope":6324,"src":"2224:27:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6318,"name":"uint16","nodeType":"ElementaryTypeName","src":"2224:6:42","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2101:156:42"},"returnParameters":{"id":6323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6322,"mutability":"mutable","name":"registrarExpiry","nameLocation":"2284:15:42","nodeType":"VariableDeclaration","scope":6324,"src":"2276:23:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6321,"name":"uint256","nodeType":"ElementaryTypeName","src":"2276:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2275:25:42"},"scope":6534,"src":"2071:230:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c475abff","id":6333,"implemented":false,"kind":"function","modifiers":[],"name":"renew","nameLocation":"2316:5:42","nodeType":"FunctionDefinition","parameters":{"id":6329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6326,"mutability":"mutable","name":"labelHash","nameLocation":"2339:9:42","nodeType":"VariableDeclaration","scope":6333,"src":"2331:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6325,"name":"uint256","nodeType":"ElementaryTypeName","src":"2331:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6328,"mutability":"mutable","name":"duration","nameLocation":"2366:8:42","nodeType":"VariableDeclaration","scope":6333,"src":"2358:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6327,"name":"uint256","nodeType":"ElementaryTypeName","src":"2358:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2321:59:42"},"returnParameters":{"id":6332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6331,"mutability":"mutable","name":"expires","nameLocation":"2407:7:42","nodeType":"VariableDeclaration","scope":6333,"src":"2399:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6330,"name":"uint256","nodeType":"ElementaryTypeName","src":"2399:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2398:17:42"},"scope":6534,"src":"2307:109:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d8c9921a","id":6342,"implemented":false,"kind":"function","modifiers":[],"name":"unwrap","nameLocation":"2431:6:42","nodeType":"FunctionDefinition","parameters":{"id":6340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6335,"mutability":"mutable","name":"node","nameLocation":"2446:4:42","nodeType":"VariableDeclaration","scope":6342,"src":"2438:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2438:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6337,"mutability":"mutable","name":"label","nameLocation":"2460:5:42","nodeType":"VariableDeclaration","scope":6342,"src":"2452:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2452:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6339,"mutability":"mutable","name":"owner","nameLocation":"2475:5:42","nodeType":"VariableDeclaration","scope":6342,"src":"2467:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6338,"name":"address","nodeType":"ElementaryTypeName","src":"2467:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2437:44:42"},"returnParameters":{"id":6341,"nodeType":"ParameterList","parameters":[],"src":"2490:0:42"},"scope":6534,"src":"2422:69:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8b4dfa75","id":6351,"implemented":false,"kind":"function","modifiers":[],"name":"unwrapETH2LD","nameLocation":"2506:12:42","nodeType":"FunctionDefinition","parameters":{"id":6349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6344,"mutability":"mutable","name":"label","nameLocation":"2536:5:42","nodeType":"VariableDeclaration","scope":6351,"src":"2528:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2528:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6346,"mutability":"mutable","name":"newRegistrant","nameLocation":"2559:13:42","nodeType":"VariableDeclaration","scope":6351,"src":"2551:21:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6345,"name":"address","nodeType":"ElementaryTypeName","src":"2551:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6348,"mutability":"mutable","name":"newController","nameLocation":"2590:13:42","nodeType":"VariableDeclaration","scope":6351,"src":"2582:21:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6347,"name":"address","nodeType":"ElementaryTypeName","src":"2582:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2518:91:42"},"returnParameters":{"id":6350,"nodeType":"ParameterList","parameters":[],"src":"2618:0:42"},"scope":6534,"src":"2497:122:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c93ab3fd","id":6358,"implemented":false,"kind":"function","modifiers":[],"name":"upgrade","nameLocation":"2634:7:42","nodeType":"FunctionDefinition","parameters":{"id":6356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6353,"mutability":"mutable","name":"name","nameLocation":"2657:4:42","nodeType":"VariableDeclaration","scope":6358,"src":"2642:19:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6352,"name":"bytes","nodeType":"ElementaryTypeName","src":"2642:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6355,"mutability":"mutable","name":"extraData","nameLocation":"2678:9:42","nodeType":"VariableDeclaration","scope":6358,"src":"2663:24:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6354,"name":"bytes","nodeType":"ElementaryTypeName","src":"2663:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2641:47:42"},"returnParameters":{"id":6357,"nodeType":"ParameterList","parameters":[],"src":"2697:0:42"},"scope":6534,"src":"2625:73:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"402906fc","id":6367,"implemented":false,"kind":"function","modifiers":[],"name":"setFuses","nameLocation":"2713:8:42","nodeType":"FunctionDefinition","parameters":{"id":6363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6360,"mutability":"mutable","name":"node","nameLocation":"2739:4:42","nodeType":"VariableDeclaration","scope":6367,"src":"2731:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2731:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6362,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"2760:20:42","nodeType":"VariableDeclaration","scope":6367,"src":"2753:27:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6361,"name":"uint16","nodeType":"ElementaryTypeName","src":"2753:6:42","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2721:65:42"},"returnParameters":{"id":6366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6365,"mutability":"mutable","name":"newFuses","nameLocation":"2812:8:42","nodeType":"VariableDeclaration","scope":6367,"src":"2805:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6364,"name":"uint32","nodeType":"ElementaryTypeName","src":"2805:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2804:17:42"},"scope":6534,"src":"2704:118:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"33c69ea9","id":6378,"implemented":false,"kind":"function","modifiers":[],"name":"setChildFuses","nameLocation":"2837:13:42","nodeType":"FunctionDefinition","parameters":{"id":6376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6369,"mutability":"mutable","name":"parentNode","nameLocation":"2868:10:42","nodeType":"VariableDeclaration","scope":6378,"src":"2860:18:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6368,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2860:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6371,"mutability":"mutable","name":"labelhash","nameLocation":"2896:9:42","nodeType":"VariableDeclaration","scope":6378,"src":"2888:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6373,"mutability":"mutable","name":"fuses","nameLocation":"2922:5:42","nodeType":"VariableDeclaration","scope":6378,"src":"2915:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6372,"name":"uint32","nodeType":"ElementaryTypeName","src":"2915:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6375,"mutability":"mutable","name":"expiry","nameLocation":"2944:6:42","nodeType":"VariableDeclaration","scope":6378,"src":"2937:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6374,"name":"uint64","nodeType":"ElementaryTypeName","src":"2937:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2850:106:42"},"returnParameters":{"id":6377,"nodeType":"ParameterList","parameters":[],"src":"2965:0:42"},"scope":6534,"src":"2828:138:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"24c1af44","id":6397,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeRecord","nameLocation":"2981:16:42","nodeType":"FunctionDefinition","parameters":{"id":6393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6380,"mutability":"mutable","name":"node","nameLocation":"3015:4:42","nodeType":"VariableDeclaration","scope":6397,"src":"3007:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3007:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6382,"mutability":"mutable","name":"label","nameLocation":"3045:5:42","nodeType":"VariableDeclaration","scope":6397,"src":"3029:21:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6381,"name":"string","nodeType":"ElementaryTypeName","src":"3029:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6384,"mutability":"mutable","name":"owner","nameLocation":"3068:5:42","nodeType":"VariableDeclaration","scope":6397,"src":"3060:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6383,"name":"address","nodeType":"ElementaryTypeName","src":"3060:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6386,"mutability":"mutable","name":"resolver","nameLocation":"3091:8:42","nodeType":"VariableDeclaration","scope":6397,"src":"3083:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6385,"name":"address","nodeType":"ElementaryTypeName","src":"3083:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6388,"mutability":"mutable","name":"ttl","nameLocation":"3116:3:42","nodeType":"VariableDeclaration","scope":6397,"src":"3109:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6387,"name":"uint64","nodeType":"ElementaryTypeName","src":"3109:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6390,"mutability":"mutable","name":"fuses","nameLocation":"3136:5:42","nodeType":"VariableDeclaration","scope":6397,"src":"3129:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6389,"name":"uint32","nodeType":"ElementaryTypeName","src":"3129:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6392,"mutability":"mutable","name":"expiry","nameLocation":"3158:6:42","nodeType":"VariableDeclaration","scope":6397,"src":"3151:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6391,"name":"uint64","nodeType":"ElementaryTypeName","src":"3151:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2997:173:42"},"returnParameters":{"id":6396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6397,"src":"3189:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3189:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3188:9:42"},"scope":6534,"src":"2972:226:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"cf408823","id":6408,"implemented":false,"kind":"function","modifiers":[],"name":"setRecord","nameLocation":"3213:9:42","nodeType":"FunctionDefinition","parameters":{"id":6406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6399,"mutability":"mutable","name":"node","nameLocation":"3240:4:42","nodeType":"VariableDeclaration","scope":6408,"src":"3232:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3232:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6401,"mutability":"mutable","name":"owner","nameLocation":"3262:5:42","nodeType":"VariableDeclaration","scope":6408,"src":"3254:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6400,"name":"address","nodeType":"ElementaryTypeName","src":"3254:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6403,"mutability":"mutable","name":"resolver","nameLocation":"3285:8:42","nodeType":"VariableDeclaration","scope":6408,"src":"3277:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6402,"name":"address","nodeType":"ElementaryTypeName","src":"3277:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6405,"mutability":"mutable","name":"ttl","nameLocation":"3310:3:42","nodeType":"VariableDeclaration","scope":6408,"src":"3303:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6404,"name":"uint64","nodeType":"ElementaryTypeName","src":"3303:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3222:97:42"},"returnParameters":{"id":6407,"nodeType":"ParameterList","parameters":[],"src":"3328:0:42"},"scope":6534,"src":"3204:125:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c658e086","id":6423,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeOwner","nameLocation":"3344:15:42","nodeType":"FunctionDefinition","parameters":{"id":6419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6410,"mutability":"mutable","name":"node","nameLocation":"3377:4:42","nodeType":"VariableDeclaration","scope":6423,"src":"3369:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3369:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6412,"mutability":"mutable","name":"label","nameLocation":"3407:5:42","nodeType":"VariableDeclaration","scope":6423,"src":"3391:21:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6411,"name":"string","nodeType":"ElementaryTypeName","src":"3391:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6414,"mutability":"mutable","name":"newOwner","nameLocation":"3430:8:42","nodeType":"VariableDeclaration","scope":6423,"src":"3422:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6413,"name":"address","nodeType":"ElementaryTypeName","src":"3422:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6416,"mutability":"mutable","name":"fuses","nameLocation":"3455:5:42","nodeType":"VariableDeclaration","scope":6423,"src":"3448:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6415,"name":"uint32","nodeType":"ElementaryTypeName","src":"3448:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6418,"mutability":"mutable","name":"expiry","nameLocation":"3477:6:42","nodeType":"VariableDeclaration","scope":6423,"src":"3470:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6417,"name":"uint64","nodeType":"ElementaryTypeName","src":"3470:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3359:130:42"},"returnParameters":{"id":6422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6423,"src":"3508:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6420,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3508:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3507:9:42"},"scope":6534,"src":"3335:182:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6e5d6ad2","id":6434,"implemented":false,"kind":"function","modifiers":[],"name":"extendExpiry","nameLocation":"3532:12:42","nodeType":"FunctionDefinition","parameters":{"id":6430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6425,"mutability":"mutable","name":"node","nameLocation":"3562:4:42","nodeType":"VariableDeclaration","scope":6434,"src":"3554:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3554:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6427,"mutability":"mutable","name":"labelhash","nameLocation":"3584:9:42","nodeType":"VariableDeclaration","scope":6434,"src":"3576:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3576:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6429,"mutability":"mutable","name":"expiry","nameLocation":"3610:6:42","nodeType":"VariableDeclaration","scope":6434,"src":"3603:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6428,"name":"uint64","nodeType":"ElementaryTypeName","src":"3603:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3544:78:42"},"returnParameters":{"id":6433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6434,"src":"3641:6:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6431,"name":"uint64","nodeType":"ElementaryTypeName","src":"3641:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3640:8:42"},"scope":6534,"src":"3523:126:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"41415eab","id":6443,"implemented":false,"kind":"function","modifiers":[],"name":"canModifyName","nameLocation":"3664:13:42","nodeType":"FunctionDefinition","parameters":{"id":6439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6436,"mutability":"mutable","name":"node","nameLocation":"3695:4:42","nodeType":"VariableDeclaration","scope":6443,"src":"3687:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3687:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6438,"mutability":"mutable","name":"addr","nameLocation":"3717:4:42","nodeType":"VariableDeclaration","scope":6443,"src":"3709:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6437,"name":"address","nodeType":"ElementaryTypeName","src":"3709:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3677:50:42"},"returnParameters":{"id":6442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6443,"src":"3751:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6440,"name":"bool","nodeType":"ElementaryTypeName","src":"3751:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3750:6:42"},"scope":6534,"src":"3655:102:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1896f70a","id":6450,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"3772:11:42","nodeType":"FunctionDefinition","parameters":{"id":6448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6445,"mutability":"mutable","name":"node","nameLocation":"3792:4:42","nodeType":"VariableDeclaration","scope":6450,"src":"3784:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3784:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6447,"mutability":"mutable","name":"resolver","nameLocation":"3806:8:42","nodeType":"VariableDeclaration","scope":6450,"src":"3798:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6446,"name":"address","nodeType":"ElementaryTypeName","src":"3798:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3783:32:42"},"returnParameters":{"id":6449,"nodeType":"ParameterList","parameters":[],"src":"3824:0:42"},"scope":6534,"src":"3763:62:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"14ab9038","id":6457,"implemented":false,"kind":"function","modifiers":[],"name":"setTTL","nameLocation":"3840:6:42","nodeType":"FunctionDefinition","parameters":{"id":6455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6452,"mutability":"mutable","name":"node","nameLocation":"3855:4:42","nodeType":"VariableDeclaration","scope":6457,"src":"3847:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3847:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6454,"mutability":"mutable","name":"ttl","nameLocation":"3868:3:42","nodeType":"VariableDeclaration","scope":6457,"src":"3861:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6453,"name":"uint64","nodeType":"ElementaryTypeName","src":"3861:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3846:26:42"},"returnParameters":{"id":6456,"nodeType":"ParameterList","parameters":[],"src":"3881:0:42"},"scope":6534,"src":"3831:51:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6352211e","id":6464,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3897:7:42","nodeType":"FunctionDefinition","parameters":{"id":6460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6459,"mutability":"mutable","name":"id","nameLocation":"3913:2:42","nodeType":"VariableDeclaration","scope":6464,"src":"3905:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6458,"name":"uint256","nodeType":"ElementaryTypeName","src":"3905:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3904:12:42"},"returnParameters":{"id":6463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6462,"mutability":"mutable","name":"owner","nameLocation":"3948:5:42","nodeType":"VariableDeclaration","scope":6464,"src":"3940:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6461,"name":"address","nodeType":"ElementaryTypeName","src":"3940:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3939:15:42"},"scope":6534,"src":"3888:67:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":6471,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3970:7:42","nodeType":"FunctionDefinition","parameters":{"id":6469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6466,"mutability":"mutable","name":"to","nameLocation":"3986:2:42","nodeType":"VariableDeclaration","scope":6471,"src":"3978:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6465,"name":"address","nodeType":"ElementaryTypeName","src":"3978:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6468,"mutability":"mutable","name":"tokenId","nameLocation":"3998:7:42","nodeType":"VariableDeclaration","scope":6471,"src":"3990:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6467,"name":"uint256","nodeType":"ElementaryTypeName","src":"3990:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3977:29:42"},"returnParameters":{"id":6470,"nodeType":"ParameterList","parameters":[],"src":"4015:0:42"},"scope":6534,"src":"3961:55:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"081812fc","id":6478,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4031:11:42","nodeType":"FunctionDefinition","parameters":{"id":6474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6473,"mutability":"mutable","name":"tokenId","nameLocation":"4051:7:42","nodeType":"VariableDeclaration","scope":6478,"src":"4043:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6472,"name":"uint256","nodeType":"ElementaryTypeName","src":"4043:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4042:17:42"},"returnParameters":{"id":6477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6478,"src":"4083:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6475,"name":"address","nodeType":"ElementaryTypeName","src":"4083:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4082:9:42"},"scope":6534,"src":"4022:70:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0178fe3f","id":6489,"implemented":false,"kind":"function","modifiers":[],"name":"getData","nameLocation":"4107:7:42","nodeType":"FunctionDefinition","parameters":{"id":6481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6480,"mutability":"mutable","name":"id","nameLocation":"4132:2:42","nodeType":"VariableDeclaration","scope":6489,"src":"4124:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6479,"name":"uint256","nodeType":"ElementaryTypeName","src":"4124:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4114:26:42"},"returnParameters":{"id":6488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6489,"src":"4164:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6482,"name":"address","nodeType":"ElementaryTypeName","src":"4164:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6489,"src":"4173:6:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6484,"name":"uint32","nodeType":"ElementaryTypeName","src":"4173:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6489,"src":"4181:6:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6486,"name":"uint64","nodeType":"ElementaryTypeName","src":"4181:6:42","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4163:25:42"},"scope":6534,"src":"4098:91:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1534e177","id":6495,"implemented":false,"kind":"function","modifiers":[],"name":"setMetadataService","nameLocation":"4204:18:42","nodeType":"FunctionDefinition","parameters":{"id":6493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6492,"mutability":"mutable","name":"_metadataService","nameLocation":"4240:16:42","nodeType":"VariableDeclaration","scope":6495,"src":"4223:33:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6160","typeString":"contract IMetadataService"},"typeName":{"id":6491,"nodeType":"UserDefinedTypeName","pathNode":{"id":6490,"name":"IMetadataService","nameLocations":["4223:16:42"],"nodeType":"IdentifierPath","referencedDeclaration":6160,"src":"4223:16:42"},"referencedDeclaration":6160,"src":"4223:16:42","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6160","typeString":"contract IMetadataService"}},"visibility":"internal"}],"src":"4222:35:42"},"returnParameters":{"id":6494,"nodeType":"ParameterList","parameters":[],"src":"4266:0:42"},"scope":6534,"src":"4195:72:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0e89341c","id":6502,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"4282:3:42","nodeType":"FunctionDefinition","parameters":{"id":6498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6497,"mutability":"mutable","name":"tokenId","nameLocation":"4294:7:42","nodeType":"VariableDeclaration","scope":6502,"src":"4286:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6496,"name":"uint256","nodeType":"ElementaryTypeName","src":"4286:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4285:17:42"},"returnParameters":{"id":6501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6502,"src":"4326:13:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6499,"name":"string","nodeType":"ElementaryTypeName","src":"4326:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4325:15:42"},"scope":6534,"src":"4273:68:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b6bcad26","id":6508,"implemented":false,"kind":"function","modifiers":[],"name":"setUpgradeContract","nameLocation":"4356:18:42","nodeType":"FunctionDefinition","parameters":{"id":6506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6505,"mutability":"mutable","name":"_upgradeAddress","nameLocation":"4395:15:42","nodeType":"VariableDeclaration","scope":6508,"src":"4375:35:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6552","typeString":"contract INameWrapperUpgrade"},"typeName":{"id":6504,"nodeType":"UserDefinedTypeName","pathNode":{"id":6503,"name":"INameWrapperUpgrade","nameLocations":["4375:19:42"],"nodeType":"IdentifierPath","referencedDeclaration":6552,"src":"4375:19:42"},"referencedDeclaration":6552,"src":"4375:19:42","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6552","typeString":"contract INameWrapperUpgrade"}},"visibility":"internal"}],"src":"4374:37:42"},"returnParameters":{"id":6507,"nodeType":"ParameterList","parameters":[],"src":"4420:0:42"},"scope":6534,"src":"4347:74:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"adf4960a","id":6517,"implemented":false,"kind":"function","modifiers":[],"name":"allFusesBurned","nameLocation":"4436:14:42","nodeType":"FunctionDefinition","parameters":{"id":6513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6510,"mutability":"mutable","name":"node","nameLocation":"4468:4:42","nodeType":"VariableDeclaration","scope":6517,"src":"4460:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4460:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6512,"mutability":"mutable","name":"fuseMask","nameLocation":"4489:8:42","nodeType":"VariableDeclaration","scope":6517,"src":"4482:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6511,"name":"uint32","nodeType":"ElementaryTypeName","src":"4482:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4450:53:42"},"returnParameters":{"id":6516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6517,"src":"4527:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6514,"name":"bool","nodeType":"ElementaryTypeName","src":"4527:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4526:6:42"},"scope":6534,"src":"4427:106:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"fd0cd0d9","id":6524,"implemented":false,"kind":"function","modifiers":[],"name":"isWrapped","nameLocation":"4548:9:42","nodeType":"FunctionDefinition","parameters":{"id":6520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6524,"src":"4558:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4558:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4557:9:42"},"returnParameters":{"id":6523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6524,"src":"4590:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6521,"name":"bool","nodeType":"ElementaryTypeName","src":"4590:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4589:6:42"},"scope":6534,"src":"4539:57:42","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d9a50c12","id":6533,"implemented":false,"kind":"function","modifiers":[],"name":"isWrapped","nameLocation":"4611:9:42","nodeType":"FunctionDefinition","parameters":{"id":6529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6526,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6533,"src":"4621:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4621:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6533,"src":"4630:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4620:18:42"},"returnParameters":{"id":6532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6533,"src":"4662:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6530,"name":"bool","nodeType":"ElementaryTypeName","src":"4662:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4661:6:42"},"scope":6534,"src":"4602:66:42","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6535,"src":"914:3756:42","usedErrors":[]}],"src":"31:4640:42"},"id":42},"contracts/wrapper/INameWrapperUpgrade.sol":{"ast":{"absolutePath":"contracts/wrapper/INameWrapperUpgrade.sol","exportedSymbols":{"INameWrapperUpgrade":[6552]},"id":6553,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6536,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:43"},{"abstract":false,"baseContracts":[],"canonicalName":"INameWrapperUpgrade","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6552,"linearizedBaseContracts":[6552],"name":"INameWrapperUpgrade","nameLocation":"67:19:43","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9198c276","id":6551,"implemented":false,"kind":"function","modifiers":[],"name":"wrapFromUpgrade","nameLocation":"102:15:43","nodeType":"FunctionDefinition","parameters":{"id":6549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6538,"mutability":"mutable","name":"name","nameLocation":"142:4:43","nodeType":"VariableDeclaration","scope":6551,"src":"127:19:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6537,"name":"bytes","nodeType":"ElementaryTypeName","src":"127:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6540,"mutability":"mutable","name":"wrappedOwner","nameLocation":"164:12:43","nodeType":"VariableDeclaration","scope":6551,"src":"156:20:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6539,"name":"address","nodeType":"ElementaryTypeName","src":"156:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6542,"mutability":"mutable","name":"fuses","nameLocation":"193:5:43","nodeType":"VariableDeclaration","scope":6551,"src":"186:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6541,"name":"uint32","nodeType":"ElementaryTypeName","src":"186:6:43","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6544,"mutability":"mutable","name":"expiry","nameLocation":"215:6:43","nodeType":"VariableDeclaration","scope":6551,"src":"208:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6543,"name":"uint64","nodeType":"ElementaryTypeName","src":"208:6:43","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6546,"mutability":"mutable","name":"approved","nameLocation":"239:8:43","nodeType":"VariableDeclaration","scope":6551,"src":"231:16:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6545,"name":"address","nodeType":"ElementaryTypeName","src":"231:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6548,"mutability":"mutable","name":"extraData","nameLocation":"272:9:43","nodeType":"VariableDeclaration","scope":6551,"src":"257:24:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6547,"name":"bytes","nodeType":"ElementaryTypeName","src":"257:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"117:170:43"},"returnParameters":{"id":6550,"nodeType":"ParameterList","parameters":[],"src":"296:0:43"},"scope":6552,"src":"93:204:43","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6553,"src":"57:242:43","usedErrors":[]}],"src":"31:269:43"},"id":43}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_375":{"entryPoint":null,"id":375,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:44","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:44","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:44","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:44"},"nodeType":"YulFunctionCall","src":"66:20:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:44"},"nodeType":"YulFunctionCall","src":"56:31:44"},"nodeType":"YulExpressionStatement","src":"56:31:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:44"},"nodeType":"YulFunctionCall","src":"96:15:44"},"nodeType":"YulExpressionStatement","src":"96:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:44"},"nodeType":"YulFunctionCall","src":"120:15:44"},"nodeType":"YulExpressionStatement","src":"120:15:44"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:44"},{"body":{"nodeType":"YulBlock","src":"210:776:44","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:44"},"nodeType":"YulFunctionCall","src":"261:12:44"},"nodeType":"YulExpressionStatement","src":"261:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:44"},"nodeType":"YulFunctionCall","src":"234:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:44"},"nodeType":"YulFunctionCall","src":"230:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:44"},"nodeType":"YulFunctionCall","src":"223:35:44"},"nodeType":"YulIf","src":"220:55:44"},{"nodeType":"YulVariableDeclaration","src":"284:23:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:44"},"nodeType":"YulFunctionCall","src":"294:13:44"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:44","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:44","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:44"},"nodeType":"YulFunctionCall","src":"330:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:44"},"nodeType":"YulFunctionCall","src":"326:18:44"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:44"},"nodeType":"YulFunctionCall","src":"369:18:44"},"nodeType":"YulExpressionStatement","src":"369:18:44"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:44"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:44"},"nodeType":"YulFunctionCall","src":"356:10:44"},"nodeType":"YulIf","src":"353:36:44"},{"nodeType":"YulVariableDeclaration","src":"398:17:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:44"},"nodeType":"YulFunctionCall","src":"408:7:44"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:44"},"nodeType":"YulFunctionCall","src":"438:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:44"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:44"},"nodeType":"YulFunctionCall","src":"498:13:44"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:44"},"nodeType":"YulFunctionCall","src":"494:22:44"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:44","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:44"},"nodeType":"YulFunctionCall","src":"490:31:44"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:44"},"nodeType":"YulFunctionCall","src":"486:40:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:44"},"nodeType":"YulFunctionCall","src":"474:53:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:44"},"nodeType":"YulFunctionCall","src":"588:18:44"},"nodeType":"YulExpressionStatement","src":"588:18:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:44"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:44"},"nodeType":"YulFunctionCall","src":"542:18:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:44"},"nodeType":"YulFunctionCall","src":"562:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:44"},"nodeType":"YulFunctionCall","src":"539:46:44"},"nodeType":"YulIf","src":"536:72:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:44"},"nodeType":"YulFunctionCall","src":"617:22:44"},"nodeType":"YulExpressionStatement","src":"617:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:44"},"nodeType":"YulFunctionCall","src":"648:18:44"},"nodeType":"YulExpressionStatement","src":"648:18:44"},{"nodeType":"YulVariableDeclaration","src":"675:14:44","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:44","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:44"},"nodeType":"YulFunctionCall","src":"737:12:44"},"nodeType":"YulExpressionStatement","src":"737:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:44"},"nodeType":"YulFunctionCall","src":"708:15:44"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:44"},"nodeType":"YulFunctionCall","src":"704:24:44"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:44"},"nodeType":"YulFunctionCall","src":"701:33:44"},"nodeType":"YulIf","src":"698:53:44"},{"nodeType":"YulVariableDeclaration","src":"760:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:44","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:44"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:44"},"nodeType":"YulFunctionCall","src":"850:14:44"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:44"},"nodeType":"YulFunctionCall","src":"846:23:44"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:44"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:44"},"nodeType":"YulFunctionCall","src":"881:14:44"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:44"},"nodeType":"YulFunctionCall","src":"877:23:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:44"},"nodeType":"YulFunctionCall","src":"871:30:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:44"},"nodeType":"YulFunctionCall","src":"839:63:44"},"nodeType":"YulExpressionStatement","src":"839:63:44"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:44"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:44"},"nodeType":"YulFunctionCall","src":"787:9:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:44","statements":[{"nodeType":"YulAssignment","src":"799:15:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:44"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:44"},"nodeType":"YulFunctionCall","src":"804:10:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:44","statements":[]},"src":"779:133:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:44"},"nodeType":"YulFunctionCall","src":"932:15:44"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:44"},"nodeType":"YulFunctionCall","src":"928:24:44"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:44"},"nodeType":"YulFunctionCall","src":"921:35:44"},"nodeType":"YulExpressionStatement","src":"921:35:44"},{"nodeType":"YulAssignment","src":"965:15:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:44"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:44"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:44","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:44","type":""}],"src":"146:840:44"},{"body":{"nodeType":"YulBlock","src":"1109:444:44","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:44"},"nodeType":"YulFunctionCall","src":"1157:12:44"},"nodeType":"YulExpressionStatement","src":"1157:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:44"},"nodeType":"YulFunctionCall","src":"1126:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:44"},"nodeType":"YulFunctionCall","src":"1122:32:44"},"nodeType":"YulIf","src":"1119:52:44"},{"nodeType":"YulVariableDeclaration","src":"1180:30:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:44"},"nodeType":"YulFunctionCall","src":"1194:16:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:44","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:44","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:44"},"nodeType":"YulFunctionCall","src":"1233:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:44"},"nodeType":"YulFunctionCall","src":"1229:18:44"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:44"},"nodeType":"YulFunctionCall","src":"1276:12:44"},"nodeType":"YulExpressionStatement","src":"1276:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:44"},"nodeType":"YulFunctionCall","src":"1259:14:44"},"nodeType":"YulIf","src":"1256:34:44"},{"nodeType":"YulAssignment","src":"1299:71:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:44"},"nodeType":"YulFunctionCall","src":"1338:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:44"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:44"},"nodeType":"YulFunctionCall","src":"1309:61:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:44"},"nodeType":"YulFunctionCall","src":"1401:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:44"},"nodeType":"YulFunctionCall","src":"1395:25:44"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:44"},"nodeType":"YulFunctionCall","src":"1451:12:44"},"nodeType":"YulExpressionStatement","src":"1451:12:44"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:44"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:44"},"nodeType":"YulFunctionCall","src":"1432:16:44"},"nodeType":"YulIf","src":"1429:36:44"},{"nodeType":"YulAssignment","src":"1474:73:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:44"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:44"},"nodeType":"YulFunctionCall","src":"1513:24:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:44"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:44"},"nodeType":"YulFunctionCall","src":"1484:63:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:44"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:44","type":""}],"src":"991:562:44"},{"body":{"nodeType":"YulBlock","src":"1613:325:44","statements":[{"nodeType":"YulAssignment","src":"1623:22:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:44","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:44"},"nodeType":"YulFunctionCall","src":"1633:12:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:44"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:44","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:44"},"nodeType":"YulFunctionCall","src":"1680:12:44"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:44","statements":[{"nodeType":"YulAssignment","src":"1733:27:44","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:44","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:44"},"nodeType":"YulFunctionCall","src":"1743:17:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:44"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:44"},"nodeType":"YulFunctionCall","src":"1704:26:44"},"nodeType":"YulIf","src":"1701:61:44"},{"body":{"nodeType":"YulBlock","src":"1821:111:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:44","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:44","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:44","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:44"},"nodeType":"YulFunctionCall","src":"1845:20:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:44"},"nodeType":"YulFunctionCall","src":"1835:31:44"},"nodeType":"YulExpressionStatement","src":"1835:31:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:44","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:44"},"nodeType":"YulFunctionCall","src":"1879:15:44"},"nodeType":"YulExpressionStatement","src":"1879:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:44"},"nodeType":"YulFunctionCall","src":"1907:15:44"},"nodeType":"YulExpressionStatement","src":"1907:15:44"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:44"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:44","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:44"},"nodeType":"YulFunctionCall","src":"1797:14:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:44"},"nodeType":"YulFunctionCall","src":"1774:38:44"},"nodeType":"YulIf","src":"1771:161:44"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:44","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:44","type":""}],"src":"1558:380:44"},{"body":{"nodeType":"YulBlock","src":"1999:65:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:44","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:44"},"nodeType":"YulFunctionCall","src":"2009:14:44"},"nodeType":"YulExpressionStatement","src":"2009:14:44"},{"nodeType":"YulAssignment","src":"2032:26:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:44","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:44"},"nodeType":"YulFunctionCall","src":"2040:18:44"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:44"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:44","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:44","type":""}],"src":"1943:121:44"},{"body":{"nodeType":"YulBlock","src":"2150:464:44","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:44","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:44","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:44"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:44"},"nodeType":"YulFunctionCall","src":"2221:17:44"},"nodeType":"YulExpressionStatement","src":"2221:17:44"},{"nodeType":"YulVariableDeclaration","src":"2251:31:44","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:44","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:44"},"nodeType":"YulFunctionCall","src":"2263:19:44"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:44","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:44"},"nodeType":"YulFunctionCall","src":"2331:19:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:44"},"nodeType":"YulFunctionCall","src":"2324:27:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:44"},"nodeType":"YulFunctionCall","src":"2314:38:44"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:44","statements":[{"nodeType":"YulAssignment","src":"2391:19:44","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:44"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:44"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:44","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:44"},"nodeType":"YulFunctionCall","src":"2368:20:44"},"nodeType":"YulIf","src":"2365:47:44"},{"nodeType":"YulVariableDeclaration","src":"2425:41:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:44","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:44"},"nodeType":"YulFunctionCall","src":"2452:12:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:44"},"nodeType":"YulFunctionCall","src":"2445:20:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:44"},"nodeType":"YulFunctionCall","src":"2435:31:44"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:44","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:44"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:44","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:44"},"nodeType":"YulFunctionCall","src":"2579:17:44"},"nodeType":"YulExpressionStatement","src":"2579:17:44"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:44"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:44"},"nodeType":"YulFunctionCall","src":"2524:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:44","statements":[{"nodeType":"YulAssignment","src":"2540:22:44","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:44"},"nodeType":"YulFunctionCall","src":"2549:13:44"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:44"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:44","statements":[]},"src":"2516:82:44"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:44","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:44"},"nodeType":"YulFunctionCall","src":"2163:11:44"},"nodeType":"YulIf","src":"2160:448:44"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:44","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:44","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:44","type":""}],"src":"2069:545:44"},{"body":{"nodeType":"YulBlock","src":"2704:81:44","statements":[{"nodeType":"YulAssignment","src":"2714:65:44","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:44"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:44","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:44"},"nodeType":"YulFunctionCall","src":"2743:11:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:44","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:44"},"nodeType":"YulFunctionCall","src":"2756:6:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:44"},"nodeType":"YulFunctionCall","src":"2739:24:44"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:44"},"nodeType":"YulFunctionCall","src":"2735:29:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:44"},"nodeType":"YulFunctionCall","src":"2725:40:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:44","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:44"},"nodeType":"YulFunctionCall","src":"2767:11:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:44"},"nodeType":"YulFunctionCall","src":"2722:57:44"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:44"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:44","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:44","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:44","type":""}],"src":"2619:166:44"},{"body":{"nodeType":"YulBlock","src":"2886:1256:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:44","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:44"},"nodeType":"YulFunctionCall","src":"2910:10:44"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:44"},"nodeType":"YulFunctionCall","src":"2965:18:44"},"nodeType":"YulExpressionStatement","src":"2965:18:44"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:44","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:44"},"nodeType":"YulFunctionCall","src":"2947:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:44"},"nodeType":"YulFunctionCall","src":"2943:18:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:44"},"nodeType":"YulFunctionCall","src":"2932:30:44"},"nodeType":"YulIf","src":"2929:56:44"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:44"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:44"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:44"},"nodeType":"YulFunctionCall","src":"3070:11:44"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:44"},"nodeType":"YulFunctionCall","src":"3044:38:44"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:44"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:44"},"nodeType":"YulFunctionCall","src":"2994:97:44"},"nodeType":"YulExpressionStatement","src":"2994:97:44"},{"nodeType":"YulVariableDeclaration","src":"3100:18:44","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:44","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:44","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:44","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:44","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:44","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:44"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:44"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:44","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:44","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:44"},"nodeType":"YulFunctionCall","src":"3270:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:44"},"nodeType":"YulFunctionCall","src":"3258:20:44"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:44","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:44"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:44"},"nodeType":"YulFunctionCall","src":"3305:35:44"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:44","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:44"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:44"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:44"},"nodeType":"YulFunctionCall","src":"3479:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:44"},"nodeType":"YulFunctionCall","src":"3473:26:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:44"},"nodeType":"YulFunctionCall","src":"3458:42:44"},"nodeType":"YulExpressionStatement","src":"3458:42:44"},{"nodeType":"YulAssignment","src":"3517:24:44","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:44"},"nodeType":"YulFunctionCall","src":"3527:14:44"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:44"}]},{"nodeType":"YulAssignment","src":"3558:40:44","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:44"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:44"},"nodeType":"YulFunctionCall","src":"3571:27:44"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:44"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:44"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:44"},"nodeType":"YulFunctionCall","src":"3384:14:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:44","statements":[{"nodeType":"YulAssignment","src":"3401:24:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:44"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:44"},"nodeType":"YulFunctionCall","src":"3406:19:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:44","statements":[]},"src":"3376:236:44"},{"body":{"nodeType":"YulBlock","src":"3660:166:44","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:44","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:44"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:44"},"nodeType":"YulFunctionCall","src":"3701:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:44"},"nodeType":"YulFunctionCall","src":"3695:26:44"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:44","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:44"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:44"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:44","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:44"},"nodeType":"YulFunctionCall","src":"3780:14:44"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:44","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:44"},"nodeType":"YulFunctionCall","src":"3776:24:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:44","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:44"},"nodeType":"YulFunctionCall","src":"3802:6:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:44"},"nodeType":"YulFunctionCall","src":"3772:37:44"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:44"},"nodeType":"YulFunctionCall","src":"3768:42:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:44"},"nodeType":"YulFunctionCall","src":"3753:58:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:44"},"nodeType":"YulFunctionCall","src":"3738:74:44"},"nodeType":"YulExpressionStatement","src":"3738:74:44"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:44"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:44"},"nodeType":"YulFunctionCall","src":"3628:19:44"},"nodeType":"YulIf","src":"3625:201:44"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:44","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:44"},"nodeType":"YulFunctionCall","src":"3856:14:44"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:44"},"nodeType":"YulFunctionCall","src":"3852:22:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:44"},"nodeType":"YulFunctionCall","src":"3839:36:44"},"nodeType":"YulExpressionStatement","src":"3839:36:44"}]},"nodeType":"YulCase","src":"3222:663:44","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:44","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:44","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:44","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:44","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:44","statements":[{"nodeType":"YulAssignment","src":"3983:35:44","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:44"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:44"},"nodeType":"YulFunctionCall","src":"3998:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:44"},"nodeType":"YulFunctionCall","src":"3992:26:44"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:44"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:44"},"nodeType":"YulIf","src":"3943:89:44"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:44"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:44"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:44"},"nodeType":"YulFunctionCall","src":"4058:67:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:44"},"nodeType":"YulFunctionCall","src":"4045:81:44"},"nodeType":"YulExpressionStatement","src":"4045:81:44"}]},"nodeType":"YulCase","src":"3894:242:44","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:44","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:44"},"nodeType":"YulFunctionCall","src":"3199:14:44"},"nodeType":"YulSwitch","src":"3192:944:44"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:44","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:44","type":""}],"src":"2790:1352:44"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620015b5380380620015b583398101604081905262000034916200011f565b600062000042838262000218565b50600162000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6112c180620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101c3578063b88d4fde146101d6578063c87b56dd146101e9578063e985e9c5146101fc57600080fd5b80636352211e1461018757806370a082311461019a57806395d89b41146101bb57600080fd5b8063095ea7b3116100bd578063095ea7b31461014c57806323b872dd1461016157806342842e0e1461017457600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f2366004610f32565b610238565b60405190151581526020015b60405180910390f35b6101146102d5565b6040516101039190610f9f565b61013461012f366004610fb2565b610367565b6040516001600160a01b039091168152602001610103565b61015f61015a366004610fe7565b61038e565b005b61015f61016f366004611011565b6104c4565b61015f610182366004611011565b61054b565b610134610195366004610fb2565b610566565b6101ad6101a836600461104d565b6105cb565b604051908152602001610103565b610114610665565b61015f6101d1366004611068565b610674565b61015f6101e43660046110ba565b610683565b6101146101f7366004610fb2565b610711565b6100f761020a366004611196565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061029b57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806102cf57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060600080546102e4906111c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610310906111c9565b801561035d5780601f106103325761010080835404028352916020019161035d565b820191906000526020600020905b81548152906001019060200180831161034057829003601f168201915b5050505050905090565b600061037282610785565b506000908152600460205260409020546001600160a01b031690565b600061039982610566565b9050806001600160a01b0316836001600160a01b0316036104275760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806104435750610443813361020a565b6104b55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161041e565b6104bf83836107ec565b505050565b6104ce3382610867565b6105405760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161041e565b6104bf8383836108e6565b6104bf83838360405180602001604052806000815250610683565b6000818152600260205260408120546001600160a01b0316806102cf5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161041e565b60006001600160a01b0382166106495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161041e565b506001600160a01b031660009081526003602052604090205490565b6060600180546102e4906111c9565b61067f338383610aec565b5050565b61068d3383610867565b6106ff5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161041e565b61070b84848484610bba565b50505050565b606061071c82610785565b600061073360408051602081019091526000815290565b90506000815111610753576040518060200160405280600081525061077e565b8061075d84610c43565b60405160200161076e929190611203565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166107e95760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161041e565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061082e82610566565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061087383610566565b9050806001600160a01b0316846001600160a01b031614806108ba57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806108de5750836001600160a01b03166108d384610367565b6001600160a01b0316145b949350505050565b826001600160a01b03166108f982610566565b6001600160a01b03161461095d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161041e565b6001600160a01b0382166109d85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161041e565b826001600160a01b03166109eb82610566565b6001600160a01b031614610a4f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161041e565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610b4d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161041e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610bc58484846108e6565b610bd184848484610ce3565b61070b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161041e565b60606000610c5083610e3a565b600101905060008167ffffffffffffffff811115610c7057610c706110a4565b6040519080825280601f01601f191660200182016040528015610c9a576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ca457509392505050565b60006001600160a01b0384163b15610e2f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d27903390899088908890600401611232565b6020604051808303816000875af1925050508015610d62575060408051601f3d908101601f19168201909252610d5f9181019061126e565b60015b610e15573d808015610d90576040519150601f19603f3d011682016040523d82523d6000602084013e610d95565b606091505b508051600003610e0d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161041e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108de565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e83577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610eaf576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610ecd57662386f26fc10000830492506010015b6305f5e1008310610ee5576305f5e100830492506008015b6127108310610ef957612710830492506004015b60648310610f0b576064830492506002015b600a83106102cf5760010192915050565b6001600160e01b0319811681146107e957600080fd5b600060208284031215610f4457600080fd5b813561077e81610f1c565b60005b83811015610f6a578181015183820152602001610f52565b50506000910152565b60008151808452610f8b816020860160208601610f4f565b601f01601f19169290920160200192915050565b60208152600061077e6020830184610f73565b600060208284031215610fc457600080fd5b5035919050565b80356001600160a01b0381168114610fe257600080fd5b919050565b60008060408385031215610ffa57600080fd5b61100383610fcb565b946020939093013593505050565b60008060006060848603121561102657600080fd5b61102f84610fcb565b925061103d60208501610fcb565b9150604084013590509250925092565b60006020828403121561105f57600080fd5b61077e82610fcb565b6000806040838503121561107b57600080fd5b61108483610fcb565b91506020830135801515811461109957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156110d057600080fd5b6110d985610fcb565b93506110e760208601610fcb565b925060408501359150606085013567ffffffffffffffff8082111561110b57600080fd5b818701915087601f83011261111f57600080fd5b813581811115611131576111316110a4565b604051601f8201601f19908116603f01168101908382118183101715611159576111596110a4565b816040528281528a602084870101111561117257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156111a957600080fd5b6111b283610fcb565b91506111c060208401610fcb565b90509250929050565b600181811c908216806111dd57607f821691505b6020821081036111fd57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351611215818460208801610f4f565b835190830190611229818360208801610f4f565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526112646080830184610f73565b9695505050505050565b60006020828403121561128057600080fd5b815161077e81610f1c56fea264697066735822122065cacf6aebf4b920e4c70f969648bca41bed3a5e1db57403c77431b91264bb3e64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x15B5 CODESIZE SUB DUP1 PUSH3 0x15B5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x12C1 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x238 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x114 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x103 SWAP2 SWAP1 PUSH2 0xF9F JUMP JUMPDEST PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x38E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15F PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x1011 JUMP JUMPDEST PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x1011 JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH2 0x134 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x665 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x674 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x10BA JUMP JUMPDEST PUSH2 0x683 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x711 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x1196 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x29B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x2CF JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x2E4 SWAP1 PUSH2 0x11C9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x310 SWAP1 PUSH2 0x11C9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x332 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x340 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x372 DUP3 PUSH2 0x785 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x399 DUP3 PUSH2 0x566 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x427 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x443 JUMPI POP PUSH2 0x443 DUP2 CALLER PUSH2 0x20A JUMP JUMPDEST PUSH2 0x4B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH2 0x4BF DUP4 DUP4 PUSH2 0x7EC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4CE CALLER DUP3 PUSH2 0x867 JUMP JUMPDEST PUSH2 0x540 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH2 0x4BF DUP4 DUP4 DUP4 PUSH2 0x8E6 JUMP JUMPDEST PUSH2 0x4BF DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x683 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x2CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x2E4 SWAP1 PUSH2 0x11C9 JUMP JUMPDEST PUSH2 0x67F CALLER DUP4 DUP4 PUSH2 0xAEC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x68D CALLER DUP4 PUSH2 0x867 JUMP JUMPDEST PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH2 0x70B DUP5 DUP5 DUP5 DUP5 PUSH2 0xBBA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x71C DUP3 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x733 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x753 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x77E JUMP JUMPDEST DUP1 PUSH2 0x75D DUP5 PUSH2 0xC43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x76E SWAP3 SWAP2 SWAP1 PUSH2 0x1203 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x82E DUP3 PUSH2 0x566 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x873 DUP4 PUSH2 0x566 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x8BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x8DE JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8D3 DUP5 PUSH2 0x367 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8F9 DUP3 PUSH2 0x566 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x95D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9EB DUP3 PUSH2 0x566 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xB4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xBC5 DUP5 DUP5 DUP5 PUSH2 0x8E6 JUMP JUMPDEST PUSH2 0xBD1 DUP5 DUP5 DUP5 DUP5 PUSH2 0xCE3 JUMP JUMPDEST PUSH2 0x70B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xC50 DUP4 PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC70 JUMPI PUSH2 0xC70 PUSH2 0x10A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC9A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xCA4 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xE2F JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xD27 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1232 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD62 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD5F SWAP2 DUP2 ADD SWAP1 PUSH2 0x126E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE15 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD90 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xE0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x8DE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xE83 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xEAF JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xECD JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xEE5 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xEF9 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xF0B JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2CF JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x77E DUP2 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF52 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xF8B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xF4F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x77E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xF73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1003 DUP4 PUSH2 0xFCB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102F DUP5 PUSH2 0xFCB JUMP JUMPDEST SWAP3 POP PUSH2 0x103D PUSH1 0x20 DUP6 ADD PUSH2 0xFCB JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x105F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77E DUP3 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1084 DUP4 PUSH2 0xFCB JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1099 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D9 DUP6 PUSH2 0xFCB JUMP JUMPDEST SWAP4 POP PUSH2 0x10E7 PUSH1 0x20 DUP7 ADD PUSH2 0xFCB JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x110B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x111F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1131 JUMPI PUSH2 0x1131 PUSH2 0x10A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1159 JUMPI PUSH2 0x1159 PUSH2 0x10A4 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11B2 DUP4 PUSH2 0xFCB JUMP JUMPDEST SWAP2 POP PUSH2 0x11C0 PUSH1 0x20 DUP5 ADD PUSH2 0xFCB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x11DD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x11FD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1215 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xF4F JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1229 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xF4F JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1264 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xF73 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x77E DUP2 PUSH2 0xF1C JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xCACF6AEBF4B9 KECCAK256 0xE4 0xC7 0xF SWAP7 SWAP7 BASEFEE 0xBC LOG4 SHL 0xED GASPRICE 0x5E SAR 0xB5 PUSH21 0x3C77431B91264BB3E64736F6C6343000811003300 ","sourceMap":"628:16377:3:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:5;:13;1464:5;1456;:13;:::i;:::-;-1:-1:-1;1479:7:3;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;628:16377;;14:127:44;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:44;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:44;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:44:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:44;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:44;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:44;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:44;;;3992:26;3943:89;-1:-1:-1;;2747:1:44;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:44;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:44;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:44;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:44:o;:::-;628:16377:3;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1223":{"entryPoint":null,"id":1223,"parameterSlots":4,"returnSlots":0},"@_approve_1089":{"entryPoint":2028,"id":1089,"parameterSlots":2,"returnSlots":0},"@_baseURI_526":{"entryPoint":null,"id":526,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1210":{"entryPoint":null,"id":1210,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1197":{"entryPoint":3299,"id":1197,"parameterSlots":4,"returnSlots":1},"@_exists_758":{"entryPoint":null,"id":758,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_792":{"entryPoint":2151,"id":792,"parameterSlots":2,"returnSlots":1},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_ownerOf_740":{"entryPoint":null,"id":740,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1135":{"entryPoint":1925,"id":1135,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_727":{"entryPoint":3002,"id":727,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1121":{"entryPoint":2796,"id":1121,"parameterSlots":3,"returnSlots":0},"@_transfer_1065":{"entryPoint":2278,"id":1065,"parameterSlots":3,"returnSlots":0},"@approve_569":{"entryPoint":910,"id":569,"parameterSlots":2,"returnSlots":0},"@balanceOf_430":{"entryPoint":1483,"id":430,"parameterSlots":1,"returnSlots":1},"@getApproved_587":{"entryPoint":871,"id":587,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_622":{"entryPoint":null,"id":622,"parameterSlots":2,"returnSlots":1},"@isContract_1418":{"entryPoint":null,"id":1418,"parameterSlots":1,"returnSlots":1},"@log10_2720":{"entryPoint":3642,"id":2720,"parameterSlots":1,"returnSlots":1},"@name_468":{"entryPoint":725,"id":468,"parameterSlots":0,"returnSlots":1},"@ownerOf_458":{"entryPoint":1382,"id":458,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_668":{"entryPoint":1355,"id":668,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_698":{"entryPoint":1667,"id":698,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_604":{"entryPoint":1652,"id":604,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2004":{"entryPoint":null,"id":2004,"parameterSlots":1,"returnSlots":1},"@supportsInterface_406":{"entryPoint":568,"id":406,"parameterSlots":1,"returnSlots":1},"@symbol_478":{"entryPoint":1637,"id":478,"parameterSlots":0,"returnSlots":1},"@toString_1811":{"entryPoint":3139,"id":1811,"parameterSlots":1,"returnSlots":1},"@tokenURI_517":{"entryPoint":1809,"id":517,"parameterSlots":1,"returnSlots":1},"@transferFrom_649":{"entryPoint":1220,"id":649,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":4043,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4173,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4502,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":4113,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":4282,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":4200,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4071,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3890,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4718,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4018,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3955,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4611,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4658,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3999,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3919,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4553,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4260,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3868,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10418:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:133:44","statements":[{"body":{"nodeType":"YulBlock","src":"169:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:44"},"nodeType":"YulFunctionCall","src":"171:12:44"},"nodeType":"YulExpressionStatement","src":"171:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"99:66:44","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:44"},"nodeType":"YulFunctionCall","src":"88:78:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:44"},"nodeType":"YulFunctionCall","src":"78:89:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:44"},"nodeType":"YulFunctionCall","src":"71:97:44"},"nodeType":"YulIf","src":"68:117:44"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:44","type":""}],"src":"14:177:44"},{"body":{"nodeType":"YulBlock","src":"265:176:44","statements":[{"body":{"nodeType":"YulBlock","src":"311:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"323:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"313:6:44"},"nodeType":"YulFunctionCall","src":"313:12:44"},"nodeType":"YulExpressionStatement","src":"313:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"286:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"295:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"282:3:44"},"nodeType":"YulFunctionCall","src":"282:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"307:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"278:3:44"},"nodeType":"YulFunctionCall","src":"278:32:44"},"nodeType":"YulIf","src":"275:52:44"},{"nodeType":"YulVariableDeclaration","src":"336:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"349:12:44"},"nodeType":"YulFunctionCall","src":"349:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"340:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"405:5:44"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"381:23:44"},"nodeType":"YulFunctionCall","src":"381:30:44"},"nodeType":"YulExpressionStatement","src":"381:30:44"},{"nodeType":"YulAssignment","src":"420:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"430:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"420:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"231:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"242:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"254:6:44","type":""}],"src":"196:245:44"},{"body":{"nodeType":"YulBlock","src":"541:92:44","statements":[{"nodeType":"YulAssignment","src":"551:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"563:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"574:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"559:3:44"},"nodeType":"YulFunctionCall","src":"559:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"551:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"618:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"611:6:44"},"nodeType":"YulFunctionCall","src":"611:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"604:6:44"},"nodeType":"YulFunctionCall","src":"604:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"586:6:44"},"nodeType":"YulFunctionCall","src":"586:41:44"},"nodeType":"YulExpressionStatement","src":"586:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"510:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"521:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"532:4:44","type":""}],"src":"446:187:44"},{"body":{"nodeType":"YulBlock","src":"704:184:44","statements":[{"nodeType":"YulVariableDeclaration","src":"714:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"723:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"718:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"783:63:44","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"808:3:44"},{"name":"i","nodeType":"YulIdentifier","src":"813:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:44"},"nodeType":"YulFunctionCall","src":"804:11:44"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"827:3:44"},{"name":"i","nodeType":"YulIdentifier","src":"832:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"823:3:44"},"nodeType":"YulFunctionCall","src":"823:11:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"817:5:44"},"nodeType":"YulFunctionCall","src":"817:18:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"797:6:44"},"nodeType":"YulFunctionCall","src":"797:39:44"},"nodeType":"YulExpressionStatement","src":"797:39:44"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"744:1:44"},{"name":"length","nodeType":"YulIdentifier","src":"747:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"741:2:44"},"nodeType":"YulFunctionCall","src":"741:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"755:19:44","statements":[{"nodeType":"YulAssignment","src":"757:15:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"766:1:44"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:44"},"nodeType":"YulFunctionCall","src":"762:10:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"757:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"737:3:44","statements":[]},"src":"733:113:44"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"866:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"871:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:44"},"nodeType":"YulFunctionCall","src":"862:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"880:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:44"},"nodeType":"YulFunctionCall","src":"855:27:44"},"nodeType":"YulExpressionStatement","src":"855:27:44"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"682:3:44","type":""},{"name":"dst","nodeType":"YulTypedName","src":"687:3:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"692:6:44","type":""}],"src":"638:250:44"},{"body":{"nodeType":"YulBlock","src":"943:221:44","statements":[{"nodeType":"YulVariableDeclaration","src":"953:26:44","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"967:5:44"},"nodeType":"YulFunctionCall","src":"967:12:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"957:6:44","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"995:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"1000:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"988:6:44"},"nodeType":"YulFunctionCall","src":"988:19:44"},"nodeType":"YulExpressionStatement","src":"988:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1055:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1062:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:44"},"nodeType":"YulFunctionCall","src":"1051:16:44"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1073:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"1078:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:44"},"nodeType":"YulFunctionCall","src":"1069:14:44"},{"name":"length","nodeType":"YulIdentifier","src":"1085:6:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1016:34:44"},"nodeType":"YulFunctionCall","src":"1016:76:44"},"nodeType":"YulExpressionStatement","src":"1016:76:44"},{"nodeType":"YulAssignment","src":"1101:57:44","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1116:3:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1129:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1125:3:44"},"nodeType":"YulFunctionCall","src":"1125:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1146:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1142:3:44"},"nodeType":"YulFunctionCall","src":"1142:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1121:3:44"},"nodeType":"YulFunctionCall","src":"1121:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1112:3:44"},"nodeType":"YulFunctionCall","src":"1112:39:44"},{"kind":"number","nodeType":"YulLiteral","src":"1153:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1108:3:44"},"nodeType":"YulFunctionCall","src":"1108:50:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1101:3:44"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"920:5:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"927:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"935:3:44","type":""}],"src":"893:271:44"},{"body":{"nodeType":"YulBlock","src":"1290:99:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1307:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1318:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1300:6:44"},"nodeType":"YulFunctionCall","src":"1300:21:44"},"nodeType":"YulExpressionStatement","src":"1300:21:44"},{"nodeType":"YulAssignment","src":"1330:53:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1356:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1368:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1379:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1364:3:44"},"nodeType":"YulFunctionCall","src":"1364:18:44"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1338:17:44"},"nodeType":"YulFunctionCall","src":"1338:45:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1330:4:44"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1259:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1270:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1281:4:44","type":""}],"src":"1169:220:44"},{"body":{"nodeType":"YulBlock","src":"1464:110:44","statements":[{"body":{"nodeType":"YulBlock","src":"1510:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1519:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1522:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1512:6:44"},"nodeType":"YulFunctionCall","src":"1512:12:44"},"nodeType":"YulExpressionStatement","src":"1512:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1485:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1494:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1481:3:44"},"nodeType":"YulFunctionCall","src":"1481:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1506:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1477:3:44"},"nodeType":"YulFunctionCall","src":"1477:32:44"},"nodeType":"YulIf","src":"1474:52:44"},{"nodeType":"YulAssignment","src":"1535:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1558:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1545:12:44"},"nodeType":"YulFunctionCall","src":"1545:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1535:6:44"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1430:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1441:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1453:6:44","type":""}],"src":"1394:180:44"},{"body":{"nodeType":"YulBlock","src":"1680:125:44","statements":[{"nodeType":"YulAssignment","src":"1690:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1702:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1713:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1698:3:44"},"nodeType":"YulFunctionCall","src":"1698:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1690:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1732:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1747:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1755:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:44"},"nodeType":"YulFunctionCall","src":"1743:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1725:6:44"},"nodeType":"YulFunctionCall","src":"1725:74:44"},"nodeType":"YulExpressionStatement","src":"1725:74:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1649:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1660:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1671:4:44","type":""}],"src":"1579:226:44"},{"body":{"nodeType":"YulBlock","src":"1859:147:44","statements":[{"nodeType":"YulAssignment","src":"1869:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1891:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1878:12:44"},"nodeType":"YulFunctionCall","src":"1878:20:44"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1869:5:44"}]},{"body":{"nodeType":"YulBlock","src":"1984:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1993:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1996:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1986:6:44"},"nodeType":"YulFunctionCall","src":"1986:12:44"},"nodeType":"YulExpressionStatement","src":"1986:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1920:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1931:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1938:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1927:3:44"},"nodeType":"YulFunctionCall","src":"1927:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1917:2:44"},"nodeType":"YulFunctionCall","src":"1917:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1910:6:44"},"nodeType":"YulFunctionCall","src":"1910:73:44"},"nodeType":"YulIf","src":"1907:93:44"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1838:6:44","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1849:5:44","type":""}],"src":"1810:196:44"},{"body":{"nodeType":"YulBlock","src":"2098:167:44","statements":[{"body":{"nodeType":"YulBlock","src":"2144:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2153:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2156:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2146:6:44"},"nodeType":"YulFunctionCall","src":"2146:12:44"},"nodeType":"YulExpressionStatement","src":"2146:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2119:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2128:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2115:3:44"},"nodeType":"YulFunctionCall","src":"2115:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2140:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2111:3:44"},"nodeType":"YulFunctionCall","src":"2111:32:44"},"nodeType":"YulIf","src":"2108:52:44"},{"nodeType":"YulAssignment","src":"2169:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2198:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2179:18:44"},"nodeType":"YulFunctionCall","src":"2179:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2169:6:44"}]},{"nodeType":"YulAssignment","src":"2217:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2244:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2255:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2240:3:44"},"nodeType":"YulFunctionCall","src":"2240:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2227:12:44"},"nodeType":"YulFunctionCall","src":"2227:32:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2217:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2056:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2067:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2079:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2087:6:44","type":""}],"src":"2011:254:44"},{"body":{"nodeType":"YulBlock","src":"2374:224:44","statements":[{"body":{"nodeType":"YulBlock","src":"2420:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2429:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2432:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2422:6:44"},"nodeType":"YulFunctionCall","src":"2422:12:44"},"nodeType":"YulExpressionStatement","src":"2422:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2395:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2404:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:44"},"nodeType":"YulFunctionCall","src":"2391:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2416:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2387:3:44"},"nodeType":"YulFunctionCall","src":"2387:32:44"},"nodeType":"YulIf","src":"2384:52:44"},{"nodeType":"YulAssignment","src":"2445:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2474:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2455:18:44"},"nodeType":"YulFunctionCall","src":"2455:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2445:6:44"}]},{"nodeType":"YulAssignment","src":"2493:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2526:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2537:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2522:3:44"},"nodeType":"YulFunctionCall","src":"2522:18:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2503:18:44"},"nodeType":"YulFunctionCall","src":"2503:38:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2493:6:44"}]},{"nodeType":"YulAssignment","src":"2550:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2577:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2588:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2573:3:44"},"nodeType":"YulFunctionCall","src":"2573:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2560:12:44"},"nodeType":"YulFunctionCall","src":"2560:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2550:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2324:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2335:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2347:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2355:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2363:6:44","type":""}],"src":"2270:328:44"},{"body":{"nodeType":"YulBlock","src":"2673:116:44","statements":[{"body":{"nodeType":"YulBlock","src":"2719:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2728:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2731:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2721:6:44"},"nodeType":"YulFunctionCall","src":"2721:12:44"},"nodeType":"YulExpressionStatement","src":"2721:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2694:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2703:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2690:3:44"},"nodeType":"YulFunctionCall","src":"2690:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2715:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2686:3:44"},"nodeType":"YulFunctionCall","src":"2686:32:44"},"nodeType":"YulIf","src":"2683:52:44"},{"nodeType":"YulAssignment","src":"2744:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2773:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2754:18:44"},"nodeType":"YulFunctionCall","src":"2754:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2744:6:44"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2639:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2650:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2662:6:44","type":""}],"src":"2603:186:44"},{"body":{"nodeType":"YulBlock","src":"2895:76:44","statements":[{"nodeType":"YulAssignment","src":"2905:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2917:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2928:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2913:3:44"},"nodeType":"YulFunctionCall","src":"2913:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2905:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2947:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"2958:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2940:6:44"},"nodeType":"YulFunctionCall","src":"2940:25:44"},"nodeType":"YulExpressionStatement","src":"2940:25:44"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2864:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2875:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2886:4:44","type":""}],"src":"2794:177:44"},{"body":{"nodeType":"YulBlock","src":"3060:263:44","statements":[{"body":{"nodeType":"YulBlock","src":"3106:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3115:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3118:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3108:6:44"},"nodeType":"YulFunctionCall","src":"3108:12:44"},"nodeType":"YulExpressionStatement","src":"3108:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3081:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"3090:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3077:3:44"},"nodeType":"YulFunctionCall","src":"3077:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3102:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3073:3:44"},"nodeType":"YulFunctionCall","src":"3073:32:44"},"nodeType":"YulIf","src":"3070:52:44"},{"nodeType":"YulAssignment","src":"3131:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3160:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3141:18:44"},"nodeType":"YulFunctionCall","src":"3141:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3131:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3179:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3209:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3220:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3205:3:44"},"nodeType":"YulFunctionCall","src":"3205:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3192:12:44"},"nodeType":"YulFunctionCall","src":"3192:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3183:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"3277:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3286:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3289:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3279:6:44"},"nodeType":"YulFunctionCall","src":"3279:12:44"},"nodeType":"YulExpressionStatement","src":"3279:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:44"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3267:5:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3260:6:44"},"nodeType":"YulFunctionCall","src":"3260:13:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3253:6:44"},"nodeType":"YulFunctionCall","src":"3253:21:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3243:2:44"},"nodeType":"YulFunctionCall","src":"3243:32:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3236:6:44"},"nodeType":"YulFunctionCall","src":"3236:40:44"},"nodeType":"YulIf","src":"3233:60:44"},{"nodeType":"YulAssignment","src":"3302:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"3312:5:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3302:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3018:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3029:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3041:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3049:6:44","type":""}],"src":"2976:347:44"},{"body":{"nodeType":"YulBlock","src":"3360:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3377:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3380:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3370:6:44"},"nodeType":"YulFunctionCall","src":"3370:88:44"},"nodeType":"YulExpressionStatement","src":"3370:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3474:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3477:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3467:6:44"},"nodeType":"YulFunctionCall","src":"3467:15:44"},"nodeType":"YulExpressionStatement","src":"3467:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3498:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3501:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3491:6:44"},"nodeType":"YulFunctionCall","src":"3491:15:44"},"nodeType":"YulExpressionStatement","src":"3491:15:44"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3328:184:44"},{"body":{"nodeType":"YulBlock","src":"3647:1008:44","statements":[{"body":{"nodeType":"YulBlock","src":"3694:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3703:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3706:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3696:6:44"},"nodeType":"YulFunctionCall","src":"3696:12:44"},"nodeType":"YulExpressionStatement","src":"3696:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3668:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"3677:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3664:3:44"},"nodeType":"YulFunctionCall","src":"3664:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3689:3:44","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3660:3:44"},"nodeType":"YulFunctionCall","src":"3660:33:44"},"nodeType":"YulIf","src":"3657:53:44"},{"nodeType":"YulAssignment","src":"3719:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3748:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3729:18:44"},"nodeType":"YulFunctionCall","src":"3729:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3719:6:44"}]},{"nodeType":"YulAssignment","src":"3767:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3800:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3811:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3796:3:44"},"nodeType":"YulFunctionCall","src":"3796:18:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3777:18:44"},"nodeType":"YulFunctionCall","src":"3777:38:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3767:6:44"}]},{"nodeType":"YulAssignment","src":"3824:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3851:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3862:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3847:3:44"},"nodeType":"YulFunctionCall","src":"3847:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3834:12:44"},"nodeType":"YulFunctionCall","src":"3834:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3824:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3875:46:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3906:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3917:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3902:3:44"},"nodeType":"YulFunctionCall","src":"3902:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3889:12:44"},"nodeType":"YulFunctionCall","src":"3889:32:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3879:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3930:28:44","value":{"kind":"number","nodeType":"YulLiteral","src":"3940:18:44","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3934:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"3985:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3994:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3997:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3987:6:44"},"nodeType":"YulFunctionCall","src":"3987:12:44"},"nodeType":"YulExpressionStatement","src":"3987:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3973:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"3981:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3970:2:44"},"nodeType":"YulFunctionCall","src":"3970:14:44"},"nodeType":"YulIf","src":"3967:34:44"},{"nodeType":"YulVariableDeclaration","src":"4010:32:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"4035:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:44"},"nodeType":"YulFunctionCall","src":"4020:22:44"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4014:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4090:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4099:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4102:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4092:6:44"},"nodeType":"YulFunctionCall","src":"4092:12:44"},"nodeType":"YulExpressionStatement","src":"4092:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4069:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"4073:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4065:3:44"},"nodeType":"YulFunctionCall","src":"4065:13:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4080:7:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4061:3:44"},"nodeType":"YulFunctionCall","src":"4061:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4054:6:44"},"nodeType":"YulFunctionCall","src":"4054:35:44"},"nodeType":"YulIf","src":"4051:55:44"},{"nodeType":"YulVariableDeclaration","src":"4115:26:44","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4138:2:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4125:12:44"},"nodeType":"YulFunctionCall","src":"4125:16:44"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4119:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4164:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4166:16:44"},"nodeType":"YulFunctionCall","src":"4166:18:44"},"nodeType":"YulExpressionStatement","src":"4166:18:44"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4156:2:44"},{"name":"_1","nodeType":"YulIdentifier","src":"4160:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4153:2:44"},"nodeType":"YulFunctionCall","src":"4153:10:44"},"nodeType":"YulIf","src":"4150:36:44"},{"nodeType":"YulVariableDeclaration","src":"4195:17:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4209:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4205:3:44"},"nodeType":"YulFunctionCall","src":"4205:7:44"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4199:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4221:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4241:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4235:5:44"},"nodeType":"YulFunctionCall","src":"4235:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4225:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4253:71:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4275:6:44"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4299:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"4303:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4295:3:44"},"nodeType":"YulFunctionCall","src":"4295:13:44"},{"name":"_4","nodeType":"YulIdentifier","src":"4310:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4291:3:44"},"nodeType":"YulFunctionCall","src":"4291:22:44"},{"kind":"number","nodeType":"YulLiteral","src":"4315:2:44","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4287:3:44"},"nodeType":"YulFunctionCall","src":"4287:31:44"},{"name":"_4","nodeType":"YulIdentifier","src":"4320:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4283:3:44"},"nodeType":"YulFunctionCall","src":"4283:40:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4271:3:44"},"nodeType":"YulFunctionCall","src":"4271:53:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4257:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4383:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4385:16:44"},"nodeType":"YulFunctionCall","src":"4385:18:44"},"nodeType":"YulExpressionStatement","src":"4385:18:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4342:10:44"},{"name":"_1","nodeType":"YulIdentifier","src":"4354:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4339:2:44"},"nodeType":"YulFunctionCall","src":"4339:18:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4362:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4374:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4359:2:44"},"nodeType":"YulFunctionCall","src":"4359:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4336:2:44"},"nodeType":"YulFunctionCall","src":"4336:46:44"},"nodeType":"YulIf","src":"4333:72:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4421:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4425:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4414:6:44"},"nodeType":"YulFunctionCall","src":"4414:22:44"},"nodeType":"YulExpressionStatement","src":"4414:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4452:6:44"},{"name":"_3","nodeType":"YulIdentifier","src":"4460:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4445:6:44"},"nodeType":"YulFunctionCall","src":"4445:18:44"},"nodeType":"YulExpressionStatement","src":"4445:18:44"},{"body":{"nodeType":"YulBlock","src":"4509:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4518:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4521:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4511:6:44"},"nodeType":"YulFunctionCall","src":"4511:12:44"},"nodeType":"YulExpressionStatement","src":"4511:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4486:2:44"},{"name":"_3","nodeType":"YulIdentifier","src":"4490:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4482:3:44"},"nodeType":"YulFunctionCall","src":"4482:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"4495:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4478:3:44"},"nodeType":"YulFunctionCall","src":"4478:20:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4500:7:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4475:2:44"},"nodeType":"YulFunctionCall","src":"4475:33:44"},"nodeType":"YulIf","src":"4472:53:44"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4551:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4559:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4547:3:44"},"nodeType":"YulFunctionCall","src":"4547:15:44"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4568:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"4572:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4564:3:44"},"nodeType":"YulFunctionCall","src":"4564:11:44"},{"name":"_3","nodeType":"YulIdentifier","src":"4577:2:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4534:12:44"},"nodeType":"YulFunctionCall","src":"4534:46:44"},"nodeType":"YulExpressionStatement","src":"4534:46:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4604:6:44"},{"name":"_3","nodeType":"YulIdentifier","src":"4612:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4600:3:44"},"nodeType":"YulFunctionCall","src":"4600:15:44"},{"kind":"number","nodeType":"YulLiteral","src":"4617:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4596:3:44"},"nodeType":"YulFunctionCall","src":"4596:24:44"},{"kind":"number","nodeType":"YulLiteral","src":"4622:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4589:6:44"},"nodeType":"YulFunctionCall","src":"4589:35:44"},"nodeType":"YulExpressionStatement","src":"4589:35:44"},{"nodeType":"YulAssignment","src":"4633:16:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4643:6:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4633:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3589:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3600:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3612:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3620:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3628:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3636:6:44","type":""}],"src":"3517:1138:44"},{"body":{"nodeType":"YulBlock","src":"4747:173:44","statements":[{"body":{"nodeType":"YulBlock","src":"4793:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4802:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4805:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4795:6:44"},"nodeType":"YulFunctionCall","src":"4795:12:44"},"nodeType":"YulExpressionStatement","src":"4795:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4768:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4777:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4764:3:44"},"nodeType":"YulFunctionCall","src":"4764:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4789:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4760:3:44"},"nodeType":"YulFunctionCall","src":"4760:32:44"},"nodeType":"YulIf","src":"4757:52:44"},{"nodeType":"YulAssignment","src":"4818:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4847:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4828:18:44"},"nodeType":"YulFunctionCall","src":"4828:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4818:6:44"}]},{"nodeType":"YulAssignment","src":"4866:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4899:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4910:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4895:3:44"},"nodeType":"YulFunctionCall","src":"4895:18:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4876:18:44"},"nodeType":"YulFunctionCall","src":"4876:38:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4866:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4705:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4716:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4728:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4736:6:44","type":""}],"src":"4660:260:44"},{"body":{"nodeType":"YulBlock","src":"4980:382:44","statements":[{"nodeType":"YulAssignment","src":"4990:22:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5004:1:44","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5007:4:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5000:3:44"},"nodeType":"YulFunctionCall","src":"5000:12:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4990:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"5021:38:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5051:4:44"},{"kind":"number","nodeType":"YulLiteral","src":"5057:1:44","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5047:3:44"},"nodeType":"YulFunctionCall","src":"5047:12:44"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5025:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"5098:31:44","statements":[{"nodeType":"YulAssignment","src":"5100:27:44","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5114:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"5122:4:44","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5110:3:44"},"nodeType":"YulFunctionCall","src":"5110:17:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5100:6:44"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5078:18:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5071:6:44"},"nodeType":"YulFunctionCall","src":"5071:26:44"},"nodeType":"YulIf","src":"5068:61:44"},{"body":{"nodeType":"YulBlock","src":"5188:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5209:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5212:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5202:6:44"},"nodeType":"YulFunctionCall","src":"5202:88:44"},"nodeType":"YulExpressionStatement","src":"5202:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5310:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5313:4:44","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5303:6:44"},"nodeType":"YulFunctionCall","src":"5303:15:44"},"nodeType":"YulExpressionStatement","src":"5303:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5338:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5341:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5331:6:44"},"nodeType":"YulFunctionCall","src":"5331:15:44"},"nodeType":"YulExpressionStatement","src":"5331:15:44"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5144:18:44"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5167:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"5175:2:44","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5164:2:44"},"nodeType":"YulFunctionCall","src":"5164:14:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5141:2:44"},"nodeType":"YulFunctionCall","src":"5141:38:44"},"nodeType":"YulIf","src":"5138:218:44"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4960:4:44","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4969:6:44","type":""}],"src":"4925:437:44"},{"body":{"nodeType":"YulBlock","src":"5541:223:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5558:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5569:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5551:6:44"},"nodeType":"YulFunctionCall","src":"5551:21:44"},"nodeType":"YulExpressionStatement","src":"5551:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5592:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5603:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5588:3:44"},"nodeType":"YulFunctionCall","src":"5588:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"5608:2:44","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5581:6:44"},"nodeType":"YulFunctionCall","src":"5581:30:44"},"nodeType":"YulExpressionStatement","src":"5581:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5631:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5642:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5627:3:44"},"nodeType":"YulFunctionCall","src":"5627:18:44"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5647:34:44","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5620:6:44"},"nodeType":"YulFunctionCall","src":"5620:62:44"},"nodeType":"YulExpressionStatement","src":"5620:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5702:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5713:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5698:3:44"},"nodeType":"YulFunctionCall","src":"5698:18:44"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5718:3:44","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5691:6:44"},"nodeType":"YulFunctionCall","src":"5691:31:44"},"nodeType":"YulExpressionStatement","src":"5691:31:44"},{"nodeType":"YulAssignment","src":"5731:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5743:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5754:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5739:3:44"},"nodeType":"YulFunctionCall","src":"5739:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5731:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5518:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5532:4:44","type":""}],"src":"5367:397:44"},{"body":{"nodeType":"YulBlock","src":"5943:251:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5960:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5971:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5953:6:44"},"nodeType":"YulFunctionCall","src":"5953:21:44"},"nodeType":"YulExpressionStatement","src":"5953:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5994:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6005:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5990:3:44"},"nodeType":"YulFunctionCall","src":"5990:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"6010:2:44","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5983:6:44"},"nodeType":"YulFunctionCall","src":"5983:30:44"},"nodeType":"YulExpressionStatement","src":"5983:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6033:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6044:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6029:3:44"},"nodeType":"YulFunctionCall","src":"6029:18:44"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"6049:34:44","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6022:6:44"},"nodeType":"YulFunctionCall","src":"6022:62:44"},"nodeType":"YulExpressionStatement","src":"6022:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6104:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6115:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6100:3:44"},"nodeType":"YulFunctionCall","src":"6100:18:44"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"6120:31:44","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6093:6:44"},"nodeType":"YulFunctionCall","src":"6093:59:44"},"nodeType":"YulExpressionStatement","src":"6093:59:44"},{"nodeType":"YulAssignment","src":"6161:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6173:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6184:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6169:3:44"},"nodeType":"YulFunctionCall","src":"6169:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6161:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5920:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5934:4:44","type":""}],"src":"5769:425:44"},{"body":{"nodeType":"YulBlock","src":"6373:235:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6390:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6401:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6383:6:44"},"nodeType":"YulFunctionCall","src":"6383:21:44"},"nodeType":"YulExpressionStatement","src":"6383:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6424:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6435:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6420:3:44"},"nodeType":"YulFunctionCall","src":"6420:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"6440:2:44","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6413:6:44"},"nodeType":"YulFunctionCall","src":"6413:30:44"},"nodeType":"YulExpressionStatement","src":"6413:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6463:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6474:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6459:3:44"},"nodeType":"YulFunctionCall","src":"6459:18:44"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6479:34:44","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6452:6:44"},"nodeType":"YulFunctionCall","src":"6452:62:44"},"nodeType":"YulExpressionStatement","src":"6452:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6534:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6545:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6530:3:44"},"nodeType":"YulFunctionCall","src":"6530:18:44"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6550:15:44","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6523:6:44"},"nodeType":"YulFunctionCall","src":"6523:43:44"},"nodeType":"YulExpressionStatement","src":"6523:43:44"},{"nodeType":"YulAssignment","src":"6575:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6587:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6598:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6583:3:44"},"nodeType":"YulFunctionCall","src":"6583:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6575:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6350:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6364:4:44","type":""}],"src":"6199:409:44"},{"body":{"nodeType":"YulBlock","src":"6787:174:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6804:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6815:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6797:6:44"},"nodeType":"YulFunctionCall","src":"6797:21:44"},"nodeType":"YulExpressionStatement","src":"6797:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6838:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6849:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6834:3:44"},"nodeType":"YulFunctionCall","src":"6834:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"6854:2:44","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6827:6:44"},"nodeType":"YulFunctionCall","src":"6827:30:44"},"nodeType":"YulExpressionStatement","src":"6827:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6877:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6888:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6873:3:44"},"nodeType":"YulFunctionCall","src":"6873:18:44"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"6893:26:44","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6866:6:44"},"nodeType":"YulFunctionCall","src":"6866:54:44"},"nodeType":"YulExpressionStatement","src":"6866:54:44"},{"nodeType":"YulAssignment","src":"6929:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6941:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6952:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6937:3:44"},"nodeType":"YulFunctionCall","src":"6937:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6929:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6764:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6778:4:44","type":""}],"src":"6613:348:44"},{"body":{"nodeType":"YulBlock","src":"7140:231:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7157:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7168:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7150:6:44"},"nodeType":"YulFunctionCall","src":"7150:21:44"},"nodeType":"YulExpressionStatement","src":"7150:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7191:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7202:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7187:3:44"},"nodeType":"YulFunctionCall","src":"7187:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"7207:2:44","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7180:6:44"},"nodeType":"YulFunctionCall","src":"7180:30:44"},"nodeType":"YulExpressionStatement","src":"7180:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7230:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7241:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7226:3:44"},"nodeType":"YulFunctionCall","src":"7226:18:44"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7246:34:44","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7219:6:44"},"nodeType":"YulFunctionCall","src":"7219:62:44"},"nodeType":"YulExpressionStatement","src":"7219:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7301:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7312:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7297:3:44"},"nodeType":"YulFunctionCall","src":"7297:18:44"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7317:11:44","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7290:6:44"},"nodeType":"YulFunctionCall","src":"7290:39:44"},"nodeType":"YulExpressionStatement","src":"7290:39:44"},{"nodeType":"YulAssignment","src":"7338:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7350:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7361:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7346:3:44"},"nodeType":"YulFunctionCall","src":"7346:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7338:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7117:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7131:4:44","type":""}],"src":"6966:405:44"},{"body":{"nodeType":"YulBlock","src":"7563:309:44","statements":[{"nodeType":"YulVariableDeclaration","src":"7573:27:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7593:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7587:5:44"},"nodeType":"YulFunctionCall","src":"7587:13:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7577:6:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7648:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"7656:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7644:3:44"},"nodeType":"YulFunctionCall","src":"7644:17:44"},{"name":"pos","nodeType":"YulIdentifier","src":"7663:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"7668:6:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7609:34:44"},"nodeType":"YulFunctionCall","src":"7609:66:44"},"nodeType":"YulExpressionStatement","src":"7609:66:44"},{"nodeType":"YulVariableDeclaration","src":"7684:29:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7701:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"7706:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7697:3:44"},"nodeType":"YulFunctionCall","src":"7697:16:44"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7688:5:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7722:29:44","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7744:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7738:5:44"},"nodeType":"YulFunctionCall","src":"7738:13:44"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7726:8:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7799:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"7807:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7795:3:44"},"nodeType":"YulFunctionCall","src":"7795:17:44"},{"name":"end_1","nodeType":"YulIdentifier","src":"7814:5:44"},{"name":"length_1","nodeType":"YulIdentifier","src":"7821:8:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7760:34:44"},"nodeType":"YulFunctionCall","src":"7760:70:44"},"nodeType":"YulExpressionStatement","src":"7760:70:44"},{"nodeType":"YulAssignment","src":"7839:27:44","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7850:5:44"},{"name":"length_1","nodeType":"YulIdentifier","src":"7857:8:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7846:3:44"},"nodeType":"YulFunctionCall","src":"7846:20:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7839:3:44"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7531:3:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7536:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7544:6:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7555:3:44","type":""}],"src":"7376:496:44"},{"body":{"nodeType":"YulBlock","src":"8051:227:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8068:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8079:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8061:6:44"},"nodeType":"YulFunctionCall","src":"8061:21:44"},"nodeType":"YulExpressionStatement","src":"8061:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8102:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8113:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8098:3:44"},"nodeType":"YulFunctionCall","src":"8098:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"8118:2:44","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8091:6:44"},"nodeType":"YulFunctionCall","src":"8091:30:44"},"nodeType":"YulExpressionStatement","src":"8091:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8141:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8152:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8137:3:44"},"nodeType":"YulFunctionCall","src":"8137:18:44"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"8157:34:44","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8130:6:44"},"nodeType":"YulFunctionCall","src":"8130:62:44"},"nodeType":"YulExpressionStatement","src":"8130:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8212:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8223:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8208:3:44"},"nodeType":"YulFunctionCall","src":"8208:18:44"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"8228:7:44","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8201:6:44"},"nodeType":"YulFunctionCall","src":"8201:35:44"},"nodeType":"YulExpressionStatement","src":"8201:35:44"},{"nodeType":"YulAssignment","src":"8245:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8257:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8268:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8253:3:44"},"nodeType":"YulFunctionCall","src":"8253:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8245:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8028:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8042:4:44","type":""}],"src":"7877:401:44"},{"body":{"nodeType":"YulBlock","src":"8457:226:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8474:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8485:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8467:6:44"},"nodeType":"YulFunctionCall","src":"8467:21:44"},"nodeType":"YulExpressionStatement","src":"8467:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8508:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8519:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:44"},"nodeType":"YulFunctionCall","src":"8504:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"8524:2:44","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8497:6:44"},"nodeType":"YulFunctionCall","src":"8497:30:44"},"nodeType":"YulExpressionStatement","src":"8497:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8547:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8558:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8543:3:44"},"nodeType":"YulFunctionCall","src":"8543:18:44"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8563:34:44","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8536:6:44"},"nodeType":"YulFunctionCall","src":"8536:62:44"},"nodeType":"YulExpressionStatement","src":"8536:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8618:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8629:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8614:3:44"},"nodeType":"YulFunctionCall","src":"8614:18:44"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8634:6:44","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8607:6:44"},"nodeType":"YulFunctionCall","src":"8607:34:44"},"nodeType":"YulExpressionStatement","src":"8607:34:44"},{"nodeType":"YulAssignment","src":"8650:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8662:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8673:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8658:3:44"},"nodeType":"YulFunctionCall","src":"8658:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8650:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8434:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8448:4:44","type":""}],"src":"8283:400:44"},{"body":{"nodeType":"YulBlock","src":"8862:175:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8879:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8890:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8872:6:44"},"nodeType":"YulFunctionCall","src":"8872:21:44"},"nodeType":"YulExpressionStatement","src":"8872:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8913:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8924:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8909:3:44"},"nodeType":"YulFunctionCall","src":"8909:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"8929:2:44","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8902:6:44"},"nodeType":"YulFunctionCall","src":"8902:30:44"},"nodeType":"YulExpressionStatement","src":"8902:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8952:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8963:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8948:3:44"},"nodeType":"YulFunctionCall","src":"8948:18:44"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"8968:27:44","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8941:6:44"},"nodeType":"YulFunctionCall","src":"8941:55:44"},"nodeType":"YulExpressionStatement","src":"8941:55:44"},{"nodeType":"YulAssignment","src":"9005:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9017:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9028:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9013:3:44"},"nodeType":"YulFunctionCall","src":"9013:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9005:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8839:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8853:4:44","type":""}],"src":"8688:349:44"},{"body":{"nodeType":"YulBlock","src":"9216:240:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9233:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9244:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9226:6:44"},"nodeType":"YulFunctionCall","src":"9226:21:44"},"nodeType":"YulExpressionStatement","src":"9226:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9267:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9278:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9263:3:44"},"nodeType":"YulFunctionCall","src":"9263:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"9283:2:44","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9256:6:44"},"nodeType":"YulFunctionCall","src":"9256:30:44"},"nodeType":"YulExpressionStatement","src":"9256:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9306:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9317:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9302:3:44"},"nodeType":"YulFunctionCall","src":"9302:18:44"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9322:34:44","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9295:6:44"},"nodeType":"YulFunctionCall","src":"9295:62:44"},"nodeType":"YulExpressionStatement","src":"9295:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9377:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9388:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9373:3:44"},"nodeType":"YulFunctionCall","src":"9373:18:44"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9393:20:44","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9366:6:44"},"nodeType":"YulFunctionCall","src":"9366:48:44"},"nodeType":"YulExpressionStatement","src":"9366:48:44"},{"nodeType":"YulAssignment","src":"9423:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9435:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9446:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9431:3:44"},"nodeType":"YulFunctionCall","src":"9431:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9423:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9193:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9207:4:44","type":""}],"src":"9042:414:44"},{"body":{"nodeType":"YulBlock","src":"9493:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9510:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9513:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9503:6:44"},"nodeType":"YulFunctionCall","src":"9503:88:44"},"nodeType":"YulExpressionStatement","src":"9503:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9607:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9610:4:44","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9600:6:44"},"nodeType":"YulFunctionCall","src":"9600:15:44"},"nodeType":"YulExpressionStatement","src":"9600:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9631:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9634:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9624:6:44"},"nodeType":"YulFunctionCall","src":"9624:15:44"},"nodeType":"YulExpressionStatement","src":"9624:15:44"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9461:184:44"},{"body":{"nodeType":"YulBlock","src":"9853:309:44","statements":[{"nodeType":"YulVariableDeclaration","src":"9863:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"9873:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9867:2:44","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9931:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9946:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"9954:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9942:3:44"},"nodeType":"YulFunctionCall","src":"9942:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9924:6:44"},"nodeType":"YulFunctionCall","src":"9924:34:44"},"nodeType":"YulExpressionStatement","src":"9924:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9978:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9989:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9974:3:44"},"nodeType":"YulFunctionCall","src":"9974:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9998:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"10006:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9994:3:44"},"nodeType":"YulFunctionCall","src":"9994:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9967:6:44"},"nodeType":"YulFunctionCall","src":"9967:43:44"},"nodeType":"YulExpressionStatement","src":"9967:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10030:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10041:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10026:3:44"},"nodeType":"YulFunctionCall","src":"10026:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"10046:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10019:6:44"},"nodeType":"YulFunctionCall","src":"10019:34:44"},"nodeType":"YulExpressionStatement","src":"10019:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10073:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10084:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10069:3:44"},"nodeType":"YulFunctionCall","src":"10069:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"10089:3:44","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10062:6:44"},"nodeType":"YulFunctionCall","src":"10062:31:44"},"nodeType":"YulExpressionStatement","src":"10062:31:44"},{"nodeType":"YulAssignment","src":"10102:54:44","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10128:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10140:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10151:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10136:3:44"},"nodeType":"YulFunctionCall","src":"10136:19:44"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10110:17:44"},"nodeType":"YulFunctionCall","src":"10110:46:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10102:4:44"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9798:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9809:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9817:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9825:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9833:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9844:4:44","type":""}],"src":"9650:512:44"},{"body":{"nodeType":"YulBlock","src":"10247:169:44","statements":[{"body":{"nodeType":"YulBlock","src":"10293:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10302:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10305:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10295:6:44"},"nodeType":"YulFunctionCall","src":"10295:12:44"},"nodeType":"YulExpressionStatement","src":"10295:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10268:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"10277:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10264:3:44"},"nodeType":"YulFunctionCall","src":"10264:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"10289:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10260:3:44"},"nodeType":"YulFunctionCall","src":"10260:32:44"},"nodeType":"YulIf","src":"10257:52:44"},{"nodeType":"YulVariableDeclaration","src":"10318:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10337:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10331:5:44"},"nodeType":"YulFunctionCall","src":"10331:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10322:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10380:5:44"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10356:23:44"},"nodeType":"YulFunctionCall","src":"10356:30:44"},"nodeType":"YulExpressionStatement","src":"10356:30:44"},{"nodeType":"YulAssignment","src":"10395:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"10405:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10395:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10213:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10224:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10236:6:44","type":""}],"src":"10167:249:44"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101c3578063b88d4fde146101d6578063c87b56dd146101e9578063e985e9c5146101fc57600080fd5b80636352211e1461018757806370a082311461019a57806395d89b41146101bb57600080fd5b8063095ea7b3116100bd578063095ea7b31461014c57806323b872dd1461016157806342842e0e1461017457600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f2366004610f32565b610238565b60405190151581526020015b60405180910390f35b6101146102d5565b6040516101039190610f9f565b61013461012f366004610fb2565b610367565b6040516001600160a01b039091168152602001610103565b61015f61015a366004610fe7565b61038e565b005b61015f61016f366004611011565b6104c4565b61015f610182366004611011565b61054b565b610134610195366004610fb2565b610566565b6101ad6101a836600461104d565b6105cb565b604051908152602001610103565b610114610665565b61015f6101d1366004611068565b610674565b61015f6101e43660046110ba565b610683565b6101146101f7366004610fb2565b610711565b6100f761020a366004611196565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061029b57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806102cf57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060600080546102e4906111c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610310906111c9565b801561035d5780601f106103325761010080835404028352916020019161035d565b820191906000526020600020905b81548152906001019060200180831161034057829003601f168201915b5050505050905090565b600061037282610785565b506000908152600460205260409020546001600160a01b031690565b600061039982610566565b9050806001600160a01b0316836001600160a01b0316036104275760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806104435750610443813361020a565b6104b55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161041e565b6104bf83836107ec565b505050565b6104ce3382610867565b6105405760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161041e565b6104bf8383836108e6565b6104bf83838360405180602001604052806000815250610683565b6000818152600260205260408120546001600160a01b0316806102cf5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161041e565b60006001600160a01b0382166106495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161041e565b506001600160a01b031660009081526003602052604090205490565b6060600180546102e4906111c9565b61067f338383610aec565b5050565b61068d3383610867565b6106ff5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161041e565b61070b84848484610bba565b50505050565b606061071c82610785565b600061073360408051602081019091526000815290565b90506000815111610753576040518060200160405280600081525061077e565b8061075d84610c43565b60405160200161076e929190611203565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166107e95760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161041e565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061082e82610566565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061087383610566565b9050806001600160a01b0316846001600160a01b031614806108ba57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806108de5750836001600160a01b03166108d384610367565b6001600160a01b0316145b949350505050565b826001600160a01b03166108f982610566565b6001600160a01b03161461095d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161041e565b6001600160a01b0382166109d85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161041e565b826001600160a01b03166109eb82610566565b6001600160a01b031614610a4f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161041e565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610b4d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161041e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610bc58484846108e6565b610bd184848484610ce3565b61070b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161041e565b60606000610c5083610e3a565b600101905060008167ffffffffffffffff811115610c7057610c706110a4565b6040519080825280601f01601f191660200182016040528015610c9a576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ca457509392505050565b60006001600160a01b0384163b15610e2f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d27903390899088908890600401611232565b6020604051808303816000875af1925050508015610d62575060408051601f3d908101601f19168201909252610d5f9181019061126e565b60015b610e15573d808015610d90576040519150601f19603f3d011682016040523d82523d6000602084013e610d95565b606091505b508051600003610e0d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161041e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108de565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e83577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610eaf576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610ecd57662386f26fc10000830492506010015b6305f5e1008310610ee5576305f5e100830492506008015b6127108310610ef957612710830492506004015b60648310610f0b576064830492506002015b600a83106102cf5760010192915050565b6001600160e01b0319811681146107e957600080fd5b600060208284031215610f4457600080fd5b813561077e81610f1c565b60005b83811015610f6a578181015183820152602001610f52565b50506000910152565b60008151808452610f8b816020860160208601610f4f565b601f01601f19169290920160200192915050565b60208152600061077e6020830184610f73565b600060208284031215610fc457600080fd5b5035919050565b80356001600160a01b0381168114610fe257600080fd5b919050565b60008060408385031215610ffa57600080fd5b61100383610fcb565b946020939093013593505050565b60008060006060848603121561102657600080fd5b61102f84610fcb565b925061103d60208501610fcb565b9150604084013590509250925092565b60006020828403121561105f57600080fd5b61077e82610fcb565b6000806040838503121561107b57600080fd5b61108483610fcb565b91506020830135801515811461109957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156110d057600080fd5b6110d985610fcb565b93506110e760208601610fcb565b925060408501359150606085013567ffffffffffffffff8082111561110b57600080fd5b818701915087601f83011261111f57600080fd5b813581811115611131576111316110a4565b604051601f8201601f19908116603f01168101908382118183101715611159576111596110a4565b816040528281528a602084870101111561117257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156111a957600080fd5b6111b283610fcb565b91506111c060208401610fcb565b90509250929050565b600181811c908216806111dd57607f821691505b6020821081036111fd57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351611215818460208801610f4f565b835190830190611229818360208801610f4f565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526112646080830184610f73565b9695505050505050565b60006020828403121561128057600080fd5b815161077e81610f1c56fea264697066735822122065cacf6aebf4b920e4c70f969648bca41bed3a5e1db57403c77431b91264bb3e64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x238 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x114 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x103 SWAP2 SWAP1 PUSH2 0xF9F JUMP JUMPDEST PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x38E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15F PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x1011 JUMP JUMPDEST PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x1011 JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH2 0x134 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x665 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x674 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x10BA JUMP JUMPDEST PUSH2 0x683 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x711 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x1196 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x29B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x2CF JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x2E4 SWAP1 PUSH2 0x11C9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x310 SWAP1 PUSH2 0x11C9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x332 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x340 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x372 DUP3 PUSH2 0x785 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x399 DUP3 PUSH2 0x566 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x427 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x443 JUMPI POP PUSH2 0x443 DUP2 CALLER PUSH2 0x20A JUMP JUMPDEST PUSH2 0x4B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH2 0x4BF DUP4 DUP4 PUSH2 0x7EC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4CE CALLER DUP3 PUSH2 0x867 JUMP JUMPDEST PUSH2 0x540 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH2 0x4BF DUP4 DUP4 DUP4 PUSH2 0x8E6 JUMP JUMPDEST PUSH2 0x4BF DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x683 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x2CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x2E4 SWAP1 PUSH2 0x11C9 JUMP JUMPDEST PUSH2 0x67F CALLER DUP4 DUP4 PUSH2 0xAEC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x68D CALLER DUP4 PUSH2 0x867 JUMP JUMPDEST PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH2 0x70B DUP5 DUP5 DUP5 DUP5 PUSH2 0xBBA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x71C DUP3 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x733 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x753 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x77E JUMP JUMPDEST DUP1 PUSH2 0x75D DUP5 PUSH2 0xC43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x76E SWAP3 SWAP2 SWAP1 PUSH2 0x1203 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x82E DUP3 PUSH2 0x566 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x873 DUP4 PUSH2 0x566 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x8BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x8DE JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8D3 DUP5 PUSH2 0x367 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8F9 DUP3 PUSH2 0x566 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x95D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9EB DUP3 PUSH2 0x566 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xB4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xBC5 DUP5 DUP5 DUP5 PUSH2 0x8E6 JUMP JUMPDEST PUSH2 0xBD1 DUP5 DUP5 DUP5 DUP5 PUSH2 0xCE3 JUMP JUMPDEST PUSH2 0x70B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xC50 DUP4 PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC70 JUMPI PUSH2 0xC70 PUSH2 0x10A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC9A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xCA4 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xE2F JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xD27 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1232 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD62 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD5F SWAP2 DUP2 ADD SWAP1 PUSH2 0x126E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE15 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD90 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xE0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x8DE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xE83 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xEAF JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xECD JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xEE5 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xEF9 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xF0B JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2CF JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x77E DUP2 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF52 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xF8B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xF4F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x77E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xF73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1003 DUP4 PUSH2 0xFCB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102F DUP5 PUSH2 0xFCB JUMP JUMPDEST SWAP3 POP PUSH2 0x103D PUSH1 0x20 DUP6 ADD PUSH2 0xFCB JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x105F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77E DUP3 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1084 DUP4 PUSH2 0xFCB JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1099 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D9 DUP6 PUSH2 0xFCB JUMP JUMPDEST SWAP4 POP PUSH2 0x10E7 PUSH1 0x20 DUP7 ADD PUSH2 0xFCB JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x110B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x111F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1131 JUMPI PUSH2 0x1131 PUSH2 0x10A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1159 JUMPI PUSH2 0x1159 PUSH2 0x10A4 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11B2 DUP4 PUSH2 0xFCB JUMP JUMPDEST SWAP2 POP PUSH2 0x11C0 PUSH1 0x20 DUP5 ADD PUSH2 0xFCB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x11DD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x11FD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1215 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xF4F JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1229 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xF4F JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1264 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xF73 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x77E DUP2 PUSH2 0xF1C JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xCACF6AEBF4B9 KECCAK256 0xE4 0xC7 0xF SWAP7 SWAP7 BASEFEE 0xBC LOG4 SHL 0xED GASPRICE 0x5E SAR 0xB5 PUSH21 0x3C77431B91264BB3E64736F6C6343000811003300 ","sourceMap":"628:16377:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;:::i;:::-;;:::i;:::-;;;611:14:44;;604:22;586:41;;574:2;559:18;1570:300:3;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1743:55:44;;;1725:74;;1713:2;1698:18;3935:167:3;1579:226:44;3468:406:3;;;;;;:::i;:::-;;:::i;:::-;;4612:296;;;;;;:::i;:::-;;:::i;4974:149::-;;;;;;:::i;:::-;;:::i;2190:219::-;;;;;;:::i;:::-;;:::i;1929:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2940:25:44;;;2928:2;2913:18;1929:204:3;2794:177:44;2633:102:3;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;5189:276::-;;;;;;:::i;:::-;;:::i;2801:::-;;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:3;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;1570:300;1672:4;-1:-1:-1;;;;;;1707:40:3;;1722:25;1707:40;;:104;;-1:-1:-1;;;;;;;1763:48:3;;1778:33;1763:48;1707:104;:156;;;-1:-1:-1;952:25:10;-1:-1:-1;;;;;;937:40:10;;;1827:36:3;1688:175;1570:300;-1:-1:-1;;1570:300:3:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:3;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:3;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:3;:2;-1:-1:-1;;;;;3605:11:3;;3597:57;;;;-1:-1:-1;;;3597:57:3;;5569:2:44;3597:57:3;;;5551:21:44;5608:2;5588:18;;;5581:30;5647:34;5627:18;;;5620:62;5718:3;5698:18;;;5691:31;5739:19;;3597:57:3;;;;;;;;;719:10:8;-1:-1:-1;;;;;3686:21:3;;;;:62;;-1:-1:-1;3711:37:3;3728:5;719:10:8;4388:162:3;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:3;;5971:2:44;3665:170:3;;;5953:21:44;6010:2;5990:18;;;5983:30;6049:34;6029:18;;;6022:62;6120:31;6100:18;;;6093:59;6169:19;;3665:170:3;5769:425:44;3665:170:3;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:296::-;4771:41;719:10:8;4804:7:3;4771:18;:41::i;:::-;4763:99;;;;-1:-1:-1;;;4763:99:3;;6401:2:44;4763:99:3;;;6383:21:44;6440:2;6420:18;;;6413:30;6479:34;6459:18;;;6452:62;6550:15;6530:18;;;6523:43;6583:19;;4763:99:3;6199:409:44;4763:99:3;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;4974:149::-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;2190:219::-;2262:7;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:3;;2324:56;;;;-1:-1:-1;;;2324:56:3;;6815:2:44;2324:56:3;;;6797:21:44;6854:2;6834:18;;;6827:30;6893:26;6873:18;;;6866:54;6937:18;;2324:56:3;6613:348:44;1929:204:3;2001:7;-1:-1:-1;;;;;2028:19:3;;2020:73;;;;-1:-1:-1;;;2020:73:3;;7168:2:44;2020:73:3;;;7150:21:44;7207:2;7187:18;;;7180:30;7246:34;7226:18;;;7219:62;7317:11;7297:18;;;7290:39;7346:19;;2020:73:3;6966:405:44;2020:73:3;-1:-1:-1;;;;;;2110:16:3;;;;;:9;:16;;;;;;;1929:204::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:8;4296:8:3;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;719:10:8;5352:7:3;5319:18;:41::i;:::-;5311:99;;;;-1:-1:-1;;;5311:99:3;;6401:2:44;5311:99:3;;;6383:21:44;6440:2;6420:18;;;6413:30;6479:34;6459:18;;;6452:62;6550:15;6530:18;;;6523:43;6583:19;;5311:99:3;6199:409:44;5311:99:3;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;2801:::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:3;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:3:o;13240:133::-;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:3;13313:53;;;;-1:-1:-1;;;13313:53:3;;6815:2:44;13313:53:3;;;6797:21:44;6854:2;6834:18;;;6827:30;6893:26;6873:18;;;6866:54;6937:18;;13313:53:3;6613:348:44;13313:53:3;13240:133;:::o;12572:171::-;12646:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;12646:29:3;-1:-1:-1;;;;;12646:29:3;;;;;;;;:24;;12699:23;12646:24;12699:14;:23::i;:::-;-1:-1:-1;;;;;12690:46:3;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;-1:-1:-1;;;;;7570:16:3;:7;-1:-1:-1;;;;;7570:16:3;;:52;;;-1:-1:-1;;;;;;4508:25:3;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7590:32;7570:87;;;;7650:7;-1:-1:-1;;;;;7626:31:3;:20;7638:7;7626:11;:20::i;:::-;-1:-1:-1;;;;;7626:31:3;;7570:87;7562:96;7404:261;-1:-1:-1;;;;7404:261:3:o;11257:1203::-;11381:4;-1:-1:-1;;;;;11354:31:3;:23;11369:7;11354:14;:23::i;:::-;-1:-1:-1;;;;;11354:31:3;;11346:81;;;;-1:-1:-1;;;11346:81:3;;8079:2:44;11346:81:3;;;8061:21:44;8118:2;8098:18;;;8091:30;8157:34;8137:18;;;8130:62;-1:-1:-1;;;8208:18:44;;;8201:35;8253:19;;11346:81:3;7877:401:44;11346:81:3;-1:-1:-1;;;;;11445:16:3;;11437:65;;;;-1:-1:-1;;;11437:65:3;;8485:2:44;11437:65:3;;;8467:21:44;8524:2;8504:18;;;8497:30;8563:34;8543:18;;;8536:62;8634:6;8614:18;;;8607:34;8658:19;;11437:65:3;8283:400:44;11437:65:3;11682:4;-1:-1:-1;;;;;11655:31:3;:23;11670:7;11655:14;:23::i;:::-;-1:-1:-1;;;;;11655:31:3;;11647:81;;;;-1:-1:-1;;;11647:81:3;;8079:2:44;11647:81:3;;;8061:21:44;8118:2;8098:18;;;8091:30;8157:34;8137:18;;;8130:62;-1:-1:-1;;;8208:18:44;;;8201:35;8253:19;;11647:81:3;7877:401:44;11647:81:3;11797:24;;;;:15;:24;;;;;;;;11790:31;;-1:-1:-1;;11790:31:3;;;;;;-1:-1:-1;;;;;12265:15:3;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12265:20:3;;;12299:13;;;;;;;;;:18;;11790:31;12299:18;;;12337:16;;;:7;:16;;;;;;:21;;;;;;;;;;12374:27;;11813:7;;12374:27;;;3538:336;3468:406;;:::o;12879:277::-;12999:8;-1:-1:-1;;;;;12990:17:3;:5;-1:-1:-1;;;;;12990:17:3;;12982:55;;;;-1:-1:-1;;;12982:55:3;;8890:2:44;12982:55:3;;;8872:21:44;8929:2;8909:18;;;8902:30;8968:27;8948:18;;;8941:55;9013:18;;12982:55:3;8688:349:44;12982:55:3;-1:-1:-1;;;;;13047:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13047:46:3;;;;;;;;;;13108:41;;586::44;;;13108::3;;559:18:44;13108:41:3;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;-1:-1:-1;;;6476:110:3;;9244:2:44;6476:110:3;;;9226:21:44;9283:2;9263:18;;;9256:30;9322:34;9302:18;;;9295:62;9393:20;9373:18;;;9366:48;9431:19;;6476:110:3;9042:414:44;447:696:9;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:9;-1:-1:-1;604:41:9;-1:-1:-1;765:28:9;;;781:2;765:28;820:280;-1:-1:-1;;851:5:9;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:9;820:280;1064:21;-1:-1:-1;1120:6:9;447:696;-1:-1:-1;;;447:696:9:o;13925:831:3:-;14074:4;-1:-1:-1;;;;;14094:13:3;;1702:19:7;:23;14090:660:3;;14129:71;;-1:-1:-1;;;14129:71:3;;-1:-1:-1;;;;;14129:36:3;;;;;:71;;719:10:8;;14180:4:3;;14186:7;;14195:4;;14129:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14129:71:3;;;;;;;;-1:-1:-1;;14129:71:3;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14367:6;:13;14384:1;14367:18;14363:321;;14409:60;;-1:-1:-1;;;14409:60:3;;9244:2:44;14409:60:3;;;9226:21:44;9283:2;9263:18;;;9256:30;9322:34;9302:18;;;9295:62;9393:20;9373:18;;;9366:48;9431:19;;14409:60:3;9042:414:44;14363:321:3;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;-1:-1:-1;;;;;;14250:51:3;-1:-1:-1;;;14250:51:3;;-1:-1:-1;14243:58:3;;14090:660;-1:-1:-1;14735:4:3;13925:831;;;;;;:::o;10139:916:12:-;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:12;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:12;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:12;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:12;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:12;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:12;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:12:o;14:177:44:-;-1:-1:-1;;;;;;92:5:44;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:44;862:16;;855:27;638:250::o;893:271::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1146:2;1125:15;-1:-1:-1;;1121:29:44;1112:39;;;;1153:4;1108:50;;893:271;-1:-1:-1;;893:271:44:o;1169:220::-;1318:2;1307:9;1300:21;1281:4;1338:45;1379:2;1368:9;1364:18;1356:6;1338:45;:::i;1394:180::-;1453:6;1506:2;1494:9;1485:7;1481:23;1477:32;1474:52;;;1522:1;1519;1512:12;1474:52;-1:-1:-1;1545:23:44;;1394:180;-1:-1:-1;1394:180:44:o;1810:196::-;1878:20;;-1:-1:-1;;;;;1927:54:44;;1917:65;;1907:93;;1996:1;1993;1986:12;1907:93;1810:196;;;:::o;2011:254::-;2079:6;2087;2140:2;2128:9;2119:7;2115:23;2111:32;2108:52;;;2156:1;2153;2146:12;2108:52;2179:29;2198:9;2179:29;:::i;:::-;2169:39;2255:2;2240:18;;;;2227:32;;-1:-1:-1;;;2011:254:44:o;2270:328::-;2347:6;2355;2363;2416:2;2404:9;2395:7;2391:23;2387:32;2384:52;;;2432:1;2429;2422:12;2384:52;2455:29;2474:9;2455:29;:::i;:::-;2445:39;;2503:38;2537:2;2526:9;2522:18;2503:38;:::i;:::-;2493:48;;2588:2;2577:9;2573:18;2560:32;2550:42;;2270:328;;;;;:::o;2603:186::-;2662:6;2715:2;2703:9;2694:7;2690:23;2686:32;2683:52;;;2731:1;2728;2721:12;2683:52;2754:29;2773:9;2754:29;:::i;2976:347::-;3041:6;3049;3102:2;3090:9;3081:7;3077:23;3073:32;3070:52;;;3118:1;3115;3108:12;3070:52;3141:29;3160:9;3141:29;:::i;:::-;3131:39;;3220:2;3209:9;3205:18;3192:32;3267:5;3260:13;3253:21;3246:5;3243:32;3233:60;;3289:1;3286;3279:12;3233:60;3312:5;3302:15;;;2976:347;;;;;:::o;3328:184::-;-1:-1:-1;;;3377:1:44;3370:88;3477:4;3474:1;3467:15;3501:4;3498:1;3491:15;3517:1138;3612:6;3620;3628;3636;3689:3;3677:9;3668:7;3664:23;3660:33;3657:53;;;3706:1;3703;3696:12;3657:53;3729:29;3748:9;3729:29;:::i;:::-;3719:39;;3777:38;3811:2;3800:9;3796:18;3777:38;:::i;:::-;3767:48;;3862:2;3851:9;3847:18;3834:32;3824:42;;3917:2;3906:9;3902:18;3889:32;3940:18;3981:2;3973:6;3970:14;3967:34;;;3997:1;3994;3987:12;3967:34;4035:6;4024:9;4020:22;4010:32;;4080:7;4073:4;4069:2;4065:13;4061:27;4051:55;;4102:1;4099;4092:12;4051:55;4138:2;4125:16;4160:2;4156;4153:10;4150:36;;;4166:18;;:::i;:::-;4241:2;4235:9;4209:2;4295:13;;-1:-1:-1;;4291:22:44;;;4315:2;4287:31;4283:40;4271:53;;;4339:18;;;4359:22;;;4336:46;4333:72;;;4385:18;;:::i;:::-;4425:10;4421:2;4414:22;4460:2;4452:6;4445:18;4500:7;4495:2;4490;4486;4482:11;4478:20;4475:33;4472:53;;;4521:1;4518;4511:12;4472:53;4577:2;4572;4568;4564:11;4559:2;4551:6;4547:15;4534:46;4622:1;4617:2;4612;4604:6;4600:15;4596:24;4589:35;4643:6;4633:16;;;;;;;3517:1138;;;;;;;:::o;4660:260::-;4728:6;4736;4789:2;4777:9;4768:7;4764:23;4760:32;4757:52;;;4805:1;4802;4795:12;4757:52;4828:29;4847:9;4828:29;:::i;:::-;4818:39;;4876:38;4910:2;4899:9;4895:18;4876:38;:::i;:::-;4866:48;;4660:260;;;;;:::o;4925:437::-;5004:1;5000:12;;;;5047;;;5068:61;;5122:4;5114:6;5110:17;5100:27;;5068:61;5175:2;5167:6;5164:14;5144:18;5141:38;5138:218;;-1:-1:-1;;;5209:1:44;5202:88;5313:4;5310:1;5303:15;5341:4;5338:1;5331:15;5138:218;;4925:437;;;:::o;7376:496::-;7555:3;7593:6;7587:13;7609:66;7668:6;7663:3;7656:4;7648:6;7644:17;7609:66;:::i;:::-;7738:13;;7697:16;;;;7760:70;7738:13;7697:16;7807:4;7795:17;;7760:70;:::i;:::-;7846:20;;7376:496;-1:-1:-1;;;;7376:496:44:o;9650:512::-;9844:4;-1:-1:-1;;;;;9954:2:44;9946:6;9942:15;9931:9;9924:34;10006:2;9998:6;9994:15;9989:2;9978:9;9974:18;9967:43;;10046:6;10041:2;10030:9;10026:18;10019:34;10089:3;10084:2;10073:9;10069:18;10062:31;10110:46;10151:3;10140:9;10136:19;10128:6;10110:46;:::i;:::-;10102:54;9650:512;-1:-1:-1;;;;;;9650:512:44:o;10167:249::-;10236:6;10289:2;10277:9;10268:7;10264:23;10260:32;10257:52;;;10305:1;10302;10295:12;10257:52;10337:9;10331:16;10356:30;10380:5;10356:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"960200","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2634","getApproved(uint256)":"4792","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2555","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"516","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":338,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":340,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":344,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":348,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":352,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":358,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f66c5dfada7fa900521c65b934e68d7574823815e1f277fc334e602797322b764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F PUSH7 0xC5DFADA7FA9005 0x21 0xC6 JUMPDEST SWAP4 0x4E PUSH9 0xD7574823815E1F277F 0xC3 CALLVALUE 0xE6 MUL PUSH26 0x7322B764736F6C63430008110033000000000000000000000000 ","sourceMap":"194:9169:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f66c5dfada7fa900521c65b934e68d7574823815e1f277fc334e602797322b764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F PUSH7 0xC5DFADA7FA9005 0x21 0xC6 JUMPDEST SWAP4 0x4E PUSH9 0xD7574823815E1F277F 0xC3 CALLVALUE 0xE6 MUL PUSH26 0x7322B764736F6C63430008110033000000000000000000000000 ","sourceMap":"194:9169:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bd43e28f0d94234fde69e1899d483243fafa034754ecc74709183c4641a159364736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE 0xD4 RETURNDATACOPY 0x28 CREATE 0xD9 TIMESTAMP CALLVALUE REVERT 0xE6 SWAP15 XOR SWAP10 0xD4 DUP4 0x24 EXTCODEHASH 0xAF LOG0 CALLVALUE PUSH22 0x4ECC74709183C4641A159364736F6C63430008110033 ","sourceMap":"220:2559:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bd43e28f0d94234fde69e1899d483243fafa034754ecc74709183c4641a159364736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE 0xD4 RETURNDATACOPY 0x28 CREATE 0xD9 TIMESTAMP CALLVALUE REVERT 0xE6 SWAP15 XOR SWAP10 0xD4 DUP4 0x24 EXTCODEHASH 0xAF LOG0 CALLVALUE PUSH22 0x4ECC74709183C4641A159364736F6C63430008110033 ","sourceMap":"220:2559:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220778a8f5f651b8401af1ddb2306b9765067010bc190bde2c2fcb2353c59f6c82164736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x8A8F5F651B8401AF1DDB2306B9765067010BC190BDE2C2FC 0xB2 CALLDATALOAD EXTCODECOPY MSIZE 0xF6 0xC8 0x21 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12582:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220778a8f5f651b8401af1ddb2306b9765067010bc190bde2c2fcb2353c59f6c82164736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x8A8F5F651B8401AF1DDB2306B9765067010BC190BDE2C2FC 0xB2 CALLDATALOAD EXTCODECOPY MSIZE 0xF6 0xC8 0x21 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12582:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b051aa0706c1dc770c3e7a56947b74bbd331d307fe4a7bcf9fa2919be470b7aa64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 MLOAD 0xAA SMOD MOD 0xC1 0xDC PUSH24 0xC3E7A56947B74BBD331D307FE4A7BCF9FA2919BE470B7AA PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"215:1047:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b051aa0706c1dc770c3e7a56947b74bbd331d307fe4a7bcf9fa2919be470b7aa64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 MLOAD 0xAA SMOD MOD 0xC1 0xDC PUSH24 0xC3E7A56947B74BBD331D307FE4A7BCF9FA2919BE470B7AA PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"215:1047:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/BaseRegistrarImplementation.sol":{"BaseRegistrarImplementation":{"abi":[{"inputs":[{"internalType":"contract ENS","name":"_ens","type":"address"},{"internalType":"bytes32","name":"_baseNode","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"}],"name":"ControllerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"}],"name":"ControllerRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameMigrated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRenewed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"GRACE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"}],"name":"addController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"available","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseNode","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"controllers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"nameExpires","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"_owner","type":"address"}],"name":"reclaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"register","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"registerOnly","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"}],"name":"removeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID. Names become unowned      when their registration expires.","params":{"tokenId":"uint256 ID of the token to query the owner of"},"returns":{"_0":"address currently marked as the owner of the given token ID"}},"reclaim(uint256,address)":{"details":"Reclaim ownership of a name in ENS, if you own it in the registrar."},"register(uint256,address,uint256)":{"details":"Register a name.","params":{"_owner":"The address that should own the registration.","duration":"Duration in seconds for the registration.","id":"The token ID (keccak256 of the label)."}},"registerOnly(uint256,address,uint256)":{"details":"Register a name, without modifying the registry.","params":{"_owner":"The address that should own the registration.","duration":"Duration in seconds for the registration.","id":"The token ID (keccak256 of the label)."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_3127":{"entryPoint":null,"id":3127,"parameterSlots":2,"returnSlots":0},"@_375":{"entryPoint":null,"id":375,"parameterSlots":2,"returnSlots":0},"@_msgSender_1742":{"entryPoint":179,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":183,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_ENS_$5200t_bytes32_fromMemory":{"entryPoint":265,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":407,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":490,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":347,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":325,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3100:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"124:253:44","statements":[{"body":{"nodeType":"YulBlock","src":"170:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"179:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"182:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"172:6:44"},"nodeType":"YulFunctionCall","src":"172:12:44"},"nodeType":"YulExpressionStatement","src":"172:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"145:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"154:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"141:3:44"},"nodeType":"YulFunctionCall","src":"141:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"166:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"137:3:44"},"nodeType":"YulFunctionCall","src":"137:32:44"},"nodeType":"YulIf","src":"134:52:44"},{"nodeType":"YulVariableDeclaration","src":"195:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"214:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"208:5:44"},"nodeType":"YulFunctionCall","src":"208:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"199:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"287:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"296:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"299:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"289:6:44"},"nodeType":"YulFunctionCall","src":"289:12:44"},"nodeType":"YulExpressionStatement","src":"289:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"246:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"257:5:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"272:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"268:3:44"},"nodeType":"YulFunctionCall","src":"268:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"281:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"264:3:44"},"nodeType":"YulFunctionCall","src":"264:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"253:3:44"},"nodeType":"YulFunctionCall","src":"253:31:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"243:2:44"},"nodeType":"YulFunctionCall","src":"243:42:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"236:6:44"},"nodeType":"YulFunctionCall","src":"236:50:44"},"nodeType":"YulIf","src":"233:70:44"},{"nodeType":"YulAssignment","src":"312:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"322:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"312:6:44"}]},{"nodeType":"YulAssignment","src":"336:35:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"356:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"367:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"352:3:44"},"nodeType":"YulFunctionCall","src":"352:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"346:5:44"},"nodeType":"YulFunctionCall","src":"346:25:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"336:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_ENS_$5200t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"82:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"93:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"105:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"113:6:44","type":""}],"src":"14:363:44"},{"body":{"nodeType":"YulBlock","src":"414:95:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"431:1:44","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:3:44","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"443:10:44","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"434:3:44"},"nodeType":"YulFunctionCall","src":"434:20:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"424:6:44"},"nodeType":"YulFunctionCall","src":"424:31:44"},"nodeType":"YulExpressionStatement","src":"424:31:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"474:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"464:6:44"},"nodeType":"YulFunctionCall","src":"464:15:44"},"nodeType":"YulExpressionStatement","src":"464:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"495:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"498:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"488:6:44"},"nodeType":"YulFunctionCall","src":"488:15:44"},"nodeType":"YulExpressionStatement","src":"488:15:44"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"382:127:44"},{"body":{"nodeType":"YulBlock","src":"569:325:44","statements":[{"nodeType":"YulAssignment","src":"579:22:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"593:1:44","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"596:4:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"589:3:44"},"nodeType":"YulFunctionCall","src":"589:12:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"579:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"610:38:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"640:4:44"},{"kind":"number","nodeType":"YulLiteral","src":"646:1:44","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"636:3:44"},"nodeType":"YulFunctionCall","src":"636:12:44"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"614:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"687:31:44","statements":[{"nodeType":"YulAssignment","src":"689:27:44","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"703:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"711:4:44","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"699:3:44"},"nodeType":"YulFunctionCall","src":"699:17:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"689:6:44"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"667:18:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"660:6:44"},"nodeType":"YulFunctionCall","src":"660:26:44"},"nodeType":"YulIf","src":"657:61:44"},{"body":{"nodeType":"YulBlock","src":"777:111:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"798:1:44","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"805:3:44","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"810:10:44","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"801:3:44"},"nodeType":"YulFunctionCall","src":"801:20:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"791:6:44"},"nodeType":"YulFunctionCall","src":"791:31:44"},"nodeType":"YulExpressionStatement","src":"791:31:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"842:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"845:4:44","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"835:6:44"},"nodeType":"YulFunctionCall","src":"835:15:44"},"nodeType":"YulExpressionStatement","src":"835:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"870:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"873:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"863:6:44"},"nodeType":"YulFunctionCall","src":"863:15:44"},"nodeType":"YulExpressionStatement","src":"863:15:44"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"733:18:44"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"756:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"764:2:44","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"753:2:44"},"nodeType":"YulFunctionCall","src":"753:14:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"730:2:44"},"nodeType":"YulFunctionCall","src":"730:38:44"},"nodeType":"YulIf","src":"727:161:44"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"549:4:44","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"558:6:44","type":""}],"src":"514:380:44"},{"body":{"nodeType":"YulBlock","src":"955:65:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"972:1:44","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"975:3:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"965:6:44"},"nodeType":"YulFunctionCall","src":"965:14:44"},"nodeType":"YulExpressionStatement","src":"965:14:44"},{"nodeType":"YulAssignment","src":"988:26:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1006:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:44","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"996:9:44"},"nodeType":"YulFunctionCall","src":"996:18:44"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"988:4:44"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"938:3:44","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"946:4:44","type":""}],"src":"899:121:44"},{"body":{"nodeType":"YulBlock","src":"1106:464:44","statements":[{"body":{"nodeType":"YulBlock","src":"1139:425:44","statements":[{"nodeType":"YulVariableDeclaration","src":"1153:11:44","value":{"kind":"number","nodeType":"YulLiteral","src":"1163:1:44","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1157:2:44","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1184:2:44"},{"name":"array","nodeType":"YulIdentifier","src":"1188:5:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1177:6:44"},"nodeType":"YulFunctionCall","src":"1177:17:44"},"nodeType":"YulExpressionStatement","src":"1177:17:44"},{"nodeType":"YulVariableDeclaration","src":"1207:31:44","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1229:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"1233:4:44","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1219:9:44"},"nodeType":"YulFunctionCall","src":"1219:19:44"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1211:4:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1251:57:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1274:4:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1284:1:44","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1291:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"1303:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1287:3:44"},"nodeType":"YulFunctionCall","src":"1287:19:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1280:3:44"},"nodeType":"YulFunctionCall","src":"1280:27:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1270:3:44"},"nodeType":"YulFunctionCall","src":"1270:38:44"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1255:11:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1345:23:44","statements":[{"nodeType":"YulAssignment","src":"1347:19:44","value":{"name":"data","nodeType":"YulIdentifier","src":"1362:4:44"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"1347:11:44"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1327:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"1339:4:44","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1324:2:44"},"nodeType":"YulFunctionCall","src":"1324:20:44"},"nodeType":"YulIf","src":"1321:47:44"},{"nodeType":"YulVariableDeclaration","src":"1381:41:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1395:4:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1405:1:44","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1412:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1408:3:44"},"nodeType":"YulFunctionCall","src":"1408:12:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1401:3:44"},"nodeType":"YulFunctionCall","src":"1401:20:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1391:3:44"},"nodeType":"YulFunctionCall","src":"1391:31:44"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1385:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1435:24:44","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1448:11:44"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1439:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1533:21:44","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1542:5:44"},{"name":"_1","nodeType":"YulIdentifier","src":"1549:2:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1535:6:44"},"nodeType":"YulFunctionCall","src":"1535:17:44"},"nodeType":"YulExpressionStatement","src":"1535:17:44"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1483:5:44"},{"name":"_2","nodeType":"YulIdentifier","src":"1490:2:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1480:2:44"},"nodeType":"YulFunctionCall","src":"1480:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1494:26:44","statements":[{"nodeType":"YulAssignment","src":"1496:22:44","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1509:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1516:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1505:3:44"},"nodeType":"YulFunctionCall","src":"1505:13:44"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1496:5:44"}]}]},"pre":{"nodeType":"YulBlock","src":"1476:3:44","statements":[]},"src":"1472:82:44"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1122:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"1127:2:44","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1119:2:44"},"nodeType":"YulFunctionCall","src":"1119:11:44"},"nodeType":"YulIf","src":"1116:448:44"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"1078:5:44","type":""},{"name":"len","nodeType":"YulTypedName","src":"1085:3:44","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"1090:10:44","type":""}],"src":"1025:545:44"},{"body":{"nodeType":"YulBlock","src":"1660:81:44","statements":[{"nodeType":"YulAssignment","src":"1670:65:44","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1685:4:44"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1703:1:44","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1706:3:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1699:3:44"},"nodeType":"YulFunctionCall","src":"1699:11:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1716:1:44","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1712:3:44"},"nodeType":"YulFunctionCall","src":"1712:6:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1695:3:44"},"nodeType":"YulFunctionCall","src":"1695:24:44"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1691:3:44"},"nodeType":"YulFunctionCall","src":"1691:29:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1681:3:44"},"nodeType":"YulFunctionCall","src":"1681:40:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1727:1:44","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1730:3:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1723:3:44"},"nodeType":"YulFunctionCall","src":"1723:11:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1678:2:44"},"nodeType":"YulFunctionCall","src":"1678:57:44"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1670:4:44"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1637:4:44","type":""},{"name":"len","nodeType":"YulTypedName","src":"1643:3:44","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1651:4:44","type":""}],"src":"1575:166:44"},{"body":{"nodeType":"YulBlock","src":"1842:1256:44","statements":[{"nodeType":"YulVariableDeclaration","src":"1852:24:44","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1872:3:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1866:5:44"},"nodeType":"YulFunctionCall","src":"1866:10:44"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1856:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1919:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1921:16:44"},"nodeType":"YulFunctionCall","src":"1921:18:44"},"nodeType":"YulExpressionStatement","src":"1921:18:44"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1891:6:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1907:2:44","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1911:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1903:3:44"},"nodeType":"YulFunctionCall","src":"1903:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"1915:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1899:3:44"},"nodeType":"YulFunctionCall","src":"1899:18:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1888:2:44"},"nodeType":"YulFunctionCall","src":"1888:30:44"},"nodeType":"YulIf","src":"1885:56:44"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1994:4:44"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2032:4:44"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2026:5:44"},"nodeType":"YulFunctionCall","src":"2026:11:44"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2000:25:44"},"nodeType":"YulFunctionCall","src":"2000:38:44"},{"name":"newLen","nodeType":"YulIdentifier","src":"2040:6:44"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1950:43:44"},"nodeType":"YulFunctionCall","src":"1950:97:44"},"nodeType":"YulExpressionStatement","src":"1950:97:44"},{"nodeType":"YulVariableDeclaration","src":"2056:18:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2073:1:44","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"2060:9:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2083:23:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2102:4:44","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"2087:11:44","type":""}]},{"nodeType":"YulAssignment","src":"2115:24:44","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2128:11:44"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2115:9:44"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2185:656:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2199:35:44","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2218:6:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2230:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2226:3:44"},"nodeType":"YulFunctionCall","src":"2226:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2214:3:44"},"nodeType":"YulFunctionCall","src":"2214:20:44"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2203:7:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2247:49:44","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2291:4:44"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2261:29:44"},"nodeType":"YulFunctionCall","src":"2261:35:44"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2251:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2309:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2318:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2313:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2396:172:44","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2421:6:44"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2439:3:44"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2444:9:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:44"},"nodeType":"YulFunctionCall","src":"2435:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2429:5:44"},"nodeType":"YulFunctionCall","src":"2429:26:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2414:6:44"},"nodeType":"YulFunctionCall","src":"2414:42:44"},"nodeType":"YulExpressionStatement","src":"2414:42:44"},{"nodeType":"YulAssignment","src":"2473:24:44","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2487:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2495:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2483:3:44"},"nodeType":"YulFunctionCall","src":"2483:14:44"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2473:6:44"}]},{"nodeType":"YulAssignment","src":"2514:40:44","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2531:9:44"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2542:11:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2527:3:44"},"nodeType":"YulFunctionCall","src":"2527:27:44"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2514:9:44"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2343:1:44"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"2346:7:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2340:2:44"},"nodeType":"YulFunctionCall","src":"2340:14:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2355:28:44","statements":[{"nodeType":"YulAssignment","src":"2357:24:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2366:1:44"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2369:11:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2362:3:44"},"nodeType":"YulFunctionCall","src":"2362:19:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2357:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"2336:3:44","statements":[]},"src":"2332:236:44"},{"body":{"nodeType":"YulBlock","src":"2616:166:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2634:43:44","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2661:3:44"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2666:9:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2657:3:44"},"nodeType":"YulFunctionCall","src":"2657:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2651:5:44"},"nodeType":"YulFunctionCall","src":"2651:26:44"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2638:9:44","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2701:6:44"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2713:9:44"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2740:1:44","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2743:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2736:3:44"},"nodeType":"YulFunctionCall","src":"2736:14:44"},{"kind":"number","nodeType":"YulLiteral","src":"2752:3:44","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2732:3:44"},"nodeType":"YulFunctionCall","src":"2732:24:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2762:1:44","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2758:3:44"},"nodeType":"YulFunctionCall","src":"2758:6:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2728:3:44"},"nodeType":"YulFunctionCall","src":"2728:37:44"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2724:3:44"},"nodeType":"YulFunctionCall","src":"2724:42:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2709:3:44"},"nodeType":"YulFunctionCall","src":"2709:58:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2694:6:44"},"nodeType":"YulFunctionCall","src":"2694:74:44"},"nodeType":"YulExpressionStatement","src":"2694:74:44"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2587:7:44"},{"name":"newLen","nodeType":"YulIdentifier","src":"2596:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2584:2:44"},"nodeType":"YulFunctionCall","src":"2584:19:44"},"nodeType":"YulIf","src":"2581:201:44"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2802:4:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2816:1:44","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2819:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2812:3:44"},"nodeType":"YulFunctionCall","src":"2812:14:44"},{"kind":"number","nodeType":"YulLiteral","src":"2828:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2808:3:44"},"nodeType":"YulFunctionCall","src":"2808:22:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2795:6:44"},"nodeType":"YulFunctionCall","src":"2795:36:44"},"nodeType":"YulExpressionStatement","src":"2795:36:44"}]},"nodeType":"YulCase","src":"2178:663:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2183:1:44","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2858:234:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2872:14:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2885:1:44","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2876:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2921:67:44","statements":[{"nodeType":"YulAssignment","src":"2939:35:44","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2958:3:44"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2963:9:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2954:3:44"},"nodeType":"YulFunctionCall","src":"2954:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2948:5:44"},"nodeType":"YulFunctionCall","src":"2948:26:44"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2939:5:44"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2902:6:44"},"nodeType":"YulIf","src":"2899:89:44"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3008:4:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3067:5:44"},{"name":"newLen","nodeType":"YulIdentifier","src":"3074:6:44"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3014:52:44"},"nodeType":"YulFunctionCall","src":"3014:67:44"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3001:6:44"},"nodeType":"YulFunctionCall","src":"3001:81:44"},"nodeType":"YulExpressionStatement","src":"3001:81:44"}]},"nodeType":"YulCase","src":"2850:242:44","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2158:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2166:2:44","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2155:2:44"},"nodeType":"YulFunctionCall","src":"2155:14:44"},"nodeType":"YulSwitch","src":"2148:944:44"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1827:4:44","type":""},{"name":"src","nodeType":"YulTypedName","src":"1833:3:44","type":""}],"src":"1746:1352:44"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_ENS_$5200t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200225538038062002255833981016040819052620000349162000109565b60408051602080820183526000808352835191820190935282815290916200005d8382620001ea565b5060016200006c8282620001ea565b5050506200008962000083620000b360201b60201c565b620000b7565b600880546001600160a01b0319166001600160a01b039390931692909217909155600955620002b6565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080604083850312156200011d57600080fd5b82516001600160a01b03811681146200013557600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200017057607f821691505b6020821081036200019157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e557600081815260208120601f850160051c81016020861015620001c05750805b601f850160051c820191505b81811015620001e157828155600101620001cc565b5050505b505050565b81516001600160401b0381111562000206576200020662000145565b6200021e816200021784546200015b565b8462000197565b602080601f8311600181146200025657600084156200023d5750858301515b600019600386901b1c1916600185901b178555620001e1565b600085815260208120601f198616915b82811015620002875788860151825594840194600190910190840162000266565b5085821015620002a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611f8f80620002c66000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806395d89b4111610104578063c87b56dd116100a2578063e985e9c511610071578063e985e9c5146103e0578063f2fde38b1461041c578063f6a74ed71461042f578063fca247ac1461044257600080fd5b8063c87b56dd14610381578063d6e4fa8614610394578063da8c229e146103b4578063ddf7fcb0146103d757600080fd5b8063a7fc7a07116100de578063a7fc7a071461033e578063b88d4fde14610351578063c1a287e214610364578063c475abff1461036e57600080fd5b806395d89b411461031057806396e494e814610318578063a22cb4651461032b57600080fd5b80633f15457f116101715780636352211e1161014b5780636352211e146102d157806370a08231146102e4578063715018a6146102f75780638da5cb5b146102ff57600080fd5b80633f15457f1461029857806342842e0e146102ab5780634e543b26146102be57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780630e297b451461025157806323b872dd1461027257806328ed4f6c1461028557600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611b38565b610455565b60405190151581526020015b60405180910390f35b6102046104f2565b6040516101f39190611ba5565b61022461021f366004611bb8565b610584565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611be6565b6105ab565b005b61026461025f366004611c12565b6106e1565b6040519081526020016101f3565b61024f610280366004611c4a565b6106f8565b61024f610293366004611c7a565b61077f565b600854610224906001600160a01b031681565b61024f6102b9366004611c4a565b610898565b61024f6102cc366004611caa565b6108b3565b6102246102df366004611bb8565b610941565b6102646102f2366004611caa565b610964565b61024f6109fe565b6006546001600160a01b0316610224565b610204610a12565b6101e7610326366004611bb8565b610a21565b61024f610339366004611cc7565b610a47565b61024f61034c366004611caa565b610a56565b61024f61035f366004611d10565b610aaa565b6102646276a70081565b61026461037c366004611df0565b610b38565b61020461038f366004611bb8565b610cc9565b6102646103a2366004611bb8565b60009081526007602052604090205490565b6101e76103c2366004611caa565b600a6020526000908152604090205460ff1681565b61026460095481565b6101e76103ee366004611e12565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61024f61042a366004611caa565b610d3d565b61024f61043d366004611caa565b610dcd565b610264610450366004611c12565b610e1e565b60006001600160e01b031982167f01ffc9a70000000000000000000000000000000000000000000000000000000014806104b857506001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806104ec57506001600160e01b031982167f28ed4f6c00000000000000000000000000000000000000000000000000000000145b92915050565b60606000805461050190611e40565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90611e40565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b5050505050905090565b600061058f82610e2d565b506000908152600460205260409020546001600160a01b031690565b60006105b682610e91565b9050806001600160a01b0316836001600160a01b0316036106445760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610660575061066081336103ee565b6106d25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161063b565b6106dc8383610ef6565b505050565b60006106f08484846000610f71565b949350505050565b6107023382611181565b6107745760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161063b565b6106dc8383836111fc565b6008546009546040516302571be360e01b8152600481019190915230916001600160a01b0316906302571be390602401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611e7a565b6001600160a01b03161461080357600080fd5b61080d3383611181565b61081657600080fd5b6008546009546040516306ab592360e01b81526004810191909152602481018490526001600160a01b038381166044830152909116906306ab5923906064016020604051808303816000875af1158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611e97565b6106dc83838360405180602001604052806000815250610aaa565b6108bb611402565b6008546009546040517f1896f70a00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b03838116602483015290911690631896f70a90604401600060405180830381600087803b15801561092657600080fd5b505af115801561093a573d6000803e3d6000fd5b5050505050565b600081815260076020526040812054421061095b57600080fd5b6104ec82610e91565b60006001600160a01b0382166109e25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161063b565b506001600160a01b031660009081526003602052604090205490565b610a06611402565b610a10600061145c565b565b60606001805461050190611e40565b6000818152600760205260408120544290610a40906276a70090611eb0565b1092915050565b610a523383836114bb565b5050565b610a5e611402565b6001600160a01b0381166000818152600a6020526040808220805460ff19166001179055517f0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d74749190a250565b610ab43383611181565b610b265760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161063b565b610b3284848484611589565b50505050565b6008546009546040516302571be360e01b8152600481019190915260009130916001600160a01b03909116906302571be390602401602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190611e7a565b6001600160a01b031614610bc157600080fd5b336000908152600a602052604090205460ff16610bdd57600080fd5b6000838152600760205260409020544290610bfc906276a70090611eb0565b1015610c0757600080fd5b610c146276a70083611eb0565b6000848152600760205260409020546276a70090610c33908590611eb0565b610c3d9190611eb0565b11610c4757600080fd5b60008381526007602052604081208054849290610c65908490611eb0565b90915550506000838152600760205260409081902054905184917f9b87a00e30f1ac65d898f070f8a3488fe60517182d0a2098e1b4b93a54aa9bd691610cad91815260200190565b60405180910390a2505060009081526007602052604090205490565b6060610cd482610e2d565b6000610ceb60408051602081019091526000815290565b90506000815111610d0b5760405180602001604052806000815250610d36565b80610d1584611612565b604051602001610d26929190611ed1565b6040516020818303038152906040525b9392505050565b610d45611402565b6001600160a01b038116610dc15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161063b565b610dca8161145c565b50565b610dd5611402565b6001600160a01b0381166000818152600a6020526040808220805460ff19169055517f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e811139190a250565b60006106f08484846001610f71565b6000818152600260205260409020546001600160a01b0316610dca5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161063b565b6000818152600260205260408120546001600160a01b0316806104ec5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161063b565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610f3882610e91565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6008546009546040516302571be360e01b8152600481019190915260009130916001600160a01b03909116906302571be390602401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611e7a565b6001600160a01b031614610ffa57600080fd5b336000908152600a602052604090205460ff1661101657600080fd5b61101f85610a21565b61102857600080fd5b6110356276a70042611eb0565b6276a7006110438542611eb0565b61104d9190611eb0565b1161105757600080fd5b6110618342611eb0565b6000868152600760209081526040808320939093556002905220546001600160a01b03161561109357611093856116b2565b61109d8486611754565b8115611127576008546009546040516306ab592360e01b81526004810191909152602481018790526001600160a01b038681166044830152909116906306ab5923906064016020604051808303816000875af1158015611101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111259190611e97565b505b6001600160a01b038416857fb3d987963d01b2f68493b4bdb130988f157ea43070d4ad840fee0466ed9370d961115d8642611eb0565b60405190815260200160405180910390a36111788342611eb0565b95945050505050565b60008061118d83610941565b9050806001600160a01b0316846001600160a01b031614806111c85750836001600160a01b03166111bd84610584565b6001600160a01b0316145b806106f057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166106f0565b826001600160a01b031661120f82610e91565b6001600160a01b0316146112735760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063b565b6001600160a01b0382166112ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161063b565b826001600160a01b031661130182610e91565b6001600160a01b0316146113655760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063b565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b03163314610a105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063b565b600680546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361151c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161063b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6115948484846111fc565b6115a0848484846118ec565b610b325760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161063b565b6060600061161f83611a40565b600101905060008167ffffffffffffffff81111561163f5761163f611cfa565b6040519080825280601f01601f191660200182016040528015611669576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461167357509392505050565b60006116bd82610e91565b90506116c882610e91565b6000838152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166117aa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161063b565b6000818152600260205260409020546001600160a01b03161561180f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063b565b6000818152600260205260409020546001600160a01b0316156118745760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063b565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15611a3857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611930903390899088908890600401611f00565b6020604051808303816000875af192505050801561196b575060408051601f3d908101601f1916820190925261196891810190611f3c565b60015b611a1e573d808015611999576040519150601f19603f3d011682016040523d82523d6000602084013e61199e565b606091505b508051600003611a165760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161063b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106f0565b5060016106f0565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611a89577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611ab5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ad357662386f26fc10000830492506010015b6305f5e1008310611aeb576305f5e100830492506008015b6127108310611aff57612710830492506004015b60648310611b11576064830492506002015b600a83106104ec5760010192915050565b6001600160e01b031981168114610dca57600080fd5b600060208284031215611b4a57600080fd5b8135610d3681611b22565b60005b83811015611b70578181015183820152602001611b58565b50506000910152565b60008151808452611b91816020860160208601611b55565b601f01601f19169290920160200192915050565b602081526000610d366020830184611b79565b600060208284031215611bca57600080fd5b5035919050565b6001600160a01b0381168114610dca57600080fd5b60008060408385031215611bf957600080fd5b8235611c0481611bd1565b946020939093013593505050565b600080600060608486031215611c2757600080fd5b833592506020840135611c3981611bd1565b929592945050506040919091013590565b600080600060608486031215611c5f57600080fd5b8335611c6a81611bd1565b92506020840135611c3981611bd1565b60008060408385031215611c8d57600080fd5b823591506020830135611c9f81611bd1565b809150509250929050565b600060208284031215611cbc57600080fd5b8135610d3681611bd1565b60008060408385031215611cda57600080fd5b8235611ce581611bd1565b915060208301358015158114611c9f57600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d2657600080fd5b8435611d3181611bd1565b93506020850135611d4181611bd1565b925060408501359150606085013567ffffffffffffffff80821115611d6557600080fd5b818701915087601f830112611d7957600080fd5b813581811115611d8b57611d8b611cfa565b604051601f8201601f19908116603f01168101908382118183101715611db357611db3611cfa565b816040528281528a6020848701011115611dcc57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611e0357600080fd5b50508035926020909101359150565b60008060408385031215611e2557600080fd5b8235611e3081611bd1565b91506020830135611c9f81611bd1565b600181811c90821680611e5457607f821691505b602082108103611e7457634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611e8c57600080fd5b8151610d3681611bd1565b600060208284031215611ea957600080fd5b5051919050565b808201808211156104ec57634e487b7160e01b600052601160045260246000fd5b60008351611ee3818460208801611b55565b835190830190611ef7818360208801611b55565b01949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611f326080830184611b79565b9695505050505050565b600060208284031215611f4e57600080fd5b8151610d3681611b2256fea2646970667358221220892b0ae5b6e1986f25f3bb48a77b4181d9d4f63fb581f211ba3e8b610aa151a564736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2255 CODESIZE SUB DUP1 PUSH3 0x2255 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE DUP4 MLOAD SWAP2 DUP3 ADD SWAP1 SWAP4 MSTORE DUP3 DUP2 MSTORE SWAP1 SWAP2 PUSH3 0x5D DUP4 DUP3 PUSH3 0x1EA JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x6C DUP3 DUP3 PUSH3 0x1EA JUMP JUMPDEST POP POP POP PUSH3 0x89 PUSH3 0x83 PUSH3 0xB3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xB7 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x9 SSTORE PUSH3 0x2B6 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x170 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x191 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x1E5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1C0 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1E1 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1CC JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x206 JUMPI PUSH3 0x206 PUSH3 0x145 JUMP JUMPDEST PUSH3 0x21E DUP2 PUSH3 0x217 DUP5 SLOAD PUSH3 0x15B JUMP JUMPDEST DUP5 PUSH3 0x197 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x256 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x23D JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1E1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x287 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x266 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2A6 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1F8F DUP1 PUSH3 0x2C6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x95D89B41 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0xF6A74ED7 EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0xFCA247AC EQ PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0xD6E4FA86 EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0xDA8C229E EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0xDDF7FCB0 EQ PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA7FC7A07 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xA7FC7A07 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0xC1A287E2 EQ PUSH2 0x364 JUMPI DUP1 PUSH4 0xC475ABFF EQ PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x96E494E8 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F15457F GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F15457F EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x4E543B26 EQ PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xE297B45 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x28ED4F6C EQ PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B38 JUMP JUMPDEST PUSH2 0x455 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x584 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE6 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x264 PUSH2 0x25F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C12 JUMP JUMPDEST PUSH2 0x6E1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x6F8 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C7A JUMP JUMPDEST PUSH2 0x77F JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x224 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x2DF CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x941 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x964 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x9FE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x224 JUMP JUMPDEST PUSH2 0x204 PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0xA21 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CC7 JUMP JUMPDEST PUSH2 0xA47 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x34C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0xA56 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x35F CALLDATASIZE PUSH1 0x4 PUSH2 0x1D10 JUMP JUMPDEST PUSH2 0xAAA JUMP JUMPDEST PUSH2 0x264 PUSH3 0x76A700 DUP2 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x37C CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x38F CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0xCC9 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x264 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x42A CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0xD3D JUMP JUMPDEST PUSH2 0x24F PUSH2 0x43D CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x264 PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C12 JUMP JUMPDEST PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x4B8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x4EC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x28ED4F6C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x501 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x52D SWAP1 PUSH2 0x1E40 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x57A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x54F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58F DUP3 PUSH2 0xE2D JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B6 DUP3 PUSH2 0xE91 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x644 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x660 JUMPI POP PUSH2 0x660 DUP2 CALLER PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x6D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0x6DC DUP4 DUP4 PUSH2 0xEF6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6F0 DUP5 DUP5 DUP5 PUSH1 0x0 PUSH2 0xF71 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x702 CALLER DUP3 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0x6DC DUP4 DUP4 DUP4 PUSH2 0x11FC JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F0 SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x80D CALLER DUP4 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6AB5923 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x6AB5923 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x874 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DC SWAP2 SWAP1 PUSH2 0x1E97 JUMP JUMPDEST PUSH2 0x6DC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAAA JUMP JUMPDEST PUSH2 0x8BB PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1896F70A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x1896F70A SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x93A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD TIMESTAMP LT PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EC DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA06 PUSH2 0x1402 JUMP JUMPDEST PUSH2 0xA10 PUSH1 0x0 PUSH2 0x145C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x501 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0xA40 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST LT SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA52 CALLER DUP4 DUP4 PUSH2 0x14BB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA5E PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xA8BB31534C0ED46F380CB867BD5C803A189CED9A764E30B3A4991A9901D7474 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xAB4 CALLER DUP4 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0xB26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0xB32 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1589 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBAE SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xBDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0xBFC SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST LT ISZERO PUSH2 0xC07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC14 PUSH3 0x76A700 DUP4 PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x76A700 SWAP1 PUSH2 0xC33 SWAP1 DUP6 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST PUSH2 0xC3D SWAP2 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST GT PUSH2 0xC47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xC65 SWAP1 DUP5 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD DUP5 SWAP2 PUSH32 0x9B87A00E30F1AC65D898F070F8A3488FE60517182D0A2098E1B4B93A54AA9BD6 SWAP2 PUSH2 0xCAD SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCD4 DUP3 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEB PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xD0B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD36 JUMP JUMPDEST DUP1 PUSH2 0xD15 DUP5 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD26 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD45 PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0xDCA DUP2 PUSH2 0x145C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDD5 PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0x33D83959BE2573F5453B12EB9D43B3499BC57D96BD2F067BA44803C859E81113 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6F0 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xF71 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xF38 DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFE7 SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x101F DUP6 PUSH2 0xA21 JUMP JUMPDEST PUSH2 0x1028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1035 PUSH3 0x76A700 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH3 0x76A700 PUSH2 0x1043 DUP6 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH2 0x104D SWAP2 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST GT PUSH2 0x1057 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1061 DUP4 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1093 DUP6 PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x109D DUP5 DUP7 PUSH2 0x1754 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1127 JUMPI PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6AB5923 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x6AB5923 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1101 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1125 SWAP2 SWAP1 PUSH2 0x1E97 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP6 PUSH32 0xB3D987963D01B2F68493B4BDB130988F157EA43070D4AD840FEE0466ED9370D9 PUSH2 0x115D DUP7 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1178 DUP4 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x118D DUP4 PUSH2 0x941 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x11C8 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11BD DUP5 PUSH2 0x584 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x6F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x6F0 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x120F DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1273 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x12EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1301 DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1365 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x151C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1594 DUP5 DUP5 DUP5 PUSH2 0x11FC JUMP JUMPDEST PUSH2 0x15A0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x18EC JUMP JUMPDEST PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x161F DUP4 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x163F JUMPI PUSH2 0x163F PUSH2 0x1CFA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1669 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1673 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16BD DUP3 PUSH2 0xE91 JUMP JUMPDEST SWAP1 POP PUSH2 0x16C8 DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE PUSH1 0x3 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE DUP8 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP DUP5 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x17AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x180F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1874 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1A38 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1930 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F00 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x196B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1968 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A1E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1999 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x199E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1A16 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x6F0 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x6F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1A89 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1AB5 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1AD3 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1AEB JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1AFF JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1B11 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x4EC JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD36 DUP2 PUSH2 0x1B22 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B70 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B58 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B91 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B55 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD36 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C04 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1C39 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1C6A DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1C39 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1C9F DUP2 PUSH2 0x1BD1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD36 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CE5 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1D31 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1D41 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D8B JUMPI PUSH2 0x1D8B PUSH2 0x1CFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1DB3 JUMPI PUSH2 0x1DB3 PUSH2 0x1CFA JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1E30 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1C9F DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E54 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E74 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD36 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4EC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1EE3 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1B55 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1EF7 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1B55 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1F32 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1B79 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD36 DUP2 PUSH2 0x1B22 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0x2B EXP 0xE5 0xB6 0xE1 SWAP9 PUSH16 0x25F3BB48A77B4181D9D4F63FB581F211 0xBA RETURNDATACOPY DUP12 PUSH2 0xAA1 MLOAD 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"199:6853:14:-:0;;;2407:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390::3;;;;;;;;;-1:-1:-1;1390:113:3;;;;;;;;;;;;;;;;1456:13;1390:113;-1:-1:-1;1456:13:3;:::i;:::-;-1:-1:-1;1479:7:3;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;2473:3:14::1;:10:::0;;-1:-1:-1;;;;;;2473:10:14::1;-1:-1:-1::0;;;;;2473:10:14;;;::::1;::::0;;;::::1;::::0;;;2493:8:::1;:20:::0;199:6853;;640:96:8;719:10;;640:96::o;2426:187:0:-;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;14:363:44:-;105:6;113;166:2;154:9;145:7;141:23;137:32;134:52;;;182:1;179;172:12;134:52;208:16;;-1:-1:-1;;;;;253:31:44;;243:42;;233:70;;299:1;296;289:12;233:70;367:2;352:18;;;;346:25;322:5;;346:25;;-1:-1:-1;;;14:363:44:o;382:127::-;443:10;438:3;434:20;431:1;424:31;474:4;471:1;464:15;498:4;495:1;488:15;514:380;593:1;589:12;;;;636;;;657:61;;711:4;703:6;699:17;689:27;;657:61;764:2;756:6;753:14;733:18;730:38;727:161;;810:10;805:3;801:20;798:1;791:31;845:4;842:1;835:15;873:4;870:1;863:15;727:161;;514:380;;;:::o;1025:545::-;1127:2;1122:3;1119:11;1116:448;;;1163:1;1188:5;1184:2;1177:17;1233:4;1229:2;1219:19;1303:2;1291:10;1287:19;1284:1;1280:27;1274:4;1270:38;1339:4;1327:10;1324:20;1321:47;;;-1:-1:-1;1362:4:44;1321:47;1417:2;1412:3;1408:12;1405:1;1401:20;1395:4;1391:31;1381:41;;1472:82;1490:2;1483:5;1480:13;1472:82;;;1535:17;;;1516:1;1505:13;1472:82;;;1476:3;;;1116:448;1025:545;;;:::o;1746:1352::-;1866:10;;-1:-1:-1;;;;;1888:30:44;;1885:56;;;1921:18;;:::i;:::-;1950:97;2040:6;2000:38;2032:4;2026:11;2000:38;:::i;:::-;1994:4;1950:97;:::i;:::-;2102:4;;2166:2;2155:14;;2183:1;2178:663;;;;2885:1;2902:6;2899:89;;;-1:-1:-1;2954:19:44;;;2948:26;2899:89;-1:-1:-1;;1703:1:44;1699:11;;;1695:24;1691:29;1681:40;1727:1;1723:11;;;1678:57;3001:81;;2148:944;;2178:663;972:1;965:14;;;1009:4;996:18;;-1:-1:-1;;2214:20:44;;;2332:236;2346:7;2343:1;2340:14;2332:236;;;2435:19;;;2429:26;2414:42;;2527:27;;;;2495:1;2483:14;;;;2362:19;;2332:236;;;2336:3;2596:6;2587:7;2584:19;2581:201;;;2657:19;;;2651:26;-1:-1:-1;;2740:1:44;2736:14;;;2752:3;2732:24;2728:37;2724:42;2709:58;2694:74;;2581:201;-1:-1:-1;;;;;2828:1:44;2812:14;;;2808:22;2795:36;;-1:-1:-1;1746:1352:44:o;:::-;199:6853:14;;;;;;"},"deployedBytecode":{"functionDebugData":{"@GRACE_PERIOD_3016":{"entryPoint":null,"id":3016,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1223":{"entryPoint":null,"id":1223,"parameterSlots":4,"returnSlots":0},"@_approve_1089":{"entryPoint":3830,"id":1089,"parameterSlots":2,"returnSlots":0},"@_baseURI_526":{"entryPoint":null,"id":526,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1210":{"entryPoint":null,"id":1210,"parameterSlots":4,"returnSlots":0},"@_burn_980":{"entryPoint":5810,"id":980,"parameterSlots":1,"returnSlots":0},"@_checkOnERC721Received_1197":{"entryPoint":6380,"id":1197,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":5122,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_758":{"entryPoint":null,"id":758,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_3106":{"entryPoint":4481,"id":3106,"parameterSlots":2,"returnSlots":1},"@_mint_913":{"entryPoint":5972,"id":913,"parameterSlots":2,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_ownerOf_740":{"entryPoint":null,"id":740,"parameterSlots":1,"returnSlots":1},"@_register_3395":{"entryPoint":3953,"id":3395,"parameterSlots":4,"returnSlots":1},"@_requireMinted_1135":{"entryPoint":3629,"id":1135,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_727":{"entryPoint":5513,"id":727,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1121":{"entryPoint":5307,"id":1121,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":5212,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_1065":{"entryPoint":4604,"id":1065,"parameterSlots":3,"returnSlots":0},"@addController_3199":{"entryPoint":2646,"id":3199,"parameterSlots":1,"returnSlots":0},"@approve_569":{"entryPoint":1451,"id":569,"parameterSlots":2,"returnSlots":0},"@available_3265":{"entryPoint":2593,"id":3265,"parameterSlots":1,"returnSlots":1},"@balanceOf_430":{"entryPoint":2404,"id":430,"parameterSlots":1,"returnSlots":1},"@baseNode_3009":{"entryPoint":null,"id":3009,"parameterSlots":0,"returnSlots":0},"@controllers_3013":{"entryPoint":null,"id":3013,"parameterSlots":0,"returnSlots":0},"@ens_3007":{"entryPoint":null,"id":3007,"parameterSlots":0,"returnSlots":0},"@getApproved_587":{"entryPoint":1412,"id":587,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_622":{"entryPoint":null,"id":622,"parameterSlots":2,"returnSlots":1},"@isContract_1418":{"entryPoint":null,"id":1418,"parameterSlots":1,"returnSlots":1},"@log10_2720":{"entryPoint":6720,"id":2720,"parameterSlots":1,"returnSlots":1},"@nameExpires_3247":{"entryPoint":null,"id":3247,"parameterSlots":1,"returnSlots":1},"@name_468":{"entryPoint":1266,"id":468,"parameterSlots":0,"returnSlots":1},"@ownerOf_3180":{"entryPoint":2369,"id":3180,"parameterSlots":1,"returnSlots":1},"@ownerOf_458":{"entryPoint":3729,"id":458,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@reclaim_3483":{"entryPoint":1919,"id":3483,"parameterSlots":2,"returnSlots":0},"@registerOnly_3306":{"entryPoint":1761,"id":3306,"parameterSlots":3,"returnSlots":1},"@register_3286":{"entryPoint":3614,"id":3286,"parameterSlots":3,"returnSlots":1},"@removeController_3218":{"entryPoint":3533,"id":3218,"parameterSlots":1,"returnSlots":0},"@renew_3452":{"entryPoint":2872,"id":3452,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":2558,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_668":{"entryPoint":2200,"id":668,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_698":{"entryPoint":2730,"id":698,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_604":{"entryPoint":2631,"id":604,"parameterSlots":2,"returnSlots":0},"@setResolver_3234":{"entryPoint":2227,"id":3234,"parameterSlots":1,"returnSlots":0},"@supportsInterface_3506":{"entryPoint":1109,"id":3506,"parameterSlots":1,"returnSlots":1},"@symbol_478":{"entryPoint":2578,"id":478,"parameterSlots":0,"returnSlots":1},"@toString_1811":{"entryPoint":5650,"id":1811,"parameterSlots":1,"returnSlots":1},"@tokenURI_517":{"entryPoint":3273,"id":517,"parameterSlots":1,"returnSlots":1},"@transferFrom_649":{"entryPoint":1784,"id":649,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":3389,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":7338,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":7802,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":7698,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7242,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7440,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7367,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7142,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":7831,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":6968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":7996,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":7290,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_addresst_uint256":{"entryPoint":7186,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":7664,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":7033,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7889,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7936,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_address__to_t_bytes32_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7077,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7856,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6997,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7744,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7418,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":7121,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":6946,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15227:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:133:44","statements":[{"body":{"nodeType":"YulBlock","src":"169:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:44"},"nodeType":"YulFunctionCall","src":"171:12:44"},"nodeType":"YulExpressionStatement","src":"171:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"99:66:44","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:44"},"nodeType":"YulFunctionCall","src":"88:78:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:44"},"nodeType":"YulFunctionCall","src":"78:89:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:44"},"nodeType":"YulFunctionCall","src":"71:97:44"},"nodeType":"YulIf","src":"68:117:44"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:44","type":""}],"src":"14:177:44"},{"body":{"nodeType":"YulBlock","src":"265:176:44","statements":[{"body":{"nodeType":"YulBlock","src":"311:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"323:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"313:6:44"},"nodeType":"YulFunctionCall","src":"313:12:44"},"nodeType":"YulExpressionStatement","src":"313:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"286:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"295:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"282:3:44"},"nodeType":"YulFunctionCall","src":"282:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"307:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"278:3:44"},"nodeType":"YulFunctionCall","src":"278:32:44"},"nodeType":"YulIf","src":"275:52:44"},{"nodeType":"YulVariableDeclaration","src":"336:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"349:12:44"},"nodeType":"YulFunctionCall","src":"349:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"340:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"405:5:44"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"381:23:44"},"nodeType":"YulFunctionCall","src":"381:30:44"},"nodeType":"YulExpressionStatement","src":"381:30:44"},{"nodeType":"YulAssignment","src":"420:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"430:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"420:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"231:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"242:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"254:6:44","type":""}],"src":"196:245:44"},{"body":{"nodeType":"YulBlock","src":"541:92:44","statements":[{"nodeType":"YulAssignment","src":"551:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"563:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"574:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"559:3:44"},"nodeType":"YulFunctionCall","src":"559:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"551:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"618:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"611:6:44"},"nodeType":"YulFunctionCall","src":"611:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"604:6:44"},"nodeType":"YulFunctionCall","src":"604:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"586:6:44"},"nodeType":"YulFunctionCall","src":"586:41:44"},"nodeType":"YulExpressionStatement","src":"586:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"510:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"521:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"532:4:44","type":""}],"src":"446:187:44"},{"body":{"nodeType":"YulBlock","src":"704:184:44","statements":[{"nodeType":"YulVariableDeclaration","src":"714:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"723:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"718:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"783:63:44","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"808:3:44"},{"name":"i","nodeType":"YulIdentifier","src":"813:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:44"},"nodeType":"YulFunctionCall","src":"804:11:44"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"827:3:44"},{"name":"i","nodeType":"YulIdentifier","src":"832:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"823:3:44"},"nodeType":"YulFunctionCall","src":"823:11:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"817:5:44"},"nodeType":"YulFunctionCall","src":"817:18:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"797:6:44"},"nodeType":"YulFunctionCall","src":"797:39:44"},"nodeType":"YulExpressionStatement","src":"797:39:44"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"744:1:44"},{"name":"length","nodeType":"YulIdentifier","src":"747:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"741:2:44"},"nodeType":"YulFunctionCall","src":"741:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"755:19:44","statements":[{"nodeType":"YulAssignment","src":"757:15:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"766:1:44"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:44"},"nodeType":"YulFunctionCall","src":"762:10:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"757:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"737:3:44","statements":[]},"src":"733:113:44"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"866:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"871:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:44"},"nodeType":"YulFunctionCall","src":"862:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"880:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:44"},"nodeType":"YulFunctionCall","src":"855:27:44"},"nodeType":"YulExpressionStatement","src":"855:27:44"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"682:3:44","type":""},{"name":"dst","nodeType":"YulTypedName","src":"687:3:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"692:6:44","type":""}],"src":"638:250:44"},{"body":{"nodeType":"YulBlock","src":"943:221:44","statements":[{"nodeType":"YulVariableDeclaration","src":"953:26:44","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"967:5:44"},"nodeType":"YulFunctionCall","src":"967:12:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"957:6:44","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"995:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"1000:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"988:6:44"},"nodeType":"YulFunctionCall","src":"988:19:44"},"nodeType":"YulExpressionStatement","src":"988:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1055:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1062:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:44"},"nodeType":"YulFunctionCall","src":"1051:16:44"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1073:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"1078:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:44"},"nodeType":"YulFunctionCall","src":"1069:14:44"},{"name":"length","nodeType":"YulIdentifier","src":"1085:6:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1016:34:44"},"nodeType":"YulFunctionCall","src":"1016:76:44"},"nodeType":"YulExpressionStatement","src":"1016:76:44"},{"nodeType":"YulAssignment","src":"1101:57:44","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1116:3:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1129:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1125:3:44"},"nodeType":"YulFunctionCall","src":"1125:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1146:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1142:3:44"},"nodeType":"YulFunctionCall","src":"1142:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1121:3:44"},"nodeType":"YulFunctionCall","src":"1121:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1112:3:44"},"nodeType":"YulFunctionCall","src":"1112:39:44"},{"kind":"number","nodeType":"YulLiteral","src":"1153:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1108:3:44"},"nodeType":"YulFunctionCall","src":"1108:50:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1101:3:44"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"920:5:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"927:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"935:3:44","type":""}],"src":"893:271:44"},{"body":{"nodeType":"YulBlock","src":"1290:99:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1307:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1318:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1300:6:44"},"nodeType":"YulFunctionCall","src":"1300:21:44"},"nodeType":"YulExpressionStatement","src":"1300:21:44"},{"nodeType":"YulAssignment","src":"1330:53:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1356:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1368:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1379:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1364:3:44"},"nodeType":"YulFunctionCall","src":"1364:18:44"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1338:17:44"},"nodeType":"YulFunctionCall","src":"1338:45:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1330:4:44"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1259:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1270:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1281:4:44","type":""}],"src":"1169:220:44"},{"body":{"nodeType":"YulBlock","src":"1464:110:44","statements":[{"body":{"nodeType":"YulBlock","src":"1510:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1519:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1522:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1512:6:44"},"nodeType":"YulFunctionCall","src":"1512:12:44"},"nodeType":"YulExpressionStatement","src":"1512:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1485:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1494:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1481:3:44"},"nodeType":"YulFunctionCall","src":"1481:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1506:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1477:3:44"},"nodeType":"YulFunctionCall","src":"1477:32:44"},"nodeType":"YulIf","src":"1474:52:44"},{"nodeType":"YulAssignment","src":"1535:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1558:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1545:12:44"},"nodeType":"YulFunctionCall","src":"1545:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1535:6:44"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1430:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1441:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1453:6:44","type":""}],"src":"1394:180:44"},{"body":{"nodeType":"YulBlock","src":"1680:125:44","statements":[{"nodeType":"YulAssignment","src":"1690:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1702:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1713:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1698:3:44"},"nodeType":"YulFunctionCall","src":"1698:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1690:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1732:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1747:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1755:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:44"},"nodeType":"YulFunctionCall","src":"1743:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1725:6:44"},"nodeType":"YulFunctionCall","src":"1725:74:44"},"nodeType":"YulExpressionStatement","src":"1725:74:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1649:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1660:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1671:4:44","type":""}],"src":"1579:226:44"},{"body":{"nodeType":"YulBlock","src":"1855:109:44","statements":[{"body":{"nodeType":"YulBlock","src":"1942:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1951:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1954:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1944:6:44"},"nodeType":"YulFunctionCall","src":"1944:12:44"},"nodeType":"YulExpressionStatement","src":"1944:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1878:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1889:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1896:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1885:3:44"},"nodeType":"YulFunctionCall","src":"1885:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1875:2:44"},"nodeType":"YulFunctionCall","src":"1875:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1868:6:44"},"nodeType":"YulFunctionCall","src":"1868:73:44"},"nodeType":"YulIf","src":"1865:93:44"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1844:5:44","type":""}],"src":"1810:154:44"},{"body":{"nodeType":"YulBlock","src":"2056:228:44","statements":[{"body":{"nodeType":"YulBlock","src":"2102:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2111:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2114:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2104:6:44"},"nodeType":"YulFunctionCall","src":"2104:12:44"},"nodeType":"YulExpressionStatement","src":"2104:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2077:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2086:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2073:3:44"},"nodeType":"YulFunctionCall","src":"2073:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2098:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2069:3:44"},"nodeType":"YulFunctionCall","src":"2069:32:44"},"nodeType":"YulIf","src":"2066:52:44"},{"nodeType":"YulVariableDeclaration","src":"2127:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2153:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2140:12:44"},"nodeType":"YulFunctionCall","src":"2140:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2131:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2197:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2172:24:44"},"nodeType":"YulFunctionCall","src":"2172:31:44"},"nodeType":"YulExpressionStatement","src":"2172:31:44"},{"nodeType":"YulAssignment","src":"2212:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"2222:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2212:6:44"}]},{"nodeType":"YulAssignment","src":"2236:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2263:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2274:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2259:3:44"},"nodeType":"YulFunctionCall","src":"2259:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2246:12:44"},"nodeType":"YulFunctionCall","src":"2246:32:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2236:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2014:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2025:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2037:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2045:6:44","type":""}],"src":"1969:315:44"},{"body":{"nodeType":"YulBlock","src":"2393:279:44","statements":[{"body":{"nodeType":"YulBlock","src":"2439:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2451:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2441:6:44"},"nodeType":"YulFunctionCall","src":"2441:12:44"},"nodeType":"YulExpressionStatement","src":"2441:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2414:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2423:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2410:3:44"},"nodeType":"YulFunctionCall","src":"2410:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2435:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2406:3:44"},"nodeType":"YulFunctionCall","src":"2406:32:44"},"nodeType":"YulIf","src":"2403:52:44"},{"nodeType":"YulAssignment","src":"2464:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2487:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2474:12:44"},"nodeType":"YulFunctionCall","src":"2474:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2464:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"2506:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2536:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2547:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2532:3:44"},"nodeType":"YulFunctionCall","src":"2532:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2519:12:44"},"nodeType":"YulFunctionCall","src":"2519:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2510:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2585:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2560:24:44"},"nodeType":"YulFunctionCall","src":"2560:31:44"},"nodeType":"YulExpressionStatement","src":"2560:31:44"},{"nodeType":"YulAssignment","src":"2600:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"2610:5:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2600:6:44"}]},{"nodeType":"YulAssignment","src":"2624:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2651:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2662:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2647:3:44"},"nodeType":"YulFunctionCall","src":"2647:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2634:12:44"},"nodeType":"YulFunctionCall","src":"2634:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2624:6:44"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2343:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2354:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2366:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2374:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2382:6:44","type":""}],"src":"2289:383:44"},{"body":{"nodeType":"YulBlock","src":"2778:76:44","statements":[{"nodeType":"YulAssignment","src":"2788:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2800:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2811:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2796:3:44"},"nodeType":"YulFunctionCall","src":"2796:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2788:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2830:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"2841:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2823:6:44"},"nodeType":"YulFunctionCall","src":"2823:25:44"},"nodeType":"YulExpressionStatement","src":"2823:25:44"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2747:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2758:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2769:4:44","type":""}],"src":"2677:177:44"},{"body":{"nodeType":"YulBlock","src":"2963:352:44","statements":[{"body":{"nodeType":"YulBlock","src":"3009:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3018:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3021:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3011:6:44"},"nodeType":"YulFunctionCall","src":"3011:12:44"},"nodeType":"YulExpressionStatement","src":"3011:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2984:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2993:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2980:3:44"},"nodeType":"YulFunctionCall","src":"2980:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3005:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2976:3:44"},"nodeType":"YulFunctionCall","src":"2976:32:44"},"nodeType":"YulIf","src":"2973:52:44"},{"nodeType":"YulVariableDeclaration","src":"3034:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3060:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3047:12:44"},"nodeType":"YulFunctionCall","src":"3047:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3038:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3104:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3079:24:44"},"nodeType":"YulFunctionCall","src":"3079:31:44"},"nodeType":"YulExpressionStatement","src":"3079:31:44"},{"nodeType":"YulAssignment","src":"3119:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"3129:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3119:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3143:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3175:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3186:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3171:3:44"},"nodeType":"YulFunctionCall","src":"3171:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3158:12:44"},"nodeType":"YulFunctionCall","src":"3158:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3147:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3224:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3199:24:44"},"nodeType":"YulFunctionCall","src":"3199:33:44"},"nodeType":"YulExpressionStatement","src":"3199:33:44"},{"nodeType":"YulAssignment","src":"3241:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3251:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3241:6:44"}]},{"nodeType":"YulAssignment","src":"3267:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3294:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3305:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3290:3:44"},"nodeType":"YulFunctionCall","src":"3290:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3277:12:44"},"nodeType":"YulFunctionCall","src":"3277:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3267:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2913:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2924:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2936:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2944:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2952:6:44","type":""}],"src":"2859:456:44"},{"body":{"nodeType":"YulBlock","src":"3407:228:44","statements":[{"body":{"nodeType":"YulBlock","src":"3453:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3462:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3465:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3455:6:44"},"nodeType":"YulFunctionCall","src":"3455:12:44"},"nodeType":"YulExpressionStatement","src":"3455:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3428:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"3437:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3424:3:44"},"nodeType":"YulFunctionCall","src":"3424:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3449:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3420:3:44"},"nodeType":"YulFunctionCall","src":"3420:32:44"},"nodeType":"YulIf","src":"3417:52:44"},{"nodeType":"YulAssignment","src":"3478:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3501:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3488:12:44"},"nodeType":"YulFunctionCall","src":"3488:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3478:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3520:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3550:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3561:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3546:3:44"},"nodeType":"YulFunctionCall","src":"3546:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3533:12:44"},"nodeType":"YulFunctionCall","src":"3533:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3524:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3599:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3574:24:44"},"nodeType":"YulFunctionCall","src":"3574:31:44"},"nodeType":"YulExpressionStatement","src":"3574:31:44"},{"nodeType":"YulAssignment","src":"3614:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"3624:5:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3614:6:44"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3365:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3376:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3388:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3396:6:44","type":""}],"src":"3320:315:44"},{"body":{"nodeType":"YulBlock","src":"3753:125:44","statements":[{"nodeType":"YulAssignment","src":"3763:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3775:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3786:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3771:3:44"},"nodeType":"YulFunctionCall","src":"3771:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3763:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3805:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3820:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3828:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3816:3:44"},"nodeType":"YulFunctionCall","src":"3816:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3798:6:44"},"nodeType":"YulFunctionCall","src":"3798:74:44"},"nodeType":"YulExpressionStatement","src":"3798:74:44"}]},"name":"abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3722:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3733:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3744:4:44","type":""}],"src":"3640:238:44"},{"body":{"nodeType":"YulBlock","src":"3953:177:44","statements":[{"body":{"nodeType":"YulBlock","src":"3999:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4008:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4011:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4001:6:44"},"nodeType":"YulFunctionCall","src":"4001:12:44"},"nodeType":"YulExpressionStatement","src":"4001:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3974:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"3983:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3970:3:44"},"nodeType":"YulFunctionCall","src":"3970:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3995:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3966:3:44"},"nodeType":"YulFunctionCall","src":"3966:32:44"},"nodeType":"YulIf","src":"3963:52:44"},{"nodeType":"YulVariableDeclaration","src":"4024:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4050:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4037:12:44"},"nodeType":"YulFunctionCall","src":"4037:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4028:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4094:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4069:24:44"},"nodeType":"YulFunctionCall","src":"4069:31:44"},"nodeType":"YulExpressionStatement","src":"4069:31:44"},{"nodeType":"YulAssignment","src":"4109:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"4119:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4109:6:44"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3919:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3930:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3942:6:44","type":""}],"src":"3883:247:44"},{"body":{"nodeType":"YulBlock","src":"4219:332:44","statements":[{"body":{"nodeType":"YulBlock","src":"4265:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4274:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4277:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4267:6:44"},"nodeType":"YulFunctionCall","src":"4267:12:44"},"nodeType":"YulExpressionStatement","src":"4267:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4240:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4249:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4236:3:44"},"nodeType":"YulFunctionCall","src":"4236:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4261:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4232:3:44"},"nodeType":"YulFunctionCall","src":"4232:32:44"},"nodeType":"YulIf","src":"4229:52:44"},{"nodeType":"YulVariableDeclaration","src":"4290:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4316:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4303:12:44"},"nodeType":"YulFunctionCall","src":"4303:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4294:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4360:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4335:24:44"},"nodeType":"YulFunctionCall","src":"4335:31:44"},"nodeType":"YulExpressionStatement","src":"4335:31:44"},{"nodeType":"YulAssignment","src":"4375:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"4385:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4375:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"4399:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4431:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4442:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4427:3:44"},"nodeType":"YulFunctionCall","src":"4427:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4414:12:44"},"nodeType":"YulFunctionCall","src":"4414:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4403:7:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4503:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4512:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4515:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4505:6:44"},"nodeType":"YulFunctionCall","src":"4505:12:44"},"nodeType":"YulExpressionStatement","src":"4505:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4468:7:44"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4491:7:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4484:6:44"},"nodeType":"YulFunctionCall","src":"4484:15:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4477:6:44"},"nodeType":"YulFunctionCall","src":"4477:23:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4465:2:44"},"nodeType":"YulFunctionCall","src":"4465:36:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4458:6:44"},"nodeType":"YulFunctionCall","src":"4458:44:44"},"nodeType":"YulIf","src":"4455:64:44"},{"nodeType":"YulAssignment","src":"4528:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4538:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4528:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4177:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4188:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4200:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4208:6:44","type":""}],"src":"4135:416:44"},{"body":{"nodeType":"YulBlock","src":"4588:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4605:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4608:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4598:6:44"},"nodeType":"YulFunctionCall","src":"4598:88:44"},"nodeType":"YulExpressionStatement","src":"4598:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4702:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4705:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4695:6:44"},"nodeType":"YulFunctionCall","src":"4695:15:44"},"nodeType":"YulExpressionStatement","src":"4695:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4726:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4729:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4719:6:44"},"nodeType":"YulFunctionCall","src":"4719:15:44"},"nodeType":"YulExpressionStatement","src":"4719:15:44"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"4556:184:44"},{"body":{"nodeType":"YulBlock","src":"4875:1136:44","statements":[{"body":{"nodeType":"YulBlock","src":"4922:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4931:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4934:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4924:6:44"},"nodeType":"YulFunctionCall","src":"4924:12:44"},"nodeType":"YulExpressionStatement","src":"4924:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4896:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4905:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4892:3:44"},"nodeType":"YulFunctionCall","src":"4892:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4917:3:44","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4888:3:44"},"nodeType":"YulFunctionCall","src":"4888:33:44"},"nodeType":"YulIf","src":"4885:53:44"},{"nodeType":"YulVariableDeclaration","src":"4947:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4973:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4960:12:44"},"nodeType":"YulFunctionCall","src":"4960:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4951:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5017:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4992:24:44"},"nodeType":"YulFunctionCall","src":"4992:31:44"},"nodeType":"YulExpressionStatement","src":"4992:31:44"},{"nodeType":"YulAssignment","src":"5032:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"5042:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5032:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"5056:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5088:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5099:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:44"},"nodeType":"YulFunctionCall","src":"5084:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5071:12:44"},"nodeType":"YulFunctionCall","src":"5071:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5060:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5137:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5112:24:44"},"nodeType":"YulFunctionCall","src":"5112:33:44"},"nodeType":"YulExpressionStatement","src":"5112:33:44"},{"nodeType":"YulAssignment","src":"5154:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5164:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5154:6:44"}]},{"nodeType":"YulAssignment","src":"5180:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5207:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5218:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5203:3:44"},"nodeType":"YulFunctionCall","src":"5203:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5190:12:44"},"nodeType":"YulFunctionCall","src":"5190:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5180:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"5231:46:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5262:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5273:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5258:3:44"},"nodeType":"YulFunctionCall","src":"5258:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5245:12:44"},"nodeType":"YulFunctionCall","src":"5245:32:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5235:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5286:28:44","value":{"kind":"number","nodeType":"YulLiteral","src":"5296:18:44","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5290:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"5341:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5350:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5353:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5343:6:44"},"nodeType":"YulFunctionCall","src":"5343:12:44"},"nodeType":"YulExpressionStatement","src":"5343:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5329:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"5337:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5326:2:44"},"nodeType":"YulFunctionCall","src":"5326:14:44"},"nodeType":"YulIf","src":"5323:34:44"},{"nodeType":"YulVariableDeclaration","src":"5366:32:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5380:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"5391:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5376:3:44"},"nodeType":"YulFunctionCall","src":"5376:22:44"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5370:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"5446:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5455:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5458:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5448:6:44"},"nodeType":"YulFunctionCall","src":"5448:12:44"},"nodeType":"YulExpressionStatement","src":"5448:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5425:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"5429:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5421:3:44"},"nodeType":"YulFunctionCall","src":"5421:13:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5436:7:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5417:3:44"},"nodeType":"YulFunctionCall","src":"5417:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5410:6:44"},"nodeType":"YulFunctionCall","src":"5410:35:44"},"nodeType":"YulIf","src":"5407:55:44"},{"nodeType":"YulVariableDeclaration","src":"5471:26:44","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5494:2:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5481:12:44"},"nodeType":"YulFunctionCall","src":"5481:16:44"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5475:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"5520:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5522:16:44"},"nodeType":"YulFunctionCall","src":"5522:18:44"},"nodeType":"YulExpressionStatement","src":"5522:18:44"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5512:2:44"},{"name":"_1","nodeType":"YulIdentifier","src":"5516:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5509:2:44"},"nodeType":"YulFunctionCall","src":"5509:10:44"},"nodeType":"YulIf","src":"5506:36:44"},{"nodeType":"YulVariableDeclaration","src":"5551:17:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5565:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5561:3:44"},"nodeType":"YulFunctionCall","src":"5561:7:44"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5555:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5577:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5597:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5591:5:44"},"nodeType":"YulFunctionCall","src":"5591:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5581:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5609:71:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5631:6:44"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5655:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"5659:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5651:3:44"},"nodeType":"YulFunctionCall","src":"5651:13:44"},{"name":"_4","nodeType":"YulIdentifier","src":"5666:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5647:3:44"},"nodeType":"YulFunctionCall","src":"5647:22:44"},{"kind":"number","nodeType":"YulLiteral","src":"5671:2:44","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5643:3:44"},"nodeType":"YulFunctionCall","src":"5643:31:44"},{"name":"_4","nodeType":"YulIdentifier","src":"5676:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5639:3:44"},"nodeType":"YulFunctionCall","src":"5639:40:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5627:3:44"},"nodeType":"YulFunctionCall","src":"5627:53:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5613:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"5739:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5741:16:44"},"nodeType":"YulFunctionCall","src":"5741:18:44"},"nodeType":"YulExpressionStatement","src":"5741:18:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5698:10:44"},{"name":"_1","nodeType":"YulIdentifier","src":"5710:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5695:2:44"},"nodeType":"YulFunctionCall","src":"5695:18:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5718:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5730:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5715:2:44"},"nodeType":"YulFunctionCall","src":"5715:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5692:2:44"},"nodeType":"YulFunctionCall","src":"5692:46:44"},"nodeType":"YulIf","src":"5689:72:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5777:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5781:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5770:6:44"},"nodeType":"YulFunctionCall","src":"5770:22:44"},"nodeType":"YulExpressionStatement","src":"5770:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5808:6:44"},{"name":"_3","nodeType":"YulIdentifier","src":"5816:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5801:6:44"},"nodeType":"YulFunctionCall","src":"5801:18:44"},"nodeType":"YulExpressionStatement","src":"5801:18:44"},{"body":{"nodeType":"YulBlock","src":"5865:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5874:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5877:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5867:6:44"},"nodeType":"YulFunctionCall","src":"5867:12:44"},"nodeType":"YulExpressionStatement","src":"5867:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5842:2:44"},{"name":"_3","nodeType":"YulIdentifier","src":"5846:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5838:3:44"},"nodeType":"YulFunctionCall","src":"5838:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"5851:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5834:3:44"},"nodeType":"YulFunctionCall","src":"5834:20:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5856:7:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5831:2:44"},"nodeType":"YulFunctionCall","src":"5831:33:44"},"nodeType":"YulIf","src":"5828:53:44"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5907:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"5915:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5903:3:44"},"nodeType":"YulFunctionCall","src":"5903:15:44"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5924:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"5928:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5920:3:44"},"nodeType":"YulFunctionCall","src":"5920:11:44"},{"name":"_3","nodeType":"YulIdentifier","src":"5933:2:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5890:12:44"},"nodeType":"YulFunctionCall","src":"5890:46:44"},"nodeType":"YulExpressionStatement","src":"5890:46:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5960:6:44"},{"name":"_3","nodeType":"YulIdentifier","src":"5968:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5956:3:44"},"nodeType":"YulFunctionCall","src":"5956:15:44"},{"kind":"number","nodeType":"YulLiteral","src":"5973:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5952:3:44"},"nodeType":"YulFunctionCall","src":"5952:24:44"},{"kind":"number","nodeType":"YulLiteral","src":"5978:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5945:6:44"},"nodeType":"YulFunctionCall","src":"5945:35:44"},"nodeType":"YulExpressionStatement","src":"5945:35:44"},{"nodeType":"YulAssignment","src":"5989:16:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5999:6:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5989:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4817:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4828:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4840:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4848:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4856:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4864:6:44","type":""}],"src":"4745:1266:44"},{"body":{"nodeType":"YulBlock","src":"6103:161:44","statements":[{"body":{"nodeType":"YulBlock","src":"6149:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6158:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6161:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6151:6:44"},"nodeType":"YulFunctionCall","src":"6151:12:44"},"nodeType":"YulExpressionStatement","src":"6151:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6124:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"6133:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6120:3:44"},"nodeType":"YulFunctionCall","src":"6120:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"6145:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6116:3:44"},"nodeType":"YulFunctionCall","src":"6116:32:44"},"nodeType":"YulIf","src":"6113:52:44"},{"nodeType":"YulAssignment","src":"6174:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6197:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6184:12:44"},"nodeType":"YulFunctionCall","src":"6184:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6174:6:44"}]},{"nodeType":"YulAssignment","src":"6216:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6243:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6254:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6239:3:44"},"nodeType":"YulFunctionCall","src":"6239:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6226:12:44"},"nodeType":"YulFunctionCall","src":"6226:32:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6216:6:44"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6061:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6072:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6084:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6092:6:44","type":""}],"src":"6016:248:44"},{"body":{"nodeType":"YulBlock","src":"6370:76:44","statements":[{"nodeType":"YulAssignment","src":"6380:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6392:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6403:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6388:3:44"},"nodeType":"YulFunctionCall","src":"6388:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6380:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6422:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"6433:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6415:6:44"},"nodeType":"YulFunctionCall","src":"6415:25:44"},"nodeType":"YulExpressionStatement","src":"6415:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6339:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6350:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6361:4:44","type":""}],"src":"6269:177:44"},{"body":{"nodeType":"YulBlock","src":"6538:301:44","statements":[{"body":{"nodeType":"YulBlock","src":"6584:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6593:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6596:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6586:6:44"},"nodeType":"YulFunctionCall","src":"6586:12:44"},"nodeType":"YulExpressionStatement","src":"6586:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6559:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"6568:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6555:3:44"},"nodeType":"YulFunctionCall","src":"6555:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"6580:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6551:3:44"},"nodeType":"YulFunctionCall","src":"6551:32:44"},"nodeType":"YulIf","src":"6548:52:44"},{"nodeType":"YulVariableDeclaration","src":"6609:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6635:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6622:12:44"},"nodeType":"YulFunctionCall","src":"6622:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6613:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6679:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6654:24:44"},"nodeType":"YulFunctionCall","src":"6654:31:44"},"nodeType":"YulExpressionStatement","src":"6654:31:44"},{"nodeType":"YulAssignment","src":"6694:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"6704:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6694:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"6718:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6750:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6761:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6746:3:44"},"nodeType":"YulFunctionCall","src":"6746:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6733:12:44"},"nodeType":"YulFunctionCall","src":"6733:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6722:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6799:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6774:24:44"},"nodeType":"YulFunctionCall","src":"6774:33:44"},"nodeType":"YulExpressionStatement","src":"6774:33:44"},{"nodeType":"YulAssignment","src":"6816:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6826:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6816:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6496:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6507:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6519:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6527:6:44","type":""}],"src":"6451:388:44"},{"body":{"nodeType":"YulBlock","src":"6899:382:44","statements":[{"nodeType":"YulAssignment","src":"6909:22:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6923:1:44","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6926:4:44"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6919:3:44"},"nodeType":"YulFunctionCall","src":"6919:12:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6909:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"6940:38:44","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6970:4:44"},{"kind":"number","nodeType":"YulLiteral","src":"6976:1:44","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6966:3:44"},"nodeType":"YulFunctionCall","src":"6966:12:44"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6944:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"7017:31:44","statements":[{"nodeType":"YulAssignment","src":"7019:27:44","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7033:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"7041:4:44","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7029:3:44"},"nodeType":"YulFunctionCall","src":"7029:17:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7019:6:44"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6997:18:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6990:6:44"},"nodeType":"YulFunctionCall","src":"6990:26:44"},"nodeType":"YulIf","src":"6987:61:44"},{"body":{"nodeType":"YulBlock","src":"7107:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7128:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7131:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7121:6:44"},"nodeType":"YulFunctionCall","src":"7121:88:44"},"nodeType":"YulExpressionStatement","src":"7121:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7229:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7232:4:44","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7222:6:44"},"nodeType":"YulFunctionCall","src":"7222:15:44"},"nodeType":"YulExpressionStatement","src":"7222:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7257:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7260:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7250:6:44"},"nodeType":"YulFunctionCall","src":"7250:15:44"},"nodeType":"YulExpressionStatement","src":"7250:15:44"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7063:18:44"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7086:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"7094:2:44","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7083:2:44"},"nodeType":"YulFunctionCall","src":"7083:14:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7060:2:44"},"nodeType":"YulFunctionCall","src":"7060:38:44"},"nodeType":"YulIf","src":"7057:218:44"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6879:4:44","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6888:6:44","type":""}],"src":"6844:437:44"},{"body":{"nodeType":"YulBlock","src":"7460:223:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7477:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7488:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7470:6:44"},"nodeType":"YulFunctionCall","src":"7470:21:44"},"nodeType":"YulExpressionStatement","src":"7470:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7511:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7522:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7507:3:44"},"nodeType":"YulFunctionCall","src":"7507:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"7527:2:44","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7500:6:44"},"nodeType":"YulFunctionCall","src":"7500:30:44"},"nodeType":"YulExpressionStatement","src":"7500:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7550:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7561:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7546:3:44"},"nodeType":"YulFunctionCall","src":"7546:18:44"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"7566:34:44","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7539:6:44"},"nodeType":"YulFunctionCall","src":"7539:62:44"},"nodeType":"YulExpressionStatement","src":"7539:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7621:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7632:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7617:3:44"},"nodeType":"YulFunctionCall","src":"7617:18:44"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"7637:3:44","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7610:6:44"},"nodeType":"YulFunctionCall","src":"7610:31:44"},"nodeType":"YulExpressionStatement","src":"7610:31:44"},{"nodeType":"YulAssignment","src":"7650:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7662:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7673:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7658:3:44"},"nodeType":"YulFunctionCall","src":"7658:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7650:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7437:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7451:4:44","type":""}],"src":"7286:397:44"},{"body":{"nodeType":"YulBlock","src":"7862:251:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7879:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7890:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7872:6:44"},"nodeType":"YulFunctionCall","src":"7872:21:44"},"nodeType":"YulExpressionStatement","src":"7872:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7913:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7924:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7909:3:44"},"nodeType":"YulFunctionCall","src":"7909:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"7929:2:44","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7902:6:44"},"nodeType":"YulFunctionCall","src":"7902:30:44"},"nodeType":"YulExpressionStatement","src":"7902:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7952:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7963:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7948:3:44"},"nodeType":"YulFunctionCall","src":"7948:18:44"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"7968:34:44","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7941:6:44"},"nodeType":"YulFunctionCall","src":"7941:62:44"},"nodeType":"YulExpressionStatement","src":"7941:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8023:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8034:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8019:3:44"},"nodeType":"YulFunctionCall","src":"8019:18:44"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"8039:31:44","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8012:6:44"},"nodeType":"YulFunctionCall","src":"8012:59:44"},"nodeType":"YulExpressionStatement","src":"8012:59:44"},{"nodeType":"YulAssignment","src":"8080:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8092:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8103:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8088:3:44"},"nodeType":"YulFunctionCall","src":"8088:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8080:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7839:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7853:4:44","type":""}],"src":"7688:425:44"},{"body":{"nodeType":"YulBlock","src":"8292:235:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8309:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8320:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8302:6:44"},"nodeType":"YulFunctionCall","src":"8302:21:44"},"nodeType":"YulExpressionStatement","src":"8302:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8343:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8354:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8339:3:44"},"nodeType":"YulFunctionCall","src":"8339:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"8359:2:44","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8332:6:44"},"nodeType":"YulFunctionCall","src":"8332:30:44"},"nodeType":"YulExpressionStatement","src":"8332:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8382:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8393:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8378:3:44"},"nodeType":"YulFunctionCall","src":"8378:18:44"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"8398:34:44","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8371:6:44"},"nodeType":"YulFunctionCall","src":"8371:62:44"},"nodeType":"YulExpressionStatement","src":"8371:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8453:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8464:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8449:3:44"},"nodeType":"YulFunctionCall","src":"8449:18:44"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"8469:15:44","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8442:6:44"},"nodeType":"YulFunctionCall","src":"8442:43:44"},"nodeType":"YulExpressionStatement","src":"8442:43:44"},{"nodeType":"YulAssignment","src":"8494:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8506:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8517:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8502:3:44"},"nodeType":"YulFunctionCall","src":"8502:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8494:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8269:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8283:4:44","type":""}],"src":"8118:409:44"},{"body":{"nodeType":"YulBlock","src":"8613:170:44","statements":[{"body":{"nodeType":"YulBlock","src":"8659:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8668:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8671:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8661:6:44"},"nodeType":"YulFunctionCall","src":"8661:12:44"},"nodeType":"YulExpressionStatement","src":"8661:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8634:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"8643:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8630:3:44"},"nodeType":"YulFunctionCall","src":"8630:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"8655:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8626:3:44"},"nodeType":"YulFunctionCall","src":"8626:32:44"},"nodeType":"YulIf","src":"8623:52:44"},{"nodeType":"YulVariableDeclaration","src":"8684:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8703:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8697:5:44"},"nodeType":"YulFunctionCall","src":"8697:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8688:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8747:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8722:24:44"},"nodeType":"YulFunctionCall","src":"8722:31:44"},"nodeType":"YulExpressionStatement","src":"8722:31:44"},{"nodeType":"YulAssignment","src":"8762:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"8772:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8762:6:44"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8579:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8590:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8602:6:44","type":""}],"src":"8532:251:44"},{"body":{"nodeType":"YulBlock","src":"8945:211:44","statements":[{"nodeType":"YulAssignment","src":"8955:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8967:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8978:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8963:3:44"},"nodeType":"YulFunctionCall","src":"8963:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8955:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8997:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"9008:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8990:6:44"},"nodeType":"YulFunctionCall","src":"8990:25:44"},"nodeType":"YulExpressionStatement","src":"8990:25:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9035:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9046:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9031:3:44"},"nodeType":"YulFunctionCall","src":"9031:18:44"},{"name":"value1","nodeType":"YulIdentifier","src":"9051:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9024:6:44"},"nodeType":"YulFunctionCall","src":"9024:34:44"},"nodeType":"YulExpressionStatement","src":"9024:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9078:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9089:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9074:3:44"},"nodeType":"YulFunctionCall","src":"9074:18:44"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9098:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"9106:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9094:3:44"},"nodeType":"YulFunctionCall","src":"9094:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9067:6:44"},"nodeType":"YulFunctionCall","src":"9067:83:44"},"nodeType":"YulExpressionStatement","src":"9067:83:44"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_address__to_t_bytes32_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8898:9:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8909:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8917:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8925:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8936:4:44","type":""}],"src":"8788:368:44"},{"body":{"nodeType":"YulBlock","src":"9242:103:44","statements":[{"body":{"nodeType":"YulBlock","src":"9288:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9297:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9300:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9290:6:44"},"nodeType":"YulFunctionCall","src":"9290:12:44"},"nodeType":"YulExpressionStatement","src":"9290:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9263:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"9272:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9259:3:44"},"nodeType":"YulFunctionCall","src":"9259:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"9284:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9255:3:44"},"nodeType":"YulFunctionCall","src":"9255:32:44"},"nodeType":"YulIf","src":"9252:52:44"},{"nodeType":"YulAssignment","src":"9313:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9329:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9323:5:44"},"nodeType":"YulFunctionCall","src":"9323:16:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9313:6:44"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9208:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9219:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9231:6:44","type":""}],"src":"9161:184:44"},{"body":{"nodeType":"YulBlock","src":"9479:168:44","statements":[{"nodeType":"YulAssignment","src":"9489:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9501:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9512:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9497:3:44"},"nodeType":"YulFunctionCall","src":"9497:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9489:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9531:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"9542:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9524:6:44"},"nodeType":"YulFunctionCall","src":"9524:25:44"},"nodeType":"YulExpressionStatement","src":"9524:25:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9569:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9580:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9565:3:44"},"nodeType":"YulFunctionCall","src":"9565:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9589:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"9597:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9585:3:44"},"nodeType":"YulFunctionCall","src":"9585:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9558:6:44"},"nodeType":"YulFunctionCall","src":"9558:83:44"},"nodeType":"YulExpressionStatement","src":"9558:83:44"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9440:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9451:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9459:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9470:4:44","type":""}],"src":"9350:297:44"},{"body":{"nodeType":"YulBlock","src":"9826:231:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9843:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9854:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9836:6:44"},"nodeType":"YulFunctionCall","src":"9836:21:44"},"nodeType":"YulExpressionStatement","src":"9836:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9877:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9888:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9873:3:44"},"nodeType":"YulFunctionCall","src":"9873:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"9893:2:44","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9866:6:44"},"nodeType":"YulFunctionCall","src":"9866:30:44"},"nodeType":"YulExpressionStatement","src":"9866:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9916:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9927:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9912:3:44"},"nodeType":"YulFunctionCall","src":"9912:18:44"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"9932:34:44","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9905:6:44"},"nodeType":"YulFunctionCall","src":"9905:62:44"},"nodeType":"YulExpressionStatement","src":"9905:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9987:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9998:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9983:3:44"},"nodeType":"YulFunctionCall","src":"9983:18:44"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"10003:11:44","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9976:6:44"},"nodeType":"YulFunctionCall","src":"9976:39:44"},"nodeType":"YulExpressionStatement","src":"9976:39:44"},{"nodeType":"YulAssignment","src":"10024:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10036:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10047:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10032:3:44"},"nodeType":"YulFunctionCall","src":"10032:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10024:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9803:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9817:4:44","type":""}],"src":"9652:405:44"},{"body":{"nodeType":"YulBlock","src":"10110:231:44","statements":[{"nodeType":"YulAssignment","src":"10120:16:44","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10131:1:44"},{"name":"y","nodeType":"YulIdentifier","src":"10134:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10127:3:44"},"nodeType":"YulFunctionCall","src":"10127:9:44"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10120:3:44"}]},{"body":{"nodeType":"YulBlock","src":"10167:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10188:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10191:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10181:6:44"},"nodeType":"YulFunctionCall","src":"10181:88:44"},"nodeType":"YulExpressionStatement","src":"10181:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10289:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10292:4:44","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10282:6:44"},"nodeType":"YulFunctionCall","src":"10282:15:44"},"nodeType":"YulExpressionStatement","src":"10282:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10317:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10320:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10310:6:44"},"nodeType":"YulFunctionCall","src":"10310:15:44"},"nodeType":"YulExpressionStatement","src":"10310:15:44"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10151:1:44"},{"name":"sum","nodeType":"YulIdentifier","src":"10154:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10148:2:44"},"nodeType":"YulFunctionCall","src":"10148:10:44"},"nodeType":"YulIf","src":"10145:190:44"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10093:1:44","type":""},{"name":"y","nodeType":"YulTypedName","src":"10096:1:44","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10102:3:44","type":""}],"src":"10062:279:44"},{"body":{"nodeType":"YulBlock","src":"10533:309:44","statements":[{"nodeType":"YulVariableDeclaration","src":"10543:27:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10563:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10557:5:44"},"nodeType":"YulFunctionCall","src":"10557:13:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10547:6:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10618:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"10626:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10614:3:44"},"nodeType":"YulFunctionCall","src":"10614:17:44"},{"name":"pos","nodeType":"YulIdentifier","src":"10633:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"10638:6:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10579:34:44"},"nodeType":"YulFunctionCall","src":"10579:66:44"},"nodeType":"YulExpressionStatement","src":"10579:66:44"},{"nodeType":"YulVariableDeclaration","src":"10654:29:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10671:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"10676:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10667:3:44"},"nodeType":"YulFunctionCall","src":"10667:16:44"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"10658:5:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10692:29:44","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10714:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10708:5:44"},"nodeType":"YulFunctionCall","src":"10708:13:44"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10696:8:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10769:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"10777:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10765:3:44"},"nodeType":"YulFunctionCall","src":"10765:17:44"},{"name":"end_1","nodeType":"YulIdentifier","src":"10784:5:44"},{"name":"length_1","nodeType":"YulIdentifier","src":"10791:8:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10730:34:44"},"nodeType":"YulFunctionCall","src":"10730:70:44"},"nodeType":"YulExpressionStatement","src":"10730:70:44"},{"nodeType":"YulAssignment","src":"10809:27:44","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"10820:5:44"},{"name":"length_1","nodeType":"YulIdentifier","src":"10827:8:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10816:3:44"},"nodeType":"YulFunctionCall","src":"10816:20:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10809:3:44"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10501:3:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10506:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10514:6:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10525:3:44","type":""}],"src":"10346:496:44"},{"body":{"nodeType":"YulBlock","src":"11021:228:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11038:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11049:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11031:6:44"},"nodeType":"YulFunctionCall","src":"11031:21:44"},"nodeType":"YulExpressionStatement","src":"11031:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11072:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11083:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11068:3:44"},"nodeType":"YulFunctionCall","src":"11068:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"11088:2:44","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11061:6:44"},"nodeType":"YulFunctionCall","src":"11061:30:44"},"nodeType":"YulExpressionStatement","src":"11061:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11111:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11122:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:44"},"nodeType":"YulFunctionCall","src":"11107:18:44"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"11127:34:44","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:44"},"nodeType":"YulFunctionCall","src":"11100:62:44"},"nodeType":"YulExpressionStatement","src":"11100:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11182:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11193:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11178:3:44"},"nodeType":"YulFunctionCall","src":"11178:18:44"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"11198:8:44","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11171:6:44"},"nodeType":"YulFunctionCall","src":"11171:36:44"},"nodeType":"YulExpressionStatement","src":"11171:36:44"},{"nodeType":"YulAssignment","src":"11216:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11228:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11239:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11224:3:44"},"nodeType":"YulFunctionCall","src":"11224:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11216:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10998:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11012:4:44","type":""}],"src":"10847:402:44"},{"body":{"nodeType":"YulBlock","src":"11428:174:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11445:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11456:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11438:6:44"},"nodeType":"YulFunctionCall","src":"11438:21:44"},"nodeType":"YulExpressionStatement","src":"11438:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11479:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11490:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11475:3:44"},"nodeType":"YulFunctionCall","src":"11475:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"11495:2:44","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11468:6:44"},"nodeType":"YulFunctionCall","src":"11468:30:44"},"nodeType":"YulExpressionStatement","src":"11468:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11518:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11529:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11514:3:44"},"nodeType":"YulFunctionCall","src":"11514:18:44"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"11534:26:44","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11507:6:44"},"nodeType":"YulFunctionCall","src":"11507:54:44"},"nodeType":"YulExpressionStatement","src":"11507:54:44"},{"nodeType":"YulAssignment","src":"11570:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11582:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11593:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11578:3:44"},"nodeType":"YulFunctionCall","src":"11578:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11570:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11405:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11419:4:44","type":""}],"src":"11254:348:44"},{"body":{"nodeType":"YulBlock","src":"11781:227:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11798:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11809:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11791:6:44"},"nodeType":"YulFunctionCall","src":"11791:21:44"},"nodeType":"YulExpressionStatement","src":"11791:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11832:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11843:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11828:3:44"},"nodeType":"YulFunctionCall","src":"11828:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"11848:2:44","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11821:6:44"},"nodeType":"YulFunctionCall","src":"11821:30:44"},"nodeType":"YulExpressionStatement","src":"11821:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11871:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11882:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11867:3:44"},"nodeType":"YulFunctionCall","src":"11867:18:44"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"11887:34:44","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11860:6:44"},"nodeType":"YulFunctionCall","src":"11860:62:44"},"nodeType":"YulExpressionStatement","src":"11860:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11942:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11953:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11938:3:44"},"nodeType":"YulFunctionCall","src":"11938:18:44"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"11958:7:44","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11931:6:44"},"nodeType":"YulFunctionCall","src":"11931:35:44"},"nodeType":"YulExpressionStatement","src":"11931:35:44"},{"nodeType":"YulAssignment","src":"11975:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11987:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11998:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11983:3:44"},"nodeType":"YulFunctionCall","src":"11983:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11975:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11758:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11772:4:44","type":""}],"src":"11607:401:44"},{"body":{"nodeType":"YulBlock","src":"12187:226:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12204:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12215:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12197:6:44"},"nodeType":"YulFunctionCall","src":"12197:21:44"},"nodeType":"YulExpressionStatement","src":"12197:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12238:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12249:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12234:3:44"},"nodeType":"YulFunctionCall","src":"12234:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"12254:2:44","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12227:6:44"},"nodeType":"YulFunctionCall","src":"12227:30:44"},"nodeType":"YulExpressionStatement","src":"12227:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12277:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12288:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12273:3:44"},"nodeType":"YulFunctionCall","src":"12273:18:44"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"12293:34:44","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12266:6:44"},"nodeType":"YulFunctionCall","src":"12266:62:44"},"nodeType":"YulExpressionStatement","src":"12266:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12348:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12359:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12344:3:44"},"nodeType":"YulFunctionCall","src":"12344:18:44"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"12364:6:44","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12337:6:44"},"nodeType":"YulFunctionCall","src":"12337:34:44"},"nodeType":"YulExpressionStatement","src":"12337:34:44"},{"nodeType":"YulAssignment","src":"12380:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12392:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12403:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12388:3:44"},"nodeType":"YulFunctionCall","src":"12388:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12380:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12164:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12178:4:44","type":""}],"src":"12013:400:44"},{"body":{"nodeType":"YulBlock","src":"12592:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12609:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12620:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12602:6:44"},"nodeType":"YulFunctionCall","src":"12602:21:44"},"nodeType":"YulExpressionStatement","src":"12602:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12643:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12654:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12639:3:44"},"nodeType":"YulFunctionCall","src":"12639:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"12659:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12632:6:44"},"nodeType":"YulFunctionCall","src":"12632:30:44"},"nodeType":"YulExpressionStatement","src":"12632:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12682:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12693:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12678:3:44"},"nodeType":"YulFunctionCall","src":"12678:18:44"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12698:34:44","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12671:6:44"},"nodeType":"YulFunctionCall","src":"12671:62:44"},"nodeType":"YulExpressionStatement","src":"12671:62:44"},{"nodeType":"YulAssignment","src":"12742:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12754:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12765:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12750:3:44"},"nodeType":"YulFunctionCall","src":"12750:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12742:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12569:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12583:4:44","type":""}],"src":"12418:356:44"},{"body":{"nodeType":"YulBlock","src":"12953:175:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12970:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12981:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12963:6:44"},"nodeType":"YulFunctionCall","src":"12963:21:44"},"nodeType":"YulExpressionStatement","src":"12963:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13004:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13015:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13000:3:44"},"nodeType":"YulFunctionCall","src":"13000:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"13020:2:44","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12993:6:44"},"nodeType":"YulFunctionCall","src":"12993:30:44"},"nodeType":"YulExpressionStatement","src":"12993:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13043:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13054:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13039:3:44"},"nodeType":"YulFunctionCall","src":"13039:18:44"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"13059:27:44","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13032:6:44"},"nodeType":"YulFunctionCall","src":"13032:55:44"},"nodeType":"YulExpressionStatement","src":"13032:55:44"},{"nodeType":"YulAssignment","src":"13096:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13108:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13119:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13104:3:44"},"nodeType":"YulFunctionCall","src":"13104:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13096:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12930:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12944:4:44","type":""}],"src":"12779:349:44"},{"body":{"nodeType":"YulBlock","src":"13307:240:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13324:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13335:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13317:6:44"},"nodeType":"YulFunctionCall","src":"13317:21:44"},"nodeType":"YulExpressionStatement","src":"13317:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13358:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13369:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13354:3:44"},"nodeType":"YulFunctionCall","src":"13354:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"13374:2:44","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13347:6:44"},"nodeType":"YulFunctionCall","src":"13347:30:44"},"nodeType":"YulExpressionStatement","src":"13347:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13397:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13408:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13393:3:44"},"nodeType":"YulFunctionCall","src":"13393:18:44"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"13413:34:44","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13386:6:44"},"nodeType":"YulFunctionCall","src":"13386:62:44"},"nodeType":"YulExpressionStatement","src":"13386:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13468:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13479:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13464:3:44"},"nodeType":"YulFunctionCall","src":"13464:18:44"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"13484:20:44","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13457:6:44"},"nodeType":"YulFunctionCall","src":"13457:48:44"},"nodeType":"YulExpressionStatement","src":"13457:48:44"},{"nodeType":"YulAssignment","src":"13514:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13526:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13537:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13522:3:44"},"nodeType":"YulFunctionCall","src":"13522:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13514:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13284:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13298:4:44","type":""}],"src":"13133:414:44"},{"body":{"nodeType":"YulBlock","src":"13584:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13601:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13604:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13594:6:44"},"nodeType":"YulFunctionCall","src":"13594:88:44"},"nodeType":"YulExpressionStatement","src":"13594:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13698:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13701:4:44","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13691:6:44"},"nodeType":"YulFunctionCall","src":"13691:15:44"},"nodeType":"YulExpressionStatement","src":"13691:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13722:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13725:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13715:6:44"},"nodeType":"YulFunctionCall","src":"13715:15:44"},"nodeType":"YulExpressionStatement","src":"13715:15:44"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"13552:184:44"},{"body":{"nodeType":"YulBlock","src":"13915:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13932:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13943:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13925:6:44"},"nodeType":"YulFunctionCall","src":"13925:21:44"},"nodeType":"YulExpressionStatement","src":"13925:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13966:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"13977:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13962:3:44"},"nodeType":"YulFunctionCall","src":"13962:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"13982:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13955:6:44"},"nodeType":"YulFunctionCall","src":"13955:30:44"},"nodeType":"YulExpressionStatement","src":"13955:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14005:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14016:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14001:3:44"},"nodeType":"YulFunctionCall","src":"14001:18:44"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"14021:34:44","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13994:6:44"},"nodeType":"YulFunctionCall","src":"13994:62:44"},"nodeType":"YulExpressionStatement","src":"13994:62:44"},{"nodeType":"YulAssignment","src":"14065:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14077:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14088:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14073:3:44"},"nodeType":"YulFunctionCall","src":"14073:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14065:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13892:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13906:4:44","type":""}],"src":"13741:356:44"},{"body":{"nodeType":"YulBlock","src":"14276:178:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14293:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14304:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14286:6:44"},"nodeType":"YulFunctionCall","src":"14286:21:44"},"nodeType":"YulExpressionStatement","src":"14286:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14327:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14338:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14323:3:44"},"nodeType":"YulFunctionCall","src":"14323:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"14343:2:44","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14316:6:44"},"nodeType":"YulFunctionCall","src":"14316:30:44"},"nodeType":"YulExpressionStatement","src":"14316:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14366:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14377:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14362:3:44"},"nodeType":"YulFunctionCall","src":"14362:18:44"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"14382:30:44","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14355:6:44"},"nodeType":"YulFunctionCall","src":"14355:58:44"},"nodeType":"YulExpressionStatement","src":"14355:58:44"},{"nodeType":"YulAssignment","src":"14422:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14434:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14445:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14430:3:44"},"nodeType":"YulFunctionCall","src":"14430:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14422:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14253:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14267:4:44","type":""}],"src":"14102:352:44"},{"body":{"nodeType":"YulBlock","src":"14662:309:44","statements":[{"nodeType":"YulVariableDeclaration","src":"14672:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"14682:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14676:2:44","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14740:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14755:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"14763:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14751:3:44"},"nodeType":"YulFunctionCall","src":"14751:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14733:6:44"},"nodeType":"YulFunctionCall","src":"14733:34:44"},"nodeType":"YulExpressionStatement","src":"14733:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14787:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14798:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14783:3:44"},"nodeType":"YulFunctionCall","src":"14783:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14807:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"14815:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14803:3:44"},"nodeType":"YulFunctionCall","src":"14803:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14776:6:44"},"nodeType":"YulFunctionCall","src":"14776:43:44"},"nodeType":"YulExpressionStatement","src":"14776:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14839:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14850:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14835:3:44"},"nodeType":"YulFunctionCall","src":"14835:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"14855:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14828:6:44"},"nodeType":"YulFunctionCall","src":"14828:34:44"},"nodeType":"YulExpressionStatement","src":"14828:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14882:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14893:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14878:3:44"},"nodeType":"YulFunctionCall","src":"14878:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"14898:3:44","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14871:6:44"},"nodeType":"YulFunctionCall","src":"14871:31:44"},"nodeType":"YulExpressionStatement","src":"14871:31:44"},{"nodeType":"YulAssignment","src":"14911:54:44","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14937:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14949:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14960:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14945:3:44"},"nodeType":"YulFunctionCall","src":"14945:19:44"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14919:17:44"},"nodeType":"YulFunctionCall","src":"14919:46:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14911:4:44"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14607:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14618:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14626:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14634:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14642:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14653:4:44","type":""}],"src":"14459:512:44"},{"body":{"nodeType":"YulBlock","src":"15056:169:44","statements":[{"body":{"nodeType":"YulBlock","src":"15102:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15111:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15114:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15104:6:44"},"nodeType":"YulFunctionCall","src":"15104:12:44"},"nodeType":"YulExpressionStatement","src":"15104:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15077:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"15086:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15073:3:44"},"nodeType":"YulFunctionCall","src":"15073:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"15098:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15069:3:44"},"nodeType":"YulFunctionCall","src":"15069:32:44"},"nodeType":"YulIf","src":"15066:52:44"},{"nodeType":"YulVariableDeclaration","src":"15127:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15146:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15140:5:44"},"nodeType":"YulFunctionCall","src":"15140:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15131:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15189:5:44"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"15165:23:44"},"nodeType":"YulFunctionCall","src":"15165:30:44"},"nodeType":"YulExpressionStatement","src":"15165:30:44"},{"nodeType":"YulAssignment","src":"15204:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"15214:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15204:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15022:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15033:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15045:6:44","type":""}],"src":"14976:249:44"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_address__to_t_bytes32_t_bytes32_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101cf5760003560e01c806395d89b4111610104578063c87b56dd116100a2578063e985e9c511610071578063e985e9c5146103e0578063f2fde38b1461041c578063f6a74ed71461042f578063fca247ac1461044257600080fd5b8063c87b56dd14610381578063d6e4fa8614610394578063da8c229e146103b4578063ddf7fcb0146103d757600080fd5b8063a7fc7a07116100de578063a7fc7a071461033e578063b88d4fde14610351578063c1a287e214610364578063c475abff1461036e57600080fd5b806395d89b411461031057806396e494e814610318578063a22cb4651461032b57600080fd5b80633f15457f116101715780636352211e1161014b5780636352211e146102d157806370a08231146102e4578063715018a6146102f75780638da5cb5b146102ff57600080fd5b80633f15457f1461029857806342842e0e146102ab5780634e543b26146102be57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780630e297b451461025157806323b872dd1461027257806328ed4f6c1461028557600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611b38565b610455565b60405190151581526020015b60405180910390f35b6102046104f2565b6040516101f39190611ba5565b61022461021f366004611bb8565b610584565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611be6565b6105ab565b005b61026461025f366004611c12565b6106e1565b6040519081526020016101f3565b61024f610280366004611c4a565b6106f8565b61024f610293366004611c7a565b61077f565b600854610224906001600160a01b031681565b61024f6102b9366004611c4a565b610898565b61024f6102cc366004611caa565b6108b3565b6102246102df366004611bb8565b610941565b6102646102f2366004611caa565b610964565b61024f6109fe565b6006546001600160a01b0316610224565b610204610a12565b6101e7610326366004611bb8565b610a21565b61024f610339366004611cc7565b610a47565b61024f61034c366004611caa565b610a56565b61024f61035f366004611d10565b610aaa565b6102646276a70081565b61026461037c366004611df0565b610b38565b61020461038f366004611bb8565b610cc9565b6102646103a2366004611bb8565b60009081526007602052604090205490565b6101e76103c2366004611caa565b600a6020526000908152604090205460ff1681565b61026460095481565b6101e76103ee366004611e12565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61024f61042a366004611caa565b610d3d565b61024f61043d366004611caa565b610dcd565b610264610450366004611c12565b610e1e565b60006001600160e01b031982167f01ffc9a70000000000000000000000000000000000000000000000000000000014806104b857506001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806104ec57506001600160e01b031982167f28ed4f6c00000000000000000000000000000000000000000000000000000000145b92915050565b60606000805461050190611e40565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90611e40565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b5050505050905090565b600061058f82610e2d565b506000908152600460205260409020546001600160a01b031690565b60006105b682610e91565b9050806001600160a01b0316836001600160a01b0316036106445760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610660575061066081336103ee565b6106d25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161063b565b6106dc8383610ef6565b505050565b60006106f08484846000610f71565b949350505050565b6107023382611181565b6107745760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161063b565b6106dc8383836111fc565b6008546009546040516302571be360e01b8152600481019190915230916001600160a01b0316906302571be390602401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611e7a565b6001600160a01b03161461080357600080fd5b61080d3383611181565b61081657600080fd5b6008546009546040516306ab592360e01b81526004810191909152602481018490526001600160a01b038381166044830152909116906306ab5923906064016020604051808303816000875af1158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611e97565b6106dc83838360405180602001604052806000815250610aaa565b6108bb611402565b6008546009546040517f1896f70a00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b03838116602483015290911690631896f70a90604401600060405180830381600087803b15801561092657600080fd5b505af115801561093a573d6000803e3d6000fd5b5050505050565b600081815260076020526040812054421061095b57600080fd5b6104ec82610e91565b60006001600160a01b0382166109e25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161063b565b506001600160a01b031660009081526003602052604090205490565b610a06611402565b610a10600061145c565b565b60606001805461050190611e40565b6000818152600760205260408120544290610a40906276a70090611eb0565b1092915050565b610a523383836114bb565b5050565b610a5e611402565b6001600160a01b0381166000818152600a6020526040808220805460ff19166001179055517f0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d74749190a250565b610ab43383611181565b610b265760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161063b565b610b3284848484611589565b50505050565b6008546009546040516302571be360e01b8152600481019190915260009130916001600160a01b03909116906302571be390602401602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190611e7a565b6001600160a01b031614610bc157600080fd5b336000908152600a602052604090205460ff16610bdd57600080fd5b6000838152600760205260409020544290610bfc906276a70090611eb0565b1015610c0757600080fd5b610c146276a70083611eb0565b6000848152600760205260409020546276a70090610c33908590611eb0565b610c3d9190611eb0565b11610c4757600080fd5b60008381526007602052604081208054849290610c65908490611eb0565b90915550506000838152600760205260409081902054905184917f9b87a00e30f1ac65d898f070f8a3488fe60517182d0a2098e1b4b93a54aa9bd691610cad91815260200190565b60405180910390a2505060009081526007602052604090205490565b6060610cd482610e2d565b6000610ceb60408051602081019091526000815290565b90506000815111610d0b5760405180602001604052806000815250610d36565b80610d1584611612565b604051602001610d26929190611ed1565b6040516020818303038152906040525b9392505050565b610d45611402565b6001600160a01b038116610dc15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161063b565b610dca8161145c565b50565b610dd5611402565b6001600160a01b0381166000818152600a6020526040808220805460ff19169055517f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e811139190a250565b60006106f08484846001610f71565b6000818152600260205260409020546001600160a01b0316610dca5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161063b565b6000818152600260205260408120546001600160a01b0316806104ec5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161063b565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610f3882610e91565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6008546009546040516302571be360e01b8152600481019190915260009130916001600160a01b03909116906302571be390602401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611e7a565b6001600160a01b031614610ffa57600080fd5b336000908152600a602052604090205460ff1661101657600080fd5b61101f85610a21565b61102857600080fd5b6110356276a70042611eb0565b6276a7006110438542611eb0565b61104d9190611eb0565b1161105757600080fd5b6110618342611eb0565b6000868152600760209081526040808320939093556002905220546001600160a01b03161561109357611093856116b2565b61109d8486611754565b8115611127576008546009546040516306ab592360e01b81526004810191909152602481018790526001600160a01b038681166044830152909116906306ab5923906064016020604051808303816000875af1158015611101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111259190611e97565b505b6001600160a01b038416857fb3d987963d01b2f68493b4bdb130988f157ea43070d4ad840fee0466ed9370d961115d8642611eb0565b60405190815260200160405180910390a36111788342611eb0565b95945050505050565b60008061118d83610941565b9050806001600160a01b0316846001600160a01b031614806111c85750836001600160a01b03166111bd84610584565b6001600160a01b0316145b806106f057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166106f0565b826001600160a01b031661120f82610e91565b6001600160a01b0316146112735760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063b565b6001600160a01b0382166112ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161063b565b826001600160a01b031661130182610e91565b6001600160a01b0316146113655760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063b565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b03163314610a105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063b565b600680546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361151c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161063b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6115948484846111fc565b6115a0848484846118ec565b610b325760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161063b565b6060600061161f83611a40565b600101905060008167ffffffffffffffff81111561163f5761163f611cfa565b6040519080825280601f01601f191660200182016040528015611669576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461167357509392505050565b60006116bd82610e91565b90506116c882610e91565b6000838152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166117aa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161063b565b6000818152600260205260409020546001600160a01b03161561180f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063b565b6000818152600260205260409020546001600160a01b0316156118745760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063b565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15611a3857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611930903390899088908890600401611f00565b6020604051808303816000875af192505050801561196b575060408051601f3d908101601f1916820190925261196891810190611f3c565b60015b611a1e573d808015611999576040519150601f19603f3d011682016040523d82523d6000602084013e61199e565b606091505b508051600003611a165760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161063b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106f0565b5060016106f0565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611a89577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611ab5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ad357662386f26fc10000830492506010015b6305f5e1008310611aeb576305f5e100830492506008015b6127108310611aff57612710830492506004015b60648310611b11576064830492506002015b600a83106104ec5760010192915050565b6001600160e01b031981168114610dca57600080fd5b600060208284031215611b4a57600080fd5b8135610d3681611b22565b60005b83811015611b70578181015183820152602001611b58565b50506000910152565b60008151808452611b91816020860160208601611b55565b601f01601f19169290920160200192915050565b602081526000610d366020830184611b79565b600060208284031215611bca57600080fd5b5035919050565b6001600160a01b0381168114610dca57600080fd5b60008060408385031215611bf957600080fd5b8235611c0481611bd1565b946020939093013593505050565b600080600060608486031215611c2757600080fd5b833592506020840135611c3981611bd1565b929592945050506040919091013590565b600080600060608486031215611c5f57600080fd5b8335611c6a81611bd1565b92506020840135611c3981611bd1565b60008060408385031215611c8d57600080fd5b823591506020830135611c9f81611bd1565b809150509250929050565b600060208284031215611cbc57600080fd5b8135610d3681611bd1565b60008060408385031215611cda57600080fd5b8235611ce581611bd1565b915060208301358015158114611c9f57600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d2657600080fd5b8435611d3181611bd1565b93506020850135611d4181611bd1565b925060408501359150606085013567ffffffffffffffff80821115611d6557600080fd5b818701915087601f830112611d7957600080fd5b813581811115611d8b57611d8b611cfa565b604051601f8201601f19908116603f01168101908382118183101715611db357611db3611cfa565b816040528281528a6020848701011115611dcc57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611e0357600080fd5b50508035926020909101359150565b60008060408385031215611e2557600080fd5b8235611e3081611bd1565b91506020830135611c9f81611bd1565b600181811c90821680611e5457607f821691505b602082108103611e7457634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611e8c57600080fd5b8151610d3681611bd1565b600060208284031215611ea957600080fd5b5051919050565b808201808211156104ec57634e487b7160e01b600052601160045260246000fd5b60008351611ee3818460208801611b55565b835190830190611ef7818360208801611b55565b01949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611f326080830184611b79565b9695505050505050565b600060208284031215611f4e57600080fd5b8151610d3681611b2256fea2646970667358221220892b0ae5b6e1986f25f3bb48a77b4181d9d4f63fb581f211ba3e8b610aa151a564736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x95D89B41 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0xF6A74ED7 EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0xFCA247AC EQ PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0xD6E4FA86 EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0xDA8C229E EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0xDDF7FCB0 EQ PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA7FC7A07 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xA7FC7A07 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0xC1A287E2 EQ PUSH2 0x364 JUMPI DUP1 PUSH4 0xC475ABFF EQ PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x96E494E8 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F15457F GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F15457F EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x4E543B26 EQ PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xE297B45 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x28ED4F6C EQ PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B38 JUMP JUMPDEST PUSH2 0x455 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x584 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE6 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x264 PUSH2 0x25F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C12 JUMP JUMPDEST PUSH2 0x6E1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x6F8 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C7A JUMP JUMPDEST PUSH2 0x77F JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x224 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x2DF CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x941 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x964 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x9FE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x224 JUMP JUMPDEST PUSH2 0x204 PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0xA21 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CC7 JUMP JUMPDEST PUSH2 0xA47 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x34C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0xA56 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x35F CALLDATASIZE PUSH1 0x4 PUSH2 0x1D10 JUMP JUMPDEST PUSH2 0xAAA JUMP JUMPDEST PUSH2 0x264 PUSH3 0x76A700 DUP2 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x37C CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x38F CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0xCC9 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB8 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x264 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x42A CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0xD3D JUMP JUMPDEST PUSH2 0x24F PUSH2 0x43D CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x264 PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C12 JUMP JUMPDEST PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x4B8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x4EC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x28ED4F6C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x501 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x52D SWAP1 PUSH2 0x1E40 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x57A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x54F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58F DUP3 PUSH2 0xE2D JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B6 DUP3 PUSH2 0xE91 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x644 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x660 JUMPI POP PUSH2 0x660 DUP2 CALLER PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x6D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0x6DC DUP4 DUP4 PUSH2 0xEF6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6F0 DUP5 DUP5 DUP5 PUSH1 0x0 PUSH2 0xF71 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x702 CALLER DUP3 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0x6DC DUP4 DUP4 DUP4 PUSH2 0x11FC JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F0 SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x80D CALLER DUP4 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6AB5923 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x6AB5923 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x874 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DC SWAP2 SWAP1 PUSH2 0x1E97 JUMP JUMPDEST PUSH2 0x6DC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAAA JUMP JUMPDEST PUSH2 0x8BB PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1896F70A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x1896F70A SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x93A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD TIMESTAMP LT PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EC DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA06 PUSH2 0x1402 JUMP JUMPDEST PUSH2 0xA10 PUSH1 0x0 PUSH2 0x145C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x501 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0xA40 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST LT SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA52 CALLER DUP4 DUP4 PUSH2 0x14BB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA5E PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xA8BB31534C0ED46F380CB867BD5C803A189CED9A764E30B3A4991A9901D7474 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xAB4 CALLER DUP4 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0xB26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0xB32 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1589 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBAE SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xBDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0xBFC SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST LT ISZERO PUSH2 0xC07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC14 PUSH3 0x76A700 DUP4 PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x76A700 SWAP1 PUSH2 0xC33 SWAP1 DUP6 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST PUSH2 0xC3D SWAP2 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST GT PUSH2 0xC47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xC65 SWAP1 DUP5 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD DUP5 SWAP2 PUSH32 0x9B87A00E30F1AC65D898F070F8A3488FE60517182D0A2098E1B4B93A54AA9BD6 SWAP2 PUSH2 0xCAD SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCD4 DUP3 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEB PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xD0B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD36 JUMP JUMPDEST DUP1 PUSH2 0xD15 DUP5 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD26 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD45 PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH2 0xDCA DUP2 PUSH2 0x145C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDD5 PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0x33D83959BE2573F5453B12EB9D43B3499BC57D96BD2F067BA44803C859E81113 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6F0 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xF71 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xF38 DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFE7 SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x101F DUP6 PUSH2 0xA21 JUMP JUMPDEST PUSH2 0x1028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1035 PUSH3 0x76A700 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH3 0x76A700 PUSH2 0x1043 DUP6 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH2 0x104D SWAP2 SWAP1 PUSH2 0x1EB0 JUMP JUMPDEST GT PUSH2 0x1057 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1061 DUP4 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1093 DUP6 PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x109D DUP5 DUP7 PUSH2 0x1754 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1127 JUMPI PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6AB5923 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x6AB5923 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1101 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1125 SWAP2 SWAP1 PUSH2 0x1E97 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP6 PUSH32 0xB3D987963D01B2F68493B4BDB130988F157EA43070D4AD840FEE0466ED9370D9 PUSH2 0x115D DUP7 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1178 DUP4 TIMESTAMP PUSH2 0x1EB0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x118D DUP4 PUSH2 0x941 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x11C8 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11BD DUP5 PUSH2 0x584 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x6F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x6F0 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x120F DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1273 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x12EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1301 DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1365 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x151C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1594 DUP5 DUP5 DUP5 PUSH2 0x11FC JUMP JUMPDEST PUSH2 0x15A0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x18EC JUMP JUMPDEST PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x161F DUP4 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x163F JUMPI PUSH2 0x163F PUSH2 0x1CFA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1669 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1673 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16BD DUP3 PUSH2 0xE91 JUMP JUMPDEST SWAP1 POP PUSH2 0x16C8 DUP3 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE PUSH1 0x3 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE DUP8 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP DUP5 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x17AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x180F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1874 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1A38 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1930 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F00 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x196B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1968 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A1E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1999 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x199E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1A16 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x6F0 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x6F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1A89 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1AB5 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1AD3 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1AEB JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1AFF JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1B11 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x4EC JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD36 DUP2 PUSH2 0x1B22 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B70 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B58 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B91 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B55 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD36 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C04 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1C39 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1C6A DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1C39 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1C9F DUP2 PUSH2 0x1BD1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD36 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CE5 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1D31 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1D41 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D8B JUMPI PUSH2 0x1D8B PUSH2 0x1CFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1DB3 JUMPI PUSH2 0x1DB3 PUSH2 0x1CFA JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1E30 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1C9F DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E54 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E74 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD36 DUP2 PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4EC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1EE3 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1B55 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1EF7 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1B55 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1F32 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1B79 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD36 DUP2 PUSH2 0x1B22 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0x2B EXP 0xE5 0xB6 0xE1 SWAP9 PUSH16 0x25F3BB48A77B4181D9D4F63FB581F211 0xBA RETURNDATACOPY DUP12 PUSH2 0xAA1 MLOAD 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"199:6853:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6787:263;;;;;;:::i;:::-;;:::i;:::-;;;611:14:44;;604:22;586:41;;574:2;559:18;6787:263:14;;;;;;;;2471:98:3;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1743:55:44;;;1725:74;;1713:2;1698:18;3935:167:3;1579:226:44;3468:406:3;;;;;;:::i;:::-;;:::i;:::-;;5006:187:14;;;;;;:::i;:::-;;:::i;:::-;;;2823:25:44;;;2811:2;2796:18;5006:187:14;2677:177:44;4612:296:3;;;;;;:::i;:::-;;:::i;6593:188:14:-;;;;;;:::i;:::-;;:::i;372:14::-;;;;;-1:-1:-1;;;;;372:14:14;;;4974:149:3;;;;;;:::i;:::-;;:::i;3720:119:14:-;;;;;;:::i;:::-;;:::i;2992:204::-;;;;;;:::i;:::-;;:::i;1929::3:-;;;;;;:::i;:::-;;:::i;1824:101:0:-;;;:::i;1201:85::-;1273:6;;-1:-1:-1;;;;;1273:6:0;1201:85;;2633:102:3;;;:::i;4096:209:14:-;;;;;;:::i;:::-;;:::i;4169:153:3:-;;;;;;:::i;:::-;;:::i;3270:160:14:-;;;;;;:::i;:::-;;:::i;5189:276:3:-;;;;;;:::i;:::-;;:::i;607:46:14:-;;646:7;607:46;;6005:486;;;;;;:::i;:::-;;:::i;2801:276:3:-;;;;;;:::i;:::-;;:::i;3906:110:14:-;;;;;;:::i;:::-;3971:7;3997:12;;;:8;:12;;;;;;;3906:110;558:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;454:23;;;;;;4388:162:3;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:3;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;2074:198:0;;;;;;:::i;:::-;;:::i;3488:166:14:-;;;;;;:::i;:::-;;:::i;4544:191::-;;;;;;:::i;:::-;;:::i;6787:263::-;6895:4;-1:-1:-1;;;;;;6930:32:14;;;;;:72;;-1:-1:-1;;;;;;;6978:24:14;;;;6930:72;:113;;;-1:-1:-1;;;;;;;7018:25:14;;;;6930:113;6911:132;6787:263;-1:-1:-1;;6787:263:14:o;2471:98:3:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:3;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:3;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:3;:2;-1:-1:-1;;;;;3605:11:3;;3597:57;;;;-1:-1:-1;;;3597:57:3;;7488:2:44;3597:57:3;;;7470:21:44;7527:2;7507:18;;;7500:30;7566:34;7546:18;;;7539:62;7637:3;7617:18;;;7610:31;7658:19;;3597:57:3;;;;;;;;;719:10:8;-1:-1:-1;;;;;3686:21:3;;;;:62;;-1:-1:-1;3711:37:3;3728:5;719:10:8;4388:162:3;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:3;;7890:2:44;3665:170:3;;;7872:21:44;7929:2;7909:18;;;7902:30;7968:34;7948:18;;;7941:62;8039:31;8019:18;;;8012:59;8088:19;;3665:170:3;7688:425:44;3665:170:3;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;5006:187:14:-;5122:7;5148:38;5158:2;5162:6;5170:8;5180:5;5148:9;:38::i;:::-;5141:45;5006:187;-1:-1:-1;;;;5006:187:14:o;4612:296:3:-;4771:41;719:10:8;4804:7:3;4771:18;:41::i;:::-;4763:99;;;;-1:-1:-1;;;4763:99:3;;8320:2:44;4763:99:3;;;8302:21:44;8359:2;8339:18;;;8332:30;8398:34;8378:18;;;8371:62;8469:15;8449:18;;;8442:43;8502:19;;4763:99:3;8118:409:44;4763:99:3;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;6593:188:14:-;2560:3;;2570:8;;2560:19;;-1:-1:-1;;;2560:19:14;;;;;2823:25:44;;;;2591:4:14;;-1:-1:-1;;;;;2560:3:14;;:9;;2796:18:44;;2560:19:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2560:36:14;;2552:45;;;;;;6679:34:::1;6698:10;6710:2;6679:18;:34::i;:::-;6671:43;;;::::0;::::1;;6724:3;::::0;6744:8:::1;::::0;6724:50:::1;::::0;-1:-1:-1;;;6724:50:14;;::::1;::::0;::::1;8990:25:44::0;;;;9031:18;;;9024:34;;;-1:-1:-1;;;;;9094:55:44;;;9074:18;;;9067:83;6724:3:14;;::::1;::::0;:19:::1;::::0;8963:18:44;;6724:50:14::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;4974:149:3:-:0;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;3720:119:14:-;1094:13:0;:11;:13::i;:::-;3797:3:14::1;::::0;3813:8:::1;::::0;3797:35:::1;::::0;;;;::::1;::::0;::::1;9524:25:44::0;;;;-1:-1:-1;;;;;9585:55:44;;;9565:18;;;9558:83;3797:3:14;;::::1;::::0;:15:::1;::::0;9497:18:44;;3797:35:14::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3720:119:::0;:::o;2992:204::-;3087:7;3114:17;;;:8;:17;;;;;;3134:15;-1:-1:-1;3106:44:14;;;;;;3167:22;3181:7;3167:13;:22::i;1929:204:3:-;2001:7;-1:-1:-1;;;;;2028:19:3;;2020:73;;;;-1:-1:-1;;;2020:73:3;;9854:2:44;2020:73:3;;;9836:21:44;9893:2;9873:18;;;9866:30;9932:34;9912:18;;;9905:62;10003:11;9983:18;;;9976:39;10032:19;;2020:73:3;9652:405:44;2020:73:3;-1:-1:-1;;;;;;2110:16:3;;;;;:9;:16;;;;;;;1929:204::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;2633:102:3:-;2689:13;2721:7;2714:14;;;;;:::i;4096:209:14:-;4157:4;4253:12;;;:8;:12;;;;;;4283:15;;4253:27;;646:7;;4253:27;:::i;:::-;:45;;4096:209;-1:-1:-1;;4096:209:14:o;4169:153:3:-;4263:52;719:10:8;4296:8:3;4306;4263:18;:52::i;:::-;4169:153;;:::o;3270:160:14:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;3351:23:14;::::1;;::::0;;;:11:::1;:23;::::0;;;;;:30;;-1:-1:-1;;3351:30:14::1;3377:4;3351:30;::::0;;3396:27;::::1;::::0;3351:23;3396:27:::1;3270:160:::0;:::o;5189:276:3:-;5319:41;719:10:8;5352:7:3;5319:18;:41::i;:::-;5311:99;;;;-1:-1:-1;;;5311:99:3;;8320:2:44;5311:99:3;;;8302:21:44;8359:2;8339:18;;;8332:30;8398:34;8378:18;;;8371:62;8469:15;8449:18;;;8442:43;8502:19;;5311:99:3;8118:409:44;5311:99:3;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;6005:486:14:-;2560:3;;2570:8;;2560:19;;-1:-1:-1;;;2560:19:14;;;;;2823:25:44;;;;6119:7:14;;2591:4;;-1:-1:-1;;;;;2560:3:14;;;;:9;;2796:18:44;;2560:19:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2560:36:14;;2552:45;;;;;;2677:10:::1;2665:23;::::0;;;:11:::1;:23;::::0;;;;;::::1;;2657:32;;;::::0;::::1;;6146:12:::2;::::0;;;:8:::2;:12;::::0;;;;;6177:15:::2;::::0;6146:27:::2;::::0;646:7:::2;::::0;6146:27:::2;:::i;:::-;:46;;6138:55;;;::::0;::::2;;6316:23;646:7;6316:8:::0;:23:::2;:::i;:::-;6275:12;::::0;;;:8:::2;:12;::::0;;;;;646:7:::2;::::0;6275:23:::2;::::0;6290:8;;6275:23:::2;:::i;:::-;:38;;;;:::i;:::-;:64;6254:95;;;::::0;::::2;;6387:12;::::0;;;:8:::2;:12;::::0;;;;:24;;6403:8;;6387:12;:24:::2;::::0;6403:8;;6387:24:::2;:::i;:::-;::::0;;;-1:-1:-1;;6442:12:14::2;::::0;;;:8:::2;:12;::::0;;;;;;;6426:29;;6438:2;;6426:29:::2;::::0;::::2;::::0;2823:25:44;;2811:2;2796:18;;2677:177;6426:29:14::2;;;;;;;;-1:-1:-1::0;;6472:12:14::2;::::0;;;:8:::2;:12;::::0;;;;;;6005:486::o;2801:276:3:-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:3;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:3:o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;11049:2:44;2154:73:0::1;::::0;::::1;11031:21:44::0;11088:2;11068:18;;;11061:30;11127:34;11107:18;;;11100:62;11198:8;11178:18;;;11171:36;11224:19;;2154:73:0::1;10847:402:44::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;3488:166:14:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;3572:23:14;::::1;3598:5;3572:23:::0;;;:11:::1;:23;::::0;;;;;:31;;-1:-1:-1;;3572:31:14::1;::::0;;3618:29;::::1;::::0;3598:5;3618:29:::1;3488:166:::0;:::o;4544:191::-;4665:7;4691:37;4701:2;4705:6;4713:8;4723:4;4691:9;:37::i;13240:133:3:-;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:3;13313:53;;;;-1:-1:-1;;;13313:53:3;;11456:2:44;13313:53:3;;;11438:21:44;11495:2;11475:18;;;11468:30;11534:26;11514:18;;;11507:54;11578:18;;13313:53:3;11254:348:44;2190:219:3;2262:7;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:3;;2324:56;;;;-1:-1:-1;;;2324:56:3;;11456:2:44;2324:56:3;;;11438:21:44;11495:2;11475:18;;;11468:30;11534:26;11514:18;;;11507:54;11578:18;;2324:56:3;11254:348:44;12572:171:3;12646:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;12646:29:3;-1:-1:-1;;;;;12646:29:3;;;;;;;;:24;;12699:23;12646:24;12699:14;:23::i;:::-;-1:-1:-1;;;;;12690:46:3;;;;;;;;;;;12572:171;;:::o;5199:800:14:-;2560:3;;2570:8;;2560:19;;-1:-1:-1;;;2560:19:14;;;;;2823:25:44;;;;5361:7:14;;2591:4;;-1:-1:-1;;;;;2560:3:14;;;;:9;;2796:18:44;;2560:19:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2560:36:14;;2552:45;;;;;;2677:10:::1;2665:23;::::0;;;:11:::1;:23;::::0;;;;;::::1;;2657:32;;;::::0;::::1;;5388:13:::2;5398:2;5388:9;:13::i;:::-;5380:22;;;::::0;::::2;;5493:30;646:7;5493:15;:30;:::i;:::-;646:7;5433:26;5451:8:::0;5433:15:::2;:26;:::i;:::-;:41;;;;:::i;:::-;:90;5412:121;;;::::0;::::2;;5586:26;5604:8:::0;5586:15:::2;:26;:::i;:::-;5571:12;::::0;;;:8:::2;:12;::::0;;;;;;;:41;;;;6794:7:3;:16;;;;-1:-1:-1;;;;;6794:16:3;7208:31;5622:105:14::2;;5707:9;5713:2;5707:5;:9::i;:::-;5736:17;5742:6;5750:2;5736:5;:17::i;:::-;5767:14;5763:95;;;5797:3;::::0;5817:8:::2;::::0;5797:50:::2;::::0;-1:-1:-1;;;5797:50:14;;::::2;::::0;::::2;8990:25:44::0;;;;9031:18;;;9024:34;;;-1:-1:-1;;;;;9094:55:44;;;9074:18;;;9067:83;5797:3:14;;::::2;::::0;:19:::2;::::0;8963:18:44;;5797:50:14::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5763:95;-1:-1:-1::0;;;;;5873:54:14;::::2;5888:2:::0;5873:54:::2;5900:26;5918:8:::0;5900:15:::2;:26;:::i;:::-;5873:54;::::0;2823:25:44;;;2811:2;2796:18;5873:54:14::2;;;;;;;5945:26;5963:8:::0;5945:15:::2;:26;:::i;:::-;5938:33:::0;5199:800;-1:-1:-1;;;;;5199:800:14:o;2097:304::-;2213:4;2229:14;2246:16;2254:7;2246;:16::i;:::-;2229:33;;2291:6;-1:-1:-1;;;;;2280:17:14;:7;-1:-1:-1;;;;;2280:17:14;;:64;;;;2337:7;-1:-1:-1;;;;;2313:31:14;:20;2325:7;2313:11;:20::i;:::-;-1:-1:-1;;;;;2313:31:14;;2280:64;:113;;;-1:-1:-1;;;;;;4508:25:3;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;2360:33:14;4388:162:3;11257:1203;11381:4;-1:-1:-1;;;;;11354:31:3;:23;11369:7;11354:14;:23::i;:::-;-1:-1:-1;;;;;11354:31:3;;11346:81;;;;-1:-1:-1;;;11346:81:3;;11809:2:44;11346:81:3;;;11791:21:44;11848:2;11828:18;;;11821:30;11887:34;11867:18;;;11860:62;-1:-1:-1;;;11938:18:44;;;11931:35;11983:19;;11346:81:3;11607:401:44;11346:81:3;-1:-1:-1;;;;;11445:16:3;;11437:65;;;;-1:-1:-1;;;11437:65:3;;12215:2:44;11437:65:3;;;12197:21:44;12254:2;12234:18;;;12227:30;12293:34;12273:18;;;12266:62;12364:6;12344:18;;;12337:34;12388:19;;11437:65:3;12013:400:44;11437:65:3;11682:4;-1:-1:-1;;;;;11655:31:3;:23;11670:7;11655:14;:23::i;:::-;-1:-1:-1;;;;;11655:31:3;;11647:81;;;;-1:-1:-1;;;11647:81:3;;11809:2:44;11647:81:3;;;11791:21:44;11848:2;11828:18;;;11821:30;11887:34;11867:18;;;11860:62;-1:-1:-1;;;11938:18:44;;;11931:35;11983:19;;11647:81:3;11607:401:44;11647:81:3;11797:24;;;;:15;:24;;;;;;;;11790:31;;-1:-1:-1;;11790:31:3;;;;;;-1:-1:-1;;;;;12265:15:3;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12265:20:3;;;12299:13;;;;;;;;;:18;;11790:31;12299:18;;;12337:16;;;:7;:16;;;;;;:21;;;;;;;;;;12374:27;;11813:7;;12374:27;;;3538:336;3468:406;;:::o;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;12620:2:44;1414:68:0;;;12602:21:44;;;12639:18;;;12632:30;12698:34;12678:18;;;12671:62;12750:18;;1414:68:0;12418:356:44;2426:187:0;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;12879:277:3:-;12999:8;-1:-1:-1;;;;;12990:17:3;:5;-1:-1:-1;;;;;12990:17:3;;12982:55;;;;-1:-1:-1;;;12982:55:3;;12981:2:44;12982:55:3;;;12963:21:44;13020:2;13000:18;;;12993:30;13059:27;13039:18;;;13032:55;13104:18;;12982:55:3;12779:349:44;12982:55:3;-1:-1:-1;;;;;13047:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13047:46:3;;;;;;;;;;13108:41;;586::44;;;13108::3;;559:18:44;13108:41:3;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;-1:-1:-1;;;6476:110:3;;13335:2:44;6476:110:3;;;13317:21:44;13374:2;13354:18;;;13347:30;13413:34;13393:18;;;13386:62;13484:20;13464:18;;;13457:48;13522:19;;6476:110:3;13133:414:44;447:696:9;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:9;-1:-1:-1;604:41:9;-1:-1:-1;765:28:9;;;781:2;765:28;820:280;-1:-1:-1;;851:5:9;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:9;820:280;1064:21;-1:-1:-1;1120:6:9;447:696;-1:-1:-1;;;447:696:9:o;10171:762:3:-;10230:13;10246:23;10261:7;10246:14;:23::i;:::-;10230:39;;10441:23;10456:7;10441:14;:23::i;:::-;10509:24;;;;:15;:24;;;;;;;;10502:31;;-1:-1:-1;;10502:31:3;;;;;;-1:-1:-1;;;;;10749:16:3;;;;;:9;:16;;;;;:21;;-1:-1:-1;;10749:21:3;;;10797:16;;;:7;:16;;;;;;10790:23;;;;;;;10829:36;10433:31;;-1:-1:-1;10525:7:3;;10829:36;;10509:24;;10829:36;4169:153;;:::o;8925:920::-;-1:-1:-1;;;;;9004:16:3;;8996:61;;;;-1:-1:-1;;;8996:61:3;;13943:2:44;8996:61:3;;;13925:21:44;;;13962:18;;;13955:30;14021:34;14001:18;;;13994:62;14073:18;;8996:61:3;13741:356:44;8996:61:3;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:3;7208:31;9067:58;;;;-1:-1:-1;;;9067:58:3;;14304:2:44;9067:58:3;;;14286:21:44;14343:2;14323:18;;;14316:30;14382;14362:18;;;14355:58;14430:18;;9067:58:3;14102:352:44;9067:58:3;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:3;7208:31;9271:58;;;;-1:-1:-1;;;9271:58:3;;14304:2:44;9271:58:3;;;14286:21:44;14343:2;14323:18;;;14316:30;14382;14362:18;;;14355:58;14430:18;;9271:58:3;14102:352:44;9271:58:3;-1:-1:-1;;;;;9671:13:3;;;;;;:9;:13;;;;;;;;:18;;9688:1;9671:18;;;9710:16;;;:7;:16;;;;;;:21;;-1:-1:-1;;9710:21:3;;;;;9747:33;9718:7;;9671:13;;9747:33;;9671:13;;9747:33;4169:153;;:::o;13925:831::-;14074:4;-1:-1:-1;;;;;14094:13:3;;1702:19:7;:23;14090:660:3;;14129:71;;-1:-1:-1;;;14129:71:3;;-1:-1:-1;;;;;14129:36:3;;;;;:71;;719:10:8;;14180:4:3;;14186:7;;14195:4;;14129:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14129:71:3;;;;;;;;-1:-1:-1;;14129:71:3;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14367:6;:13;14384:1;14367:18;14363:321;;14409:60;;-1:-1:-1;;;14409:60:3;;13335:2:44;14409:60:3;;;13317:21:44;13374:2;13354:18;;;13347:30;13413:34;13393:18;;;13386:62;13484:20;13464:18;;;13457:48;13522:19;;14409:60:3;13133:414:44;14363:321:3;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;-1:-1:-1;;;;;;14250:51:3;-1:-1:-1;;;14250:51:3;;-1:-1:-1;14243:58:3;;14090:660;-1:-1:-1;14735:4:3;14728:11;;10139:916:12;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:12;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:12;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:12;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:12;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:12;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:12;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:12:o;14:177:44:-;-1:-1:-1;;;;;;92:5:44;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:44;862:16;;855:27;638:250::o;893:271::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1146:2;1125:15;-1:-1:-1;;1121:29:44;1112:39;;;;1153:4;1108:50;;893:271;-1:-1:-1;;893:271:44:o;1169:220::-;1318:2;1307:9;1300:21;1281:4;1338:45;1379:2;1368:9;1364:18;1356:6;1338:45;:::i;1394:180::-;1453:6;1506:2;1494:9;1485:7;1481:23;1477:32;1474:52;;;1522:1;1519;1512:12;1474:52;-1:-1:-1;1545:23:44;;1394:180;-1:-1:-1;1394:180:44:o;1810:154::-;-1:-1:-1;;;;;1889:5:44;1885:54;1878:5;1875:65;1865:93;;1954:1;1951;1944:12;1969:315;2037:6;2045;2098:2;2086:9;2077:7;2073:23;2069:32;2066:52;;;2114:1;2111;2104:12;2066:52;2153:9;2140:23;2172:31;2197:5;2172:31;:::i;:::-;2222:5;2274:2;2259:18;;;;2246:32;;-1:-1:-1;;;1969:315:44:o;2289:383::-;2366:6;2374;2382;2435:2;2423:9;2414:7;2410:23;2406:32;2403:52;;;2451:1;2448;2441:12;2403:52;2487:9;2474:23;2464:33;;2547:2;2536:9;2532:18;2519:32;2560:31;2585:5;2560:31;:::i;:::-;2289:383;;2610:5;;-1:-1:-1;;;2662:2:44;2647:18;;;;2634:32;;2289:383::o;2859:456::-;2936:6;2944;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3060:9;3047:23;3079:31;3104:5;3079:31;:::i;:::-;3129:5;-1:-1:-1;3186:2:44;3171:18;;3158:32;3199:33;3158:32;3199:33;:::i;3320:315::-;3388:6;3396;3449:2;3437:9;3428:7;3424:23;3420:32;3417:52;;;3465:1;3462;3455:12;3417:52;3501:9;3488:23;3478:33;;3561:2;3550:9;3546:18;3533:32;3574:31;3599:5;3574:31;:::i;:::-;3624:5;3614:15;;;3320:315;;;;;:::o;3883:247::-;3942:6;3995:2;3983:9;3974:7;3970:23;3966:32;3963:52;;;4011:1;4008;4001:12;3963:52;4050:9;4037:23;4069:31;4094:5;4069:31;:::i;4135:416::-;4200:6;4208;4261:2;4249:9;4240:7;4236:23;4232:32;4229:52;;;4277:1;4274;4267:12;4229:52;4316:9;4303:23;4335:31;4360:5;4335:31;:::i;:::-;4385:5;-1:-1:-1;4442:2:44;4427:18;;4414:32;4484:15;;4477:23;4465:36;;4455:64;;4515:1;4512;4505:12;4556:184;-1:-1:-1;;;4605:1:44;4598:88;4705:4;4702:1;4695:15;4729:4;4726:1;4719:15;4745:1266;4840:6;4848;4856;4864;4917:3;4905:9;4896:7;4892:23;4888:33;4885:53;;;4934:1;4931;4924:12;4885:53;4973:9;4960:23;4992:31;5017:5;4992:31;:::i;:::-;5042:5;-1:-1:-1;5099:2:44;5084:18;;5071:32;5112:33;5071:32;5112:33;:::i;:::-;5164:7;-1:-1:-1;5218:2:44;5203:18;;5190:32;;-1:-1:-1;5273:2:44;5258:18;;5245:32;5296:18;5326:14;;;5323:34;;;5353:1;5350;5343:12;5323:34;5391:6;5380:9;5376:22;5366:32;;5436:7;5429:4;5425:2;5421:13;5417:27;5407:55;;5458:1;5455;5448:12;5407:55;5494:2;5481:16;5516:2;5512;5509:10;5506:36;;;5522:18;;:::i;:::-;5597:2;5591:9;5565:2;5651:13;;-1:-1:-1;;5647:22:44;;;5671:2;5643:31;5639:40;5627:53;;;5695:18;;;5715:22;;;5692:46;5689:72;;;5741:18;;:::i;:::-;5781:10;5777:2;5770:22;5816:2;5808:6;5801:18;5856:7;5851:2;5846;5842;5838:11;5834:20;5831:33;5828:53;;;5877:1;5874;5867:12;5828:53;5933:2;5928;5924;5920:11;5915:2;5907:6;5903:15;5890:46;5978:1;5973:2;5968;5960:6;5956:15;5952:24;5945:35;5999:6;5989:16;;;;;;;4745:1266;;;;;;;:::o;6016:248::-;6084:6;6092;6145:2;6133:9;6124:7;6120:23;6116:32;6113:52;;;6161:1;6158;6151:12;6113:52;-1:-1:-1;;6184:23:44;;;6254:2;6239:18;;;6226:32;;-1:-1:-1;6016:248:44:o;6451:388::-;6519:6;6527;6580:2;6568:9;6559:7;6555:23;6551:32;6548:52;;;6596:1;6593;6586:12;6548:52;6635:9;6622:23;6654:31;6679:5;6654:31;:::i;:::-;6704:5;-1:-1:-1;6761:2:44;6746:18;;6733:32;6774:33;6733:32;6774:33;:::i;6844:437::-;6923:1;6919:12;;;;6966;;;6987:61;;7041:4;7033:6;7029:17;7019:27;;6987:61;7094:2;7086:6;7083:14;7063:18;7060:38;7057:218;;-1:-1:-1;;;7128:1:44;7121:88;7232:4;7229:1;7222:15;7260:4;7257:1;7250:15;7057:218;;6844:437;;;:::o;8532:251::-;8602:6;8655:2;8643:9;8634:7;8630:23;8626:32;8623:52;;;8671:1;8668;8661:12;8623:52;8703:9;8697:16;8722:31;8747:5;8722:31;:::i;9161:184::-;9231:6;9284:2;9272:9;9263:7;9259:23;9255:32;9252:52;;;9300:1;9297;9290:12;9252:52;-1:-1:-1;9323:16:44;;9161:184;-1:-1:-1;9161:184:44:o;10062:279::-;10127:9;;;10148:10;;;10145:190;;;-1:-1:-1;;;10188:1:44;10181:88;10292:4;10289:1;10282:15;10320:4;10317:1;10310:15;10346:496;10525:3;10563:6;10557:13;10579:66;10638:6;10633:3;10626:4;10618:6;10614:17;10579:66;:::i;:::-;10708:13;;10667:16;;;;10730:70;10708:13;10667:16;10777:4;10765:17;;10730:70;:::i;:::-;10816:20;;10346:496;-1:-1:-1;;;;10346:496:44:o;14459:512::-;14653:4;-1:-1:-1;;;;;14763:2:44;14755:6;14751:15;14740:9;14733:34;14815:2;14807:6;14803:15;14798:2;14787:9;14783:18;14776:43;;14855:6;14850:2;14839:9;14835:18;14828:34;14898:3;14893:2;14882:9;14878:18;14871:31;14919:46;14960:3;14949:9;14945:19;14937:6;14919:46;:::i;:::-;14911:54;14459:512;-1:-1:-1;;;;;;14459:512:44:o;14976:249::-;15045:6;15098:2;15086:9;15077:7;15073:23;15069:32;15066:52;;;15114:1;15111;15104:12;15066:52;15146:9;15140:16;15165:30;15189:5;15165:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1615800","executionCost":"infinite","totalCost":"infinite"},"external":{"GRACE_PERIOD()":"284","addController(address)":"27958","approve(address,uint256)":"infinite","available(uint256)":"2606","balanceOf(address)":"2650","baseNode()":"2406","controllers(address)":"2603","ens()":"2383","getApproved(uint256)":"4815","isApprovedForAll(address,address)":"infinite","name()":"infinite","nameExpires(uint256)":"2505","owner()":"2442","ownerOf(uint256)":"infinite","reclaim(uint256,address)":"infinite","register(uint256,address,uint256)":"infinite","registerOnly(uint256,address,uint256)":"infinite","removeController(address)":"27995","renew(uint256,uint256)":"infinite","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26767","setResolver(address)":"infinite","supportsInterface(bytes4)":"539","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_isApprovedOrOwner(address,uint256)":"infinite","_register(uint256,address,uint256,bool)":"infinite"}},"methodIdentifiers":{"GRACE_PERIOD()":"c1a287e2","addController(address)":"a7fc7a07","approve(address,uint256)":"095ea7b3","available(uint256)":"96e494e8","balanceOf(address)":"70a08231","baseNode()":"ddf7fcb0","controllers(address)":"da8c229e","ens()":"3f15457f","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","nameExpires(uint256)":"d6e4fa86","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","reclaim(uint256,address)":"28ed4f6c","register(uint256,address,uint256)":"fca247ac","registerOnly(uint256,address,uint256)":"0e297b45","removeController(address)":"f6a74ed7","renew(uint256,uint256)":"c475abff","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setResolver(address)":"4e543b26","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_baseNode\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nameExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"registerOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID. Names become unowned      when their registration expires.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"reclaim(uint256,address)\":{\"details\":\"Reclaim ownership of a name in ENS, if you own it in the registrar.\"},\"register(uint256,address,uint256)\":{\"details\":\"Register a name.\",\"params\":{\"_owner\":\"The address that should own the registration.\",\"duration\":\"Duration in seconds for the registration.\",\"id\":\"The token ID (keccak256 of the label).\"}},\"registerOnly(uint256,address,uint256)\":{\"details\":\"Register a name, without modifying the registry.\",\"params\":{\"_owner\":\"The address that should own the registration.\",\"duration\":\"Duration in seconds for the registration.\",\"id\":\"The token ID (keccak256 of the label).\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/BaseRegistrarImplementation.sol\":\"BaseRegistrarImplementation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ethregistrar/BaseRegistrarImplementation.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseRegistrarImplementation is ERC721, IBaseRegistrar, Ownable {\\n    // A map of expiry times\\n    mapping(uint256 => uint256) expiries;\\n    // The ENS registry\\n    ENS public ens;\\n    // The namehash of the TLD this registrar owns (eg, .eth)\\n    bytes32 public baseNode;\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address => bool) public controllers;\\n    uint256 public constant GRACE_PERIOD = 90 days;\\n    bytes4 private constant INTERFACE_META_ID =\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 private constant ERC721_ID =\\n        bytes4(\\n            keccak256(\\\"balanceOf(address)\\\") ^\\n                keccak256(\\\"ownerOf(uint256)\\\") ^\\n                keccak256(\\\"approve(address,uint256)\\\") ^\\n                keccak256(\\\"getApproved(uint256)\\\") ^\\n                keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n                keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n                keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n        );\\n    bytes4 private constant RECLAIM_ID =\\n        bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n\\n    /**\\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view override returns (bool) {\\n        address _owner = ownerOf(tokenId);\\n        return (spender == _owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(_owner, spender));\\n    }\\n\\n    constructor(ENS _ens, bytes32 _baseNode) ERC721(\\\"\\\", \\\"\\\") {\\n        ens = _ens;\\n        baseNode = _baseNode;\\n    }\\n\\n    modifier live() {\\n        require(ens.owner(baseNode) == address(this));\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(controllers[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID. Names become unowned\\n     *      when their registration expires.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view override(IERC721, ERC721) returns (address) {\\n        require(expiries[tokenId] > block.timestamp);\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external override onlyOwner {\\n        controllers[controller] = true;\\n        emit ControllerAdded(controller);\\n    }\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external override onlyOwner {\\n        controllers[controller] = false;\\n        emit ControllerRemoved(controller);\\n    }\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external override onlyOwner {\\n        ens.setResolver(baseNode, resolver);\\n    }\\n\\n    // Returns the expiration timestamp of the specified id.\\n    function nameExpires(uint256 id) external view override returns (uint256) {\\n        return expiries[id];\\n    }\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public view override returns (bool) {\\n        // Not available if it's registered here or in its grace period.\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external override returns (uint256) {\\n        return _register(id, _owner, duration, true);\\n    }\\n\\n    /**\\n     * @dev Register a name, without modifying the registry.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function registerOnly(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external returns (uint256) {\\n        return _register(id, _owner, duration, false);\\n    }\\n\\n    function _register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration,\\n        bool updateRegistry\\n    ) internal live onlyController returns (uint256) {\\n        require(available(id));\\n        require(\\n            block.timestamp + duration + GRACE_PERIOD >\\n                block.timestamp + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] = block.timestamp + duration;\\n        if (_exists(id)) {\\n            // Name was previously owned, and expired\\n            _burn(id);\\n        }\\n        _mint(_owner, id);\\n        if (updateRegistry) {\\n            ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n        }\\n\\n        emit NameRegistered(id, _owner, block.timestamp + duration);\\n\\n        return block.timestamp + duration;\\n        // return 0;\\n    }\\n\\n    function renew(\\n        uint256 id,\\n        uint256 duration\\n    ) external override live onlyController returns (uint256) {\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\n        require(\\n            expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] += duration;\\n        emit NameRenewed(id, expiries[id]);\\n        return expiries[id];\\n    }\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address _owner) external override live {\\n        require(_isApprovedOrOwner(msg.sender, id));\\n        ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view override(ERC721, IERC165) returns (bool) {\\n        return\\n            interfaceID == INTERFACE_META_ID ||\\n            interfaceID == ERC721_ID ||\\n            interfaceID == RECLAIM_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xe37ce2b399a3e944483b0fe97ac570512fd27ab64b10e10f953381503d3b4c3e\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"}},\"version\":1}","storageLayout":{"storage":[{"astId":338,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":340,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":344,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":348,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":352,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":358,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":3004,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"expiries","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"},{"astId":3007,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"ens","offset":0,"slot":"8","type":"t_contract(ENS)5200"},{"astId":3009,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"baseNode","offset":0,"slot":"9","type":"t_bytes32"},{"astId":3013,"contract":"contracts/ethregistrar/BaseRegistrarImplementation.sol:BaseRegistrarImplementation","label":"controllers","offset":0,"slot":"10","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ENS)5200":{"encoding":"inplace","label":"contract ENS","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/BulkRenewal.sol":{"BulkRenewal":{"abi":[{"inputs":[{"internalType":"contract ENS","name":"_ens","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string[]","name":"names","type":"string[]"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renewAll","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string[]","name":"names","type":"string[]"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"rentPrice","outputs":[{"internalType":"uint256","name":"total","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3535":{"entryPoint":null,"id":3535,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_ENS_$5200_fromMemory":{"entryPoint":64,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:318:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"107:209:44","statements":[{"body":{"nodeType":"YulBlock","src":"153:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"162:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"155:6:44"},"nodeType":"YulFunctionCall","src":"155:12:44"},"nodeType":"YulExpressionStatement","src":"155:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"128:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"124:3:44"},"nodeType":"YulFunctionCall","src":"124:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"149:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"120:3:44"},"nodeType":"YulFunctionCall","src":"120:32:44"},"nodeType":"YulIf","src":"117:52:44"},{"nodeType":"YulVariableDeclaration","src":"178:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"197:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"191:5:44"},"nodeType":"YulFunctionCall","src":"191:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"182:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"270:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"279:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"282:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"272:6:44"},"nodeType":"YulFunctionCall","src":"272:12:44"},"nodeType":"YulExpressionStatement","src":"272:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"240:5:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"255:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"260:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"251:3:44"},"nodeType":"YulFunctionCall","src":"251:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"264:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"247:3:44"},"nodeType":"YulFunctionCall","src":"247:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"236:3:44"},"nodeType":"YulFunctionCall","src":"236:31:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"226:2:44"},"nodeType":"YulFunctionCall","src":"226:42:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"219:6:44"},"nodeType":"YulFunctionCall","src":"219:50:44"},"nodeType":"YulIf","src":"216:70:44"},{"nodeType":"YulAssignment","src":"295:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"305:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"295:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_ENS_$5200_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"73:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"84:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"96:6:44","type":""}],"src":"14:302:44"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_ENS_$5200_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b5060405161093138038061093183398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516108a061009160003960008181608b015261045601526108a06000f3fe60806040526004361061003f5760003560e01c806301ffc9a7146100445780633f15457f14610079578063591ebfb4146100c5578063e8d6dbb4146100f3575b600080fd5b34801561005057600080fd5b5061006461005f366004610599565b610108565b60405190151581526020015b60405180910390f35b34801561008557600080fd5b506100ad7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610070565b3480156100d157600080fd5b506100e56100e0366004610646565b6101a1565b604051908152602001610070565b6101066101013660046106a5565b610271565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061019b57507fffffffff0000000000000000000000000000000000000000000000000000000082167fb1c8640000000000000000000000000000000000000000000000000000000000145b92915050565b6000806101ac610403565b90508460005b81811015610266576000836001600160a01b03166344d31f068a8a858181106101dd576101dd6106f1565b90506020028101906101ef9190610707565b8a8a6040518563ffffffff1660e01b81526004016102109493929190610777565b6040805180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025091906107ab565b60208101519051019490940193506001016101b2565b505050949350505050565b600061027b610403565b9050826000805b828110156103cd576000846001600160a01b03166344d31f068989858181106102ad576102ad6106f1565b90506020028101906102bf9190610707565b89336040518563ffffffff1660e01b81526004016102e09493929190610777565b6040805180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906107ab565b90506000816020015182600001516103389190610808565b9050856001600160a01b031663acf1a841828b8b8781811061035c5761035c6106f1565b905060200281019061036e9190610707565b8b6040518563ffffffff1660e01b815260040161038d93929190610829565b6000604051808303818588803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b5050509190940193505050600101610282565b5060405133904780156108fc02916000818181858888f193505050501580156103fa573d6000803e3d6000fd5b50505050505050565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081527fd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630178b8bf90602401602060405180830381865afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061084d565b6040517f124a319c0000000000000000000000000000000000000000000000000000000081527fd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa60048201527fa61a65f00000000000000000000000000000000000000000000000000000000060248201529091506001600160a01b0382169063124a319c90604401602060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610593919061084d565b91505090565b6000602082840312156105ab57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146105db57600080fd5b9392505050565b60008083601f8401126105f457600080fd5b50813567ffffffffffffffff81111561060c57600080fd5b6020830191508360208260051b850101111561062757600080fd5b9250929050565b6001600160a01b038116811461064357600080fd5b50565b6000806000806060858703121561065c57600080fd5b843567ffffffffffffffff81111561067357600080fd5b61067f878288016105e2565b90955093505060208501359150604085013561069a8161062e565b939692955090935050565b6000806000604084860312156106ba57600080fd5b833567ffffffffffffffff8111156106d157600080fd5b6106dd868287016105e2565b909790965060209590950135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261071e57600080fd5b83018035915067ffffffffffffffff82111561073957600080fd5b60200191503681900382131561062757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061078b60608301868861074e565b90508360208301526001600160a01b038316604083015295945050505050565b6000604082840312156107bd57600080fd5b6040516040810181811067ffffffffffffffff821117156107ee57634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b8082018082111561019b57634e487b7160e01b600052601160045260246000fd5b60408152600061083d60408301858761074e565b9050826020830152949350505050565b60006020828403121561085f57600080fd5b81516105db8161062e56fea2646970667358221220f6f142632adc909fcdd9c8ccb2fe556dd7dd542efb5f03f906af195df0b013f564736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x931 CODESIZE SUB DUP1 PUSH2 0x931 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0x70 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x8A0 PUSH2 0x91 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0x8B ADD MSTORE PUSH2 0x456 ADD MSTORE PUSH2 0x8A0 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x3F15457F EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x591EBFB4 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0xE8D6DBB4 EQ PUSH2 0xF3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x599 JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE5 PUSH2 0xE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x646 JUMP JUMPDEST PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x70 JUMP JUMPDEST PUSH2 0x106 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x19B JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xB1C8640000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AC PUSH2 0x403 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x44D31F06 DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x1DD JUMPI PUSH2 0x1DD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x210 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x777 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x250 SWAP2 SWAP1 PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD ADD SWAP5 SWAP1 SWAP5 ADD SWAP4 POP PUSH1 0x1 ADD PUSH2 0x1B2 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B PUSH2 0x403 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x44D31F06 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x2AD JUMPI PUSH2 0x2AD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST DUP10 CALLER PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x777 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x320 SWAP2 SWAP1 PUSH2 0x7AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x808 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xACF1A841 DUP3 DUP12 DUP12 DUP8 DUP2 DUP2 LT PUSH2 0x35C JUMPI PUSH2 0x35C PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST DUP12 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x829 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP SWAP2 SWAP1 SWAP5 ADD SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x282 JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x178B8BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0xD051E4F8CB1870F877B00266E1292322BEA4C492A9933488E94D7C1A935E8DFA PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x178B8BF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x84D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124A319C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0xD051E4F8CB1870F877B00266E1292322BEA4C492A9933488E94D7C1A935E8DFA PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0xA61A65F000000000000000000000000000000000000000000000000000000000 PUSH1 0x24 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x124A319C SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x593 SWAP2 SWAP1 PUSH2 0x84D JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x5F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x67F DUP8 DUP3 DUP9 ADD PUSH2 0x5E2 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x69A DUP2 PUSH2 0x62E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DD DUP7 DUP3 DUP8 ADD PUSH2 0x5E2 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x78B PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x74E JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7EE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x19B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x83D PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0x74E JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5DB DUP2 PUSH2 0x62E JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 CALL TIMESTAMP PUSH4 0x2ADC909F 0xCD 0xD9 0xC8 0xCC 0xB2 INVALID SSTORE PUSH14 0xD7DD542EFB5F03F906AF195DF0B0 SGT CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"328:2241:15:-:0;;;545:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;577:10:15;;;328:2241;;14:302:44;96:6;149:2;137:9;128:7;124:23;120:32;117:52;;;165:1;162;155:12;117:52;191:16;;-1:-1:-1;;;;;236:31:44;;226:42;;216:70;;282:1;279;272:12;216:70;305:5;14:302;-1:-1:-1;;;14:302:44:o;:::-;328:2241:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ens_3524":{"entryPoint":null,"id":3524,"parameterSlots":0,"returnSlots":0},"@getController_3563":{"entryPoint":1027,"id":3563,"parameterSlots":0,"returnSlots":1},"@renewAll_3712":{"entryPoint":625,"id":3712,"parameterSlots":3,"returnSlots":0},"@rentPrice_3624":{"entryPoint":417,"id":3624,"parameterSlots":4,"returnSlots":1},"@supportsInterface_3734":{"entryPoint":264,"id":3734,"parameterSlots":1,"returnSlots":1},"abi_decode_array_string_calldata_dyn_calldata":{"entryPoint":1506,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":2125,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256":{"entryPoint":1701,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256t_address":{"entryPoint":1606,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":1433,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory":{"entryPoint":1963,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":1870,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes4__to_t_bytes32_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":2089,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed":{"entryPoint":1911,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_string_calldata_ptr":{"entryPoint":1799,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":2056,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":1777,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":1582,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6157:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:44","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:44"},"nodeType":"YulFunctionCall","src":"131:12:44"},"nodeType":"YulExpressionStatement","src":"131:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:44"},"nodeType":"YulFunctionCall","src":"100:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:44"},"nodeType":"YulFunctionCall","src":"96:32:44"},"nodeType":"YulIf","src":"93:52:44"},{"nodeType":"YulVariableDeclaration","src":"154:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:44"},"nodeType":"YulFunctionCall","src":"167:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:44"},"nodeType":"YulFunctionCall","src":"302:12:44"},"nodeType":"YulExpressionStatement","src":"302:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:44","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:44"},"nodeType":"YulFunctionCall","src":"219:78:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:44"},"nodeType":"YulFunctionCall","src":"209:89:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:44"},"nodeType":"YulFunctionCall","src":"202:97:44"},"nodeType":"YulIf","src":"199:117:44"},{"nodeType":"YulAssignment","src":"325:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:44","type":""}],"src":"14:332:44"},{"body":{"nodeType":"YulBlock","src":"446:92:44","statements":[{"nodeType":"YulAssignment","src":"456:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:44"},"nodeType":"YulFunctionCall","src":"464:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:44"},"nodeType":"YulFunctionCall","src":"516:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:44"},"nodeType":"YulFunctionCall","src":"509:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:44"},"nodeType":"YulFunctionCall","src":"491:41:44"},"nodeType":"YulExpressionStatement","src":"491:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:44","type":""}],"src":"351:187:44"},{"body":{"nodeType":"YulBlock","src":"656:125:44","statements":[{"nodeType":"YulAssignment","src":"666:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"678:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"689:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"674:3:44"},"nodeType":"YulFunctionCall","src":"674:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"666:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"708:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"723:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"731:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"719:3:44"},"nodeType":"YulFunctionCall","src":"719:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"701:6:44"},"nodeType":"YulFunctionCall","src":"701:74:44"},"nodeType":"YulExpressionStatement","src":"701:74:44"}]},"name":"abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"625:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"636:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"647:4:44","type":""}],"src":"543:238:44"},{"body":{"nodeType":"YulBlock","src":"878:283:44","statements":[{"body":{"nodeType":"YulBlock","src":"927:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"929:6:44"},"nodeType":"YulFunctionCall","src":"929:12:44"},"nodeType":"YulExpressionStatement","src":"929:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"906:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"914:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:44"},"nodeType":"YulFunctionCall","src":"902:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"921:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"898:3:44"},"nodeType":"YulFunctionCall","src":"898:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"891:6:44"},"nodeType":"YulFunctionCall","src":"891:35:44"},"nodeType":"YulIf","src":"888:55:44"},{"nodeType":"YulAssignment","src":"952:30:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"975:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"962:12:44"},"nodeType":"YulFunctionCall","src":"962:20:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"952:6:44"}]},{"body":{"nodeType":"YulBlock","src":"1025:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1034:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1037:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1027:6:44"},"nodeType":"YulFunctionCall","src":"1027:12:44"},"nodeType":"YulExpressionStatement","src":"1027:12:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"997:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1005:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"994:2:44"},"nodeType":"YulFunctionCall","src":"994:30:44"},"nodeType":"YulIf","src":"991:50:44"},{"nodeType":"YulAssignment","src":"1050:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1066:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1074:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:44"},"nodeType":"YulFunctionCall","src":"1062:17:44"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1050:8:44"}]},{"body":{"nodeType":"YulBlock","src":"1139:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1148:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1151:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1141:6:44"},"nodeType":"YulFunctionCall","src":"1141:12:44"},"nodeType":"YulExpressionStatement","src":"1141:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1102:6:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1114:1:44","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1117:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1110:3:44"},"nodeType":"YulFunctionCall","src":"1110:14:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1098:3:44"},"nodeType":"YulFunctionCall","src":"1098:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"1127:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1094:3:44"},"nodeType":"YulFunctionCall","src":"1094:38:44"},{"name":"end","nodeType":"YulIdentifier","src":"1134:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1091:2:44"},"nodeType":"YulFunctionCall","src":"1091:47:44"},"nodeType":"YulIf","src":"1088:67:44"}]},"name":"abi_decode_array_string_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"841:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"849:3:44","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"857:8:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"867:6:44","type":""}],"src":"786:375:44"},{"body":{"nodeType":"YulBlock","src":"1211:109:44","statements":[{"body":{"nodeType":"YulBlock","src":"1298:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1307:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1310:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1300:6:44"},"nodeType":"YulFunctionCall","src":"1300:12:44"},"nodeType":"YulExpressionStatement","src":"1300:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1234:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1245:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1252:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1241:3:44"},"nodeType":"YulFunctionCall","src":"1241:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1231:2:44"},"nodeType":"YulFunctionCall","src":"1231:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1224:6:44"},"nodeType":"YulFunctionCall","src":"1224:73:44"},"nodeType":"YulIf","src":"1221:93:44"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1200:5:44","type":""}],"src":"1166:154:44"},{"body":{"nodeType":"YulBlock","src":"1476:509:44","statements":[{"body":{"nodeType":"YulBlock","src":"1522:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1531:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1534:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1524:6:44"},"nodeType":"YulFunctionCall","src":"1524:12:44"},"nodeType":"YulExpressionStatement","src":"1524:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1497:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1506:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1493:3:44"},"nodeType":"YulFunctionCall","src":"1493:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1518:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1489:3:44"},"nodeType":"YulFunctionCall","src":"1489:32:44"},"nodeType":"YulIf","src":"1486:52:44"},{"nodeType":"YulVariableDeclaration","src":"1547:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1574:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1561:12:44"},"nodeType":"YulFunctionCall","src":"1561:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1551:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1627:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1636:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1639:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1629:6:44"},"nodeType":"YulFunctionCall","src":"1629:12:44"},"nodeType":"YulExpressionStatement","src":"1629:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1599:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1607:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1596:2:44"},"nodeType":"YulFunctionCall","src":"1596:30:44"},"nodeType":"YulIf","src":"1593:50:44"},{"nodeType":"YulVariableDeclaration","src":"1652:104:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1728:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"1739:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1724:3:44"},"nodeType":"YulFunctionCall","src":"1724:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1748:7:44"}],"functionName":{"name":"abi_decode_array_string_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"1678:45:44"},"nodeType":"YulFunctionCall","src":"1678:78:44"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1656:8:44","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1666:8:44","type":""}]},{"nodeType":"YulAssignment","src":"1765:18:44","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1775:8:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1765:6:44"}]},{"nodeType":"YulAssignment","src":"1792:18:44","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1802:8:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1792:6:44"}]},{"nodeType":"YulAssignment","src":"1819:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1846:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1857:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1842:3:44"},"nodeType":"YulFunctionCall","src":"1842:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1829:12:44"},"nodeType":"YulFunctionCall","src":"1829:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1819:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1870:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1900:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1911:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1896:3:44"},"nodeType":"YulFunctionCall","src":"1896:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1883:12:44"},"nodeType":"YulFunctionCall","src":"1883:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1874:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1949:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1924:24:44"},"nodeType":"YulFunctionCall","src":"1924:31:44"},"nodeType":"YulExpressionStatement","src":"1924:31:44"},{"nodeType":"YulAssignment","src":"1964:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1974:5:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1964:6:44"}]}]},"name":"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1418:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1429:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1441:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1449:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1457:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1465:6:44","type":""}],"src":"1325:660:44"},{"body":{"nodeType":"YulBlock","src":"2091:76:44","statements":[{"nodeType":"YulAssignment","src":"2101:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2113:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2124:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2109:3:44"},"nodeType":"YulFunctionCall","src":"2109:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2101:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2143:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"2154:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2136:6:44"},"nodeType":"YulFunctionCall","src":"2136:25:44"},"nodeType":"YulExpressionStatement","src":"2136:25:44"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2060:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2071:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2082:4:44","type":""}],"src":"1990:177:44"},{"body":{"nodeType":"YulBlock","src":"2306:391:44","statements":[{"body":{"nodeType":"YulBlock","src":"2352:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2361:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2364:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2354:6:44"},"nodeType":"YulFunctionCall","src":"2354:12:44"},"nodeType":"YulExpressionStatement","src":"2354:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2327:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2336:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2323:3:44"},"nodeType":"YulFunctionCall","src":"2323:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2348:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2319:3:44"},"nodeType":"YulFunctionCall","src":"2319:32:44"},"nodeType":"YulIf","src":"2316:52:44"},{"nodeType":"YulVariableDeclaration","src":"2377:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2404:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2391:12:44"},"nodeType":"YulFunctionCall","src":"2391:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2381:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2457:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2466:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2469:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2459:6:44"},"nodeType":"YulFunctionCall","src":"2459:12:44"},"nodeType":"YulExpressionStatement","src":"2459:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2429:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2437:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2426:2:44"},"nodeType":"YulFunctionCall","src":"2426:30:44"},"nodeType":"YulIf","src":"2423:50:44"},{"nodeType":"YulVariableDeclaration","src":"2482:104:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2558:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"2569:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2554:3:44"},"nodeType":"YulFunctionCall","src":"2554:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2578:7:44"}],"functionName":{"name":"abi_decode_array_string_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"2508:45:44"},"nodeType":"YulFunctionCall","src":"2508:78:44"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2486:8:44","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2496:8:44","type":""}]},{"nodeType":"YulAssignment","src":"2595:18:44","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2605:8:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2595:6:44"}]},{"nodeType":"YulAssignment","src":"2622:18:44","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2632:8:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2622:6:44"}]},{"nodeType":"YulAssignment","src":"2649:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2676:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2687:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2672:3:44"},"nodeType":"YulFunctionCall","src":"2672:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2659:12:44"},"nodeType":"YulFunctionCall","src":"2659:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2649:6:44"}]}]},"name":"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2256:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2267:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2279:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2287:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2295:6:44","type":""}],"src":"2172:525:44"},{"body":{"nodeType":"YulBlock","src":"2734:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2751:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2754:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2744:6:44"},"nodeType":"YulFunctionCall","src":"2744:88:44"},"nodeType":"YulExpressionStatement","src":"2744:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2848:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2851:4:44","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2841:6:44"},"nodeType":"YulFunctionCall","src":"2841:15:44"},"nodeType":"YulExpressionStatement","src":"2841:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2872:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2875:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2865:6:44"},"nodeType":"YulFunctionCall","src":"2865:15:44"},"nodeType":"YulExpressionStatement","src":"2865:15:44"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2702:184:44"},{"body":{"nodeType":"YulBlock","src":"2986:427:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2996:51:44","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"3035:11:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3022:12:44"},"nodeType":"YulFunctionCall","src":"3022:25:44"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"3000:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"3136:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3145:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3148:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3138:6:44"},"nodeType":"YulFunctionCall","src":"3138:12:44"},"nodeType":"YulExpressionStatement","src":"3138:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"3070:18:44"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"3098:12:44"},"nodeType":"YulFunctionCall","src":"3098:14:44"},{"name":"base_ref","nodeType":"YulIdentifier","src":"3114:8:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3094:3:44"},"nodeType":"YulFunctionCall","src":"3094:29:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3129:2:44","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3125:3:44"},"nodeType":"YulFunctionCall","src":"3125:7:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3090:3:44"},"nodeType":"YulFunctionCall","src":"3090:43:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3066:3:44"},"nodeType":"YulFunctionCall","src":"3066:68:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3059:6:44"},"nodeType":"YulFunctionCall","src":"3059:76:44"},"nodeType":"YulIf","src":"3056:96:44"},{"nodeType":"YulVariableDeclaration","src":"3161:47:44","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"3179:8:44"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"3189:18:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:44"},"nodeType":"YulFunctionCall","src":"3175:33:44"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"3165:6:44","type":""}]},{"nodeType":"YulAssignment","src":"3217:30:44","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"3240:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3227:12:44"},"nodeType":"YulFunctionCall","src":"3227:20:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3217:6:44"}]},{"body":{"nodeType":"YulBlock","src":"3290:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3299:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3302:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3292:6:44"},"nodeType":"YulFunctionCall","src":"3292:12:44"},"nodeType":"YulExpressionStatement","src":"3292:12:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3262:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3270:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3259:2:44"},"nodeType":"YulFunctionCall","src":"3259:30:44"},"nodeType":"YulIf","src":"3256:50:44"},{"nodeType":"YulAssignment","src":"3315:25:44","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"3327:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3335:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3323:3:44"},"nodeType":"YulFunctionCall","src":"3323:17:44"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"3315:4:44"}]},{"body":{"nodeType":"YulBlock","src":"3391:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3400:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3403:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3393:6:44"},"nodeType":"YulFunctionCall","src":"3393:12:44"},"nodeType":"YulExpressionStatement","src":"3393:12:44"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"3356:4:44"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"3366:12:44"},"nodeType":"YulFunctionCall","src":"3366:14:44"},{"name":"length","nodeType":"YulIdentifier","src":"3382:6:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3362:3:44"},"nodeType":"YulFunctionCall","src":"3362:27:44"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"3352:3:44"},"nodeType":"YulFunctionCall","src":"3352:38:44"},"nodeType":"YulIf","src":"3349:58:44"}]},"name":"access_calldata_tail_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"2943:8:44","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"2953:11:44","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"2969:4:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"2975:6:44","type":""}],"src":"2891:522:44"},{"body":{"nodeType":"YulBlock","src":"3485:200:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3502:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"3507:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3495:6:44"},"nodeType":"YulFunctionCall","src":"3495:19:44"},"nodeType":"YulExpressionStatement","src":"3495:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3540:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"3545:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3536:3:44"},"nodeType":"YulFunctionCall","src":"3536:14:44"},{"name":"start","nodeType":"YulIdentifier","src":"3552:5:44"},{"name":"length","nodeType":"YulIdentifier","src":"3559:6:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3523:12:44"},"nodeType":"YulFunctionCall","src":"3523:43:44"},"nodeType":"YulExpressionStatement","src":"3523:43:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3590:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"3595:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3586:3:44"},"nodeType":"YulFunctionCall","src":"3586:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"3604:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3582:3:44"},"nodeType":"YulFunctionCall","src":"3582:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"3611:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3575:6:44"},"nodeType":"YulFunctionCall","src":"3575:38:44"},"nodeType":"YulExpressionStatement","src":"3575:38:44"},{"nodeType":"YulAssignment","src":"3622:57:44","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3637:3:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3650:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3658:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3646:3:44"},"nodeType":"YulFunctionCall","src":"3646:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3667:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3663:3:44"},"nodeType":"YulFunctionCall","src":"3663:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3642:3:44"},"nodeType":"YulFunctionCall","src":"3642:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3633:3:44"},"nodeType":"YulFunctionCall","src":"3633:39:44"},{"kind":"number","nodeType":"YulLiteral","src":"3674:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3629:3:44"},"nodeType":"YulFunctionCall","src":"3629:50:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3622:3:44"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"3454:5:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"3461:6:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3469:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3477:3:44","type":""}],"src":"3418:267:44"},{"body":{"nodeType":"YulBlock","src":"3877:251:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3894:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3905:2:44","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3887:6:44"},"nodeType":"YulFunctionCall","src":"3887:21:44"},"nodeType":"YulExpressionStatement","src":"3887:21:44"},{"nodeType":"YulAssignment","src":"3917:70:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3952:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"3960:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3972:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3983:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3968:3:44"},"nodeType":"YulFunctionCall","src":"3968:18:44"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"3925:26:44"},"nodeType":"YulFunctionCall","src":"3925:62:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3917:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4007:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4018:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4003:3:44"},"nodeType":"YulFunctionCall","src":"4003:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"4023:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3996:6:44"},"nodeType":"YulFunctionCall","src":"3996:34:44"},"nodeType":"YulExpressionStatement","src":"3996:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4050:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4061:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4046:3:44"},"nodeType":"YulFunctionCall","src":"4046:18:44"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"4070:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4078:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4066:3:44"},"nodeType":"YulFunctionCall","src":"4066:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4039:6:44"},"nodeType":"YulFunctionCall","src":"4039:83:44"},"nodeType":"YulExpressionStatement","src":"4039:83:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3822:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3833:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3841:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3849:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3857:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3868:4:44","type":""}],"src":"3690:438:44"},{"body":{"nodeType":"YulBlock","src":"4237:549:44","statements":[{"body":{"nodeType":"YulBlock","src":"4283:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4292:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4295:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4285:6:44"},"nodeType":"YulFunctionCall","src":"4285:12:44"},"nodeType":"YulExpressionStatement","src":"4285:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4258:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4267:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4254:3:44"},"nodeType":"YulFunctionCall","src":"4254:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4279:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4250:3:44"},"nodeType":"YulFunctionCall","src":"4250:32:44"},"nodeType":"YulIf","src":"4247:52:44"},{"nodeType":"YulVariableDeclaration","src":"4308:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4328:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4322:5:44"},"nodeType":"YulFunctionCall","src":"4322:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4312:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4340:33:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4362:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4370:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4358:3:44"},"nodeType":"YulFunctionCall","src":"4358:15:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4344:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4456:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4477:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4480:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4470:6:44"},"nodeType":"YulFunctionCall","src":"4470:88:44"},"nodeType":"YulExpressionStatement","src":"4470:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4578:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4581:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4571:6:44"},"nodeType":"YulFunctionCall","src":"4571:15:44"},"nodeType":"YulExpressionStatement","src":"4571:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4606:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4609:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4599:6:44"},"nodeType":"YulFunctionCall","src":"4599:15:44"},"nodeType":"YulExpressionStatement","src":"4599:15:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4391:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"4403:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4388:2:44"},"nodeType":"YulFunctionCall","src":"4388:34:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4427:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4439:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4424:2:44"},"nodeType":"YulFunctionCall","src":"4424:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4385:2:44"},"nodeType":"YulFunctionCall","src":"4385:62:44"},"nodeType":"YulIf","src":"4382:242:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4640:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4644:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4633:6:44"},"nodeType":"YulFunctionCall","src":"4633:22:44"},"nodeType":"YulExpressionStatement","src":"4633:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4671:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4685:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4679:5:44"},"nodeType":"YulFunctionCall","src":"4679:16:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4664:6:44"},"nodeType":"YulFunctionCall","src":"4664:32:44"},"nodeType":"YulExpressionStatement","src":"4664:32:44"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4716:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4724:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4712:3:44"},"nodeType":"YulFunctionCall","src":"4712:15:44"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4739:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4750:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4735:3:44"},"nodeType":"YulFunctionCall","src":"4735:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4729:5:44"},"nodeType":"YulFunctionCall","src":"4729:25:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4705:6:44"},"nodeType":"YulFunctionCall","src":"4705:50:44"},"nodeType":"YulExpressionStatement","src":"4705:50:44"},{"nodeType":"YulAssignment","src":"4764:16:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4774:6:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4764:6:44"}]}]},"name":"abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4203:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4214:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4226:6:44","type":""}],"src":"4133:653:44"},{"body":{"nodeType":"YulBlock","src":"4839:231:44","statements":[{"nodeType":"YulAssignment","src":"4849:16:44","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4860:1:44"},{"name":"y","nodeType":"YulIdentifier","src":"4863:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4856:3:44"},"nodeType":"YulFunctionCall","src":"4856:9:44"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4849:3:44"}]},{"body":{"nodeType":"YulBlock","src":"4896:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4917:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4920:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4910:6:44"},"nodeType":"YulFunctionCall","src":"4910:88:44"},"nodeType":"YulExpressionStatement","src":"4910:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5018:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5021:4:44","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5011:6:44"},"nodeType":"YulFunctionCall","src":"5011:15:44"},"nodeType":"YulExpressionStatement","src":"5011:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5046:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5049:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5039:6:44"},"nodeType":"YulFunctionCall","src":"5039:15:44"},"nodeType":"YulExpressionStatement","src":"5039:15:44"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4880:1:44"},{"name":"sum","nodeType":"YulIdentifier","src":"4883:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4877:2:44"},"nodeType":"YulFunctionCall","src":"4877:10:44"},"nodeType":"YulIf","src":"4874:190:44"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4822:1:44","type":""},{"name":"y","nodeType":"YulTypedName","src":"4825:1:44","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4831:3:44","type":""}],"src":"4791:279:44"},{"body":{"nodeType":"YulBlock","src":"5234:159:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5251:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5262:2:44","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5244:6:44"},"nodeType":"YulFunctionCall","src":"5244:21:44"},"nodeType":"YulExpressionStatement","src":"5244:21:44"},{"nodeType":"YulAssignment","src":"5274:70:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5309:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"5317:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5329:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5340:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5325:3:44"},"nodeType":"YulFunctionCall","src":"5325:18:44"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"5282:26:44"},"nodeType":"YulFunctionCall","src":"5282:62:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5274:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5364:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5375:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5360:3:44"},"nodeType":"YulFunctionCall","src":"5360:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"5380:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5353:6:44"},"nodeType":"YulFunctionCall","src":"5353:34:44"},"nodeType":"YulExpressionStatement","src":"5353:34:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5187:9:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5198:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5206:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5214:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5225:4:44","type":""}],"src":"5075:318:44"},{"body":{"nodeType":"YulBlock","src":"5499:76:44","statements":[{"nodeType":"YulAssignment","src":"5509:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5521:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5532:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5517:3:44"},"nodeType":"YulFunctionCall","src":"5517:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5509:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5551:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"5562:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5544:6:44"},"nodeType":"YulFunctionCall","src":"5544:25:44"},"nodeType":"YulExpressionStatement","src":"5544:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5468:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5479:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5490:4:44","type":""}],"src":"5398:177:44"},{"body":{"nodeType":"YulBlock","src":"5661:170:44","statements":[{"body":{"nodeType":"YulBlock","src":"5707:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5716:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5719:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5709:6:44"},"nodeType":"YulFunctionCall","src":"5709:12:44"},"nodeType":"YulExpressionStatement","src":"5709:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5682:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"5691:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5678:3:44"},"nodeType":"YulFunctionCall","src":"5678:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"5703:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5674:3:44"},"nodeType":"YulFunctionCall","src":"5674:32:44"},"nodeType":"YulIf","src":"5671:52:44"},{"nodeType":"YulVariableDeclaration","src":"5732:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5751:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5745:5:44"},"nodeType":"YulFunctionCall","src":"5745:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5736:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5795:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5770:24:44"},"nodeType":"YulFunctionCall","src":"5770:31:44"},"nodeType":"YulExpressionStatement","src":"5770:31:44"},{"nodeType":"YulAssignment","src":"5810:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"5820:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5810:6:44"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5627:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5638:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5650:6:44","type":""}],"src":"5580:251:44"},{"body":{"nodeType":"YulBlock","src":"5963:192:44","statements":[{"nodeType":"YulAssignment","src":"5973:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5985:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5996:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5981:3:44"},"nodeType":"YulFunctionCall","src":"5981:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5973:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6015:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"6026:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6008:6:44"},"nodeType":"YulFunctionCall","src":"6008:25:44"},"nodeType":"YulExpressionStatement","src":"6008:25:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6053:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6064:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6049:3:44"},"nodeType":"YulFunctionCall","src":"6049:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6073:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"6081:66:44","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6069:3:44"},"nodeType":"YulFunctionCall","src":"6069:79:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6042:6:44"},"nodeType":"YulFunctionCall","src":"6042:107:44"},"nodeType":"YulExpressionStatement","src":"6042:107:44"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes4__to_t_bytes32_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5924:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5935:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5943:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5954:4:44","type":""}],"src":"5836:319:44"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_string_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_string_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value3 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_string_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_string_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 96))\n        mstore(add(headStart, 32), value2)\n        mstore(add(headStart, 64), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        mstore(64, newFreePtr)\n        mstore(memPtr, mload(headStart))\n        mstore(add(memPtr, 32), mload(add(headStart, 32)))\n        value0 := memPtr\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes4__to_t_bytes32_t_bytes4__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3524":[{"length":32,"start":139},{"length":32,"start":1110}]},"linkReferences":{},"object":"60806040526004361061003f5760003560e01c806301ffc9a7146100445780633f15457f14610079578063591ebfb4146100c5578063e8d6dbb4146100f3575b600080fd5b34801561005057600080fd5b5061006461005f366004610599565b610108565b60405190151581526020015b60405180910390f35b34801561008557600080fd5b506100ad7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610070565b3480156100d157600080fd5b506100e56100e0366004610646565b6101a1565b604051908152602001610070565b6101066101013660046106a5565b610271565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061019b57507fffffffff0000000000000000000000000000000000000000000000000000000082167fb1c8640000000000000000000000000000000000000000000000000000000000145b92915050565b6000806101ac610403565b90508460005b81811015610266576000836001600160a01b03166344d31f068a8a858181106101dd576101dd6106f1565b90506020028101906101ef9190610707565b8a8a6040518563ffffffff1660e01b81526004016102109493929190610777565b6040805180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025091906107ab565b60208101519051019490940193506001016101b2565b505050949350505050565b600061027b610403565b9050826000805b828110156103cd576000846001600160a01b03166344d31f068989858181106102ad576102ad6106f1565b90506020028101906102bf9190610707565b89336040518563ffffffff1660e01b81526004016102e09493929190610777565b6040805180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906107ab565b90506000816020015182600001516103389190610808565b9050856001600160a01b031663acf1a841828b8b8781811061035c5761035c6106f1565b905060200281019061036e9190610707565b8b6040518563ffffffff1660e01b815260040161038d93929190610829565b6000604051808303818588803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b5050509190940193505050600101610282565b5060405133904780156108fc02916000818181858888f193505050501580156103fa573d6000803e3d6000fd5b50505050505050565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081527fd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630178b8bf90602401602060405180830381865afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061084d565b6040517f124a319c0000000000000000000000000000000000000000000000000000000081527fd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa60048201527fa61a65f00000000000000000000000000000000000000000000000000000000060248201529091506001600160a01b0382169063124a319c90604401602060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610593919061084d565b91505090565b6000602082840312156105ab57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146105db57600080fd5b9392505050565b60008083601f8401126105f457600080fd5b50813567ffffffffffffffff81111561060c57600080fd5b6020830191508360208260051b850101111561062757600080fd5b9250929050565b6001600160a01b038116811461064357600080fd5b50565b6000806000806060858703121561065c57600080fd5b843567ffffffffffffffff81111561067357600080fd5b61067f878288016105e2565b90955093505060208501359150604085013561069a8161062e565b939692955090935050565b6000806000604084860312156106ba57600080fd5b833567ffffffffffffffff8111156106d157600080fd5b6106dd868287016105e2565b909790965060209590950135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261071e57600080fd5b83018035915067ffffffffffffffff82111561073957600080fd5b60200191503681900382131561062757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061078b60608301868861074e565b90508360208301526001600160a01b038316604083015295945050505050565b6000604082840312156107bd57600080fd5b6040516040810181811067ffffffffffffffff821117156107ee57634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b8082018082111561019b57634e487b7160e01b600052601160045260246000fd5b60408152600061083d60408301858761074e565b9050826020830152949350505050565b60006020828403121561085f57600080fd5b81516105db8161062e56fea2646970667358221220f6f142632adc909fcdd9c8ccb2fe556dd7dd542efb5f03f906af195df0b013f564736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x3F15457F EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x591EBFB4 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0xE8D6DBB4 EQ PUSH2 0xF3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x599 JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE5 PUSH2 0xE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x646 JUMP JUMPDEST PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x70 JUMP JUMPDEST PUSH2 0x106 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x19B JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xB1C8640000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AC PUSH2 0x403 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x44D31F06 DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x1DD JUMPI PUSH2 0x1DD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x210 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x777 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x250 SWAP2 SWAP1 PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD ADD SWAP5 SWAP1 SWAP5 ADD SWAP4 POP PUSH1 0x1 ADD PUSH2 0x1B2 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B PUSH2 0x403 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x44D31F06 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x2AD JUMPI PUSH2 0x2AD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST DUP10 CALLER PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x777 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x320 SWAP2 SWAP1 PUSH2 0x7AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x808 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xACF1A841 DUP3 DUP12 DUP12 DUP8 DUP2 DUP2 LT PUSH2 0x35C JUMPI PUSH2 0x35C PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST DUP12 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x829 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP SWAP2 SWAP1 SWAP5 ADD SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x282 JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x178B8BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0xD051E4F8CB1870F877B00266E1292322BEA4C492A9933488E94D7C1A935E8DFA PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x178B8BF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x84D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124A319C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0xD051E4F8CB1870F877B00266E1292322BEA4C492A9933488E94D7C1A935E8DFA PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0xA61A65F000000000000000000000000000000000000000000000000000000000 PUSH1 0x24 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x124A319C SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x593 SWAP2 SWAP1 PUSH2 0x84D JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x5F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x67F DUP8 DUP3 DUP9 ADD PUSH2 0x5E2 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x69A DUP2 PUSH2 0x62E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DD DUP7 DUP3 DUP8 ADD PUSH2 0x5E2 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x78B PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x74E JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7EE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x19B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x83D PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0x74E JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5DB DUP2 PUSH2 0x62E JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 CALL TIMESTAMP PUSH4 0x2ADC909F 0xCD 0xD9 0xC8 0xCC 0xB2 INVALID SSTORE PUSH14 0xD7DD542EFB5F03F906AF195DF0B0 SGT CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"328:2241:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2340:227;;;;;;;;;;-1:-1:-1;2340:227:15;;;;;:::i;:::-;;:::i;:::-;;;516:14:44;;509:22;491:41;;479:2;464:18;2340:227:15;;;;;;;;514:24;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;719:55:44;;;701:74;;689:2;674:18;514:24:15;543:238:44;964:584:15;;;;;;;;;;-1:-1:-1;964:584:15;;;;;:::i;:::-;;:::i;:::-;;;2136:25:44;;;2124:2;2109:18;964:584:15;1990:177:44;1554:780:15;;;;;;:::i;:::-;;:::i;:::-;;2340:227;2424:4;2459:40;;;2474:25;2459:40;;:101;;-1:-1:-1;2515:45:15;;;2530:30;2515:45;2459:101;2440:120;2340:227;-1:-1:-1;;2340:227:15:o;964:584::-;1102:13;1127:33;1163:15;:13;:15::i;:::-;1127:51;-1:-1:-1;1205:5:15;1188:14;1227:315;1251:6;1247:1;:10;1227:315;;;1275:31;1309:10;-1:-1:-1;;;;;1309:20:15;;1347:5;;1353:1;1347:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1373;1399:4;1309:108;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1503:13;;;;1490:10;;:26;1480:37;;;;;-1:-1:-1;1459:3:15;;1227:315;;;;1117:431;;964:584;;;;;;:::o;1554:780::-;1673:33;1709:15;:13;:15::i;:::-;1673:51;-1:-1:-1;1751:5:15;1734:14;;1796:433;1820:6;1816:1;:10;1796:433;;;1844:31;1878:10;-1:-1:-1;;;;;1878:20:15;;1916:5;;1922:1;1916:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1942;1968:10;1878:114;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1844:148;;2006:18;2040:5;:13;;;2027:5;:10;;;:26;;;;:::i;:::-;2006:47;;2067:10;-1:-1:-1;;;;;2067:16:15;;2091:10;2103:5;;2109:1;2103:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2113;2067:55;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2185:19:15;;;;;-1:-1:-1;;;2164:3:15;;1796:433;;;-1:-1:-1;2276:51:15;;2284:10;;2305:21;2276:51;;;;;;;;;2305:21;2284:10;2276:51;;;;;;;;;;;;;;;;;;;;;1663:671;;;1554:780;;;:::o;600:358::-;704:26;;;;;419:66;704:26;;;2136:25:44;648:22:15;;;;704:3;-1:-1:-1;;;;;704:12:15;;;;2109:18:44;;704:26:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;800:137;;;;;419:66;800:137;;;6008:25:44;878:41:15;6049:18:44;;;6042:107;682:49:15;;-1:-1:-1;;;;;;800:22:15;;;;;5981:18:44;;800:137:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;741:210;;;600:358;:::o;14:332:44:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:44:o;786:375::-;857:8;867:6;921:3;914:4;906:6;902:17;898:27;888:55;;939:1;936;929:12;888:55;-1:-1:-1;962:20:44;;1005:18;994:30;;991:50;;;1037:1;1034;1027:12;991:50;1074:4;1066:6;1062:17;1050:29;;1134:3;1127:4;1117:6;1114:1;1110:14;1102:6;1098:27;1094:38;1091:47;1088:67;;;1151:1;1148;1141:12;1088:67;786:375;;;;;:::o;1166:154::-;-1:-1:-1;;;;;1245:5:44;1241:54;1234:5;1231:65;1221:93;;1310:1;1307;1300:12;1221:93;1166:154;:::o;1325:660::-;1441:6;1449;1457;1465;1518:2;1506:9;1497:7;1493:23;1489:32;1486:52;;;1534:1;1531;1524:12;1486:52;1574:9;1561:23;1607:18;1599:6;1596:30;1593:50;;;1639:1;1636;1629:12;1593:50;1678:78;1748:7;1739:6;1728:9;1724:22;1678:78;:::i;:::-;1775:8;;-1:-1:-1;1652:104:44;-1:-1:-1;;1857:2:44;1842:18;;1829:32;;-1:-1:-1;1911:2:44;1896:18;;1883:32;1924:31;1883:32;1924:31;:::i;:::-;1325:660;;;;-1:-1:-1;1325:660:44;;-1:-1:-1;;1325:660:44:o;2172:525::-;2279:6;2287;2295;2348:2;2336:9;2327:7;2323:23;2319:32;2316:52;;;2364:1;2361;2354:12;2316:52;2404:9;2391:23;2437:18;2429:6;2426:30;2423:50;;;2469:1;2466;2459:12;2423:50;2508:78;2578:7;2569:6;2558:9;2554:22;2508:78;:::i;:::-;2605:8;;2482:104;;-1:-1:-1;2687:2:44;2672:18;;;;2659:32;;2172:525;-1:-1:-1;;;;2172:525:44:o;2702:184::-;-1:-1:-1;;;2751:1:44;2744:88;2851:4;2848:1;2841:15;2875:4;2872:1;2865:15;2891:522;2969:4;2975:6;3035:11;3022:25;3129:2;3125:7;3114:8;3098:14;3094:29;3090:43;3070:18;3066:68;3056:96;;3148:1;3145;3138:12;3056:96;3175:33;;3227:20;;;-1:-1:-1;3270:18:44;3259:30;;3256:50;;;3302:1;3299;3292:12;3256:50;3335:4;3323:17;;-1:-1:-1;3366:14:44;3362:27;;;3352:38;;3349:58;;;3403:1;3400;3393:12;3418:267;3507:6;3502:3;3495:19;3559:6;3552:5;3545:4;3540:3;3536:14;3523:43;-1:-1:-1;3611:1:44;3586:16;;;3604:4;3582:27;;;3575:38;;;;3667:2;3646:15;;;-1:-1:-1;;3642:29:44;3633:39;;;3629:50;;3418:267::o;3690:438::-;3905:2;3894:9;3887:21;3868:4;3925:62;3983:2;3972:9;3968:18;3960:6;3952;3925:62;:::i;:::-;3917:70;;4023:6;4018:2;4007:9;4003:18;3996:34;-1:-1:-1;;;;;4070:6:44;4066:55;4061:2;4050:9;4046:18;4039:83;3690:438;;;;;;;:::o;4133:653::-;4226:6;4279:2;4267:9;4258:7;4254:23;4250:32;4247:52;;;4295:1;4292;4285:12;4247:52;4328:2;4322:9;4370:2;4362:6;4358:15;4439:6;4427:10;4424:22;4403:18;4391:10;4388:34;4385:62;4382:242;;;-1:-1:-1;;;4477:1:44;4470:88;4581:4;4578:1;4571:15;4609:4;4606:1;4599:15;4382:242;4640:2;4633:22;4679:16;;4664:32;;4750:2;4735:18;;;4729:25;4712:15;;;4705:50;;;;-1:-1:-1;4671:6:44;4133:653;-1:-1:-1;4133:653:44:o;4791:279::-;4856:9;;;4877:10;;;4874:190;;;-1:-1:-1;;;4917:1:44;4910:88;5021:4;5018:1;5011:15;5049:4;5046:1;5039:15;5075:318;5262:2;5251:9;5244:21;5225:4;5282:62;5340:2;5329:9;5325:18;5317:6;5309;5282:62;:::i;:::-;5274:70;;5380:6;5375:2;5364:9;5360:18;5353:34;5075:318;;;;;;:::o;5580:251::-;5650:6;5703:2;5691:9;5682:7;5678:23;5674:32;5671:52;;;5719:1;5716;5709:12;5671:52;5751:9;5745:16;5770:31;5795:5;5770:31;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"441600","executionCost":"infinite","totalCost":"infinite"},"external":{"ens()":"infinite","renewAll(string[],uint256)":"infinite","rentPrice(string[],uint256,address)":"infinite","supportsInterface(bytes4)":"347"},"internal":{"getController()":"infinite"}},"methodIdentifiers":{"ens()":"3f15457f","renewAll(string[],uint256)":"e8d6dbb4","rentPrice(string[],uint256,address)":"591ebfb4","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/BulkRenewal.sol\":\"BulkRenewal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ethregistrar/BaseRegistrarImplementation.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseRegistrarImplementation is ERC721, IBaseRegistrar, Ownable {\\n    // A map of expiry times\\n    mapping(uint256 => uint256) expiries;\\n    // The ENS registry\\n    ENS public ens;\\n    // The namehash of the TLD this registrar owns (eg, .eth)\\n    bytes32 public baseNode;\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address => bool) public controllers;\\n    uint256 public constant GRACE_PERIOD = 90 days;\\n    bytes4 private constant INTERFACE_META_ID =\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 private constant ERC721_ID =\\n        bytes4(\\n            keccak256(\\\"balanceOf(address)\\\") ^\\n                keccak256(\\\"ownerOf(uint256)\\\") ^\\n                keccak256(\\\"approve(address,uint256)\\\") ^\\n                keccak256(\\\"getApproved(uint256)\\\") ^\\n                keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n                keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n                keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n        );\\n    bytes4 private constant RECLAIM_ID =\\n        bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n\\n    /**\\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view override returns (bool) {\\n        address _owner = ownerOf(tokenId);\\n        return (spender == _owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(_owner, spender));\\n    }\\n\\n    constructor(ENS _ens, bytes32 _baseNode) ERC721(\\\"\\\", \\\"\\\") {\\n        ens = _ens;\\n        baseNode = _baseNode;\\n    }\\n\\n    modifier live() {\\n        require(ens.owner(baseNode) == address(this));\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(controllers[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID. Names become unowned\\n     *      when their registration expires.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view override(IERC721, ERC721) returns (address) {\\n        require(expiries[tokenId] > block.timestamp);\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external override onlyOwner {\\n        controllers[controller] = true;\\n        emit ControllerAdded(controller);\\n    }\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external override onlyOwner {\\n        controllers[controller] = false;\\n        emit ControllerRemoved(controller);\\n    }\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external override onlyOwner {\\n        ens.setResolver(baseNode, resolver);\\n    }\\n\\n    // Returns the expiration timestamp of the specified id.\\n    function nameExpires(uint256 id) external view override returns (uint256) {\\n        return expiries[id];\\n    }\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public view override returns (bool) {\\n        // Not available if it's registered here or in its grace period.\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external override returns (uint256) {\\n        return _register(id, _owner, duration, true);\\n    }\\n\\n    /**\\n     * @dev Register a name, without modifying the registry.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function registerOnly(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external returns (uint256) {\\n        return _register(id, _owner, duration, false);\\n    }\\n\\n    function _register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration,\\n        bool updateRegistry\\n    ) internal live onlyController returns (uint256) {\\n        require(available(id));\\n        require(\\n            block.timestamp + duration + GRACE_PERIOD >\\n                block.timestamp + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] = block.timestamp + duration;\\n        if (_exists(id)) {\\n            // Name was previously owned, and expired\\n            _burn(id);\\n        }\\n        _mint(_owner, id);\\n        if (updateRegistry) {\\n            ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n        }\\n\\n        emit NameRegistered(id, _owner, block.timestamp + duration);\\n\\n        return block.timestamp + duration;\\n        // return 0;\\n    }\\n\\n    function renew(\\n        uint256 id,\\n        uint256 duration\\n    ) external override live onlyController returns (uint256) {\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\n        require(\\n            expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] += duration;\\n        emit NameRenewed(id, expiries[id]);\\n        return expiries[id];\\n    }\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address _owner) external override live {\\n        require(_isApprovedOrOwner(msg.sender, id));\\n        ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view override(ERC721, IERC165) returns (bool) {\\n        return\\n            interfaceID == INTERFACE_META_ID ||\\n            interfaceID == ERC721_ID ||\\n            interfaceID == RECLAIM_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xe37ce2b399a3e944483b0fe97ac570512fd27ab64b10e10f953381503d3b4c3e\"},\"contracts/ethregistrar/BulkRenewal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./ETHRegistrarController.sol\\\";\\nimport \\\"./IETHRegistrarController.sol\\\";\\nimport \\\"../resolvers/Resolver.sol\\\";\\nimport \\\"./IBulkRenewal.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ncontract BulkRenewal is IBulkRenewal {\\n    bytes32 private constant ETH_NAMEHASH =\\n        0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa; // namehash('scroll')\\n\\n    ENS public immutable ens;\\n\\n    constructor(ENS _ens) {\\n        ens = _ens;\\n    }\\n\\n    function getController() internal view returns (ETHRegistrarController) {\\n        Resolver r = Resolver(ens.resolver(ETH_NAMEHASH));\\n        return\\n            ETHRegistrarController(\\n                r.interfaceImplementer(\\n                    ETH_NAMEHASH,\\n                    type(IETHRegistrarController).interfaceId\\n                )\\n            );\\n    }\\n\\n    function rentPrice(\\n        string[] calldata names,\\n        uint256 duration,\\n        address user\\n    ) external view override returns (uint256 total) {\\n        ETHRegistrarController controller = getController();\\n        uint256 length = names.length;\\n        for (uint256 i = 0; i < length; ) {\\n            IPriceOracle.Price memory price = controller.rentPrice(\\n                names[i],\\n                duration,\\n                user\\n            );\\n            unchecked {\\n                ++i;\\n                total += (price.base + price.premium);\\n            }\\n        }\\n    }\\n\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration\\n    ) external payable override {\\n        ETHRegistrarController controller = getController();\\n        uint256 length = names.length;\\n        uint256 total;\\n        for (uint256 i = 0; i < length; ) {\\n            IPriceOracle.Price memory price = controller.rentPrice(\\n                names[i],\\n                duration,\\n                msg.sender\\n            );\\n            uint256 totalPrice = price.base + price.premium;\\n            controller.renew{value: totalPrice}(names[i], duration);\\n            unchecked {\\n                ++i;\\n                total += totalPrice;\\n            }\\n        }\\n        // Send any excess funds back\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) external pure returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IBulkRenewal).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x75225d521ebc3731c489d573d1e1c5ccf8fcbfc062b1e23a6e25523a867752e6\",\"license\":\"MIT\"},\"contracts/ethregistrar/ETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport {BaseRegistrarImplementation} from \\\"./BaseRegistrarImplementation.sol\\\";\\nimport {StringUtils} from \\\"./StringUtils.sol\\\";\\nimport {Resolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {ReverseRegistrar} from \\\"../reverseRegistrar/ReverseRegistrar.sol\\\";\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\nimport {IETHRegistrarController, IPriceOracle} from \\\"./IETHRegistrarController.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\nimport {ERC20Recoverable} from \\\"../utils/ERC20Recoverable.sol\\\";\\n\\nerror CommitmentTooNew(bytes32 commitment);\\nerror CommitmentTooOld(bytes32 commitment);\\nerror NameNotAvailable(string name);\\nerror DurationTooShort(uint256 duration);\\nerror ResolverRequiredWhenDataSupplied();\\nerror UnexpiredCommitmentExists(bytes32 commitment);\\nerror InsufficientValue();\\nerror Unauthorised(bytes32 node);\\nerror MaxCommitmentAgeTooLow();\\nerror MaxCommitmentAgeTooHigh();\\n\\n/**\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\n */\\ncontract ETHRegistrarController is\\n    Ownable,\\n    IETHRegistrarController,\\n    IERC165,\\n    ERC20Recoverable,\\n    ReverseClaimer\\n{\\n    using StringUtils for *;\\n    using Address for address;\\n\\n    uint256 public constant MIN_REGISTRATION_DURATION = 28 days;\\n    bytes32 private constant ETH_NODE =\\n        0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa; // namehash('scroll')\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\n    BaseRegistrarImplementation immutable base;\\n    IPriceOracle public prices;\\n    uint256 public immutable minCommitmentAge;\\n    uint256 public immutable maxCommitmentAge;\\n    ReverseRegistrar public immutable reverseRegistrar;\\n    INameWrapper public immutable nameWrapper;\\n    uint256 public maxLenght = 3;\\n    address public walletDev;\\n    mapping(bytes32 => uint256) public commitments;\\n\\n    event NameRegistered(\\n        string name,\\n        bytes32 indexed label,\\n        address indexed owner,\\n        uint256 baseCost,\\n        uint256 premium,\\n        uint256 expires\\n    );\\n\\n    event NameRenewed(\\n        string name,\\n        bytes32 indexed label,\\n        uint256 cost,\\n        uint256 expires\\n    );\\n\\n    event PriceChange(address oldPrice, address newPrice);\\n\\n    event ChangeMaxLength(uint256 max);\\n\\n    function setMaxLength(uint256 _max) external onlyOwner {\\n        require(_max > 0, \\\"ERROR: Max must be greater than 0\\\");\\n        maxLenght = _max;\\n        emit ChangeMaxLength(maxLenght);\\n    }\\n\\n    function setPrice(IPriceOracle _prices) external onlyOwner {\\n        require(\\n            address(_prices) != address(0x0),\\n            \\\"ERROR: Prices is zero address\\\"\\n        );\\n\\n        emit PriceChange(address(prices), address(_prices));\\n\\n        prices = _prices;\\n    }\\n\\n    constructor(\\n        BaseRegistrarImplementation _base,\\n        IPriceOracle _prices,\\n        uint256 _minCommitmentAge,\\n        uint256 _maxCommitmentAge,\\n        ReverseRegistrar _reverseRegistrar,\\n        INameWrapper _nameWrapper,\\n        ENS _ens\\n    ) ReverseClaimer(_ens, msg.sender) {\\n        if (_maxCommitmentAge <= _minCommitmentAge) {\\n            revert MaxCommitmentAgeTooLow();\\n        }\\n\\n        if (_maxCommitmentAge > block.timestamp) {\\n            revert MaxCommitmentAgeTooHigh();\\n        }\\n\\n        base = _base;\\n        prices = _prices;\\n        minCommitmentAge = _minCommitmentAge;\\n        maxCommitmentAge = _maxCommitmentAge;\\n        reverseRegistrar = _reverseRegistrar;\\n        nameWrapper = _nameWrapper;\\n    }\\n\\n    function rentPrice(\\n        string memory name,\\n        uint256 duration,\\n        address user\\n    ) public view override returns (IPriceOracle.Price memory price) {\\n        bytes32 label = keccak256(bytes(name));\\n        price = prices.price(\\n            name,\\n            base.nameExpires(uint256(label)),\\n            duration,\\n            user\\n        );\\n    }\\n\\n    function valid(string memory name) public view returns (bool) {\\n        return name.strlen() >= maxLenght;\\n    }\\n\\n    function available(string memory name) public view override returns (bool) {\\n        bytes32 label = keccak256(bytes(name));\\n        return valid(name) && base.available(uint256(label));\\n    }\\n\\n    function makeCommitment(\\n        string memory name,\\n        address _owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) public pure override returns (bytes32) {\\n        bytes32 label = keccak256(bytes(name));\\n        if (data.length > 0 && resolver == address(0)) {\\n            revert ResolverRequiredWhenDataSupplied();\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    label,\\n                    _owner,\\n                    duration,\\n                    secret,\\n                    resolver,\\n                    data,\\n                    reverseRecord,\\n                    ownerControlledFuses\\n                )\\n            );\\n    }\\n\\n    function commit(bytes32 commitment) public override {\\n        require(\\n            commitments[commitment] + maxCommitmentAge < block.timestamp,\\n            \\\"ERROR: UnexpiredCommitmentExists\\\"\\n        );\\n        commitments[commitment] = block.timestamp;\\n    }\\n\\n    function register(\\n        string calldata name,\\n        address _owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) public payable override {\\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\\n        if (msg.value < price.base + price.premium) {\\n            revert InsufficientValue();\\n        }\\n\\n        _consumeCommitment(\\n            name,\\n            duration,\\n            makeCommitment(\\n                name,\\n                _owner,\\n                duration,\\n                secret,\\n                resolver,\\n                data,\\n                reverseRecord,\\n                ownerControlledFuses\\n            )\\n        );\\n\\n        uint256 expires = nameWrapper.registerAndWrapETH2LD(\\n            name,\\n            _owner,\\n            duration,\\n            resolver,\\n            ownerControlledFuses\\n        );\\n\\n        if (data.length > 0) {\\n            _setRecords(resolver, keccak256(bytes(name)), data);\\n        }\\n\\n        if (reverseRecord) {\\n            _setReverseRecord(name, resolver, msg.sender);\\n        }\\n\\n        emit NameRegistered(\\n            name,\\n            keccak256(bytes(name)),\\n            _owner,\\n            price.base,\\n            price.premium,\\n            expires\\n            // 0\\n        );\\n\\n        if (msg.value > (price.base + price.premium)) {\\n            payable(msg.sender).transfer(\\n                msg.value - (price.base + price.premium)\\n            );\\n        }\\n    }\\n\\n    function renew(\\n        string calldata name,\\n        uint256 duration\\n    ) external payable override {\\n        bytes32 labelhash = keccak256(bytes(name));\\n        uint256 tokenId = uint256(labelhash);\\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\\n        if (msg.value < price.base) {\\n            revert InsufficientValue();\\n        }\\n        uint256 expires = nameWrapper.renew(tokenId, duration);\\n\\n        if (msg.value > price.base) {\\n            payable(msg.sender).transfer(msg.value - price.base);\\n        }\\n\\n        emit NameRenewed(name, labelhash, price.base, expires);\\n    }\\n\\n    function withdraw() public {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) external pure returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IETHRegistrarController).interfaceId;\\n    }\\n\\n    /* Internal functions */\\n\\n    function _consumeCommitment(\\n        string memory name,\\n        uint256 duration,\\n        bytes32 commitment\\n    ) internal {\\n        // if(minCommitmentAge != 0) {\\n        // Require an old enough commitment.\\n        require(\\n            commitments[commitment] + minCommitmentAge < block.timestamp,\\n            \\\"ERROR: CommitmentTooNew\\\"\\n        );\\n\\n        // If the commitment is too old, or the name is registered, stop\\n        require(\\n            commitments[commitment] + maxCommitmentAge > block.timestamp,\\n            \\\"ERROR: Commit to old\\\"\\n        );\\n        require(available(name), \\\"ERROR: NameNotAvailable\\\");\\n\\n        delete (commitments[commitment]);\\n\\n        require(\\n            duration > MIN_REGISTRATION_DURATION,\\n            \\\"ERROR: DurationTooShort\\\"\\n        );\\n        // }\\n    }\\n\\n    function _setRecords(\\n        address resolverAddress,\\n        bytes32 label,\\n        bytes[] calldata data\\n    ) internal {\\n        // use hardcoded .eth namehash\\n        bytes32 nodehash = keccak256(abi.encodePacked(ETH_NODE, label));\\n        Resolver resolver = Resolver(resolverAddress);\\n        resolver.multicallWithNodeCheck(nodehash, data);\\n    }\\n\\n    function _setReverseRecord(\\n        string memory name,\\n        address resolver,\\n        address _owner\\n    ) internal {\\n        reverseRegistrar.setNameForAddr(\\n            msg.sender,\\n            _owner,\\n            resolver,\\n            string.concat(name, \\\".scroll\\\")\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8164bea3d6bb1a57d45af0d2c69b6fd69e68123b849958d8969c495f3071393a\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/ethregistrar/IBulkRenewal.sol\":{\"content\":\"interface IBulkRenewal {\\n    function rentPrice(\\n        string[] calldata names,\\n        uint256 duration,\\n        address user\\n    ) external view returns (uint256 total);\\n\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xaaaab2037d3a98a51698b1cc77957de00491709610f621667b5f0b38657abfeb\"},\"contracts/ethregistrar/IETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IETHRegistrarController {\\n    function rentPrice(\\n        string memory,\\n        uint256,\\n        address\\n    ) external view returns (IPriceOracle.Price memory);\\n\\n    function available(string memory) external returns (bool);\\n\\n    function makeCommitment(\\n        string memory,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32) external;\\n\\n    function register(\\n        string calldata,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external payable;\\n\\n    function renew(string calldata, uint256) external payable;\\n}\\n\",\"keccak256\":\"0x86368c7f22a817e407e757759fc22ca41171a75ce05abb0d721d1f1df02469ae\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    //    struct scrollToken {\\n    //        uint256 minAmount;\\n    //        uint256 maxRentTime;\\n    //    }\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration,\\n        address user\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x09c26233169d97f180cd7ad3cd1e9bd837554e6244b82c0e44637a79b02fb866\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setApprovalForAll(address, bool) external;\\n\\n    function approve(bytes32 node, address delegate, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external;\\n\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) external;\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xfc77ab6b7c59c3ebfe1c720bdebf9b08c2488ff7ac9501a9aa056c5d6d5b50c5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address _owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, _owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(\\n        address _owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param _owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, _owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a94f7a4478af1bcc9d3ac657dece4df9f0134cff1c1b52e0f230998fdd154b7\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(address nft,uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6249b6a2195ec9aa5d87f5abddac5d0de45aa3ac067fb969e4bc096226f4c246\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/ETHRegistrarController.sol":{"ETHRegistrarController":{"abi":[{"inputs":[{"internalType":"contract BaseRegistrarImplementation","name":"_base","type":"address"},{"internalType":"contract IPriceOracle","name":"_prices","type":"address"},{"internalType":"uint256","name":"_minCommitmentAge","type":"uint256"},{"internalType":"uint256","name":"_maxCommitmentAge","type":"uint256"},{"internalType":"contract ReverseRegistrar","name":"_reverseRegistrar","type":"address"},{"internalType":"contract INameWrapper","name":"_nameWrapper","type":"address"},{"internalType":"contract ENS","name":"_ens","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"MaxCommitmentAgeTooHigh","type":"error"},{"inputs":[],"name":"MaxCommitmentAgeTooLow","type":"error"},{"inputs":[],"name":"ResolverRequiredWhenDataSupplied","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"max","type":"uint256"}],"name":"ChangeMaxLength","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"baseCost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"premium","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"cost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRenewed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPrice","type":"address"},{"indexed":false,"internalType":"address","name":"newPrice","type":"address"}],"name":"PriceChange","type":"event"},{"inputs":[],"name":"MIN_REGISTRATION_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"available","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"name":"commit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"commitments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"bytes32","name":"secret","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"bytes[]","name":"data","type":"bytes[]"},{"internalType":"bool","name":"reverseRecord","type":"bool"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"makeCommitment","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"maxCommitmentAge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLenght","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minCommitmentAge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nameWrapper","outputs":[{"internalType":"contract INameWrapper","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"prices","outputs":[{"internalType":"contract IPriceOracle","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"recoverFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"bytes32","name":"secret","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"bytes[]","name":"data","type":"bytes[]"},{"internalType":"bool","name":"reverseRecord","type":"bool"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"register","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"rentPrice","outputs":[{"components":[{"internalType":"uint256","name":"base","type":"uint256"},{"internalType":"uint256","name":"premium","type":"uint256"}],"internalType":"struct IPriceOracle.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"reverseRegistrar","outputs":[{"internalType":"contract ReverseRegistrar","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_max","type":"uint256"}],"name":"setMaxLength","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IPriceOracle","name":"_prices","type":"address"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"valid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"walletDev","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"A registrar controller for registering and renewing names at fixed cost.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"recoverFunds(address,address,uint256)":{"details":"The contract is Ownable and only the owner can call the recover function.","params":{"_amount":"The amount of tokens to recover.","_to":"The address to send the tokens to.","_token":"The address of the ERC20 token to recover"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_4011":{"entryPoint":null,"id":4011,"parameterSlots":7,"returnSlots":0},"@_5718":{"entryPoint":null,"id":5718,"parameterSlots":2,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":463,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":716,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":755,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_BaseRegistrarImplementation_$3507t_contract$_IPriceOracle_$4781t_uint256t_uint256t_contract$_ReverseRegistrar_$6070t_contract$_INameWrapper_$6534t_contract$_ENS_$5200_fromMemory":{"entryPoint":568,"id":null,"parameterSlots":2,"returnSlots":7},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_BaseRegistrarImplementation":{"entryPoint":543,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2218:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"88:86:44","statements":[{"body":{"nodeType":"YulBlock","src":"152:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"161:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"164:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"154:6:44"},"nodeType":"YulFunctionCall","src":"154:12:44"},"nodeType":"YulExpressionStatement","src":"154:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"111:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"122:5:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"137:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"142:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"133:3:44"},"nodeType":"YulFunctionCall","src":"133:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"146:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"129:3:44"},"nodeType":"YulFunctionCall","src":"129:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"118:3:44"},"nodeType":"YulFunctionCall","src":"118:31:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"108:2:44"},"nodeType":"YulFunctionCall","src":"108:42:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"101:6:44"},"nodeType":"YulFunctionCall","src":"101:50:44"},"nodeType":"YulIf","src":"98:70:44"}]},"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"77:5:44","type":""}],"src":"14:160:44"},{"body":{"nodeType":"YulBlock","src":"477:875:44","statements":[{"body":{"nodeType":"YulBlock","src":"524:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"533:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"536:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"526:6:44"},"nodeType":"YulFunctionCall","src":"526:12:44"},"nodeType":"YulExpressionStatement","src":"526:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"498:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"507:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"494:3:44"},"nodeType":"YulFunctionCall","src":"494:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"519:3:44","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"490:3:44"},"nodeType":"YulFunctionCall","src":"490:33:44"},"nodeType":"YulIf","src":"487:53:44"},{"nodeType":"YulVariableDeclaration","src":"549:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"568:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"562:5:44"},"nodeType":"YulFunctionCall","src":"562:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"553:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"641:5:44"}],"functionName":{"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulIdentifier","src":"587:53:44"},"nodeType":"YulFunctionCall","src":"587:60:44"},"nodeType":"YulExpressionStatement","src":"587:60:44"},{"nodeType":"YulAssignment","src":"656:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"666:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"656:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"680:40:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"705:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"716:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"701:3:44"},"nodeType":"YulFunctionCall","src":"701:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"695:5:44"},"nodeType":"YulFunctionCall","src":"695:25:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"684:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"783:7:44"}],"functionName":{"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulIdentifier","src":"729:53:44"},"nodeType":"YulFunctionCall","src":"729:62:44"},"nodeType":"YulExpressionStatement","src":"729:62:44"},{"nodeType":"YulAssignment","src":"800:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"810:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"800:6:44"}]},{"nodeType":"YulAssignment","src":"826:35:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"846:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"857:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"842:3:44"},"nodeType":"YulFunctionCall","src":"842:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"836:5:44"},"nodeType":"YulFunctionCall","src":"836:25:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"826:6:44"}]},{"nodeType":"YulAssignment","src":"870:35:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"890:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"901:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"886:3:44"},"nodeType":"YulFunctionCall","src":"886:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"880:5:44"},"nodeType":"YulFunctionCall","src":"880:25:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"870:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"914:41:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"939:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"950:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"935:3:44"},"nodeType":"YulFunctionCall","src":"935:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"929:5:44"},"nodeType":"YulFunctionCall","src":"929:26:44"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"918:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1018:7:44"}],"functionName":{"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulIdentifier","src":"964:53:44"},"nodeType":"YulFunctionCall","src":"964:62:44"},"nodeType":"YulExpressionStatement","src":"964:62:44"},{"nodeType":"YulAssignment","src":"1035:17:44","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1045:7:44"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1035:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1061:41:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1086:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1097:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1082:3:44"},"nodeType":"YulFunctionCall","src":"1082:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1076:5:44"},"nodeType":"YulFunctionCall","src":"1076:26:44"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"1065:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"1165:7:44"}],"functionName":{"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulIdentifier","src":"1111:53:44"},"nodeType":"YulFunctionCall","src":"1111:62:44"},"nodeType":"YulExpressionStatement","src":"1111:62:44"},{"nodeType":"YulAssignment","src":"1182:17:44","value":{"name":"value_3","nodeType":"YulIdentifier","src":"1192:7:44"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1182:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1208:41:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1233:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1244:3:44","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1229:3:44"},"nodeType":"YulFunctionCall","src":"1229:19:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1223:5:44"},"nodeType":"YulFunctionCall","src":"1223:26:44"},"variables":[{"name":"value_4","nodeType":"YulTypedName","src":"1212:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_4","nodeType":"YulIdentifier","src":"1312:7:44"}],"functionName":{"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulIdentifier","src":"1258:53:44"},"nodeType":"YulFunctionCall","src":"1258:62:44"},"nodeType":"YulExpressionStatement","src":"1258:62:44"},{"nodeType":"YulAssignment","src":"1329:17:44","value":{"name":"value_4","nodeType":"YulIdentifier","src":"1339:7:44"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"1329:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_BaseRegistrarImplementation_$3507t_contract$_IPriceOracle_$4781t_uint256t_uint256t_contract$_ReverseRegistrar_$6070t_contract$_INameWrapper_$6534t_contract$_ENS_$5200_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"395:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"406:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"418:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"426:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"434:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"442:6:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"450:6:44","type":""},{"name":"value5","nodeType":"YulTypedName","src":"458:6:44","type":""},{"name":"value6","nodeType":"YulTypedName","src":"466:6:44","type":""}],"src":"179:1173:44"},{"body":{"nodeType":"YulBlock","src":"1458:76:44","statements":[{"nodeType":"YulAssignment","src":"1468:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1480:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1491:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1476:3:44"},"nodeType":"YulFunctionCall","src":"1476:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1468:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1510:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"1521:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1503:6:44"},"nodeType":"YulFunctionCall","src":"1503:25:44"},"nodeType":"YulExpressionStatement","src":"1503:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1427:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1438:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1449:4:44","type":""}],"src":"1357:177:44"},{"body":{"nodeType":"YulBlock","src":"1620:199:44","statements":[{"body":{"nodeType":"YulBlock","src":"1666:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1675:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1678:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1668:6:44"},"nodeType":"YulFunctionCall","src":"1668:12:44"},"nodeType":"YulExpressionStatement","src":"1668:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1641:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1650:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1637:3:44"},"nodeType":"YulFunctionCall","src":"1637:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1662:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1633:3:44"},"nodeType":"YulFunctionCall","src":"1633:32:44"},"nodeType":"YulIf","src":"1630:52:44"},{"nodeType":"YulVariableDeclaration","src":"1691:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1710:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1704:5:44"},"nodeType":"YulFunctionCall","src":"1704:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1695:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1783:5:44"}],"functionName":{"name":"validator_revert_contract_BaseRegistrarImplementation","nodeType":"YulIdentifier","src":"1729:53:44"},"nodeType":"YulFunctionCall","src":"1729:60:44"},"nodeType":"YulExpressionStatement","src":"1729:60:44"},{"nodeType":"YulAssignment","src":"1798:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1808:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1798:6:44"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1586:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1597:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1609:6:44","type":""}],"src":"1539:280:44"},{"body":{"nodeType":"YulBlock","src":"1925:102:44","statements":[{"nodeType":"YulAssignment","src":"1935:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1947:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1958:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1943:3:44"},"nodeType":"YulFunctionCall","src":"1943:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1935:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1977:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1992:6:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2008:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2004:3:44"},"nodeType":"YulFunctionCall","src":"2004:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"2017:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2000:3:44"},"nodeType":"YulFunctionCall","src":"2000:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1988:3:44"},"nodeType":"YulFunctionCall","src":"1988:32:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1970:6:44"},"nodeType":"YulFunctionCall","src":"1970:51:44"},"nodeType":"YulExpressionStatement","src":"1970:51:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1894:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1905:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1916:4:44","type":""}],"src":"1824:203:44"},{"body":{"nodeType":"YulBlock","src":"2113:103:44","statements":[{"body":{"nodeType":"YulBlock","src":"2159:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2168:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2171:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2161:6:44"},"nodeType":"YulFunctionCall","src":"2161:12:44"},"nodeType":"YulExpressionStatement","src":"2161:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2134:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2143:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2130:3:44"},"nodeType":"YulFunctionCall","src":"2130:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2155:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2126:3:44"},"nodeType":"YulFunctionCall","src":"2126:32:44"},"nodeType":"YulIf","src":"2123:52:44"},{"nodeType":"YulAssignment","src":"2184:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2200:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2194:5:44"},"nodeType":"YulFunctionCall","src":"2194:16:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2184:6:44"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2079:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2090:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2102:6:44","type":""}],"src":"2032:184:44"}]},"contents":"{\n    { }\n    function validator_revert_contract_BaseRegistrarImplementation(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_BaseRegistrarImplementation_$3507t_contract$_IPriceOracle_$4781t_uint256t_uint256t_contract$_ReverseRegistrar_$6070t_contract$_INameWrapper_$6534t_contract$_ENS_$5200_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_BaseRegistrarImplementation(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_BaseRegistrarImplementation(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        let value_2 := mload(add(headStart, 128))\n        validator_revert_contract_BaseRegistrarImplementation(value_2)\n        value4 := value_2\n        let value_3 := mload(add(headStart, 160))\n        validator_revert_contract_BaseRegistrarImplementation(value_3)\n        value5 := value_3\n        let value_4 := mload(add(headStart, 192))\n        validator_revert_contract_BaseRegistrarImplementation(value_4)\n        value6 := value_4\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_BaseRegistrarImplementation(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61012060405260036002553480156200001757600080fd5b50604051620023d5380380620023d58339810160408190526200003a9162000238565b80336200004781620001cf565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526000906001600160a01b038416906302571be390602401602060405180830381865afa158015620000af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d59190620002cc565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af115801562000122573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001489190620002f3565b505050508484116200016d576040516307cb550760e31b815260040160405180910390fd5b428411156200018f57604051630b4319e560e21b815260040160405180910390fd5b506001600160a01b03958616608052600180546001600160a01b0319169587169590951790945560a09290925260c052821660e05216610100526200030d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200023557600080fd5b50565b600080600080600080600060e0888a0312156200025457600080fd5b875162000261816200021f565b602089015190975062000274816200021f565b809650506040880151945060608801519350608088015162000296816200021f565b60a0890151909350620002a9816200021f565b60c0890151909250620002bc816200021f565b8091505092959891949750929550565b600060208284031215620002df57600080fd5b8151620002ec816200021f565b9392505050565b6000602082840312156200030657600080fd5b5051919050565b60805160a05160c05160e0516101005161205262000383600039600081816103f701528181610a7f0152610d240152600081816102d5015261143a01526000818161045e01528181610fbf0152611228015260008181610385015261119f0152600081816107100152610e7501526120526000f3fe60806040526004361061018b5760003560e01c80638c254c0b116100d6578063aeb8ce9b1161007f578063dc2f786711610059578063dc2f7867146104a0578063f14fcbc8146104c0578063f2fde38b146104e057600080fd5b8063aeb8ce9b1461042c578063ce1e09c01461044c578063d3419bf31461048057600080fd5b80639791c097116100b05780639791c097146103c5578063a8e5fbc0146103e5578063acf1a8411461041957600080fd5b80638c254c0b146103535780638d839ffe146103735780638da5cb5b146103a757600080fd5b806365a69dcf11610138578063808698531161011257806380869853146102c3578063839df9451461030f5780638a95b09f1461033c57600080fd5b806365a69dcf1461027b578063715018a61461029b57806374694a2b146102b057600080fd5b80633ccfd60b116101695780633ccfd60b1461020b57806344d31f06146102205780635d3590d51461025b57600080fd5b806301ffc9a7146101905780631ee0f10d146101c55780633b324790146101e9575b600080fd5b34801561019c57600080fd5b506101b06101ab36600461167b565b610500565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101db60025481565b6040519081526020016101bc565b3480156101f557600080fd5b506102096102043660046116d2565b610599565b005b34801561021757600080fd5b50610209610672565b34801561022c57600080fd5b5061024061023b3660046117b4565b6106af565b604080518251815260209283015192810192909252016101bc565b34801561026757600080fd5b5061020961027636600461180f565b6107e5565b34801561028757600080fd5b506101db6102963660046118c1565b61087f565b3480156102a757600080fd5b5061020961091d565b6102096102be3660046119cc565b610931565b3480156102cf57600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bc565b34801561031b57600080fd5b506101db61032a366004611a9b565b60046020526000908152604090205481565b34801561034857600080fd5b506101db6224ea0081565b34801561035f57600080fd5b506003546102f7906001600160a01b031681565b34801561037f57600080fd5b506101db7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103b357600080fd5b506000546001600160a01b03166102f7565b3480156103d157600080fd5b506101b06103e0366004611ab4565b610c4f565b3480156103f157600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b610209610427366004611af1565b610c65565b34801561043857600080fd5b506101b0610447366004611ab4565b610e2c565b34801561045857600080fd5b506101db7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048c57600080fd5b506001546102f7906001600160a01b031681565b3480156104ac57600080fd5b506102096104bb366004611a9b565b610eef565b3480156104cc57600080fd5b506102096104db366004611a9b565b610fa8565b3480156104ec57600080fd5b506102096104fb3660046116d2565b611044565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061059357507fffffffff0000000000000000000000000000000000000000000000000000000082167fa61a65f000000000000000000000000000000000000000000000000000000000145b92915050565b6105a16110d1565b6001600160a01b0381166105fc5760405162461bcd60e51b815260206004820152601d60248201527f4552524f523a20507269636573206973207a65726f206164647265737300000060448201526064015b60405180910390fd5b600154604080516001600160a01b03928316815291831660208301527f062da1737d3c3a6daed7e4acf0ffe363e818dc36e1c61230cccf0bae9d217d07910160405180910390a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156106ac573d6000803e3d6000fd5b50565b6040805180820190915260008082526020820152835160208501206001546040517fd6e4fa86000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03918216916389fce6199188917f0000000000000000000000000000000000000000000000000000000000000000169063d6e4fa8690602401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611b3d565b87876040518563ffffffff1660e01b815260040161079c9493929190611ba6565b6040805180830381865afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190611bde565b95945050505050565b6107ed6110d1565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190611c2d565b50505050565b885160208a0120600090841580159061089f57506001600160a01b038716155b156108d6576040517fd3f605c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808a8a8a8a8a8a8a8a6040516020016108f799989796959493929190611d05565b604051602081830303815290604052805190602001209150509998505050505050505050565b6109256110d1565b61092f600061112b565b565b60006109768b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92503391506106af9050565b6020810151815191925061098991611d7d565b3410156109a95760405163044044a560e21b815260040160405180910390fd5b610a4c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505089610a478e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8d61087f565b611188565b6040517fa40149820000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a401498290610abe908f908f908f908f908e908b90600401611d90565b6020604051808303816000875af1158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190611b3d565b90508415610b2c57610b2c878d8d604051610b1d929190611dda565b60405180910390208888611355565b8315610b7557610b758c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92503391506114389050565b896001600160a01b03168c8c604051610b8f929190611dda565b60405180910390207f69e37f151eb98a09618ddaa80c8cfaf1ce5996867c489f45b555b412271ebf278e8e8660000151876020015187604051610bd6959493929190611dea565b60405180910390a360208201518251610bef9190611d7d565b341115610c41576020820151825133916108fc91610c0d9190611d7d565b610c179034611e1b565b6040518115909202916000818181858888f19350505050158015610c3f573d6000803e3d6000fd5b505b505050505050505050505050565b6000600254610c5d836114ec565b101592915050565b60008383604051610c77929190611dda565b604080519182900382206020601f870181900481028401810190925285835292508291600091610cc6919088908890819084018382808284376000920191909152508892503391506106af9050565b8051909150341015610ceb5760405163044044a560e21b815260040160405180910390fd5b6040517fc475abff00000000000000000000000000000000000000000000000000000000815260048101839052602481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c475abff906044016020604051808303816000875af1158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190611b3d565b8251909150341115610de157815133906108fc90610db79034611e1b565b6040518115909202916000818181858888f19350505050158015610ddf573d6000803e3d6000fd5b505b837f3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae8888856000015185604051610e1b9493929190611e2e565b60405180910390a250505050505050565b80516020820120600090610e3f83610c4f565b8015610ee857506040517f96e494e8000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906396e494e890602401602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190611c2d565b9392505050565b610ef76110d1565b60008111610f6d5760405162461bcd60e51b815260206004820152602160248201527f4552524f523a204d6178206d7573742062652067726561746572207468616e2060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016105f3565b60028190556040518181527f0f520d1e728b5fb14adcc70f7ae7771acffba622d7aa24f66d1493075da5e8ab9060200160405180910390a150565b6000818152600460205260409020544290610fe4907f000000000000000000000000000000000000000000000000000000000000000090611d7d565b106110315760405162461bcd60e51b815260206004820181905260248201527f4552524f523a20556e65787069726564436f6d6d69746d656e7445786973747360448201526064016105f3565b6000908152600460205260409020429055565b61104c6110d1565b6001600160a01b0381166110c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105f3565b6106ac8161112b565b6000546001600160a01b0316331461092f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f3565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008181526004602052604090205442906111c4907f000000000000000000000000000000000000000000000000000000000000000090611d7d565b106112115760405162461bcd60e51b815260206004820152601760248201527f4552524f523a20436f6d6d69746d656e74546f6f4e657700000000000000000060448201526064016105f3565b600081815260046020526040902054429061124d907f000000000000000000000000000000000000000000000000000000000000000090611d7d565b1161129a5760405162461bcd60e51b815260206004820152601460248201527f4552524f523a20436f6d6d697420746f206f6c6400000000000000000000000060448201526064016105f3565b6112a383610e2c565b6112ef5760405162461bcd60e51b815260206004820152601760248201527f4552524f523a204e616d654e6f74417661696c61626c6500000000000000000060448201526064016105f3565b6000818152600460205260408120556224ea0082116113505760405162461bcd60e51b815260206004820152601760248201527f4552524f523a204475726174696f6e546f6f53686f727400000000000000000060448201526064016105f3565b505050565b604080517fd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa602080830191909152818301869052825180830384018152606083019384905280519101207fe32954eb0000000000000000000000000000000000000000000000000000000090925285906001600160a01b0382169063e32954eb906113e890859088908890606401611e55565b6000604051808303816000875af1158015611407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261142f9190810190611e6f565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a806d6b3383858760405160200161147b9190611f6e565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016114a99493929190611faf565b6020604051808303816000875af11580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190611b3d565b8051600090819081905b8082101561167257600085838151811061151257611512611fed565b01602001516001600160f81b03191690507f800000000000000000000000000000000000000000000000000000000000000081101561155d57611556600184611d7d565b925061165f565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561159a57611556600284611d7d565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156115d757611556600384611d7d565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561161457611556600484611d7d565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561165157611556600584611d7d565b61165c600684611d7d565b92505b508261166a81612003565b9350506114f6565b50909392505050565b60006020828403121561168d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ee857600080fd5b6001600160a01b03811681146106ac57600080fd5b6000602082840312156116e457600080fd5b8135610ee8816116bd565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561172e5761172e6116ef565b604052919050565b600067ffffffffffffffff821115611750576117506116ef565b50601f01601f191660200190565b600082601f83011261176f57600080fd5b813561178261177d82611736565b611705565b81815284602083860101111561179757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156117c957600080fd5b833567ffffffffffffffff8111156117e057600080fd5b6117ec8682870161175e565b935050602084013591506040840135611804816116bd565b809150509250925092565b60008060006060848603121561182457600080fd5b833561182f816116bd565b9250602084013561183f816116bd565b929592945050506040919091013590565b60008083601f84011261186257600080fd5b50813567ffffffffffffffff81111561187a57600080fd5b6020830191508360208260051b850101111561189557600080fd5b9250929050565b80151581146106ac57600080fd5b803561ffff811681146118bc57600080fd5b919050565b60008060008060008060008060006101008a8c0312156118e057600080fd5b893567ffffffffffffffff808211156118f857600080fd5b6119048d838e0161175e565b9a5060208c01359150611916826116bd565b90985060408b0135975060608b0135965060808b013590611936826116bd565b90955060a08b0135908082111561194c57600080fd5b506119598c828d01611850565b90955093505060c08a013561196d8161189c565b915061197b60e08b016118aa565b90509295985092959850929598565b60008083601f84011261199c57600080fd5b50813567ffffffffffffffff8111156119b457600080fd5b60208301915083602082850101111561189557600080fd5b6000806000806000806000806000806101008b8d0312156119ec57600080fd5b8a3567ffffffffffffffff80821115611a0457600080fd5b611a108e838f0161198a565b909c509a5060208d01359150611a25826116bd565b90985060408c0135975060608c0135965060808c013590611a45826116bd565b90955060a08c01359080821115611a5b57600080fd5b50611a688d828e01611850565b90955093505060c08b0135611a7c8161189c565b9150611a8a60e08c016118aa565b90509295989b9194979a5092959850565b600060208284031215611aad57600080fd5b5035919050565b600060208284031215611ac657600080fd5b813567ffffffffffffffff811115611add57600080fd5b611ae98482850161175e565b949350505050565b600080600060408486031215611b0657600080fd5b833567ffffffffffffffff811115611b1d57600080fd5b611b298682870161198a565b909790965060209590950135949350505050565b600060208284031215611b4f57600080fd5b5051919050565b60005b83811015611b71578181015183820152602001611b59565b50506000910152565b60008151808452611b92816020860160208601611b56565b601f01601f19169290920160200192915050565b608081526000611bb96080830187611b7a565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b600060408284031215611bf057600080fd5b6040516040810181811067ffffffffffffffff82111715611c1357611c136116ef565b604052825181526020928301519281019290925250919050565b600060208284031215611c3f57600080fd5b8151610ee88161189c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015611cf85782840389528135601e19883603018112611cae57600080fd5b8701858101903567ffffffffffffffff811115611cca57600080fd5b803603821315611cd957600080fd5b611ce4868284611c4a565b9a87019a9550505090840190600101611c8d565b5091979650505050505050565b60006101008b83526001600160a01b03808c1660208501528a60408501528960608501528089166080850152508060a0840152611d458184018789611c73565b94151560c0840152505061ffff9190911660e090910152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561059357610593611d67565b60a081526000611da460a08301888a611c4a565b90506001600160a01b03808716602084015285604084015280851660608401525061ffff83166080830152979650505050505050565b8183823760009101908152919050565b608081526000611dfe608083018789611c4a565b602083019590955250604081019290925260609091015292915050565b8181038181111561059357610593611d67565b606081526000611e42606083018688611c4a565b6020830194909452506040015292915050565b8381526040602082015260006107dc604083018486611c73565b60006020808385031215611e8257600080fd5b825167ffffffffffffffff80821115611e9a57600080fd5b818501915085601f830112611eae57600080fd5b815181811115611ec057611ec06116ef565b8060051b611ecf858201611705565b9182528381018501918581019089841115611ee957600080fd5b86860192505b83831015611f6157825185811115611f075760008081fd5b8601603f81018b13611f195760008081fd5b878101516040611f2b61177d83611736565b8281528d82848601011115611f405760008081fd5b611f4f838c8301848701611b56565b85525050509186019190860190611eef565b9998505050505050505050565b60008251611f80818460208701611b56565b7f2e7363726f6c6c00000000000000000000000000000000000000000000000000920191825250600701919050565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152611fe36080830184611b7a565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161201557612015611d67565b506001019056fea2646970667358221220156f9b8545c259c39312f753ee96cbd12cabb5efa88415fb91c51b08a627911864736f6c63430008110033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE PUSH1 0x3 PUSH1 0x2 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x23D5 CODESIZE SUB DUP1 PUSH3 0x23D5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3A SWAP2 PUSH3 0x238 JUMP JUMPDEST DUP1 CALLER PUSH3 0x47 DUP2 PUSH3 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xD5 SWAP2 SWAP1 PUSH3 0x2CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF41A04D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP3 AND SWAP1 PUSH4 0x1E83409A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x122 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x148 SWAP2 SWAP1 PUSH3 0x2F3 JUMP JUMPDEST POP POP POP POP DUP5 DUP5 GT PUSH3 0x16D JUMPI PUSH1 0x40 MLOAD PUSH4 0x7CB5507 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP5 GT ISZERO PUSH3 0x18F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB4319E5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x80 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 DUP8 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE PUSH1 0xA0 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 MSTORE DUP3 AND PUSH1 0xE0 MSTORE AND PUSH2 0x100 MSTORE PUSH3 0x30D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x261 DUP2 PUSH3 0x21F JUMP JUMPDEST PUSH1 0x20 DUP10 ADD MLOAD SWAP1 SWAP8 POP PUSH3 0x274 DUP2 PUSH3 0x21F JUMP JUMPDEST DUP1 SWAP7 POP POP PUSH1 0x40 DUP9 ADD MLOAD SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD PUSH3 0x296 DUP2 PUSH3 0x21F JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x2A9 DUP2 PUSH3 0x21F JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x2BC DUP2 PUSH3 0x21F JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x2EC DUP2 PUSH3 0x21F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x2052 PUSH3 0x383 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x3F7 ADD MSTORE DUP2 DUP2 PUSH2 0xA7F ADD MSTORE PUSH2 0xD24 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2D5 ADD MSTORE PUSH2 0x143A ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x45E ADD MSTORE DUP2 DUP2 PUSH2 0xFBF ADD MSTORE PUSH2 0x1228 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x385 ADD MSTORE PUSH2 0x119F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x710 ADD MSTORE PUSH2 0xE75 ADD MSTORE PUSH2 0x2052 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x18B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C254C0B GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xAEB8CE9B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDC2F7867 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDC2F7867 EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0xF14FCBC8 EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAEB8CE9B EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xCE1E09C0 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0xD3419BF3 EQ PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9791C097 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x9791C097 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xA8E5FBC0 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xACF1A841 EQ PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C254C0B EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x8D839FFE EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65A69DCF GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x80869853 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x80869853 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x839DF945 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x8A95B09F EQ PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65A69DCF EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0x74694A2B EQ PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x44D31F06 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x5D3590D5 EQ PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x1EE0F10D EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x3B324790 EQ PUSH2 0x1E9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x167B JUMP JUMPDEST PUSH2 0x500 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x16D2 JUMP JUMPDEST PUSH2 0x599 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x672 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x23B CALLDATASIZE PUSH1 0x4 PUSH2 0x17B4 JUMP JUMPDEST PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x7E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x91D JUMP JUMPDEST PUSH2 0x209 PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x931 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH3 0x24EA00 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x2F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0xE2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x2F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9B JUMP JUMPDEST PUSH2 0xEEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9B JUMP JUMPDEST PUSH2 0xFA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x16D2 JUMP JUMPDEST PUSH2 0x1044 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x593 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xA61A65F000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5A1 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20507269636573206973207A65726F2061646472657373000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x62DA1737D3C3A6DAED7E4ACF0FFE363E818DC36E1C61230CCCF0BAE9D217D07 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x6AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x20 DUP6 ADD KECCAK256 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD6E4FA8600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 PUSH4 0x89FCE619 SWAP2 DUP9 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0xD6E4FA86 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x757 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST DUP8 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7DC SWAP2 SWAP1 PUSH2 0x1BDE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7ED PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x855 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x879 SWAP2 SWAP1 PUSH2 0x1C2D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP9 MLOAD PUSH1 0x20 DUP11 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP5 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x89F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO JUMPDEST ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD3F605C400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8F7 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x925 PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0x92F PUSH1 0x0 PUSH2 0x112B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x976 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP13 SWAP3 POP CALLER SWAP2 POP PUSH2 0x6AF SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP PUSH2 0x989 SWAP2 PUSH2 0x1D7D JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x9A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA4C DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 PUSH2 0xA47 DUP15 DUP15 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x87F JUMP JUMPDEST PUSH2 0x1188 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA401498200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA4014982 SWAP1 PUSH2 0xABE SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xADD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB01 SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST SWAP1 POP DUP5 ISZERO PUSH2 0xB2C JUMPI PUSH2 0xB2C DUP8 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0xB1D SWAP3 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP9 DUP9 PUSH2 0x1355 JUMP JUMPDEST DUP4 ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB75 DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP12 SWAP3 POP CALLER SWAP2 POP PUSH2 0x1438 SWAP1 POP JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0xB8F SWAP3 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0x69E37F151EB98A09618DDAA80C8CFAF1CE5996867C489F45B555B412271EBF27 DUP15 DUP15 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 MLOAD PUSH2 0xBD6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1DEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x20 DUP3 ADD MLOAD DUP3 MLOAD PUSH2 0xBEF SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST CALLVALUE GT ISZERO PUSH2 0xC41 JUMPI PUSH1 0x20 DUP3 ADD MLOAD DUP3 MLOAD CALLER SWAP2 PUSH2 0x8FC SWAP2 PUSH2 0xC0D SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0xC17 SWAP1 CALLVALUE PUSH2 0x1E1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH2 0xC5D DUP4 PUSH2 0x14EC JUMP JUMPDEST LT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xC77 SWAP3 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x20 PUSH1 0x1F DUP8 ADD DUP2 SWAP1 DIV DUP2 MUL DUP5 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP6 DUP4 MSTORE SWAP3 POP DUP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0xCC6 SWAP2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP CALLER SWAP2 POP PUSH2 0x6AF SWAP1 POP JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP CALLVALUE LT ISZERO PUSH2 0xCEB JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC475ABFF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xC475ABFF SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD99 SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP CALLVALUE GT ISZERO PUSH2 0xDE1 JUMPI DUP2 MLOAD CALLER SWAP1 PUSH2 0x8FC SWAP1 PUSH2 0xDB7 SWAP1 CALLVALUE PUSH2 0x1E1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP4 PUSH32 0x3DA24C024582931CFAF8267D8ED24D13A82A8068D5BD337D30EC45CEA4E506AE DUP9 DUP9 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 MLOAD PUSH2 0xE1B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH2 0xE3F DUP4 PUSH2 0xC4F JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEE8 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x96E494E800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x96E494E8 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEE8 SWAP2 SWAP1 PUSH2 0x1C2D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xEF7 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xF6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A204D6178206D7573742062652067726561746572207468616E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xF520D1E728B5FB14ADCC70F7AE7771ACFFBA622D7AA24F66D1493075DA5E8AB SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0xFE4 SWAP1 PUSH32 0x0 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST LT PUSH2 0x1031 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20556E65787069726564436F6D6D69746D656E74457869737473 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x104C PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0x6AC DUP2 PUSH2 0x112B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x92F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0x11C4 SWAP1 PUSH32 0x0 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST LT PUSH2 0x1211 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20436F6D6D69746D656E74546F6F4E6577000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0x124D SWAP1 PUSH32 0x0 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST GT PUSH2 0x129A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20436F6D6D697420746F206F6C64000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0x12A3 DUP4 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x12EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A204E616D654E6F74417661696C61626C65000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH3 0x24EA00 DUP3 GT PUSH2 0x1350 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A204475726174696F6E546F6F53686F7274000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xD051E4F8CB1870F877B00266E1292322BEA4C492A9933488E94D7C1A935E8DFA PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP4 DUP5 SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH32 0xE32954EB00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE32954EB SWAP1 PUSH2 0x13E8 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x64 ADD PUSH2 0x1E55 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1407 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x142F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7A806D6B CALLER DUP4 DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x147B SWAP2 SWAP1 PUSH2 0x1F6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14A9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FAF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x879 SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x1672 JUMPI PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1512 JUMPI PUSH2 0x1512 PUSH2 0x1FED JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 LT ISZERO PUSH2 0x155D JUMPI PUSH2 0x1556 PUSH1 0x1 DUP5 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 POP PUSH2 0x165F JUMP JUMPDEST PUSH32 0xE000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x159A JUMPI PUSH2 0x1556 PUSH1 0x2 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH32 0xF000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x15D7 JUMPI PUSH2 0x1556 PUSH1 0x3 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH32 0xF800000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x1614 JUMPI PUSH2 0x1556 PUSH1 0x4 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH32 0xFC00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x1651 JUMPI PUSH2 0x1556 PUSH1 0x5 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x165C PUSH1 0x6 DUP5 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 POP JUMPDEST POP DUP3 PUSH2 0x166A DUP2 PUSH2 0x2003 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x14F6 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x168D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEE8 DUP2 PUSH2 0x16BD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x172E JUMPI PUSH2 0x172E PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1750 JUMPI PUSH2 0x1750 PUSH2 0x16EF JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1782 PUSH2 0x177D DUP3 PUSH2 0x1736 JUMP JUMPDEST PUSH2 0x1705 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17EC DUP7 DUP3 DUP8 ADD PUSH2 0x175E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1804 DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x182F DUP2 PUSH2 0x16BD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x183F DUP2 PUSH2 0x16BD JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x187A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x18BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x18E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1904 DUP14 DUP4 DUP15 ADD PUSH2 0x175E JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1916 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP1 PUSH2 0x1936 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x194C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1959 DUP13 DUP3 DUP14 ADD PUSH2 0x1850 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD PUSH2 0x196D DUP2 PUSH2 0x189C JUMP JUMPDEST SWAP2 POP PUSH2 0x197B PUSH1 0xE0 DUP12 ADD PUSH2 0x18AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x199C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A10 DUP15 DUP4 DUP16 ADD PUSH2 0x198A JUMP JUMPDEST SWAP1 SWAP13 POP SWAP11 POP PUSH1 0x20 DUP14 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1A25 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP9 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP8 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP7 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP1 PUSH2 0x1A45 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP6 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A68 DUP14 DUP3 DUP15 ADD PUSH2 0x1850 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD PUSH2 0x1A7C DUP2 PUSH2 0x189C JUMP JUMPDEST SWAP2 POP PUSH2 0x1A8A PUSH1 0xE0 DUP13 ADD PUSH2 0x18AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AE9 DUP5 DUP3 DUP6 ADD PUSH2 0x175E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B29 DUP7 DUP3 DUP8 ADD PUSH2 0x198A JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B71 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B59 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B92 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1BB9 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1B7A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1C13 JUMPI PUSH2 0x1C13 PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEE8 DUP2 PUSH2 0x189C JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP6 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP5 PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1CF8 JUMPI DUP3 DUP5 SUB DUP10 MSTORE DUP2 CALLDATALOAD PUSH1 0x1E NOT DUP9 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1CAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 ADD DUP6 DUP2 ADD SWAP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x1CD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CE4 DUP7 DUP3 DUP5 PUSH2 0x1C4A JUMP JUMPDEST SWAP11 DUP8 ADD SWAP11 SWAP6 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1C8D JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP12 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND PUSH1 0x20 DUP6 ADD MSTORE DUP11 PUSH1 0x40 DUP6 ADD MSTORE DUP10 PUSH1 0x60 DUP6 ADD MSTORE DUP1 DUP10 AND PUSH1 0x80 DUP6 ADD MSTORE POP DUP1 PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1D45 DUP2 DUP5 ADD DUP8 DUP10 PUSH2 0x1C73 JUMP JUMPDEST SWAP5 ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE POP POP PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0xE0 SWAP1 SWAP2 ADD MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x593 JUMPI PUSH2 0x593 PUSH2 0x1D67 JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DA4 PUSH1 0xA0 DUP4 ADD DUP9 DUP11 PUSH2 0x1C4A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP6 PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH2 0xFFFF DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DFE PUSH1 0x80 DUP4 ADD DUP8 DUP10 PUSH2 0x1C4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x593 JUMPI PUSH2 0x593 PUSH2 0x1D67 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1E42 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1C4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x7DC PUSH1 0x40 DUP4 ADD DUP5 DUP7 PUSH2 0x1C73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1EAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1EC0 JUMPI PUSH2 0x1EC0 PUSH2 0x16EF JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x1ECF DUP6 DUP3 ADD PUSH2 0x1705 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP6 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP7 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x1F61 JUMPI DUP3 MLOAD DUP6 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP7 ADD PUSH1 0x3F DUP2 ADD DUP12 SGT PUSH2 0x1F19 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP8 DUP2 ADD MLOAD PUSH1 0x40 PUSH2 0x1F2B PUSH2 0x177D DUP4 PUSH2 0x1736 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP14 DUP3 DUP5 DUP7 ADD ADD GT ISZERO PUSH2 0x1F40 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F4F DUP4 DUP13 DUP4 ADD DUP5 DUP8 ADD PUSH2 0x1B56 JUMP JUMPDEST DUP6 MSTORE POP POP POP SWAP2 DUP7 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH2 0x1EEF JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F80 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B56 JUMP JUMPDEST PUSH32 0x2E7363726F6C6C00000000000000000000000000000000000000000000000000 SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x7 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1FE3 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1B7A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2015 JUMPI PUSH2 0x2015 PUSH2 0x1D67 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO PUSH16 0x9B8545C259C39312F753EE96CBD12CAB 0xB5 0xEF 0xA8 DUP5 ISZERO 0xFB SWAP2 0xC5 SHL ADDMOD 0xA6 0x27 SWAP2 XOR PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1325:8308:16:-:0;;;2089:1;2062:28;;3079:738;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3352:4;3358:10;936:32:0;3358:10:16;936:18:0;:32::i;:::-;449:28:37;;-1:-1:-1;;;449:28:37;;259:66;449:28;;;1503:25:44;381:34:37;;-1:-1:-1;;;;;449:9:37;;;;;1476:18:44;;449:28:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;497:32;;-1:-1:-1;;;497:32:37;;-1:-1:-1;;;;;1988:32:44;;;497::37;;;1970:51:44;381:106:37;;-1:-1:-1;497:22:37;;;;;;1943:18:44;;497:32:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;371:165;332:204;;3405:17:16::1;3384;:38;3380:100;;3445:24;;-1:-1:-1::0;;;3445:24:16::1;;;;;;;;;;;3380:100;3514:15;3494:17;:35;3490:98;;;3552:25;;-1:-1:-1::0;;;3552:25:16::1;;;;;;;;;;;3490:98;-1:-1:-1::0;;;;;;3598:12:16;;::::1;;::::0;3620:6:::1;:16:::0;;-1:-1:-1;;;;;;3620:16:16::1;::::0;;::::1;::::0;;;::::1;::::0;;;3646:36:::1;::::0;;;;3692::::1;::::0;3738;::::1;;::::0;3784:26:::1;3620:16;3784:26:::0;1325:8308;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:160:44:-;-1:-1:-1;;;;;118:31:44;;108:42;;98:70;;164:1;161;154:12;98:70;14:160;:::o;179:1173::-;418:6;426;434;442;450;458;466;519:3;507:9;498:7;494:23;490:33;487:53;;;536:1;533;526:12;487:53;568:9;562:16;587:60;641:5;587:60;:::i;:::-;716:2;701:18;;695:25;666:5;;-1:-1:-1;729:62:44;695:25;729:62;:::i;:::-;810:7;800:17;;;857:2;846:9;842:18;836:25;826:35;;901:2;890:9;886:18;880:25;870:35;;950:3;939:9;935:19;929:26;964:62;1018:7;964:62;:::i;:::-;1097:3;1082:19;;1076:26;1045:7;;-1:-1:-1;1111:62:44;1076:26;1111:62;:::i;:::-;1244:3;1229:19;;1223:26;1192:7;;-1:-1:-1;1258:62:44;1223:26;1258:62;:::i;:::-;1339:7;1329:17;;;179:1173;;;;;;;;;;:::o;1539:280::-;1609:6;1662:2;1650:9;1641:7;1637:23;1633:32;1630:52;;;1678:1;1675;1668:12;1630:52;1710:9;1704:16;1729:60;1783:5;1729:60;:::i;:::-;1808:5;1539:280;-1:-1:-1;;;1539:280:44:o;2032:184::-;2102:6;2155:2;2143:9;2134:7;2130:23;2126:32;2123:52;;;2171:1;2168;2161:12;2123:52;-1:-1:-1;2194:16:44;;2032:184;-1:-1:-1;2032:184:44:o;:::-;1325:8308:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MIN_REGISTRATION_DURATION_3813":{"entryPoint":null,"id":3813,"parameterSlots":0,"returnSlots":0},"@_checkOwner_54":{"entryPoint":4305,"id":54,"parameterSlots":0,"returnSlots":0},"@_consumeCommitment_4503":{"entryPoint":4488,"id":4503,"parameterSlots":3,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_setRecords_4538":{"entryPoint":4949,"id":4538,"parameterSlots":4,"returnSlots":0},"@_setReverseRecord_4563":{"entryPoint":5176,"id":4563,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":4395,"id":111,"parameterSlots":1,"returnSlots":0},"@available_4094":{"entryPoint":3628,"id":4094,"parameterSlots":1,"returnSlots":1},"@commit_4183":{"entryPoint":4008,"id":4183,"parameterSlots":1,"returnSlots":0},"@commitments_3848":{"entryPoint":null,"id":3848,"parameterSlots":0,"returnSlots":0},"@makeCommitment_4157":{"entryPoint":2175,"id":4157,"parameterSlots":9,"returnSlots":1},"@maxCommitmentAge_3833":{"entryPoint":null,"id":3833,"parameterSlots":0,"returnSlots":0},"@maxLenght_3842":{"entryPoint":null,"id":3842,"parameterSlots":0,"returnSlots":0},"@minCommitmentAge_3831":{"entryPoint":null,"id":3831,"parameterSlots":0,"returnSlots":0},"@nameWrapper_3839":{"entryPoint":null,"id":3839,"parameterSlots":0,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@prices_3829":{"entryPoint":null,"id":3829,"parameterSlots":0,"returnSlots":0},"@recoverFunds_6147":{"entryPoint":2021,"id":6147,"parameterSlots":3,"returnSlots":0},"@register_4327":{"entryPoint":2353,"id":4327,"parameterSlots":10,"returnSlots":0},"@renew_4410":{"entryPoint":3173,"id":4410,"parameterSlots":3,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":2333,"id":68,"parameterSlots":0,"returnSlots":0},"@rentPrice_4050":{"entryPoint":1711,"id":4050,"parameterSlots":3,"returnSlots":1},"@reverseRegistrar_3836":{"entryPoint":null,"id":3836,"parameterSlots":0,"returnSlots":0},"@setMaxLength_3905":{"entryPoint":3823,"id":3905,"parameterSlots":1,"returnSlots":0},"@setPrice_3942":{"entryPoint":1433,"id":3942,"parameterSlots":1,"returnSlots":0},"@strlen_5062":{"entryPoint":5356,"id":5062,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4449":{"entryPoint":1280,"id":4449,"parameterSlots":1,"returnSlots":1},"@transferOwnership_91":{"entryPoint":4164,"id":91,"parameterSlots":1,"returnSlots":0},"@valid_4064":{"entryPoint":3151,"id":4064,"parameterSlots":1,"returnSlots":1},"@walletDev_3844":{"entryPoint":null,"id":3844,"parameterSlots":0,"returnSlots":0},"@withdraw_4427":{"entryPoint":1650,"id":4427,"parameterSlots":0,"returnSlots":0},"abi_decode_array_bytes_calldata_dyn_calldata":{"entryPoint":6224,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_string":{"entryPoint":5982,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string_calldata":{"entryPoint":6538,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6159,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromMemory":{"entryPoint":7791,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7213,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":6811,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":5755,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IPriceOracle_$4781":{"entryPoint":5842,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptrt_addresst_uint256t_bytes32t_addresst_array$_t_bytes_calldata_ptr_$dyn_calldata_ptrt_boolt_uint16":{"entryPoint":6604,"id":null,"parameterSlots":2,"returnSlots":10},"abi_decode_tuple_t_string_calldata_ptrt_uint256":{"entryPoint":6897,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":6836,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_addresst_uint256t_bytes32t_addresst_array$_t_bytes_calldata_ptr_$dyn_calldata_ptrt_boolt_uint16":{"entryPoint":6337,"id":null,"parameterSlots":2,"returnSlots":9},"abi_decode_tuple_t_string_memory_ptrt_uint256t_address":{"entryPoint":6068,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory":{"entryPoint":7134,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":6973,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint16":{"entryPoint":6314,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_array_bytes_calldata_dyn_calldata":{"entryPoint":7283,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":7242,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":7034,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7642,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_57ae72296e25032322448e68a0e7df77959fa47379785e14db110b4b10b9a238__to_t_string_memory_ptr_t_bytes7__nonPadded_inplace_fromStack_reversed":{"entryPoint":8046,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_string_memory_ptr__to_t_address_t_address_t_address_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8111,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_bytes32_t_address_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_t_bool_t_uint16__to_t_bytes32_t_address_t_uint256_t_bytes32_t_address_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bool_t_uint16__fromStack_reversed":{"entryPoint":7429,"id":null,"parameterSlots":10,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr__to_t_bytes32_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7765,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_INameWrapper_$6534__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPriceOracle_$4781__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ReverseRegistrar_$6070__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_address_t_uint256_t_address_t_uint16__to_t_string_memory_ptr_t_address_t_uint256_t_address_t_uint16__fromStack_reversed":{"entryPoint":7568,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":7726,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":7658,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_uint256_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":7078,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0946b459a596337816182edac2ea275fcc985f1d2d06a59a8c54634faab47cc4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d20f9dab246787f8599eac98f253e7599800f7d25f0eb1ccdf4e1fe88cdd5a5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_524d622c2949bd970096a193a14e38cbc02013b101b84cee977074eae8b4d055__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68b779a79149660b9f0778d5ad863a8a14900dfe8663fef7c749148c60821a91__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_77c5dbfe580780d3ca6c71c18cc08361fbe47934562def7d737755ffabe607b1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_93aa46ffb1c824c622f14fbb64b4e96e92451c6f04c2d36c76124e75c7832bb1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b155139f4d9af66fe418bbae7016d6081fd7e4aa1c9e91687a03e845c67c18ba__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Price_$4765_memory_ptr__to_t_struct$_Price_$4765_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":5893,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_string":{"entryPoint":5942,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7549,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7707,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6998,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":8195,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7527,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8173,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5871,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bool":{"entryPoint":6300,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_contract_IPriceOracle":{"entryPoint":5821,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:24504:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:44","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:44"},"nodeType":"YulFunctionCall","src":"131:12:44"},"nodeType":"YulExpressionStatement","src":"131:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:44"},"nodeType":"YulFunctionCall","src":"100:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:44"},"nodeType":"YulFunctionCall","src":"96:32:44"},"nodeType":"YulIf","src":"93:52:44"},{"nodeType":"YulVariableDeclaration","src":"154:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:44"},"nodeType":"YulFunctionCall","src":"167:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:44"},"nodeType":"YulFunctionCall","src":"302:12:44"},"nodeType":"YulExpressionStatement","src":"302:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:44","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:44"},"nodeType":"YulFunctionCall","src":"219:78:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:44"},"nodeType":"YulFunctionCall","src":"209:89:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:44"},"nodeType":"YulFunctionCall","src":"202:97:44"},"nodeType":"YulIf","src":"199:117:44"},{"nodeType":"YulAssignment","src":"325:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:44","type":""}],"src":"14:332:44"},{"body":{"nodeType":"YulBlock","src":"446:92:44","statements":[{"nodeType":"YulAssignment","src":"456:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:44"},"nodeType":"YulFunctionCall","src":"464:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:44"},"nodeType":"YulFunctionCall","src":"516:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:44"},"nodeType":"YulFunctionCall","src":"509:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:44"},"nodeType":"YulFunctionCall","src":"491:41:44"},"nodeType":"YulExpressionStatement","src":"491:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:44","type":""}],"src":"351:187:44"},{"body":{"nodeType":"YulBlock","src":"644:76:44","statements":[{"nodeType":"YulAssignment","src":"654:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"666:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"677:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"662:3:44"},"nodeType":"YulFunctionCall","src":"662:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"654:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"696:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"707:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"689:6:44"},"nodeType":"YulFunctionCall","src":"689:25:44"},"nodeType":"YulExpressionStatement","src":"689:25:44"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"613:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"624:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"635:4:44","type":""}],"src":"543:177:44"},{"body":{"nodeType":"YulBlock","src":"784:109:44","statements":[{"body":{"nodeType":"YulBlock","src":"871:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"880:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"883:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"873:6:44"},"nodeType":"YulFunctionCall","src":"873:12:44"},"nodeType":"YulExpressionStatement","src":"873:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"807:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"818:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"825:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"814:3:44"},"nodeType":"YulFunctionCall","src":"814:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"804:2:44"},"nodeType":"YulFunctionCall","src":"804:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"797:6:44"},"nodeType":"YulFunctionCall","src":"797:73:44"},"nodeType":"YulIf","src":"794:93:44"}]},"name":"validator_revert_contract_IPriceOracle","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"773:5:44","type":""}],"src":"725:168:44"},{"body":{"nodeType":"YulBlock","src":"989:191:44","statements":[{"body":{"nodeType":"YulBlock","src":"1035:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1044:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1047:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1037:6:44"},"nodeType":"YulFunctionCall","src":"1037:12:44"},"nodeType":"YulExpressionStatement","src":"1037:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1010:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1019:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1006:3:44"},"nodeType":"YulFunctionCall","src":"1006:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1031:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1002:3:44"},"nodeType":"YulFunctionCall","src":"1002:32:44"},"nodeType":"YulIf","src":"999:52:44"},{"nodeType":"YulVariableDeclaration","src":"1060:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1086:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1073:12:44"},"nodeType":"YulFunctionCall","src":"1073:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1064:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1144:5:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"1105:38:44"},"nodeType":"YulFunctionCall","src":"1105:45:44"},"nodeType":"YulExpressionStatement","src":"1105:45:44"},{"nodeType":"YulAssignment","src":"1159:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1169:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1159:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_IPriceOracle_$4781","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"955:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"966:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"978:6:44","type":""}],"src":"898:282:44"},{"body":{"nodeType":"YulBlock","src":"1217:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1234:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1237:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1227:6:44"},"nodeType":"YulFunctionCall","src":"1227:88:44"},"nodeType":"YulExpressionStatement","src":"1227:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1331:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1334:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:44"},"nodeType":"YulFunctionCall","src":"1324:15:44"},"nodeType":"YulExpressionStatement","src":"1324:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1355:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1358:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1348:6:44"},"nodeType":"YulFunctionCall","src":"1348:15:44"},"nodeType":"YulExpressionStatement","src":"1348:15:44"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1185:184:44"},{"body":{"nodeType":"YulBlock","src":"1419:230:44","statements":[{"nodeType":"YulAssignment","src":"1429:19:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1445:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1439:5:44"},"nodeType":"YulFunctionCall","src":"1439:9:44"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1429:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1457:58:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1479:6:44"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1495:4:44"},{"kind":"number","nodeType":"YulLiteral","src":"1501:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1491:3:44"},"nodeType":"YulFunctionCall","src":"1491:13:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1510:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1506:3:44"},"nodeType":"YulFunctionCall","src":"1506:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1487:3:44"},"nodeType":"YulFunctionCall","src":"1487:27:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1475:3:44"},"nodeType":"YulFunctionCall","src":"1475:40:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1461:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1590:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1592:16:44"},"nodeType":"YulFunctionCall","src":"1592:18:44"},"nodeType":"YulExpressionStatement","src":"1592:18:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1533:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"1545:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1530:2:44"},"nodeType":"YulFunctionCall","src":"1530:34:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1569:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1581:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1566:2:44"},"nodeType":"YulFunctionCall","src":"1566:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1527:2:44"},"nodeType":"YulFunctionCall","src":"1527:62:44"},"nodeType":"YulIf","src":"1524:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1628:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1632:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1621:6:44"},"nodeType":"YulFunctionCall","src":"1621:22:44"},"nodeType":"YulExpressionStatement","src":"1621:22:44"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1399:4:44","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1408:6:44","type":""}],"src":"1374:275:44"},{"body":{"nodeType":"YulBlock","src":"1712:129:44","statements":[{"body":{"nodeType":"YulBlock","src":"1756:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1758:16:44"},"nodeType":"YulFunctionCall","src":"1758:18:44"},"nodeType":"YulExpressionStatement","src":"1758:18:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1728:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1736:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1725:2:44"},"nodeType":"YulFunctionCall","src":"1725:30:44"},"nodeType":"YulIf","src":"1722:56:44"},{"nodeType":"YulAssignment","src":"1787:48:44","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1807:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1815:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1803:3:44"},"nodeType":"YulFunctionCall","src":"1803:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1824:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1820:3:44"},"nodeType":"YulFunctionCall","src":"1820:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1799:3:44"},"nodeType":"YulFunctionCall","src":"1799:29:44"},{"kind":"number","nodeType":"YulLiteral","src":"1830:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1795:3:44"},"nodeType":"YulFunctionCall","src":"1795:40:44"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1787:4:44"}]}]},"name":"array_allocation_size_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1692:6:44","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1703:4:44","type":""}],"src":"1654:187:44"},{"body":{"nodeType":"YulBlock","src":"1899:411:44","statements":[{"body":{"nodeType":"YulBlock","src":"1948:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1957:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1960:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1950:6:44"},"nodeType":"YulFunctionCall","src":"1950:12:44"},"nodeType":"YulExpressionStatement","src":"1950:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1927:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1935:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1923:3:44"},"nodeType":"YulFunctionCall","src":"1923:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"1942:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1919:3:44"},"nodeType":"YulFunctionCall","src":"1919:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1912:6:44"},"nodeType":"YulFunctionCall","src":"1912:35:44"},"nodeType":"YulIf","src":"1909:55:44"},{"nodeType":"YulVariableDeclaration","src":"1973:30:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1996:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1983:12:44"},"nodeType":"YulFunctionCall","src":"1983:20:44"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1977:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2012:64:44","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2072:2:44"}],"functionName":{"name":"array_allocation_size_string","nodeType":"YulIdentifier","src":"2043:28:44"},"nodeType":"YulFunctionCall","src":"2043:32:44"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2027:15:44"},"nodeType":"YulFunctionCall","src":"2027:49:44"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"2016:7:44","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2092:7:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2101:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2085:6:44"},"nodeType":"YulFunctionCall","src":"2085:19:44"},"nodeType":"YulExpressionStatement","src":"2085:19:44"},{"body":{"nodeType":"YulBlock","src":"2152:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2161:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2164:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2154:6:44"},"nodeType":"YulFunctionCall","src":"2154:12:44"},"nodeType":"YulExpressionStatement","src":"2154:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2127:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2135:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:44"},"nodeType":"YulFunctionCall","src":"2123:15:44"},{"kind":"number","nodeType":"YulLiteral","src":"2140:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2119:3:44"},"nodeType":"YulFunctionCall","src":"2119:26:44"},{"name":"end","nodeType":"YulIdentifier","src":"2147:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2116:2:44"},"nodeType":"YulFunctionCall","src":"2116:35:44"},"nodeType":"YulIf","src":"2113:55:44"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2194:7:44"},{"kind":"number","nodeType":"YulLiteral","src":"2203:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2190:3:44"},"nodeType":"YulFunctionCall","src":"2190:18:44"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2214:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2222:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2210:3:44"},"nodeType":"YulFunctionCall","src":"2210:17:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2229:2:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2177:12:44"},"nodeType":"YulFunctionCall","src":"2177:55:44"},"nodeType":"YulExpressionStatement","src":"2177:55:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2256:7:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2265:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2252:3:44"},"nodeType":"YulFunctionCall","src":"2252:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"2270:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2248:3:44"},"nodeType":"YulFunctionCall","src":"2248:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"2277:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2241:6:44"},"nodeType":"YulFunctionCall","src":"2241:38:44"},"nodeType":"YulExpressionStatement","src":"2241:38:44"},{"nodeType":"YulAssignment","src":"2288:16:44","value":{"name":"array_1","nodeType":"YulIdentifier","src":"2297:7:44"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2288:5:44"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1873:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"1881:3:44","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1889:5:44","type":""}],"src":"1846:464:44"},{"body":{"nodeType":"YulBlock","src":"2429:425:44","statements":[{"body":{"nodeType":"YulBlock","src":"2475:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2484:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2487:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2477:6:44"},"nodeType":"YulFunctionCall","src":"2477:12:44"},"nodeType":"YulExpressionStatement","src":"2477:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2450:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2459:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2446:3:44"},"nodeType":"YulFunctionCall","src":"2446:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2471:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2442:3:44"},"nodeType":"YulFunctionCall","src":"2442:32:44"},"nodeType":"YulIf","src":"2439:52:44"},{"nodeType":"YulVariableDeclaration","src":"2500:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2527:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2514:12:44"},"nodeType":"YulFunctionCall","src":"2514:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2504:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2580:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2589:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2592:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2582:6:44"},"nodeType":"YulFunctionCall","src":"2582:12:44"},"nodeType":"YulExpressionStatement","src":"2582:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2552:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2560:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2549:2:44"},"nodeType":"YulFunctionCall","src":"2549:30:44"},"nodeType":"YulIf","src":"2546:50:44"},{"nodeType":"YulAssignment","src":"2605:60:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2637:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"2648:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:44"},"nodeType":"YulFunctionCall","src":"2633:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2657:7:44"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"2615:17:44"},"nodeType":"YulFunctionCall","src":"2615:50:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2605:6:44"}]},{"nodeType":"YulAssignment","src":"2674:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2701:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2712:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2697:3:44"},"nodeType":"YulFunctionCall","src":"2697:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2684:12:44"},"nodeType":"YulFunctionCall","src":"2684:32:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2674:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"2725:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2755:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2766:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2751:3:44"},"nodeType":"YulFunctionCall","src":"2751:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2738:12:44"},"nodeType":"YulFunctionCall","src":"2738:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2729:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2818:5:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"2779:38:44"},"nodeType":"YulFunctionCall","src":"2779:45:44"},"nodeType":"YulExpressionStatement","src":"2779:45:44"},{"nodeType":"YulAssignment","src":"2833:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"2843:5:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2833:6:44"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2379:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2390:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2402:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2410:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2418:6:44","type":""}],"src":"2315:539:44"},{"body":{"nodeType":"YulBlock","src":"3006:146:44","statements":[{"nodeType":"YulAssignment","src":"3016:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3028:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3039:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3024:3:44"},"nodeType":"YulFunctionCall","src":"3024:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3016:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3058:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3075:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3069:5:44"},"nodeType":"YulFunctionCall","src":"3069:13:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3051:6:44"},"nodeType":"YulFunctionCall","src":"3051:32:44"},"nodeType":"YulExpressionStatement","src":"3051:32:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3103:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3114:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3099:3:44"},"nodeType":"YulFunctionCall","src":"3099:20:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3131:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3139:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3127:3:44"},"nodeType":"YulFunctionCall","src":"3127:17:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3121:5:44"},"nodeType":"YulFunctionCall","src":"3121:24:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3092:6:44"},"nodeType":"YulFunctionCall","src":"3092:54:44"},"nodeType":"YulExpressionStatement","src":"3092:54:44"}]},"name":"abi_encode_tuple_t_struct$_Price_$4765_memory_ptr__to_t_struct$_Price_$4765_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2975:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2986:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2997:4:44","type":""}],"src":"2859:293:44"},{"body":{"nodeType":"YulBlock","src":"3261:380:44","statements":[{"body":{"nodeType":"YulBlock","src":"3307:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3316:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3319:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3309:6:44"},"nodeType":"YulFunctionCall","src":"3309:12:44"},"nodeType":"YulExpressionStatement","src":"3309:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3282:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"3291:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3278:3:44"},"nodeType":"YulFunctionCall","src":"3278:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3303:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3274:3:44"},"nodeType":"YulFunctionCall","src":"3274:32:44"},"nodeType":"YulIf","src":"3271:52:44"},{"nodeType":"YulVariableDeclaration","src":"3332:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3358:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3345:12:44"},"nodeType":"YulFunctionCall","src":"3345:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3336:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3416:5:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"3377:38:44"},"nodeType":"YulFunctionCall","src":"3377:45:44"},"nodeType":"YulExpressionStatement","src":"3377:45:44"},{"nodeType":"YulAssignment","src":"3431:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"3441:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3431:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3455:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3487:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3498:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3483:3:44"},"nodeType":"YulFunctionCall","src":"3483:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3470:12:44"},"nodeType":"YulFunctionCall","src":"3470:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3459:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3550:7:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"3511:38:44"},"nodeType":"YulFunctionCall","src":"3511:47:44"},"nodeType":"YulExpressionStatement","src":"3511:47:44"},{"nodeType":"YulAssignment","src":"3567:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3577:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3567:6:44"}]},{"nodeType":"YulAssignment","src":"3593:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3620:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3631:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3616:3:44"},"nodeType":"YulFunctionCall","src":"3616:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3603:12:44"},"nodeType":"YulFunctionCall","src":"3603:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3593:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3211:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3222:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3234:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3242:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3250:6:44","type":""}],"src":"3157:484:44"},{"body":{"nodeType":"YulBlock","src":"3737:283:44","statements":[{"body":{"nodeType":"YulBlock","src":"3786:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3795:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3798:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3788:6:44"},"nodeType":"YulFunctionCall","src":"3788:12:44"},"nodeType":"YulExpressionStatement","src":"3788:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3765:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3773:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3761:3:44"},"nodeType":"YulFunctionCall","src":"3761:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"3780:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3757:3:44"},"nodeType":"YulFunctionCall","src":"3757:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3750:6:44"},"nodeType":"YulFunctionCall","src":"3750:35:44"},"nodeType":"YulIf","src":"3747:55:44"},{"nodeType":"YulAssignment","src":"3811:30:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3834:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3821:12:44"},"nodeType":"YulFunctionCall","src":"3821:20:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3811:6:44"}]},{"body":{"nodeType":"YulBlock","src":"3884:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3893:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3896:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3886:6:44"},"nodeType":"YulFunctionCall","src":"3886:12:44"},"nodeType":"YulExpressionStatement","src":"3886:12:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3856:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3864:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3853:2:44"},"nodeType":"YulFunctionCall","src":"3853:30:44"},"nodeType":"YulIf","src":"3850:50:44"},{"nodeType":"YulAssignment","src":"3909:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3925:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3933:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3921:3:44"},"nodeType":"YulFunctionCall","src":"3921:17:44"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3909:8:44"}]},{"body":{"nodeType":"YulBlock","src":"3998:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4007:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4010:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4000:6:44"},"nodeType":"YulFunctionCall","src":"4000:12:44"},"nodeType":"YulExpressionStatement","src":"4000:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3961:6:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3973:1:44","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3976:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3969:3:44"},"nodeType":"YulFunctionCall","src":"3969:14:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3957:3:44"},"nodeType":"YulFunctionCall","src":"3957:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"3986:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3953:3:44"},"nodeType":"YulFunctionCall","src":"3953:38:44"},{"name":"end","nodeType":"YulIdentifier","src":"3993:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3950:2:44"},"nodeType":"YulFunctionCall","src":"3950:47:44"},"nodeType":"YulIf","src":"3947:67:44"}]},"name":"abi_decode_array_bytes_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3700:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"3708:3:44","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"3716:8:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"3726:6:44","type":""}],"src":"3646:374:44"},{"body":{"nodeType":"YulBlock","src":"4067:76:44","statements":[{"body":{"nodeType":"YulBlock","src":"4121:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4130:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4133:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4123:6:44"},"nodeType":"YulFunctionCall","src":"4123:12:44"},"nodeType":"YulExpressionStatement","src":"4123:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4090:5:44"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4104:6:44"},"nodeType":"YulFunctionCall","src":"4104:13:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4097:6:44"},"nodeType":"YulFunctionCall","src":"4097:21:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4087:2:44"},"nodeType":"YulFunctionCall","src":"4087:32:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4080:6:44"},"nodeType":"YulFunctionCall","src":"4080:40:44"},"nodeType":"YulIf","src":"4077:60:44"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4056:5:44","type":""}],"src":"4025:118:44"},{"body":{"nodeType":"YulBlock","src":"4196:111:44","statements":[{"nodeType":"YulAssignment","src":"4206:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4228:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4215:12:44"},"nodeType":"YulFunctionCall","src":"4215:20:44"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4206:5:44"}]},{"body":{"nodeType":"YulBlock","src":"4285:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:44"},"nodeType":"YulFunctionCall","src":"4287:12:44"},"nodeType":"YulExpressionStatement","src":"4287:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4257:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4268:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"4275:6:44","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4264:3:44"},"nodeType":"YulFunctionCall","src":"4264:18:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4254:2:44"},"nodeType":"YulFunctionCall","src":"4254:29:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4247:6:44"},"nodeType":"YulFunctionCall","src":"4247:37:44"},"nodeType":"YulIf","src":"4244:57:44"}]},"name":"abi_decode_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4175:6:44","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4186:5:44","type":""}],"src":"4148:159:44"},{"body":{"nodeType":"YulBlock","src":"4553:1087:44","statements":[{"body":{"nodeType":"YulBlock","src":"4600:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4609:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4612:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4602:6:44"},"nodeType":"YulFunctionCall","src":"4602:12:44"},"nodeType":"YulExpressionStatement","src":"4602:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4574:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4583:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4570:3:44"},"nodeType":"YulFunctionCall","src":"4570:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4595:3:44","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4566:3:44"},"nodeType":"YulFunctionCall","src":"4566:33:44"},"nodeType":"YulIf","src":"4563:53:44"},{"nodeType":"YulVariableDeclaration","src":"4625:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4652:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4639:12:44"},"nodeType":"YulFunctionCall","src":"4639:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4629:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4671:28:44","value":{"kind":"number","nodeType":"YulLiteral","src":"4681:18:44","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4675:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4726:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4735:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4738:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4728:6:44"},"nodeType":"YulFunctionCall","src":"4728:12:44"},"nodeType":"YulExpressionStatement","src":"4728:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4714:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"4722:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4711:2:44"},"nodeType":"YulFunctionCall","src":"4711:14:44"},"nodeType":"YulIf","src":"4708:34:44"},{"nodeType":"YulAssignment","src":"4751:60:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4783:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"4794:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4779:3:44"},"nodeType":"YulFunctionCall","src":"4779:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4803:7:44"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4761:17:44"},"nodeType":"YulFunctionCall","src":"4761:50:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4751:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"4820:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4850:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4861:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4846:3:44"},"nodeType":"YulFunctionCall","src":"4846:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4833:12:44"},"nodeType":"YulFunctionCall","src":"4833:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4824:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4913:5:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"4874:38:44"},"nodeType":"YulFunctionCall","src":"4874:45:44"},"nodeType":"YulExpressionStatement","src":"4874:45:44"},{"nodeType":"YulAssignment","src":"4928:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"4938:5:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4928:6:44"}]},{"nodeType":"YulAssignment","src":"4952:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4979:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4990:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4975:3:44"},"nodeType":"YulFunctionCall","src":"4975:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4962:12:44"},"nodeType":"YulFunctionCall","src":"4962:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4952:6:44"}]},{"nodeType":"YulAssignment","src":"5003:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5030:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5041:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5026:3:44"},"nodeType":"YulFunctionCall","src":"5026:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5013:12:44"},"nodeType":"YulFunctionCall","src":"5013:32:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5003:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"5054:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5086:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5097:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5082:3:44"},"nodeType":"YulFunctionCall","src":"5082:19:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5069:12:44"},"nodeType":"YulFunctionCall","src":"5069:33:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5058:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5150:7:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"5111:38:44"},"nodeType":"YulFunctionCall","src":"5111:47:44"},"nodeType":"YulExpressionStatement","src":"5111:47:44"},{"nodeType":"YulAssignment","src":"5167:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5177:7:44"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5167:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"5193:49:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5226:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5237:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5222:3:44"},"nodeType":"YulFunctionCall","src":"5222:19:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5209:12:44"},"nodeType":"YulFunctionCall","src":"5209:33:44"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5197:8:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"5271:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5280:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5283:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5273:6:44"},"nodeType":"YulFunctionCall","src":"5273:12:44"},"nodeType":"YulExpressionStatement","src":"5273:12:44"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5257:8:44"},{"name":"_1","nodeType":"YulIdentifier","src":"5267:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5254:2:44"},"nodeType":"YulFunctionCall","src":"5254:16:44"},"nodeType":"YulIf","src":"5251:36:44"},{"nodeType":"YulVariableDeclaration","src":"5296:105:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5371:9:44"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5382:8:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5367:3:44"},"nodeType":"YulFunctionCall","src":"5367:24:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5393:7:44"}],"functionName":{"name":"abi_decode_array_bytes_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"5322:44:44"},"nodeType":"YulFunctionCall","src":"5322:79:44"},"variables":[{"name":"value5_1","nodeType":"YulTypedName","src":"5300:8:44","type":""},{"name":"value6_1","nodeType":"YulTypedName","src":"5310:8:44","type":""}]},{"nodeType":"YulAssignment","src":"5410:18:44","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"5420:8:44"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5410:6:44"}]},{"nodeType":"YulAssignment","src":"5437:18:44","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"5447:8:44"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5437:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"5464:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5496:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5507:3:44","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5492:3:44"},"nodeType":"YulFunctionCall","src":"5492:19:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5479:12:44"},"nodeType":"YulFunctionCall","src":"5479:33:44"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"5468:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"5543:7:44"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"5521:21:44"},"nodeType":"YulFunctionCall","src":"5521:30:44"},"nodeType":"YulExpressionStatement","src":"5521:30:44"},{"nodeType":"YulAssignment","src":"5560:17:44","value":{"name":"value_2","nodeType":"YulIdentifier","src":"5570:7:44"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"5560:6:44"}]},{"nodeType":"YulAssignment","src":"5586:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5618:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5629:3:44","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5614:3:44"},"nodeType":"YulFunctionCall","src":"5614:19:44"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"5596:17:44"},"nodeType":"YulFunctionCall","src":"5596:38:44"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"5586:6:44"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_addresst_uint256t_bytes32t_addresst_array$_t_bytes_calldata_ptr_$dyn_calldata_ptrt_boolt_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4494:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4502:6:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4510:6:44","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4518:6:44","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4526:6:44","type":""},{"name":"value7","nodeType":"YulTypedName","src":"4534:6:44","type":""},{"name":"value8","nodeType":"YulTypedName","src":"4542:6:44","type":""}],"src":"4312:1328:44"},{"body":{"nodeType":"YulBlock","src":"5746:76:44","statements":[{"nodeType":"YulAssignment","src":"5756:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5768:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5779:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5764:3:44"},"nodeType":"YulFunctionCall","src":"5764:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5756:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5798:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"5809:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5791:6:44"},"nodeType":"YulFunctionCall","src":"5791:25:44"},"nodeType":"YulExpressionStatement","src":"5791:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5715:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5726:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5737:4:44","type":""}],"src":"5645:177:44"},{"body":{"nodeType":"YulBlock","src":"5900:275:44","statements":[{"body":{"nodeType":"YulBlock","src":"5949:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5958:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5961:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5951:6:44"},"nodeType":"YulFunctionCall","src":"5951:12:44"},"nodeType":"YulExpressionStatement","src":"5951:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5928:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"5936:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5924:3:44"},"nodeType":"YulFunctionCall","src":"5924:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"5943:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5920:3:44"},"nodeType":"YulFunctionCall","src":"5920:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5913:6:44"},"nodeType":"YulFunctionCall","src":"5913:35:44"},"nodeType":"YulIf","src":"5910:55:44"},{"nodeType":"YulAssignment","src":"5974:30:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5997:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5984:12:44"},"nodeType":"YulFunctionCall","src":"5984:20:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5974:6:44"}]},{"body":{"nodeType":"YulBlock","src":"6047:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6056:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6059:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6049:6:44"},"nodeType":"YulFunctionCall","src":"6049:12:44"},"nodeType":"YulExpressionStatement","src":"6049:12:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6019:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"6027:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6016:2:44"},"nodeType":"YulFunctionCall","src":"6016:30:44"},"nodeType":"YulIf","src":"6013:50:44"},{"nodeType":"YulAssignment","src":"6072:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6088:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"6096:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6084:3:44"},"nodeType":"YulFunctionCall","src":"6084:17:44"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6072:8:44"}]},{"body":{"nodeType":"YulBlock","src":"6153:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6162:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6165:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6155:6:44"},"nodeType":"YulFunctionCall","src":"6155:12:44"},"nodeType":"YulExpressionStatement","src":"6155:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6124:6:44"},{"name":"length","nodeType":"YulIdentifier","src":"6132:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6120:3:44"},"nodeType":"YulFunctionCall","src":"6120:19:44"},{"kind":"number","nodeType":"YulLiteral","src":"6141:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6116:3:44"},"nodeType":"YulFunctionCall","src":"6116:30:44"},{"name":"end","nodeType":"YulIdentifier","src":"6148:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6113:2:44"},"nodeType":"YulFunctionCall","src":"6113:39:44"},"nodeType":"YulIf","src":"6110:59:44"}]},"name":"abi_decode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5863:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"5871:3:44","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"5879:8:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"5889:6:44","type":""}],"src":"5827:348:44"},{"body":{"nodeType":"YulBlock","src":"6431:1166:44","statements":[{"body":{"nodeType":"YulBlock","src":"6478:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6487:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6490:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6480:6:44"},"nodeType":"YulFunctionCall","src":"6480:12:44"},"nodeType":"YulExpressionStatement","src":"6480:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6452:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"6461:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6448:3:44"},"nodeType":"YulFunctionCall","src":"6448:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"6473:3:44","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6444:3:44"},"nodeType":"YulFunctionCall","src":"6444:33:44"},"nodeType":"YulIf","src":"6441:53:44"},{"nodeType":"YulVariableDeclaration","src":"6503:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6530:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6517:12:44"},"nodeType":"YulFunctionCall","src":"6517:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6507:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6549:28:44","value":{"kind":"number","nodeType":"YulLiteral","src":"6559:18:44","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6553:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"6604:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6613:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6616:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6606:6:44"},"nodeType":"YulFunctionCall","src":"6606:12:44"},"nodeType":"YulExpressionStatement","src":"6606:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6592:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"6600:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6589:2:44"},"nodeType":"YulFunctionCall","src":"6589:14:44"},"nodeType":"YulIf","src":"6586:34:44"},{"nodeType":"YulVariableDeclaration","src":"6629:85:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6686:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"6697:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6682:3:44"},"nodeType":"YulFunctionCall","src":"6682:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6706:7:44"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"6655:26:44"},"nodeType":"YulFunctionCall","src":"6655:59:44"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"6633:8:44","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"6643:8:44","type":""}]},{"nodeType":"YulAssignment","src":"6723:18:44","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"6733:8:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6723:6:44"}]},{"nodeType":"YulAssignment","src":"6750:18:44","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6760:8:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6750:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"6777:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6807:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6818:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6803:3:44"},"nodeType":"YulFunctionCall","src":"6803:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6790:12:44"},"nodeType":"YulFunctionCall","src":"6790:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6781:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6870:5:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"6831:38:44"},"nodeType":"YulFunctionCall","src":"6831:45:44"},"nodeType":"YulExpressionStatement","src":"6831:45:44"},{"nodeType":"YulAssignment","src":"6885:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"6895:5:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6885:6:44"}]},{"nodeType":"YulAssignment","src":"6909:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6936:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6947:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6932:3:44"},"nodeType":"YulFunctionCall","src":"6932:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6919:12:44"},"nodeType":"YulFunctionCall","src":"6919:32:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6909:6:44"}]},{"nodeType":"YulAssignment","src":"6960:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6987:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6998:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6983:3:44"},"nodeType":"YulFunctionCall","src":"6983:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6970:12:44"},"nodeType":"YulFunctionCall","src":"6970:32:44"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6960:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"7011:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7043:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7054:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7039:3:44"},"nodeType":"YulFunctionCall","src":"7039:19:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7026:12:44"},"nodeType":"YulFunctionCall","src":"7026:33:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7015:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"7107:7:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"7068:38:44"},"nodeType":"YulFunctionCall","src":"7068:47:44"},"nodeType":"YulExpressionStatement","src":"7068:47:44"},{"nodeType":"YulAssignment","src":"7124:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"7134:7:44"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7124:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"7150:49:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7183:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7194:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7179:3:44"},"nodeType":"YulFunctionCall","src":"7179:19:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7166:12:44"},"nodeType":"YulFunctionCall","src":"7166:33:44"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"7154:8:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"7228:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7237:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7240:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7230:6:44"},"nodeType":"YulFunctionCall","src":"7230:12:44"},"nodeType":"YulExpressionStatement","src":"7230:12:44"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"7214:8:44"},{"name":"_1","nodeType":"YulIdentifier","src":"7224:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7211:2:44"},"nodeType":"YulFunctionCall","src":"7211:16:44"},"nodeType":"YulIf","src":"7208:36:44"},{"nodeType":"YulVariableDeclaration","src":"7253:105:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7328:9:44"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7339:8:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7324:3:44"},"nodeType":"YulFunctionCall","src":"7324:24:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7350:7:44"}],"functionName":{"name":"abi_decode_array_bytes_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"7279:44:44"},"nodeType":"YulFunctionCall","src":"7279:79:44"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"7257:8:44","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"7267:8:44","type":""}]},{"nodeType":"YulAssignment","src":"7367:18:44","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"7377:8:44"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7367:6:44"}]},{"nodeType":"YulAssignment","src":"7394:18:44","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"7404:8:44"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"7394:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"7421:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7453:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7464:3:44","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7449:3:44"},"nodeType":"YulFunctionCall","src":"7449:19:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7436:12:44"},"nodeType":"YulFunctionCall","src":"7436:33:44"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"7425:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"7500:7:44"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"7478:21:44"},"nodeType":"YulFunctionCall","src":"7478:30:44"},"nodeType":"YulExpressionStatement","src":"7478:30:44"},{"nodeType":"YulAssignment","src":"7517:17:44","value":{"name":"value_2","nodeType":"YulIdentifier","src":"7527:7:44"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"7517:6:44"}]},{"nodeType":"YulAssignment","src":"7543:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7575:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7586:3:44","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7571:3:44"},"nodeType":"YulFunctionCall","src":"7571:19:44"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"7553:17:44"},"nodeType":"YulFunctionCall","src":"7553:38:44"},"variableNames":[{"name":"value9","nodeType":"YulIdentifier","src":"7543:6:44"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_addresst_uint256t_bytes32t_addresst_array$_t_bytes_calldata_ptr_$dyn_calldata_ptrt_boolt_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6325:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6336:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6348:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6356:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6364:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6372:6:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6380:6:44","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6388:6:44","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6396:6:44","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6404:6:44","type":""},{"name":"value8","nodeType":"YulTypedName","src":"6412:6:44","type":""},{"name":"value9","nodeType":"YulTypedName","src":"6420:6:44","type":""}],"src":"6180:1417:44"},{"body":{"nodeType":"YulBlock","src":"7728:125:44","statements":[{"nodeType":"YulAssignment","src":"7738:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7750:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7761:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7746:3:44"},"nodeType":"YulFunctionCall","src":"7746:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7738:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7780:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7795:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"7803:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7791:3:44"},"nodeType":"YulFunctionCall","src":"7791:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7773:6:44"},"nodeType":"YulFunctionCall","src":"7773:74:44"},"nodeType":"YulExpressionStatement","src":"7773:74:44"}]},"name":"abi_encode_tuple_t_contract$_ReverseRegistrar_$6070__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7697:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7708:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7719:4:44","type":""}],"src":"7602:251:44"},{"body":{"nodeType":"YulBlock","src":"7928:110:44","statements":[{"body":{"nodeType":"YulBlock","src":"7974:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7983:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7986:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7976:6:44"},"nodeType":"YulFunctionCall","src":"7976:12:44"},"nodeType":"YulExpressionStatement","src":"7976:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7949:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"7958:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7945:3:44"},"nodeType":"YulFunctionCall","src":"7945:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"7970:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7941:3:44"},"nodeType":"YulFunctionCall","src":"7941:32:44"},"nodeType":"YulIf","src":"7938:52:44"},{"nodeType":"YulAssignment","src":"7999:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8022:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8009:12:44"},"nodeType":"YulFunctionCall","src":"8009:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7999:6:44"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7894:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7905:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7917:6:44","type":""}],"src":"7858:180:44"},{"body":{"nodeType":"YulBlock","src":"8144:125:44","statements":[{"nodeType":"YulAssignment","src":"8154:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8166:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8177:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8162:3:44"},"nodeType":"YulFunctionCall","src":"8162:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8154:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8196:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8211:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"8219:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8207:3:44"},"nodeType":"YulFunctionCall","src":"8207:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8189:6:44"},"nodeType":"YulFunctionCall","src":"8189:74:44"},"nodeType":"YulExpressionStatement","src":"8189:74:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8113:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8124:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8135:4:44","type":""}],"src":"8043:226:44"},{"body":{"nodeType":"YulBlock","src":"8354:242:44","statements":[{"body":{"nodeType":"YulBlock","src":"8400:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8409:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8412:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8402:6:44"},"nodeType":"YulFunctionCall","src":"8402:12:44"},"nodeType":"YulExpressionStatement","src":"8402:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8375:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8371:3:44"},"nodeType":"YulFunctionCall","src":"8371:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"8396:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8367:3:44"},"nodeType":"YulFunctionCall","src":"8367:32:44"},"nodeType":"YulIf","src":"8364:52:44"},{"nodeType":"YulVariableDeclaration","src":"8425:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8452:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8439:12:44"},"nodeType":"YulFunctionCall","src":"8439:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8429:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"8505:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8514:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8517:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8507:6:44"},"nodeType":"YulFunctionCall","src":"8507:12:44"},"nodeType":"YulExpressionStatement","src":"8507:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8477:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"8485:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8474:2:44"},"nodeType":"YulFunctionCall","src":"8474:30:44"},"nodeType":"YulIf","src":"8471:50:44"},{"nodeType":"YulAssignment","src":"8530:60:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8562:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"8573:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8558:3:44"},"nodeType":"YulFunctionCall","src":"8558:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8582:7:44"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"8540:17:44"},"nodeType":"YulFunctionCall","src":"8540:50:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8530:6:44"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8320:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8331:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8343:6:44","type":""}],"src":"8274:322:44"},{"body":{"nodeType":"YulBlock","src":"8723:125:44","statements":[{"nodeType":"YulAssignment","src":"8733:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8745:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8756:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8741:3:44"},"nodeType":"YulFunctionCall","src":"8741:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8733:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8775:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8790:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"8798:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8786:3:44"},"nodeType":"YulFunctionCall","src":"8786:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8768:6:44"},"nodeType":"YulFunctionCall","src":"8768:74:44"},"nodeType":"YulExpressionStatement","src":"8768:74:44"}]},"name":"abi_encode_tuple_t_contract$_INameWrapper_$6534__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8692:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8703:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8714:4:44","type":""}],"src":"8601:247:44"},{"body":{"nodeType":"YulBlock","src":"8960:372:44","statements":[{"body":{"nodeType":"YulBlock","src":"9006:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9015:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9018:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9008:6:44"},"nodeType":"YulFunctionCall","src":"9008:12:44"},"nodeType":"YulExpressionStatement","src":"9008:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8981:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"8990:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8977:3:44"},"nodeType":"YulFunctionCall","src":"8977:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"9002:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8973:3:44"},"nodeType":"YulFunctionCall","src":"8973:32:44"},"nodeType":"YulIf","src":"8970:52:44"},{"nodeType":"YulVariableDeclaration","src":"9031:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9058:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9045:12:44"},"nodeType":"YulFunctionCall","src":"9045:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9035:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"9111:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9120:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9123:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9113:6:44"},"nodeType":"YulFunctionCall","src":"9113:12:44"},"nodeType":"YulExpressionStatement","src":"9113:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9083:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"9091:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9080:2:44"},"nodeType":"YulFunctionCall","src":"9080:30:44"},"nodeType":"YulIf","src":"9077:50:44"},{"nodeType":"YulVariableDeclaration","src":"9136:85:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9193:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"9204:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9189:3:44"},"nodeType":"YulFunctionCall","src":"9189:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9213:7:44"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"9162:26:44"},"nodeType":"YulFunctionCall","src":"9162:59:44"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"9140:8:44","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"9150:8:44","type":""}]},{"nodeType":"YulAssignment","src":"9230:18:44","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"9240:8:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9230:6:44"}]},{"nodeType":"YulAssignment","src":"9257:18:44","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"9267:8:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9257:6:44"}]},{"nodeType":"YulAssignment","src":"9284:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9311:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9322:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9307:3:44"},"nodeType":"YulFunctionCall","src":"9307:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9294:12:44"},"nodeType":"YulFunctionCall","src":"9294:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9284:6:44"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8910:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8921:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8933:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8941:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8949:6:44","type":""}],"src":"8853:479:44"},{"body":{"nodeType":"YulBlock","src":"9459:125:44","statements":[{"nodeType":"YulAssignment","src":"9469:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9481:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"9492:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9477:3:44"},"nodeType":"YulFunctionCall","src":"9477:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9469:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9511:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9526:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"9534:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9522:3:44"},"nodeType":"YulFunctionCall","src":"9522:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9504:6:44"},"nodeType":"YulFunctionCall","src":"9504:74:44"},"nodeType":"YulExpressionStatement","src":"9504:74:44"}]},"name":"abi_encode_tuple_t_contract$_IPriceOracle_$4781__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9428:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9439:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9450:4:44","type":""}],"src":"9337:247:44"},{"body":{"nodeType":"YulBlock","src":"9659:110:44","statements":[{"body":{"nodeType":"YulBlock","src":"9705:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9714:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9717:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9707:6:44"},"nodeType":"YulFunctionCall","src":"9707:12:44"},"nodeType":"YulExpressionStatement","src":"9707:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9680:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"9689:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9676:3:44"},"nodeType":"YulFunctionCall","src":"9676:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"9701:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9672:3:44"},"nodeType":"YulFunctionCall","src":"9672:32:44"},"nodeType":"YulIf","src":"9669:52:44"},{"nodeType":"YulAssignment","src":"9730:33:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9753:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9740:12:44"},"nodeType":"YulFunctionCall","src":"9740:23:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9730:6:44"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9625:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9636:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9648:6:44","type":""}],"src":"9589:180:44"},{"body":{"nodeType":"YulBlock","src":"9844:191:44","statements":[{"body":{"nodeType":"YulBlock","src":"9890:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9899:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9902:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9892:6:44"},"nodeType":"YulFunctionCall","src":"9892:12:44"},"nodeType":"YulExpressionStatement","src":"9892:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9865:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"9874:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9861:3:44"},"nodeType":"YulFunctionCall","src":"9861:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"9886:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9857:3:44"},"nodeType":"YulFunctionCall","src":"9857:32:44"},"nodeType":"YulIf","src":"9854:52:44"},{"nodeType":"YulVariableDeclaration","src":"9915:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9941:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9928:12:44"},"nodeType":"YulFunctionCall","src":"9928:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9919:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9999:5:44"}],"functionName":{"name":"validator_revert_contract_IPriceOracle","nodeType":"YulIdentifier","src":"9960:38:44"},"nodeType":"YulFunctionCall","src":"9960:45:44"},"nodeType":"YulExpressionStatement","src":"9960:45:44"},{"nodeType":"YulAssignment","src":"10014:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"10024:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10014:6:44"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9810:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9821:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9833:6:44","type":""}],"src":"9774:261:44"},{"body":{"nodeType":"YulBlock","src":"10214:179:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10231:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10242:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10224:6:44"},"nodeType":"YulFunctionCall","src":"10224:21:44"},"nodeType":"YulExpressionStatement","src":"10224:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10265:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10276:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10261:3:44"},"nodeType":"YulFunctionCall","src":"10261:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"10281:2:44","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10254:6:44"},"nodeType":"YulFunctionCall","src":"10254:30:44"},"nodeType":"YulExpressionStatement","src":"10254:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10304:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10315:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10300:3:44"},"nodeType":"YulFunctionCall","src":"10300:18:44"},{"hexValue":"4552524f523a20507269636573206973207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"10320:31:44","type":"","value":"ERROR: Prices is zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10293:6:44"},"nodeType":"YulFunctionCall","src":"10293:59:44"},"nodeType":"YulExpressionStatement","src":"10293:59:44"},{"nodeType":"YulAssignment","src":"10361:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10373:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10384:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10369:3:44"},"nodeType":"YulFunctionCall","src":"10369:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10361:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d20f9dab246787f8599eac98f253e7599800f7d25f0eb1ccdf4e1fe88cdd5a5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10191:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10205:4:44","type":""}],"src":"10040:353:44"},{"body":{"nodeType":"YulBlock","src":"10527:198:44","statements":[{"nodeType":"YulAssignment","src":"10537:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10549:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10560:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10545:3:44"},"nodeType":"YulFunctionCall","src":"10545:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10537:4:44"}]},{"nodeType":"YulVariableDeclaration","src":"10572:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"10582:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10576:2:44","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10640:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10655:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"10663:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10651:3:44"},"nodeType":"YulFunctionCall","src":"10651:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10633:6:44"},"nodeType":"YulFunctionCall","src":"10633:34:44"},"nodeType":"YulExpressionStatement","src":"10633:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10687:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"10698:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10683:3:44"},"nodeType":"YulFunctionCall","src":"10683:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10707:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"10715:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10703:3:44"},"nodeType":"YulFunctionCall","src":"10703:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10676:6:44"},"nodeType":"YulFunctionCall","src":"10676:43:44"},"nodeType":"YulExpressionStatement","src":"10676:43:44"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10488:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10499:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10507:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10518:4:44","type":""}],"src":"10398:327:44"},{"body":{"nodeType":"YulBlock","src":"10811:103:44","statements":[{"body":{"nodeType":"YulBlock","src":"10857:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10866:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10869:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10859:6:44"},"nodeType":"YulFunctionCall","src":"10859:12:44"},"nodeType":"YulExpressionStatement","src":"10859:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10832:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"10841:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10828:3:44"},"nodeType":"YulFunctionCall","src":"10828:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"10853:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10824:3:44"},"nodeType":"YulFunctionCall","src":"10824:32:44"},"nodeType":"YulIf","src":"10821:52:44"},{"nodeType":"YulAssignment","src":"10882:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10898:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10892:5:44"},"nodeType":"YulFunctionCall","src":"10892:16:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10882:6:44"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10777:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10788:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10800:6:44","type":""}],"src":"10730:184:44"},{"body":{"nodeType":"YulBlock","src":"10985:184:44","statements":[{"nodeType":"YulVariableDeclaration","src":"10995:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"11004:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10999:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"11064:63:44","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11089:3:44"},{"name":"i","nodeType":"YulIdentifier","src":"11094:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11085:3:44"},"nodeType":"YulFunctionCall","src":"11085:11:44"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11108:3:44"},{"name":"i","nodeType":"YulIdentifier","src":"11113:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11104:3:44"},"nodeType":"YulFunctionCall","src":"11104:11:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11098:5:44"},"nodeType":"YulFunctionCall","src":"11098:18:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11078:6:44"},"nodeType":"YulFunctionCall","src":"11078:39:44"},"nodeType":"YulExpressionStatement","src":"11078:39:44"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11025:1:44"},{"name":"length","nodeType":"YulIdentifier","src":"11028:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11022:2:44"},"nodeType":"YulFunctionCall","src":"11022:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11036:19:44","statements":[{"nodeType":"YulAssignment","src":"11038:15:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11047:1:44"},{"kind":"number","nodeType":"YulLiteral","src":"11050:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11043:3:44"},"nodeType":"YulFunctionCall","src":"11043:10:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11038:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"11018:3:44","statements":[]},"src":"11014:113:44"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11147:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"11152:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11143:3:44"},"nodeType":"YulFunctionCall","src":"11143:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"11161:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11136:6:44"},"nodeType":"YulFunctionCall","src":"11136:27:44"},"nodeType":"YulExpressionStatement","src":"11136:27:44"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"10963:3:44","type":""},{"name":"dst","nodeType":"YulTypedName","src":"10968:3:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"10973:6:44","type":""}],"src":"10919:250:44"},{"body":{"nodeType":"YulBlock","src":"11224:221:44","statements":[{"nodeType":"YulVariableDeclaration","src":"11234:26:44","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11254:5:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11248:5:44"},"nodeType":"YulFunctionCall","src":"11248:12:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11238:6:44","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11276:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"11281:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11269:6:44"},"nodeType":"YulFunctionCall","src":"11269:19:44"},"nodeType":"YulExpressionStatement","src":"11269:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11336:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"11343:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11332:3:44"},"nodeType":"YulFunctionCall","src":"11332:16:44"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11354:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"11359:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11350:3:44"},"nodeType":"YulFunctionCall","src":"11350:14:44"},{"name":"length","nodeType":"YulIdentifier","src":"11366:6:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11297:34:44"},"nodeType":"YulFunctionCall","src":"11297:76:44"},"nodeType":"YulExpressionStatement","src":"11297:76:44"},{"nodeType":"YulAssignment","src":"11382:57:44","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11397:3:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11410:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"11418:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11406:3:44"},"nodeType":"YulFunctionCall","src":"11406:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11427:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11423:3:44"},"nodeType":"YulFunctionCall","src":"11423:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11402:3:44"},"nodeType":"YulFunctionCall","src":"11402:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11393:3:44"},"nodeType":"YulFunctionCall","src":"11393:39:44"},{"kind":"number","nodeType":"YulLiteral","src":"11434:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11389:3:44"},"nodeType":"YulFunctionCall","src":"11389:50:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11382:3:44"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11201:5:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11208:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11216:3:44","type":""}],"src":"11174:271:44"},{"body":{"nodeType":"YulBlock","src":"11655:279:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11672:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11683:3:44","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11665:6:44"},"nodeType":"YulFunctionCall","src":"11665:22:44"},"nodeType":"YulExpressionStatement","src":"11665:22:44"},{"nodeType":"YulAssignment","src":"11696:54:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11722:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11734:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11745:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11730:3:44"},"nodeType":"YulFunctionCall","src":"11730:19:44"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11704:17:44"},"nodeType":"YulFunctionCall","src":"11704:46:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11696:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11770:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11781:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11766:3:44"},"nodeType":"YulFunctionCall","src":"11766:18:44"},{"name":"value1","nodeType":"YulIdentifier","src":"11786:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11759:6:44"},"nodeType":"YulFunctionCall","src":"11759:34:44"},"nodeType":"YulExpressionStatement","src":"11759:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11813:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11824:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11809:3:44"},"nodeType":"YulFunctionCall","src":"11809:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"11829:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11802:6:44"},"nodeType":"YulFunctionCall","src":"11802:34:44"},"nodeType":"YulExpressionStatement","src":"11802:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11856:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"11867:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11852:3:44"},"nodeType":"YulFunctionCall","src":"11852:18:44"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11876:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"11884:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11872:3:44"},"nodeType":"YulFunctionCall","src":"11872:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11845:6:44"},"nodeType":"YulFunctionCall","src":"11845:83:44"},"nodeType":"YulExpressionStatement","src":"11845:83:44"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_uint256_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11600:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11611:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11619:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11627:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11635:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11646:4:44","type":""}],"src":"11450:484:44"},{"body":{"nodeType":"YulBlock","src":"12043:395:44","statements":[{"body":{"nodeType":"YulBlock","src":"12089:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12098:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12101:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12091:6:44"},"nodeType":"YulFunctionCall","src":"12091:12:44"},"nodeType":"YulExpressionStatement","src":"12091:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12064:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"12073:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12060:3:44"},"nodeType":"YulFunctionCall","src":"12060:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"12085:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12056:3:44"},"nodeType":"YulFunctionCall","src":"12056:32:44"},"nodeType":"YulIf","src":"12053:52:44"},{"nodeType":"YulVariableDeclaration","src":"12114:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12134:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12128:5:44"},"nodeType":"YulFunctionCall","src":"12128:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"12118:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12146:33:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12168:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"12176:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12164:3:44"},"nodeType":"YulFunctionCall","src":"12164:15:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"12150:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"12254:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12256:16:44"},"nodeType":"YulFunctionCall","src":"12256:18:44"},"nodeType":"YulExpressionStatement","src":"12256:18:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12197:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"12209:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12194:2:44"},"nodeType":"YulFunctionCall","src":"12194:34:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12233:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"12245:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12230:2:44"},"nodeType":"YulFunctionCall","src":"12230:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12191:2:44"},"nodeType":"YulFunctionCall","src":"12191:62:44"},"nodeType":"YulIf","src":"12188:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12292:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12296:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12285:6:44"},"nodeType":"YulFunctionCall","src":"12285:22:44"},"nodeType":"YulExpressionStatement","src":"12285:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12323:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12337:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12331:5:44"},"nodeType":"YulFunctionCall","src":"12331:16:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12316:6:44"},"nodeType":"YulFunctionCall","src":"12316:32:44"},"nodeType":"YulExpressionStatement","src":"12316:32:44"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12368:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"12376:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12364:3:44"},"nodeType":"YulFunctionCall","src":"12364:15:44"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12391:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12402:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12387:3:44"},"nodeType":"YulFunctionCall","src":"12387:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12381:5:44"},"nodeType":"YulFunctionCall","src":"12381:25:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12357:6:44"},"nodeType":"YulFunctionCall","src":"12357:50:44"},"nodeType":"YulExpressionStatement","src":"12357:50:44"},{"nodeType":"YulAssignment","src":"12416:16:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"12426:6:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12416:6:44"}]}]},"name":"abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12009:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12020:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12032:6:44","type":""}],"src":"11939:499:44"},{"body":{"nodeType":"YulBlock","src":"12572:168:44","statements":[{"nodeType":"YulAssignment","src":"12582:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12594:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12605:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12590:3:44"},"nodeType":"YulFunctionCall","src":"12590:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12582:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12624:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12639:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"12647:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12635:3:44"},"nodeType":"YulFunctionCall","src":"12635:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12617:6:44"},"nodeType":"YulFunctionCall","src":"12617:74:44"},"nodeType":"YulExpressionStatement","src":"12617:74:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12711:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"12722:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12707:3:44"},"nodeType":"YulFunctionCall","src":"12707:18:44"},{"name":"value1","nodeType":"YulIdentifier","src":"12727:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12700:6:44"},"nodeType":"YulFunctionCall","src":"12700:34:44"},"nodeType":"YulExpressionStatement","src":"12700:34:44"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12533:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12544:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12552:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12563:4:44","type":""}],"src":"12443:297:44"},{"body":{"nodeType":"YulBlock","src":"12823:167:44","statements":[{"body":{"nodeType":"YulBlock","src":"12869:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12878:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12881:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12871:6:44"},"nodeType":"YulFunctionCall","src":"12871:12:44"},"nodeType":"YulExpressionStatement","src":"12871:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12844:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"12853:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12840:3:44"},"nodeType":"YulFunctionCall","src":"12840:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"12865:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12836:3:44"},"nodeType":"YulFunctionCall","src":"12836:32:44"},"nodeType":"YulIf","src":"12833:52:44"},{"nodeType":"YulVariableDeclaration","src":"12894:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12913:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12907:5:44"},"nodeType":"YulFunctionCall","src":"12907:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12898:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12954:5:44"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"12932:21:44"},"nodeType":"YulFunctionCall","src":"12932:28:44"},"nodeType":"YulExpressionStatement","src":"12932:28:44"},{"nodeType":"YulAssignment","src":"12969:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"12979:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12969:6:44"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12789:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12800:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12812:6:44","type":""}],"src":"12745:245:44"},{"body":{"nodeType":"YulBlock","src":"13061:200:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13078:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"13083:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13071:6:44"},"nodeType":"YulFunctionCall","src":"13071:19:44"},"nodeType":"YulExpressionStatement","src":"13071:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13116:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"13121:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13112:3:44"},"nodeType":"YulFunctionCall","src":"13112:14:44"},{"name":"start","nodeType":"YulIdentifier","src":"13128:5:44"},{"name":"length","nodeType":"YulIdentifier","src":"13135:6:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"13099:12:44"},"nodeType":"YulFunctionCall","src":"13099:43:44"},"nodeType":"YulExpressionStatement","src":"13099:43:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13166:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"13171:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13162:3:44"},"nodeType":"YulFunctionCall","src":"13162:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"13180:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13158:3:44"},"nodeType":"YulFunctionCall","src":"13158:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"13187:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13151:6:44"},"nodeType":"YulFunctionCall","src":"13151:38:44"},"nodeType":"YulExpressionStatement","src":"13151:38:44"},{"nodeType":"YulAssignment","src":"13198:57:44","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13213:3:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13226:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"13234:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13222:3:44"},"nodeType":"YulFunctionCall","src":"13222:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13243:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13239:3:44"},"nodeType":"YulFunctionCall","src":"13239:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13218:3:44"},"nodeType":"YulFunctionCall","src":"13218:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13209:3:44"},"nodeType":"YulFunctionCall","src":"13209:39:44"},{"kind":"number","nodeType":"YulLiteral","src":"13250:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13205:3:44"},"nodeType":"YulFunctionCall","src":"13205:50:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13198:3:44"}]}]},"name":"abi_encode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"13030:5:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"13037:6:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13045:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13053:3:44","type":""}],"src":"12995:266:44"},{"body":{"nodeType":"YulBlock","src":"13351:982:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13368:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"13373:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13361:6:44"},"nodeType":"YulFunctionCall","src":"13361:19:44"},"nodeType":"YulExpressionStatement","src":"13361:19:44"},{"nodeType":"YulVariableDeclaration","src":"13389:14:44","value":{"kind":"number","nodeType":"YulLiteral","src":"13399:4:44","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13393:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13412:31:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13435:3:44"},{"name":"_1","nodeType":"YulIdentifier","src":"13440:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13431:3:44"},"nodeType":"YulFunctionCall","src":"13431:12:44"},"variables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13416:11:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13452:24:44","value":{"name":"updated_pos","nodeType":"YulIdentifier","src":"13465:11:44"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"13456:5:44","type":""}]},{"nodeType":"YulAssignment","src":"13485:18:44","value":{"name":"updated_pos","nodeType":"YulIdentifier","src":"13492:11:44"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13485:3:44"}]},{"nodeType":"YulVariableDeclaration","src":"13512:38:44","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"13528:5:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13539:1:44","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"13542:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13535:3:44"},"nodeType":"YulFunctionCall","src":"13535:14:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13524:3:44"},"nodeType":"YulFunctionCall","src":"13524:26:44"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"13516:4:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13559:19:44","value":{"name":"value","nodeType":"YulIdentifier","src":"13573:5:44"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"13563:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13587:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"13596:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13591:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"13655:652:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13676:3:44"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13685:4:44"},{"name":"pos_1","nodeType":"YulIdentifier","src":"13691:5:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13681:3:44"},"nodeType":"YulFunctionCall","src":"13681:16:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13669:6:44"},"nodeType":"YulFunctionCall","src":"13669:29:44"},"nodeType":"YulExpressionStatement","src":"13669:29:44"},{"nodeType":"YulVariableDeclaration","src":"13711:46:44","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13750:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13737:12:44"},"nodeType":"YulFunctionCall","src":"13737:20:44"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"13715:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"13847:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13856:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13859:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13849:6:44"},"nodeType":"YulFunctionCall","src":"13849:12:44"},"nodeType":"YulExpressionStatement","src":"13849:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"13784:18:44"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"13812:12:44"},"nodeType":"YulFunctionCall","src":"13812:14:44"},{"name":"value","nodeType":"YulIdentifier","src":"13828:5:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13808:3:44"},"nodeType":"YulFunctionCall","src":"13808:26:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13840:2:44","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13836:3:44"},"nodeType":"YulFunctionCall","src":"13836:7:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13804:3:44"},"nodeType":"YulFunctionCall","src":"13804:40:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13780:3:44"},"nodeType":"YulFunctionCall","src":"13780:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13773:6:44"},"nodeType":"YulFunctionCall","src":"13773:73:44"},"nodeType":"YulIf","src":"13770:93:44"},{"nodeType":"YulVariableDeclaration","src":"13876:45:44","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"13895:18:44"},{"name":"value","nodeType":"YulIdentifier","src":"13915:5:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:44"},"nodeType":"YulFunctionCall","src":"13891:30:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"13880:7:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13934:37:44","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"13963:7:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13950:12:44"},"nodeType":"YulFunctionCall","src":"13950:21:44"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"13938:8:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13984:31:44","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"14003:7:44"},{"name":"_1","nodeType":"YulIdentifier","src":"14012:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13999:3:44"},"nodeType":"YulFunctionCall","src":"13999:16:44"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"13988:7:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"14064:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14073:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14076:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14066:6:44"},"nodeType":"YulFunctionCall","src":"14066:12:44"},"nodeType":"YulExpressionStatement","src":"14066:12:44"}]},"condition":{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"14034:8:44"},{"kind":"number","nodeType":"YulLiteral","src":"14044:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14031:2:44"},"nodeType":"YulFunctionCall","src":"14031:32:44"},"nodeType":"YulIf","src":"14028:52:44"},{"body":{"nodeType":"YulBlock","src":"14140:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14149:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14152:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14142:6:44"},"nodeType":"YulFunctionCall","src":"14142:12:44"},"nodeType":"YulExpressionStatement","src":"14142:12:44"}]},"condition":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"14100:7:44"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"14113:12:44"},"nodeType":"YulFunctionCall","src":"14113:14:44"},{"name":"length_1","nodeType":"YulIdentifier","src":"14129:8:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14109:3:44"},"nodeType":"YulFunctionCall","src":"14109:29:44"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"14096:3:44"},"nodeType":"YulFunctionCall","src":"14096:43:44"},"nodeType":"YulIf","src":"14093:63:44"},{"nodeType":"YulAssignment","src":"14169:58:44","value":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"14203:7:44"},{"name":"length_1","nodeType":"YulIdentifier","src":"14212:8:44"},{"name":"tail","nodeType":"YulIdentifier","src":"14222:4:44"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"14177:25:44"},"nodeType":"YulFunctionCall","src":"14177:50:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14169:4:44"}]},{"nodeType":"YulAssignment","src":"14240:25:44","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14254:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"14262:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14250:3:44"},"nodeType":"YulFunctionCall","src":"14250:15:44"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14240:6:44"}]},{"nodeType":"YulAssignment","src":"14278:19:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14289:3:44"},{"name":"_1","nodeType":"YulIdentifier","src":"14294:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14285:3:44"},"nodeType":"YulFunctionCall","src":"14285:12:44"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14278:3:44"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13617:1:44"},{"name":"length","nodeType":"YulIdentifier","src":"13620:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13614:2:44"},"nodeType":"YulFunctionCall","src":"13614:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13628:18:44","statements":[{"nodeType":"YulAssignment","src":"13630:14:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13639:1:44"},{"kind":"number","nodeType":"YulLiteral","src":"13642:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13635:3:44"},"nodeType":"YulFunctionCall","src":"13635:9:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13630:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"13610:3:44","statements":[]},"src":"13606:701:44"},{"nodeType":"YulAssignment","src":"14316:11:44","value":{"name":"tail","nodeType":"YulIdentifier","src":"14323:4:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14316:3:44"}]}]},"name":"abi_encode_array_bytes_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13320:5:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"13327:6:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13335:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13343:3:44","type":""}],"src":"13266:1067:44"},{"body":{"nodeType":"YulBlock","src":"14707:569:44","statements":[{"nodeType":"YulVariableDeclaration","src":"14717:13:44","value":{"kind":"number","nodeType":"YulLiteral","src":"14727:3:44","type":"","value":"256"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14721:2:44","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14746:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"14757:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14739:6:44"},"nodeType":"YulFunctionCall","src":"14739:25:44"},"nodeType":"YulExpressionStatement","src":"14739:25:44"},{"nodeType":"YulVariableDeclaration","src":"14773:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"14783:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14777:2:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14845:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14856:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14841:3:44"},"nodeType":"YulFunctionCall","src":"14841:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14865:6:44"},{"name":"_2","nodeType":"YulIdentifier","src":"14873:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14861:3:44"},"nodeType":"YulFunctionCall","src":"14861:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14834:6:44"},"nodeType":"YulFunctionCall","src":"14834:43:44"},"nodeType":"YulExpressionStatement","src":"14834:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14897:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14908:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14893:3:44"},"nodeType":"YulFunctionCall","src":"14893:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"14913:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14886:6:44"},"nodeType":"YulFunctionCall","src":"14886:34:44"},"nodeType":"YulExpressionStatement","src":"14886:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14940:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14951:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14936:3:44"},"nodeType":"YulFunctionCall","src":"14936:18:44"},{"name":"value3","nodeType":"YulIdentifier","src":"14956:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14929:6:44"},"nodeType":"YulFunctionCall","src":"14929:34:44"},"nodeType":"YulExpressionStatement","src":"14929:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14983:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"14994:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14979:3:44"},"nodeType":"YulFunctionCall","src":"14979:19:44"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15004:6:44"},{"name":"_2","nodeType":"YulIdentifier","src":"15012:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15000:3:44"},"nodeType":"YulFunctionCall","src":"15000:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14972:6:44"},"nodeType":"YulFunctionCall","src":"14972:44:44"},"nodeType":"YulExpressionStatement","src":"14972:44:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15036:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"15047:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15032:3:44"},"nodeType":"YulFunctionCall","src":"15032:19:44"},{"name":"_1","nodeType":"YulIdentifier","src":"15053:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15025:6:44"},"nodeType":"YulFunctionCall","src":"15025:31:44"},"nodeType":"YulExpressionStatement","src":"15025:31:44"},{"nodeType":"YulAssignment","src":"15065:88:44","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"15118:6:44"},{"name":"value6","nodeType":"YulIdentifier","src":"15126:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15138:9:44"},{"name":"_1","nodeType":"YulIdentifier","src":"15149:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15134:3:44"},"nodeType":"YulFunctionCall","src":"15134:18:44"}],"functionName":{"name":"abi_encode_array_bytes_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"15073:44:44"},"nodeType":"YulFunctionCall","src":"15073:80:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15065:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15173:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"15184:3:44","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15169:3:44"},"nodeType":"YulFunctionCall","src":"15169:19:44"},{"arguments":[{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"15204:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15197:6:44"},"nodeType":"YulFunctionCall","src":"15197:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15190:6:44"},"nodeType":"YulFunctionCall","src":"15190:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15162:6:44"},"nodeType":"YulFunctionCall","src":"15162:51:44"},"nodeType":"YulExpressionStatement","src":"15162:51:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15233:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"15244:3:44","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15229:3:44"},"nodeType":"YulFunctionCall","src":"15229:19:44"},{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"15254:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"15262:6:44","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15250:3:44"},"nodeType":"YulFunctionCall","src":"15250:19:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15222:6:44"},"nodeType":"YulFunctionCall","src":"15222:48:44"},"nodeType":"YulExpressionStatement","src":"15222:48:44"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_bytes32_t_address_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_t_bool_t_uint16__to_t_bytes32_t_address_t_uint256_t_bytes32_t_address_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bool_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14612:9:44","type":""},{"name":"value8","nodeType":"YulTypedName","src":"14623:6:44","type":""},{"name":"value7","nodeType":"YulTypedName","src":"14631:6:44","type":""},{"name":"value6","nodeType":"YulTypedName","src":"14639:6:44","type":""},{"name":"value5","nodeType":"YulTypedName","src":"14647:6:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14655:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14663:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14671:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14679:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14687:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14698:4:44","type":""}],"src":"14338:938:44"},{"body":{"nodeType":"YulBlock","src":"15313:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15330:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15333:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15323:6:44"},"nodeType":"YulFunctionCall","src":"15323:88:44"},"nodeType":"YulExpressionStatement","src":"15323:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15427:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15430:4:44","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15420:6:44"},"nodeType":"YulFunctionCall","src":"15420:15:44"},"nodeType":"YulExpressionStatement","src":"15420:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15451:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15454:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15444:6:44"},"nodeType":"YulFunctionCall","src":"15444:15:44"},"nodeType":"YulExpressionStatement","src":"15444:15:44"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"15281:184:44"},{"body":{"nodeType":"YulBlock","src":"15518:77:44","statements":[{"nodeType":"YulAssignment","src":"15528:16:44","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15539:1:44"},{"name":"y","nodeType":"YulIdentifier","src":"15542:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15535:3:44"},"nodeType":"YulFunctionCall","src":"15535:9:44"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"15528:3:44"}]},{"body":{"nodeType":"YulBlock","src":"15567:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15569:16:44"},"nodeType":"YulFunctionCall","src":"15569:18:44"},"nodeType":"YulExpressionStatement","src":"15569:18:44"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15559:1:44"},{"name":"sum","nodeType":"YulIdentifier","src":"15562:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15556:2:44"},"nodeType":"YulFunctionCall","src":"15556:10:44"},"nodeType":"YulIf","src":"15553:36:44"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15501:1:44","type":""},{"name":"y","nodeType":"YulTypedName","src":"15504:1:44","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"15510:3:44","type":""}],"src":"15470:125:44"},{"body":{"nodeType":"YulBlock","src":"15841:382:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15858:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"15869:3:44","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15851:6:44"},"nodeType":"YulFunctionCall","src":"15851:22:44"},"nodeType":"YulExpressionStatement","src":"15851:22:44"},{"nodeType":"YulAssignment","src":"15882:70:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15916:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"15924:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15936:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"15947:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15932:3:44"},"nodeType":"YulFunctionCall","src":"15932:19:44"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"15890:25:44"},"nodeType":"YulFunctionCall","src":"15890:62:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15882:4:44"}]},{"nodeType":"YulVariableDeclaration","src":"15961:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"15971:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15965:2:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16033:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16044:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16029:3:44"},"nodeType":"YulFunctionCall","src":"16029:18:44"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16053:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"16061:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16049:3:44"},"nodeType":"YulFunctionCall","src":"16049:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16022:6:44"},"nodeType":"YulFunctionCall","src":"16022:43:44"},"nodeType":"YulExpressionStatement","src":"16022:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16085:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16096:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16081:3:44"},"nodeType":"YulFunctionCall","src":"16081:18:44"},{"name":"value3","nodeType":"YulIdentifier","src":"16101:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16074:6:44"},"nodeType":"YulFunctionCall","src":"16074:34:44"},"nodeType":"YulExpressionStatement","src":"16074:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16128:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16139:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16124:3:44"},"nodeType":"YulFunctionCall","src":"16124:18:44"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"16148:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"16156:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16144:3:44"},"nodeType":"YulFunctionCall","src":"16144:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16117:6:44"},"nodeType":"YulFunctionCall","src":"16117:43:44"},"nodeType":"YulExpressionStatement","src":"16117:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16180:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16191:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16176:3:44"},"nodeType":"YulFunctionCall","src":"16176:19:44"},{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"16201:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"16209:6:44","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16197:3:44"},"nodeType":"YulFunctionCall","src":"16197:19:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16169:6:44"},"nodeType":"YulFunctionCall","src":"16169:48:44"},"nodeType":"YulExpressionStatement","src":"16169:48:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_address_t_uint256_t_address_t_uint16__to_t_string_memory_ptr_t_address_t_uint256_t_address_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15770:9:44","type":""},{"name":"value5","nodeType":"YulTypedName","src":"15781:6:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15789:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15797:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15805:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15813:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15821:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15832:4:44","type":""}],"src":"15600:623:44"},{"body":{"nodeType":"YulBlock","src":"16375:124:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16398:3:44"},{"name":"value0","nodeType":"YulIdentifier","src":"16403:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"16411:6:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"16385:12:44"},"nodeType":"YulFunctionCall","src":"16385:33:44"},"nodeType":"YulExpressionStatement","src":"16385:33:44"},{"nodeType":"YulVariableDeclaration","src":"16427:26:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16441:3:44"},{"name":"value1","nodeType":"YulIdentifier","src":"16446:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16437:3:44"},"nodeType":"YulFunctionCall","src":"16437:16:44"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16431:2:44","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16469:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"16473:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16462:6:44"},"nodeType":"YulFunctionCall","src":"16462:13:44"},"nodeType":"YulExpressionStatement","src":"16462:13:44"},{"nodeType":"YulAssignment","src":"16484:9:44","value":{"name":"_1","nodeType":"YulIdentifier","src":"16491:2:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16484:3:44"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16343:3:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16348:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16356:6:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16367:3:44","type":""}],"src":"16228:271:44"},{"body":{"nodeType":"YulBlock","src":"16719:246:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16736:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16747:3:44","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16729:6:44"},"nodeType":"YulFunctionCall","src":"16729:22:44"},"nodeType":"YulExpressionStatement","src":"16729:22:44"},{"nodeType":"YulAssignment","src":"16760:70:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16794:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"16802:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16814:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16825:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16810:3:44"},"nodeType":"YulFunctionCall","src":"16810:19:44"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"16768:25:44"},"nodeType":"YulFunctionCall","src":"16768:62:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16760:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16850:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16861:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16846:3:44"},"nodeType":"YulFunctionCall","src":"16846:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"16866:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16839:6:44"},"nodeType":"YulFunctionCall","src":"16839:34:44"},"nodeType":"YulExpressionStatement","src":"16839:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16893:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16904:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16889:3:44"},"nodeType":"YulFunctionCall","src":"16889:18:44"},{"name":"value3","nodeType":"YulIdentifier","src":"16909:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16882:6:44"},"nodeType":"YulFunctionCall","src":"16882:34:44"},"nodeType":"YulExpressionStatement","src":"16882:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16936:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"16947:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16932:3:44"},"nodeType":"YulFunctionCall","src":"16932:18:44"},{"name":"value4","nodeType":"YulIdentifier","src":"16952:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16925:6:44"},"nodeType":"YulFunctionCall","src":"16925:34:44"},"nodeType":"YulExpressionStatement","src":"16925:34:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16656:9:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16667:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16675:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16683:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16691:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16699:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16710:4:44","type":""}],"src":"16504:461:44"},{"body":{"nodeType":"YulBlock","src":"17019:79:44","statements":[{"nodeType":"YulAssignment","src":"17029:17:44","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17041:1:44"},{"name":"y","nodeType":"YulIdentifier","src":"17044:1:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17037:3:44"},"nodeType":"YulFunctionCall","src":"17037:9:44"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"17029:4:44"}]},{"body":{"nodeType":"YulBlock","src":"17070:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17072:16:44"},"nodeType":"YulFunctionCall","src":"17072:18:44"},"nodeType":"YulExpressionStatement","src":"17072:18:44"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"17061:4:44"},{"name":"x","nodeType":"YulIdentifier","src":"17067:1:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17058:2:44"},"nodeType":"YulFunctionCall","src":"17058:11:44"},"nodeType":"YulIf","src":"17055:37:44"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17001:1:44","type":""},{"name":"y","nodeType":"YulTypedName","src":"17004:1:44","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"17010:4:44","type":""}],"src":"16970:128:44"},{"body":{"nodeType":"YulBlock","src":"17232:119:44","statements":[{"nodeType":"YulAssignment","src":"17242:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17254:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17265:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17250:3:44"},"nodeType":"YulFunctionCall","src":"17250:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17242:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17284:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"17295:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17277:6:44"},"nodeType":"YulFunctionCall","src":"17277:25:44"},"nodeType":"YulExpressionStatement","src":"17277:25:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17322:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17333:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17318:3:44"},"nodeType":"YulFunctionCall","src":"17318:18:44"},{"name":"value1","nodeType":"YulIdentifier","src":"17338:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17311:6:44"},"nodeType":"YulFunctionCall","src":"17311:34:44"},"nodeType":"YulExpressionStatement","src":"17311:34:44"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17193:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17204:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17212:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17223:4:44","type":""}],"src":"17103:248:44"},{"body":{"nodeType":"YulBlock","src":"17543:201:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17560:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17571:2:44","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17553:6:44"},"nodeType":"YulFunctionCall","src":"17553:21:44"},"nodeType":"YulExpressionStatement","src":"17553:21:44"},{"nodeType":"YulAssignment","src":"17583:69:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17617:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"17625:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17637:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17648:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17633:3:44"},"nodeType":"YulFunctionCall","src":"17633:18:44"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"17591:25:44"},"nodeType":"YulFunctionCall","src":"17591:61:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17583:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17672:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17683:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17668:3:44"},"nodeType":"YulFunctionCall","src":"17668:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"17688:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17661:6:44"},"nodeType":"YulFunctionCall","src":"17661:34:44"},"nodeType":"YulExpressionStatement","src":"17661:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17715:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17726:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17711:3:44"},"nodeType":"YulFunctionCall","src":"17711:18:44"},{"name":"value3","nodeType":"YulIdentifier","src":"17731:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17704:6:44"},"nodeType":"YulFunctionCall","src":"17704:34:44"},"nodeType":"YulExpressionStatement","src":"17704:34:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17488:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17499:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17507:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17515:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17523:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17534:4:44","type":""}],"src":"17356:388:44"},{"body":{"nodeType":"YulBlock","src":"17923:223:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17940:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17951:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17933:6:44"},"nodeType":"YulFunctionCall","src":"17933:21:44"},"nodeType":"YulExpressionStatement","src":"17933:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17974:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"17985:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17970:3:44"},"nodeType":"YulFunctionCall","src":"17970:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"17990:2:44","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17963:6:44"},"nodeType":"YulFunctionCall","src":"17963:30:44"},"nodeType":"YulExpressionStatement","src":"17963:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18013:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18024:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18009:3:44"},"nodeType":"YulFunctionCall","src":"18009:18:44"},{"hexValue":"4552524f523a204d6178206d7573742062652067726561746572207468616e20","kind":"string","nodeType":"YulLiteral","src":"18029:34:44","type":"","value":"ERROR: Max must be greater than "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18002:6:44"},"nodeType":"YulFunctionCall","src":"18002:62:44"},"nodeType":"YulExpressionStatement","src":"18002:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18084:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18095:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18080:3:44"},"nodeType":"YulFunctionCall","src":"18080:18:44"},{"hexValue":"30","kind":"string","nodeType":"YulLiteral","src":"18100:3:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18073:6:44"},"nodeType":"YulFunctionCall","src":"18073:31:44"},"nodeType":"YulExpressionStatement","src":"18073:31:44"},{"nodeType":"YulAssignment","src":"18113:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18125:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18136:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18121:3:44"},"nodeType":"YulFunctionCall","src":"18121:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18113:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_524d622c2949bd970096a193a14e38cbc02013b101b84cee977074eae8b4d055__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17900:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17914:4:44","type":""}],"src":"17749:397:44"},{"body":{"nodeType":"YulBlock","src":"18325:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18342:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18353:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18335:6:44"},"nodeType":"YulFunctionCall","src":"18335:21:44"},"nodeType":"YulExpressionStatement","src":"18335:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18376:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18387:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18372:3:44"},"nodeType":"YulFunctionCall","src":"18372:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"18392:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18365:6:44"},"nodeType":"YulFunctionCall","src":"18365:30:44"},"nodeType":"YulExpressionStatement","src":"18365:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18415:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18426:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18411:3:44"},"nodeType":"YulFunctionCall","src":"18411:18:44"},{"hexValue":"4552524f523a20556e65787069726564436f6d6d69746d656e74457869737473","kind":"string","nodeType":"YulLiteral","src":"18431:34:44","type":"","value":"ERROR: UnexpiredCommitmentExists"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18404:6:44"},"nodeType":"YulFunctionCall","src":"18404:62:44"},"nodeType":"YulExpressionStatement","src":"18404:62:44"},{"nodeType":"YulAssignment","src":"18475:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18487:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18498:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18483:3:44"},"nodeType":"YulFunctionCall","src":"18483:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18475:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_77c5dbfe580780d3ca6c71c18cc08361fbe47934562def7d737755ffabe607b1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18302:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18316:4:44","type":""}],"src":"18151:356:44"},{"body":{"nodeType":"YulBlock","src":"18686:228:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18703:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18714:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18696:6:44"},"nodeType":"YulFunctionCall","src":"18696:21:44"},"nodeType":"YulExpressionStatement","src":"18696:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18737:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18748:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18733:3:44"},"nodeType":"YulFunctionCall","src":"18733:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"18753:2:44","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18726:6:44"},"nodeType":"YulFunctionCall","src":"18726:30:44"},"nodeType":"YulExpressionStatement","src":"18726:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18776:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18787:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18772:3:44"},"nodeType":"YulFunctionCall","src":"18772:18:44"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"18792:34:44","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18765:6:44"},"nodeType":"YulFunctionCall","src":"18765:62:44"},"nodeType":"YulExpressionStatement","src":"18765:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18847:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18858:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18843:3:44"},"nodeType":"YulFunctionCall","src":"18843:18:44"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"18863:8:44","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18836:6:44"},"nodeType":"YulFunctionCall","src":"18836:36:44"},"nodeType":"YulExpressionStatement","src":"18836:36:44"},{"nodeType":"YulAssignment","src":"18881:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18893:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"18904:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18889:3:44"},"nodeType":"YulFunctionCall","src":"18889:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18881:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18663:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18677:4:44","type":""}],"src":"18512:402:44"},{"body":{"nodeType":"YulBlock","src":"19093:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19110:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19121:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19103:6:44"},"nodeType":"YulFunctionCall","src":"19103:21:44"},"nodeType":"YulExpressionStatement","src":"19103:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19144:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19155:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19140:3:44"},"nodeType":"YulFunctionCall","src":"19140:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"19160:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19133:6:44"},"nodeType":"YulFunctionCall","src":"19133:30:44"},"nodeType":"YulExpressionStatement","src":"19133:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19183:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19194:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19179:3:44"},"nodeType":"YulFunctionCall","src":"19179:18:44"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"19199:34:44","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19172:6:44"},"nodeType":"YulFunctionCall","src":"19172:62:44"},"nodeType":"YulExpressionStatement","src":"19172:62:44"},{"nodeType":"YulAssignment","src":"19243:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19255:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19266:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19251:3:44"},"nodeType":"YulFunctionCall","src":"19251:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19243:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19070:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19084:4:44","type":""}],"src":"18919:356:44"},{"body":{"nodeType":"YulBlock","src":"19454:173:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19471:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19482:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19464:6:44"},"nodeType":"YulFunctionCall","src":"19464:21:44"},"nodeType":"YulExpressionStatement","src":"19464:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19505:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19516:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19501:3:44"},"nodeType":"YulFunctionCall","src":"19501:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"19521:2:44","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19494:6:44"},"nodeType":"YulFunctionCall","src":"19494:30:44"},"nodeType":"YulExpressionStatement","src":"19494:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19544:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19555:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19540:3:44"},"nodeType":"YulFunctionCall","src":"19540:18:44"},{"hexValue":"4552524f523a20436f6d6d69746d656e74546f6f4e6577","kind":"string","nodeType":"YulLiteral","src":"19560:25:44","type":"","value":"ERROR: CommitmentTooNew"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19533:6:44"},"nodeType":"YulFunctionCall","src":"19533:53:44"},"nodeType":"YulExpressionStatement","src":"19533:53:44"},{"nodeType":"YulAssignment","src":"19595:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19607:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19618:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19603:3:44"},"nodeType":"YulFunctionCall","src":"19603:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19595:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_0946b459a596337816182edac2ea275fcc985f1d2d06a59a8c54634faab47cc4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19431:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19445:4:44","type":""}],"src":"19280:347:44"},{"body":{"nodeType":"YulBlock","src":"19806:170:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19823:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19834:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19816:6:44"},"nodeType":"YulFunctionCall","src":"19816:21:44"},"nodeType":"YulExpressionStatement","src":"19816:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19857:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19868:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19853:3:44"},"nodeType":"YulFunctionCall","src":"19853:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"19873:2:44","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19846:6:44"},"nodeType":"YulFunctionCall","src":"19846:30:44"},"nodeType":"YulExpressionStatement","src":"19846:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19896:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19907:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19892:3:44"},"nodeType":"YulFunctionCall","src":"19892:18:44"},{"hexValue":"4552524f523a20436f6d6d697420746f206f6c64","kind":"string","nodeType":"YulLiteral","src":"19912:22:44","type":"","value":"ERROR: Commit to old"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19885:6:44"},"nodeType":"YulFunctionCall","src":"19885:50:44"},"nodeType":"YulExpressionStatement","src":"19885:50:44"},{"nodeType":"YulAssignment","src":"19944:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19956:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"19967:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19952:3:44"},"nodeType":"YulFunctionCall","src":"19952:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19944:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_b155139f4d9af66fe418bbae7016d6081fd7e4aa1c9e91687a03e845c67c18ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19783:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19797:4:44","type":""}],"src":"19632:344:44"},{"body":{"nodeType":"YulBlock","src":"20155:173:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20172:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20183:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20165:6:44"},"nodeType":"YulFunctionCall","src":"20165:21:44"},"nodeType":"YulExpressionStatement","src":"20165:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20206:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20217:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20202:3:44"},"nodeType":"YulFunctionCall","src":"20202:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"20222:2:44","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20195:6:44"},"nodeType":"YulFunctionCall","src":"20195:30:44"},"nodeType":"YulExpressionStatement","src":"20195:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20245:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20256:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20241:3:44"},"nodeType":"YulFunctionCall","src":"20241:18:44"},{"hexValue":"4552524f523a204e616d654e6f74417661696c61626c65","kind":"string","nodeType":"YulLiteral","src":"20261:25:44","type":"","value":"ERROR: NameNotAvailable"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20234:6:44"},"nodeType":"YulFunctionCall","src":"20234:53:44"},"nodeType":"YulExpressionStatement","src":"20234:53:44"},{"nodeType":"YulAssignment","src":"20296:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20308:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20319:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20304:3:44"},"nodeType":"YulFunctionCall","src":"20304:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20296:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_93aa46ffb1c824c622f14fbb64b4e96e92451c6f04c2d36c76124e75c7832bb1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20132:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20146:4:44","type":""}],"src":"19981:347:44"},{"body":{"nodeType":"YulBlock","src":"20507:173:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20524:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20535:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20517:6:44"},"nodeType":"YulFunctionCall","src":"20517:21:44"},"nodeType":"YulExpressionStatement","src":"20517:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20558:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20569:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20554:3:44"},"nodeType":"YulFunctionCall","src":"20554:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"20574:2:44","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20547:6:44"},"nodeType":"YulFunctionCall","src":"20547:30:44"},"nodeType":"YulExpressionStatement","src":"20547:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20597:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20608:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20593:3:44"},"nodeType":"YulFunctionCall","src":"20593:18:44"},{"hexValue":"4552524f523a204475726174696f6e546f6f53686f7274","kind":"string","nodeType":"YulLiteral","src":"20613:25:44","type":"","value":"ERROR: DurationTooShort"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20586:6:44"},"nodeType":"YulFunctionCall","src":"20586:53:44"},"nodeType":"YulExpressionStatement","src":"20586:53:44"},{"nodeType":"YulAssignment","src":"20648:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20660:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"20671:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20656:3:44"},"nodeType":"YulFunctionCall","src":"20656:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20648:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_68b779a79149660b9f0778d5ad863a8a14900dfe8663fef7c749148c60821a91__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20484:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20498:4:44","type":""}],"src":"20333:347:44"},{"body":{"nodeType":"YulBlock","src":"20832:100:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20849:3:44"},{"name":"value0","nodeType":"YulIdentifier","src":"20854:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20842:6:44"},"nodeType":"YulFunctionCall","src":"20842:19:44"},"nodeType":"YulExpressionStatement","src":"20842:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20881:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"20886:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20877:3:44"},"nodeType":"YulFunctionCall","src":"20877:12:44"},{"name":"value1","nodeType":"YulIdentifier","src":"20891:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20870:6:44"},"nodeType":"YulFunctionCall","src":"20870:28:44"},"nodeType":"YulExpressionStatement","src":"20870:28:44"},{"nodeType":"YulAssignment","src":"20907:19:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20918:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"20923:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20914:3:44"},"nodeType":"YulFunctionCall","src":"20914:12:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20907:3:44"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20800:3:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20805:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20813:6:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20824:3:44","type":""}],"src":"20685:247:44"},{"body":{"nodeType":"YulBlock","src":"21146:177:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21163:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"21174:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21156:6:44"},"nodeType":"YulFunctionCall","src":"21156:25:44"},"nodeType":"YulExpressionStatement","src":"21156:25:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21201:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"21212:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21197:3:44"},"nodeType":"YulFunctionCall","src":"21197:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"21217:2:44","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21190:6:44"},"nodeType":"YulFunctionCall","src":"21190:30:44"},"nodeType":"YulExpressionStatement","src":"21190:30:44"},{"nodeType":"YulAssignment","src":"21229:88:44","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21282:6:44"},{"name":"value2","nodeType":"YulIdentifier","src":"21290:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21302:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"21313:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21298:3:44"},"nodeType":"YulFunctionCall","src":"21298:18:44"}],"functionName":{"name":"abi_encode_array_bytes_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"21237:44:44"},"nodeType":"YulFunctionCall","src":"21237:80:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21229:4:44"}]}]},"name":"abi_encode_tuple_t_bytes32_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr__to_t_bytes32_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21099:9:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21110:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21118:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21126:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21137:4:44","type":""}],"src":"20937:386:44"},{"body":{"nodeType":"YulBlock","src":"21443:1561:44","statements":[{"nodeType":"YulVariableDeclaration","src":"21453:12:44","value":{"kind":"number","nodeType":"YulLiteral","src":"21463:2:44","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21457:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"21510:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21519:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21522:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21512:6:44"},"nodeType":"YulFunctionCall","src":"21512:12:44"},"nodeType":"YulExpressionStatement","src":"21512:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21485:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"21494:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21481:3:44"},"nodeType":"YulFunctionCall","src":"21481:23:44"},{"name":"_1","nodeType":"YulIdentifier","src":"21506:2:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21477:3:44"},"nodeType":"YulFunctionCall","src":"21477:32:44"},"nodeType":"YulIf","src":"21474:52:44"},{"nodeType":"YulVariableDeclaration","src":"21535:30:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21555:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21549:5:44"},"nodeType":"YulFunctionCall","src":"21549:16:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21539:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21574:28:44","value":{"kind":"number","nodeType":"YulLiteral","src":"21584:18:44","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"21578:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"21629:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21638:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21641:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21631:6:44"},"nodeType":"YulFunctionCall","src":"21631:12:44"},"nodeType":"YulExpressionStatement","src":"21631:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21617:6:44"},{"name":"_2","nodeType":"YulIdentifier","src":"21625:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21614:2:44"},"nodeType":"YulFunctionCall","src":"21614:14:44"},"nodeType":"YulIf","src":"21611:34:44"},{"nodeType":"YulVariableDeclaration","src":"21654:32:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21668:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"21679:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21664:3:44"},"nodeType":"YulFunctionCall","src":"21664:22:44"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"21658:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"21734:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21743:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21746:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21736:6:44"},"nodeType":"YulFunctionCall","src":"21736:12:44"},"nodeType":"YulExpressionStatement","src":"21736:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"21713:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"21717:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21709:3:44"},"nodeType":"YulFunctionCall","src":"21709:13:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21724:7:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21705:3:44"},"nodeType":"YulFunctionCall","src":"21705:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21698:6:44"},"nodeType":"YulFunctionCall","src":"21698:35:44"},"nodeType":"YulIf","src":"21695:55:44"},{"nodeType":"YulVariableDeclaration","src":"21759:19:44","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"21775:2:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21769:5:44"},"nodeType":"YulFunctionCall","src":"21769:9:44"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"21763:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"21801:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"21803:16:44"},"nodeType":"YulFunctionCall","src":"21803:18:44"},"nodeType":"YulExpressionStatement","src":"21803:18:44"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"21793:2:44"},{"name":"_2","nodeType":"YulIdentifier","src":"21797:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21790:2:44"},"nodeType":"YulFunctionCall","src":"21790:10:44"},"nodeType":"YulIf","src":"21787:36:44"},{"nodeType":"YulVariableDeclaration","src":"21832:20:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21846:1:44","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"21849:2:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21842:3:44"},"nodeType":"YulFunctionCall","src":"21842:10:44"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"21836:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21861:39:44","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"21892:2:44"},{"name":"_1","nodeType":"YulIdentifier","src":"21896:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21888:3:44"},"nodeType":"YulFunctionCall","src":"21888:11:44"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"21872:15:44"},"nodeType":"YulFunctionCall","src":"21872:28:44"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"21865:3:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21909:16:44","value":{"name":"dst","nodeType":"YulIdentifier","src":"21922:3:44"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"21913:5:44","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21941:3:44"},{"name":"_4","nodeType":"YulIdentifier","src":"21946:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21934:6:44"},"nodeType":"YulFunctionCall","src":"21934:15:44"},"nodeType":"YulExpressionStatement","src":"21934:15:44"},{"nodeType":"YulAssignment","src":"21958:19:44","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21969:3:44"},{"name":"_1","nodeType":"YulIdentifier","src":"21974:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21965:3:44"},"nodeType":"YulFunctionCall","src":"21965:12:44"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"21958:3:44"}]},{"nodeType":"YulVariableDeclaration","src":"21986:34:44","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22008:2:44"},{"name":"_5","nodeType":"YulIdentifier","src":"22012:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22004:3:44"},"nodeType":"YulFunctionCall","src":"22004:11:44"},{"name":"_1","nodeType":"YulIdentifier","src":"22017:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22000:3:44"},"nodeType":"YulFunctionCall","src":"22000:20:44"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"21990:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"22052:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22061:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22064:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22054:6:44"},"nodeType":"YulFunctionCall","src":"22054:12:44"},"nodeType":"YulExpressionStatement","src":"22054:12:44"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"22035:6:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22043:7:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22032:2:44"},"nodeType":"YulFunctionCall","src":"22032:19:44"},"nodeType":"YulIf","src":"22029:39:44"},{"nodeType":"YulVariableDeclaration","src":"22077:22:44","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22092:2:44"},{"name":"_1","nodeType":"YulIdentifier","src":"22096:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22088:3:44"},"nodeType":"YulFunctionCall","src":"22088:11:44"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"22081:3:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"22164:810:44","statements":[{"nodeType":"YulVariableDeclaration","src":"22178:29:44","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22203:3:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22197:5:44"},"nodeType":"YulFunctionCall","src":"22197:10:44"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"22182:11:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"22255:74:44","statements":[{"nodeType":"YulVariableDeclaration","src":"22273:11:44","value":{"kind":"number","nodeType":"YulLiteral","src":"22283:1:44","type":"","value":"0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"22277:2:44","type":""}]},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"22308:2:44"},{"name":"_6","nodeType":"YulIdentifier","src":"22312:2:44"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22301:6:44"},"nodeType":"YulFunctionCall","src":"22301:14:44"},"nodeType":"YulExpressionStatement","src":"22301:14:44"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"22226:11:44"},{"name":"_2","nodeType":"YulIdentifier","src":"22239:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22223:2:44"},"nodeType":"YulFunctionCall","src":"22223:19:44"},"nodeType":"YulIf","src":"22220:109:44"},{"nodeType":"YulVariableDeclaration","src":"22342:30:44","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22356:2:44"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"22360:11:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22352:3:44"},"nodeType":"YulFunctionCall","src":"22352:20:44"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"22346:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"22434:74:44","statements":[{"nodeType":"YulVariableDeclaration","src":"22452:11:44","value":{"kind":"number","nodeType":"YulLiteral","src":"22462:1:44","type":"","value":"0"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"22456:2:44","type":""}]},{"expression":{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"22487:2:44"},{"name":"_8","nodeType":"YulIdentifier","src":"22491:2:44"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22480:6:44"},"nodeType":"YulFunctionCall","src":"22480:14:44"},"nodeType":"YulExpressionStatement","src":"22480:14:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"22403:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"22407:2:44","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22399:3:44"},"nodeType":"YulFunctionCall","src":"22399:11:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22412:7:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22395:3:44"},"nodeType":"YulFunctionCall","src":"22395:25:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22388:6:44"},"nodeType":"YulFunctionCall","src":"22388:33:44"},"nodeType":"YulIf","src":"22385:123:44"},{"nodeType":"YulVariableDeclaration","src":"22521:28:44","value":{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"22541:2:44"},{"name":"_1","nodeType":"YulIdentifier","src":"22545:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22537:3:44"},"nodeType":"YulFunctionCall","src":"22537:11:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22531:5:44"},"nodeType":"YulFunctionCall","src":"22531:18:44"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"22525:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22562:13:44","value":{"kind":"number","nodeType":"YulLiteral","src":"22573:2:44","type":"","value":"64"},"variables":[{"name":"_10","nodeType":"YulTypedName","src":"22566:3:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22588:62:44","value":{"arguments":[{"arguments":[{"name":"_9","nodeType":"YulIdentifier","src":"22646:2:44"}],"functionName":{"name":"array_allocation_size_string","nodeType":"YulIdentifier","src":"22617:28:44"},"nodeType":"YulFunctionCall","src":"22617:32:44"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"22601:15:44"},"nodeType":"YulFunctionCall","src":"22601:49:44"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"22592:5:44","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"22670:5:44"},{"name":"_9","nodeType":"YulIdentifier","src":"22677:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22663:6:44"},"nodeType":"YulFunctionCall","src":"22663:17:44"},"nodeType":"YulExpressionStatement","src":"22663:17:44"},{"body":{"nodeType":"YulBlock","src":"22743:77:44","statements":[{"nodeType":"YulVariableDeclaration","src":"22761:12:44","value":{"kind":"number","nodeType":"YulLiteral","src":"22772:1:44","type":"","value":"0"},"variables":[{"name":"_11","nodeType":"YulTypedName","src":"22765:3:44","type":""}]},{"expression":{"arguments":[{"name":"_11","nodeType":"YulIdentifier","src":"22797:3:44"},{"name":"_11","nodeType":"YulIdentifier","src":"22802:3:44"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22790:6:44"},"nodeType":"YulFunctionCall","src":"22790:16:44"},"nodeType":"YulExpressionStatement","src":"22790:16:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"22707:2:44"},{"name":"_9","nodeType":"YulIdentifier","src":"22711:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22703:3:44"},"nodeType":"YulFunctionCall","src":"22703:11:44"},{"name":"_10","nodeType":"YulIdentifier","src":"22716:3:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22699:3:44"},"nodeType":"YulFunctionCall","src":"22699:21:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22722:7:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22696:2:44"},"nodeType":"YulFunctionCall","src":"22696:34:44"},"nodeType":"YulIf","src":"22693:127:44"},{"expression":{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"22872:2:44"},{"name":"_10","nodeType":"YulIdentifier","src":"22876:3:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22868:3:44"},"nodeType":"YulFunctionCall","src":"22868:12:44"},{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"22886:5:44"},{"name":"_1","nodeType":"YulIdentifier","src":"22893:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22882:3:44"},"nodeType":"YulFunctionCall","src":"22882:14:44"},{"name":"_9","nodeType":"YulIdentifier","src":"22898:2:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22833:34:44"},"nodeType":"YulFunctionCall","src":"22833:68:44"},"nodeType":"YulExpressionStatement","src":"22833:68:44"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"22921:3:44"},{"name":"array","nodeType":"YulIdentifier","src":"22926:5:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22914:6:44"},"nodeType":"YulFunctionCall","src":"22914:18:44"},"nodeType":"YulExpressionStatement","src":"22914:18:44"},{"nodeType":"YulAssignment","src":"22945:19:44","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"22956:3:44"},{"name":"_1","nodeType":"YulIdentifier","src":"22961:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22952:3:44"},"nodeType":"YulFunctionCall","src":"22952:12:44"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"22945:3:44"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22119:3:44"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"22124:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22116:2:44"},"nodeType":"YulFunctionCall","src":"22116:15:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22132:23:44","statements":[{"nodeType":"YulAssignment","src":"22134:19:44","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22145:3:44"},{"name":"_1","nodeType":"YulIdentifier","src":"22150:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22141:3:44"},"nodeType":"YulFunctionCall","src":"22141:12:44"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"22134:3:44"}]}]},"pre":{"nodeType":"YulBlock","src":"22112:3:44","statements":[]},"src":"22108:866:44"},{"nodeType":"YulAssignment","src":"22983:15:44","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"22993:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22983:6:44"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21409:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21420:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21432:6:44","type":""}],"src":"21328:1676:44"},{"body":{"nodeType":"YulBlock","src":"23238:218:44","statements":[{"nodeType":"YulVariableDeclaration","src":"23248:27:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23268:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23262:5:44"},"nodeType":"YulFunctionCall","src":"23262:13:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"23252:6:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23323:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"23331:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23319:3:44"},"nodeType":"YulFunctionCall","src":"23319:17:44"},{"name":"pos","nodeType":"YulIdentifier","src":"23338:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"23343:6:44"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"23284:34:44"},"nodeType":"YulFunctionCall","src":"23284:66:44"},"nodeType":"YulExpressionStatement","src":"23284:66:44"},{"nodeType":"YulVariableDeclaration","src":"23359:29:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23376:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"23381:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23372:3:44"},"nodeType":"YulFunctionCall","src":"23372:16:44"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"23363:5:44","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"23404:5:44"},{"hexValue":"2e7363726f6c6c","kind":"string","nodeType":"YulLiteral","src":"23411:9:44","type":"","value":".scroll"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23397:6:44"},"nodeType":"YulFunctionCall","src":"23397:24:44"},"nodeType":"YulExpressionStatement","src":"23397:24:44"},{"nodeType":"YulAssignment","src":"23430:20:44","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"23441:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"23448:1:44","type":"","value":"7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23437:3:44"},"nodeType":"YulFunctionCall","src":"23437:13:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23430:3:44"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_57ae72296e25032322448e68a0e7df77959fa47379785e14db110b4b10b9a238__to_t_string_memory_ptr_t_bytes7__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23214:3:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23219:6:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23230:3:44","type":""}],"src":"23009:447:44"},{"body":{"nodeType":"YulBlock","src":"23666:318:44","statements":[{"nodeType":"YulVariableDeclaration","src":"23676:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"23686:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23680:2:44","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23744:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23759:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"23767:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23755:3:44"},"nodeType":"YulFunctionCall","src":"23755:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23737:6:44"},"nodeType":"YulFunctionCall","src":"23737:34:44"},"nodeType":"YulExpressionStatement","src":"23737:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23791:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"23802:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23787:3:44"},"nodeType":"YulFunctionCall","src":"23787:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23811:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"23819:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23807:3:44"},"nodeType":"YulFunctionCall","src":"23807:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23780:6:44"},"nodeType":"YulFunctionCall","src":"23780:43:44"},"nodeType":"YulExpressionStatement","src":"23780:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23843:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"23854:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23839:3:44"},"nodeType":"YulFunctionCall","src":"23839:18:44"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23863:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"23871:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23859:3:44"},"nodeType":"YulFunctionCall","src":"23859:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23832:6:44"},"nodeType":"YulFunctionCall","src":"23832:43:44"},"nodeType":"YulExpressionStatement","src":"23832:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23895:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"23906:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23891:3:44"},"nodeType":"YulFunctionCall","src":"23891:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"23911:3:44","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23884:6:44"},"nodeType":"YulFunctionCall","src":"23884:31:44"},"nodeType":"YulExpressionStatement","src":"23884:31:44"},{"nodeType":"YulAssignment","src":"23924:54:44","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23950:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23962:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"23973:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23958:3:44"},"nodeType":"YulFunctionCall","src":"23958:19:44"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"23932:17:44"},"nodeType":"YulFunctionCall","src":"23932:46:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23924:4:44"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_string_memory_ptr__to_t_address_t_address_t_address_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23611:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23622:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23630:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23638:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23646:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23657:4:44","type":""}],"src":"23461:523:44"},{"body":{"nodeType":"YulBlock","src":"24070:103:44","statements":[{"body":{"nodeType":"YulBlock","src":"24116:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24125:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24128:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24118:6:44"},"nodeType":"YulFunctionCall","src":"24118:12:44"},"nodeType":"YulExpressionStatement","src":"24118:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24091:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"24100:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24087:3:44"},"nodeType":"YulFunctionCall","src":"24087:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"24112:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24083:3:44"},"nodeType":"YulFunctionCall","src":"24083:32:44"},"nodeType":"YulIf","src":"24080:52:44"},{"nodeType":"YulAssignment","src":"24141:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24157:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24151:5:44"},"nodeType":"YulFunctionCall","src":"24151:16:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24141:6:44"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24036:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24047:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24059:6:44","type":""}],"src":"23989:184:44"},{"body":{"nodeType":"YulBlock","src":"24210:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24227:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24230:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24220:6:44"},"nodeType":"YulFunctionCall","src":"24220:88:44"},"nodeType":"YulExpressionStatement","src":"24220:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24324:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24327:4:44","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24317:6:44"},"nodeType":"YulFunctionCall","src":"24317:15:44"},"nodeType":"YulExpressionStatement","src":"24317:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24348:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24351:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24341:6:44"},"nodeType":"YulFunctionCall","src":"24341:15:44"},"nodeType":"YulExpressionStatement","src":"24341:15:44"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"24178:184:44"},{"body":{"nodeType":"YulBlock","src":"24414:88:44","statements":[{"body":{"nodeType":"YulBlock","src":"24445:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24447:16:44"},"nodeType":"YulFunctionCall","src":"24447:18:44"},"nodeType":"YulExpressionStatement","src":"24447:18:44"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24430:5:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24441:1:44","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24437:3:44"},"nodeType":"YulFunctionCall","src":"24437:6:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24427:2:44"},"nodeType":"YulFunctionCall","src":"24427:17:44"},"nodeType":"YulIf","src":"24424:43:44"},{"nodeType":"YulAssignment","src":"24476:20:44","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24487:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"24494:1:44","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24483:3:44"},"nodeType":"YulFunctionCall","src":"24483:13:44"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"24476:3:44"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24396:5:44","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"24406:3:44","type":""}],"src":"24367:135:44"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_contract_IPriceOracle(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IPriceOracle_$4781(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IPriceOracle(value)\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_string(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_string(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_contract_IPriceOracle(value)\n        value2 := value\n    }\n    function abi_encode_tuple_t_struct$_Price_$4765_memory_ptr__to_t_struct$_Price_$4765_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IPriceOracle(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_IPriceOracle(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_array_bytes_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_addresst_uint256t_bytes32t_addresst_array$_t_bytes_calldata_ptr_$dyn_calldata_ptrt_boolt_uint16(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_contract_IPriceOracle(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value_1 := calldataload(add(headStart, 128))\n        validator_revert_contract_IPriceOracle(value_1)\n        value4 := value_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value5_1, value6_1 := abi_decode_array_bytes_calldata_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value5 := value5_1\n        value6 := value6_1\n        let value_2 := calldataload(add(headStart, 192))\n        validator_revert_bool(value_2)\n        value7 := value_2\n        value8 := abi_decode_uint16(add(headStart, 224))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_addresst_uint256t_bytes32t_addresst_array$_t_bytes_calldata_ptr_$dyn_calldata_ptrt_boolt_uint16(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let value := calldataload(add(headStart, 32))\n        validator_revert_contract_IPriceOracle(value)\n        value2 := value\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        let value_1 := calldataload(add(headStart, 128))\n        validator_revert_contract_IPriceOracle(value_1)\n        value5 := value_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_array_bytes_calldata_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n        let value_2 := calldataload(add(headStart, 192))\n        validator_revert_bool(value_2)\n        value8 := value_2\n        value9 := abi_decode_uint16(add(headStart, 224))\n    }\n    function abi_encode_tuple_t_contract$_ReverseRegistrar_$6070__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_INameWrapper_$6534__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IPriceOracle_$4781__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IPriceOracle(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_0d20f9dab246787f8599eac98f253e7599800f7d25f0eb1ccdf4e1fe88cdd5a5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERROR: Prices is zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_uint256_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        tail := abi_encode_string(value0, add(headStart, 128))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, mload(headStart))\n        mstore(add(memPtr, 32), mload(add(headStart, 32)))\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_array_bytes_calldata_dyn_calldata(value, length, pos) -> end\n    {\n        mstore(pos, length)\n        let _1 := 0x20\n        let updated_pos := add(pos, _1)\n        let pos_1 := updated_pos\n        pos := updated_pos\n        let tail := add(pos_1, shl(5, length))\n        let srcPtr := value\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, pos_1))\n            let rel_offset_of_tail := calldataload(srcPtr)\n            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), value), not(30)))) { revert(0, 0) }\n            let value_1 := add(rel_offset_of_tail, value)\n            let length_1 := calldataload(value_1)\n            let value_2 := add(value_1, _1)\n            if gt(length_1, 0xffffffffffffffff) { revert(0, 0) }\n            if sgt(value_2, sub(calldatasize(), length_1)) { revert(0, 0) }\n            tail := abi_encode_bytes_calldata(value_2, length_1, tail)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        end := tail\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_bytes32_t_address_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_t_bool_t_uint16__to_t_bytes32_t_address_t_uint256_t_bytes32_t_address_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bool_t_uint16__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        mstore(headStart, value0)\n        let _2 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _2))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, _2))\n        mstore(add(headStart, 160), _1)\n        tail := abi_encode_array_bytes_calldata_dyn_calldata(value5, value6, add(headStart, _1))\n        mstore(add(headStart, 192), iszero(iszero(value7)))\n        mstore(add(headStart, 224), and(value8, 0xffff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_address_t_uint256_t_address_t_uint16__to_t_string_memory_ptr_t_address_t_uint256_t_address_t_uint16__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 160))\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value2, _1))\n        mstore(add(headStart, 64), value3)\n        mstore(add(headStart, 96), and(value4, _1))\n        mstore(add(headStart, 128), and(value5, 0xffff))\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 128))\n        mstore(add(headStart, 32), value2)\n        mstore(add(headStart, 64), value3)\n        mstore(add(headStart, 96), value4)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 96))\n        mstore(add(headStart, 32), value2)\n        mstore(add(headStart, 64), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_524d622c2949bd970096a193a14e38cbc02013b101b84cee977074eae8b4d055__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERROR: Max must be greater than \")\n        mstore(add(headStart, 96), \"0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_77c5dbfe580780d3ca6c71c18cc08361fbe47934562def7d737755ffabe607b1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERROR: UnexpiredCommitmentExists\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0946b459a596337816182edac2ea275fcc985f1d2d06a59a8c54634faab47cc4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"ERROR: CommitmentTooNew\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b155139f4d9af66fe418bbae7016d6081fd7e4aa1c9e91687a03e845c67c18ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"ERROR: Commit to old\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_93aa46ffb1c824c622f14fbb64b4e96e92451c6f04c2d36c76124e75c7832bb1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"ERROR: NameNotAvailable\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68b779a79149660b9f0778d5ad863a8a14900dfe8663fef7c749148c60821a91__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"ERROR: DurationTooShort\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n    function abi_encode_tuple_t_bytes32_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr__to_t_bytes32_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_array_bytes_calldata_dyn_calldata(value1, value2, add(headStart, 64))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, _2)\n            {\n                let _6 := 0\n                revert(_6, _6)\n            }\n            let _7 := add(_3, innerOffset)\n            if iszero(slt(add(_7, 63), dataEnd))\n            {\n                let _8 := 0\n                revert(_8, _8)\n            }\n            let _9 := mload(add(_7, _1))\n            let _10 := 64\n            let array := allocate_memory(array_allocation_size_string(_9))\n            mstore(array, _9)\n            if gt(add(add(_7, _9), _10), dataEnd)\n            {\n                let _11 := 0\n                revert(_11, _11)\n            }\n            copy_memory_to_memory_with_cleanup(add(_7, _10), add(array, _1), _9)\n            mstore(dst, array)\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_57ae72296e25032322448e68a0e7df77959fa47379785e14db110b4b10b9a238__to_t_string_memory_ptr_t_bytes7__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \".scroll\")\n        end := add(end_1, 7)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_string_memory_ptr__to_t_address_t_address_t_address_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3826":[{"length":32,"start":1808},{"length":32,"start":3701}],"3831":[{"length":32,"start":901},{"length":32,"start":4511}],"3833":[{"length":32,"start":1118},{"length":32,"start":4031},{"length":32,"start":4648}],"3836":[{"length":32,"start":725},{"length":32,"start":5178}],"3839":[{"length":32,"start":1015},{"length":32,"start":2687},{"length":32,"start":3364}]},"linkReferences":{},"object":"60806040526004361061018b5760003560e01c80638c254c0b116100d6578063aeb8ce9b1161007f578063dc2f786711610059578063dc2f7867146104a0578063f14fcbc8146104c0578063f2fde38b146104e057600080fd5b8063aeb8ce9b1461042c578063ce1e09c01461044c578063d3419bf31461048057600080fd5b80639791c097116100b05780639791c097146103c5578063a8e5fbc0146103e5578063acf1a8411461041957600080fd5b80638c254c0b146103535780638d839ffe146103735780638da5cb5b146103a757600080fd5b806365a69dcf11610138578063808698531161011257806380869853146102c3578063839df9451461030f5780638a95b09f1461033c57600080fd5b806365a69dcf1461027b578063715018a61461029b57806374694a2b146102b057600080fd5b80633ccfd60b116101695780633ccfd60b1461020b57806344d31f06146102205780635d3590d51461025b57600080fd5b806301ffc9a7146101905780631ee0f10d146101c55780633b324790146101e9575b600080fd5b34801561019c57600080fd5b506101b06101ab36600461167b565b610500565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101db60025481565b6040519081526020016101bc565b3480156101f557600080fd5b506102096102043660046116d2565b610599565b005b34801561021757600080fd5b50610209610672565b34801561022c57600080fd5b5061024061023b3660046117b4565b6106af565b604080518251815260209283015192810192909252016101bc565b34801561026757600080fd5b5061020961027636600461180f565b6107e5565b34801561028757600080fd5b506101db6102963660046118c1565b61087f565b3480156102a757600080fd5b5061020961091d565b6102096102be3660046119cc565b610931565b3480156102cf57600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bc565b34801561031b57600080fd5b506101db61032a366004611a9b565b60046020526000908152604090205481565b34801561034857600080fd5b506101db6224ea0081565b34801561035f57600080fd5b506003546102f7906001600160a01b031681565b34801561037f57600080fd5b506101db7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103b357600080fd5b506000546001600160a01b03166102f7565b3480156103d157600080fd5b506101b06103e0366004611ab4565b610c4f565b3480156103f157600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b610209610427366004611af1565b610c65565b34801561043857600080fd5b506101b0610447366004611ab4565b610e2c565b34801561045857600080fd5b506101db7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048c57600080fd5b506001546102f7906001600160a01b031681565b3480156104ac57600080fd5b506102096104bb366004611a9b565b610eef565b3480156104cc57600080fd5b506102096104db366004611a9b565b610fa8565b3480156104ec57600080fd5b506102096104fb3660046116d2565b611044565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061059357507fffffffff0000000000000000000000000000000000000000000000000000000082167fa61a65f000000000000000000000000000000000000000000000000000000000145b92915050565b6105a16110d1565b6001600160a01b0381166105fc5760405162461bcd60e51b815260206004820152601d60248201527f4552524f523a20507269636573206973207a65726f206164647265737300000060448201526064015b60405180910390fd5b600154604080516001600160a01b03928316815291831660208301527f062da1737d3c3a6daed7e4acf0ffe363e818dc36e1c61230cccf0bae9d217d07910160405180910390a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156106ac573d6000803e3d6000fd5b50565b6040805180820190915260008082526020820152835160208501206001546040517fd6e4fa86000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03918216916389fce6199188917f0000000000000000000000000000000000000000000000000000000000000000169063d6e4fa8690602401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611b3d565b87876040518563ffffffff1660e01b815260040161079c9493929190611ba6565b6040805180830381865afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190611bde565b95945050505050565b6107ed6110d1565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190611c2d565b50505050565b885160208a0120600090841580159061089f57506001600160a01b038716155b156108d6576040517fd3f605c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808a8a8a8a8a8a8a8a6040516020016108f799989796959493929190611d05565b604051602081830303815290604052805190602001209150509998505050505050505050565b6109256110d1565b61092f600061112b565b565b60006109768b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92503391506106af9050565b6020810151815191925061098991611d7d565b3410156109a95760405163044044a560e21b815260040160405180910390fd5b610a4c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505089610a478e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8d61087f565b611188565b6040517fa40149820000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a401498290610abe908f908f908f908f908e908b90600401611d90565b6020604051808303816000875af1158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190611b3d565b90508415610b2c57610b2c878d8d604051610b1d929190611dda565b60405180910390208888611355565b8315610b7557610b758c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92503391506114389050565b896001600160a01b03168c8c604051610b8f929190611dda565b60405180910390207f69e37f151eb98a09618ddaa80c8cfaf1ce5996867c489f45b555b412271ebf278e8e8660000151876020015187604051610bd6959493929190611dea565b60405180910390a360208201518251610bef9190611d7d565b341115610c41576020820151825133916108fc91610c0d9190611d7d565b610c179034611e1b565b6040518115909202916000818181858888f19350505050158015610c3f573d6000803e3d6000fd5b505b505050505050505050505050565b6000600254610c5d836114ec565b101592915050565b60008383604051610c77929190611dda565b604080519182900382206020601f870181900481028401810190925285835292508291600091610cc6919088908890819084018382808284376000920191909152508892503391506106af9050565b8051909150341015610ceb5760405163044044a560e21b815260040160405180910390fd5b6040517fc475abff00000000000000000000000000000000000000000000000000000000815260048101839052602481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c475abff906044016020604051808303816000875af1158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190611b3d565b8251909150341115610de157815133906108fc90610db79034611e1b565b6040518115909202916000818181858888f19350505050158015610ddf573d6000803e3d6000fd5b505b837f3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae8888856000015185604051610e1b9493929190611e2e565b60405180910390a250505050505050565b80516020820120600090610e3f83610c4f565b8015610ee857506040517f96e494e8000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906396e494e890602401602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190611c2d565b9392505050565b610ef76110d1565b60008111610f6d5760405162461bcd60e51b815260206004820152602160248201527f4552524f523a204d6178206d7573742062652067726561746572207468616e2060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016105f3565b60028190556040518181527f0f520d1e728b5fb14adcc70f7ae7771acffba622d7aa24f66d1493075da5e8ab9060200160405180910390a150565b6000818152600460205260409020544290610fe4907f000000000000000000000000000000000000000000000000000000000000000090611d7d565b106110315760405162461bcd60e51b815260206004820181905260248201527f4552524f523a20556e65787069726564436f6d6d69746d656e7445786973747360448201526064016105f3565b6000908152600460205260409020429055565b61104c6110d1565b6001600160a01b0381166110c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105f3565b6106ac8161112b565b6000546001600160a01b0316331461092f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f3565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008181526004602052604090205442906111c4907f000000000000000000000000000000000000000000000000000000000000000090611d7d565b106112115760405162461bcd60e51b815260206004820152601760248201527f4552524f523a20436f6d6d69746d656e74546f6f4e657700000000000000000060448201526064016105f3565b600081815260046020526040902054429061124d907f000000000000000000000000000000000000000000000000000000000000000090611d7d565b1161129a5760405162461bcd60e51b815260206004820152601460248201527f4552524f523a20436f6d6d697420746f206f6c6400000000000000000000000060448201526064016105f3565b6112a383610e2c565b6112ef5760405162461bcd60e51b815260206004820152601760248201527f4552524f523a204e616d654e6f74417661696c61626c6500000000000000000060448201526064016105f3565b6000818152600460205260408120556224ea0082116113505760405162461bcd60e51b815260206004820152601760248201527f4552524f523a204475726174696f6e546f6f53686f727400000000000000000060448201526064016105f3565b505050565b604080517fd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa602080830191909152818301869052825180830384018152606083019384905280519101207fe32954eb0000000000000000000000000000000000000000000000000000000090925285906001600160a01b0382169063e32954eb906113e890859088908890606401611e55565b6000604051808303816000875af1158015611407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261142f9190810190611e6f565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a806d6b3383858760405160200161147b9190611f6e565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016114a99493929190611faf565b6020604051808303816000875af11580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190611b3d565b8051600090819081905b8082101561167257600085838151811061151257611512611fed565b01602001516001600160f81b03191690507f800000000000000000000000000000000000000000000000000000000000000081101561155d57611556600184611d7d565b925061165f565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561159a57611556600284611d7d565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156115d757611556600384611d7d565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561161457611556600484611d7d565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561165157611556600584611d7d565b61165c600684611d7d565b92505b508261166a81612003565b9350506114f6565b50909392505050565b60006020828403121561168d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ee857600080fd5b6001600160a01b03811681146106ac57600080fd5b6000602082840312156116e457600080fd5b8135610ee8816116bd565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561172e5761172e6116ef565b604052919050565b600067ffffffffffffffff821115611750576117506116ef565b50601f01601f191660200190565b600082601f83011261176f57600080fd5b813561178261177d82611736565b611705565b81815284602083860101111561179757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156117c957600080fd5b833567ffffffffffffffff8111156117e057600080fd5b6117ec8682870161175e565b935050602084013591506040840135611804816116bd565b809150509250925092565b60008060006060848603121561182457600080fd5b833561182f816116bd565b9250602084013561183f816116bd565b929592945050506040919091013590565b60008083601f84011261186257600080fd5b50813567ffffffffffffffff81111561187a57600080fd5b6020830191508360208260051b850101111561189557600080fd5b9250929050565b80151581146106ac57600080fd5b803561ffff811681146118bc57600080fd5b919050565b60008060008060008060008060006101008a8c0312156118e057600080fd5b893567ffffffffffffffff808211156118f857600080fd5b6119048d838e0161175e565b9a5060208c01359150611916826116bd565b90985060408b0135975060608b0135965060808b013590611936826116bd565b90955060a08b0135908082111561194c57600080fd5b506119598c828d01611850565b90955093505060c08a013561196d8161189c565b915061197b60e08b016118aa565b90509295985092959850929598565b60008083601f84011261199c57600080fd5b50813567ffffffffffffffff8111156119b457600080fd5b60208301915083602082850101111561189557600080fd5b6000806000806000806000806000806101008b8d0312156119ec57600080fd5b8a3567ffffffffffffffff80821115611a0457600080fd5b611a108e838f0161198a565b909c509a5060208d01359150611a25826116bd565b90985060408c0135975060608c0135965060808c013590611a45826116bd565b90955060a08c01359080821115611a5b57600080fd5b50611a688d828e01611850565b90955093505060c08b0135611a7c8161189c565b9150611a8a60e08c016118aa565b90509295989b9194979a5092959850565b600060208284031215611aad57600080fd5b5035919050565b600060208284031215611ac657600080fd5b813567ffffffffffffffff811115611add57600080fd5b611ae98482850161175e565b949350505050565b600080600060408486031215611b0657600080fd5b833567ffffffffffffffff811115611b1d57600080fd5b611b298682870161198a565b909790965060209590950135949350505050565b600060208284031215611b4f57600080fd5b5051919050565b60005b83811015611b71578181015183820152602001611b59565b50506000910152565b60008151808452611b92816020860160208601611b56565b601f01601f19169290920160200192915050565b608081526000611bb96080830187611b7a565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b600060408284031215611bf057600080fd5b6040516040810181811067ffffffffffffffff82111715611c1357611c136116ef565b604052825181526020928301519281019290925250919050565b600060208284031215611c3f57600080fd5b8151610ee88161189c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015611cf85782840389528135601e19883603018112611cae57600080fd5b8701858101903567ffffffffffffffff811115611cca57600080fd5b803603821315611cd957600080fd5b611ce4868284611c4a565b9a87019a9550505090840190600101611c8d565b5091979650505050505050565b60006101008b83526001600160a01b03808c1660208501528a60408501528960608501528089166080850152508060a0840152611d458184018789611c73565b94151560c0840152505061ffff9190911660e090910152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561059357610593611d67565b60a081526000611da460a08301888a611c4a565b90506001600160a01b03808716602084015285604084015280851660608401525061ffff83166080830152979650505050505050565b8183823760009101908152919050565b608081526000611dfe608083018789611c4a565b602083019590955250604081019290925260609091015292915050565b8181038181111561059357610593611d67565b606081526000611e42606083018688611c4a565b6020830194909452506040015292915050565b8381526040602082015260006107dc604083018486611c73565b60006020808385031215611e8257600080fd5b825167ffffffffffffffff80821115611e9a57600080fd5b818501915085601f830112611eae57600080fd5b815181811115611ec057611ec06116ef565b8060051b611ecf858201611705565b9182528381018501918581019089841115611ee957600080fd5b86860192505b83831015611f6157825185811115611f075760008081fd5b8601603f81018b13611f195760008081fd5b878101516040611f2b61177d83611736565b8281528d82848601011115611f405760008081fd5b611f4f838c8301848701611b56565b85525050509186019190860190611eef565b9998505050505050505050565b60008251611f80818460208701611b56565b7f2e7363726f6c6c00000000000000000000000000000000000000000000000000920191825250600701919050565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152611fe36080830184611b7a565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161201557612015611d67565b506001019056fea2646970667358221220156f9b8545c259c39312f753ee96cbd12cabb5efa88415fb91c51b08a627911864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x18B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C254C0B GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xAEB8CE9B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDC2F7867 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDC2F7867 EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0xF14FCBC8 EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAEB8CE9B EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xCE1E09C0 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0xD3419BF3 EQ PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9791C097 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x9791C097 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xA8E5FBC0 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xACF1A841 EQ PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C254C0B EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x8D839FFE EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65A69DCF GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x80869853 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x80869853 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x839DF945 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x8A95B09F EQ PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65A69DCF EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0x74694A2B EQ PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x44D31F06 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x5D3590D5 EQ PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x1EE0F10D EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x3B324790 EQ PUSH2 0x1E9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x167B JUMP JUMPDEST PUSH2 0x500 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x16D2 JUMP JUMPDEST PUSH2 0x599 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x672 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x23B CALLDATASIZE PUSH1 0x4 PUSH2 0x17B4 JUMP JUMPDEST PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x7E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x91D JUMP JUMPDEST PUSH2 0x209 PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x931 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH3 0x24EA00 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x2F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0xE2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x2F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9B JUMP JUMPDEST PUSH2 0xEEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9B JUMP JUMPDEST PUSH2 0xFA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x16D2 JUMP JUMPDEST PUSH2 0x1044 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x593 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xA61A65F000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5A1 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20507269636573206973207A65726F2061646472657373000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x62DA1737D3C3A6DAED7E4ACF0FFE363E818DC36E1C61230CCCF0BAE9D217D07 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x6AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x20 DUP6 ADD KECCAK256 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD6E4FA8600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 PUSH4 0x89FCE619 SWAP2 DUP9 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0xD6E4FA86 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x757 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST DUP8 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7DC SWAP2 SWAP1 PUSH2 0x1BDE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7ED PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x855 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x879 SWAP2 SWAP1 PUSH2 0x1C2D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP9 MLOAD PUSH1 0x20 DUP11 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP5 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x89F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO JUMPDEST ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD3F605C400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8F7 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x925 PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0x92F PUSH1 0x0 PUSH2 0x112B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x976 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP13 SWAP3 POP CALLER SWAP2 POP PUSH2 0x6AF SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP PUSH2 0x989 SWAP2 PUSH2 0x1D7D JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x9A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA4C DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 PUSH2 0xA47 DUP15 DUP15 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x87F JUMP JUMPDEST PUSH2 0x1188 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA401498200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA4014982 SWAP1 PUSH2 0xABE SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xADD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB01 SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST SWAP1 POP DUP5 ISZERO PUSH2 0xB2C JUMPI PUSH2 0xB2C DUP8 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0xB1D SWAP3 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP9 DUP9 PUSH2 0x1355 JUMP JUMPDEST DUP4 ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB75 DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP12 SWAP3 POP CALLER SWAP2 POP PUSH2 0x1438 SWAP1 POP JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0xB8F SWAP3 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0x69E37F151EB98A09618DDAA80C8CFAF1CE5996867C489F45B555B412271EBF27 DUP15 DUP15 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 MLOAD PUSH2 0xBD6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1DEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x20 DUP3 ADD MLOAD DUP3 MLOAD PUSH2 0xBEF SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST CALLVALUE GT ISZERO PUSH2 0xC41 JUMPI PUSH1 0x20 DUP3 ADD MLOAD DUP3 MLOAD CALLER SWAP2 PUSH2 0x8FC SWAP2 PUSH2 0xC0D SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0xC17 SWAP1 CALLVALUE PUSH2 0x1E1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH2 0xC5D DUP4 PUSH2 0x14EC JUMP JUMPDEST LT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xC77 SWAP3 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x20 PUSH1 0x1F DUP8 ADD DUP2 SWAP1 DIV DUP2 MUL DUP5 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP6 DUP4 MSTORE SWAP3 POP DUP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0xCC6 SWAP2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP CALLER SWAP2 POP PUSH2 0x6AF SWAP1 POP JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP CALLVALUE LT ISZERO PUSH2 0xCEB JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC475ABFF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xC475ABFF SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD99 SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP CALLVALUE GT ISZERO PUSH2 0xDE1 JUMPI DUP2 MLOAD CALLER SWAP1 PUSH2 0x8FC SWAP1 PUSH2 0xDB7 SWAP1 CALLVALUE PUSH2 0x1E1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP4 PUSH32 0x3DA24C024582931CFAF8267D8ED24D13A82A8068D5BD337D30EC45CEA4E506AE DUP9 DUP9 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 MLOAD PUSH2 0xE1B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH2 0xE3F DUP4 PUSH2 0xC4F JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEE8 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x96E494E800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x96E494E8 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEE8 SWAP2 SWAP1 PUSH2 0x1C2D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xEF7 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xF6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A204D6178206D7573742062652067726561746572207468616E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xF520D1E728B5FB14ADCC70F7AE7771ACFFBA622D7AA24F66D1493075DA5E8AB SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0xFE4 SWAP1 PUSH32 0x0 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST LT PUSH2 0x1031 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20556E65787069726564436F6D6D69746D656E74457869737473 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x104C PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0x6AC DUP2 PUSH2 0x112B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x92F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0x11C4 SWAP1 PUSH32 0x0 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST LT PUSH2 0x1211 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20436F6D6D69746D656E74546F6F4E6577000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0x124D SWAP1 PUSH32 0x0 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST GT PUSH2 0x129A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20436F6D6D697420746F206F6C64000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0x12A3 DUP4 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x12EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A204E616D654E6F74417661696C61626C65000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH3 0x24EA00 DUP3 GT PUSH2 0x1350 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A204475726174696F6E546F6F53686F7274000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xD051E4F8CB1870F877B00266E1292322BEA4C492A9933488E94D7C1A935E8DFA PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP4 DUP5 SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH32 0xE32954EB00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE32954EB SWAP1 PUSH2 0x13E8 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x64 ADD PUSH2 0x1E55 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1407 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x142F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7A806D6B CALLER DUP4 DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x147B SWAP2 SWAP1 PUSH2 0x1F6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14A9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FAF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x879 SWAP2 SWAP1 PUSH2 0x1B3D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x1672 JUMPI PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1512 JUMPI PUSH2 0x1512 PUSH2 0x1FED JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 LT ISZERO PUSH2 0x155D JUMPI PUSH2 0x1556 PUSH1 0x1 DUP5 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 POP PUSH2 0x165F JUMP JUMPDEST PUSH32 0xE000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x159A JUMPI PUSH2 0x1556 PUSH1 0x2 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH32 0xF000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x15D7 JUMPI PUSH2 0x1556 PUSH1 0x3 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH32 0xF800000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x1614 JUMPI PUSH2 0x1556 PUSH1 0x4 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH32 0xFC00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND LT ISZERO PUSH2 0x1651 JUMPI PUSH2 0x1556 PUSH1 0x5 DUP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x165C PUSH1 0x6 DUP5 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 POP JUMPDEST POP DUP3 PUSH2 0x166A DUP2 PUSH2 0x2003 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x14F6 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x168D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEE8 DUP2 PUSH2 0x16BD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x172E JUMPI PUSH2 0x172E PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1750 JUMPI PUSH2 0x1750 PUSH2 0x16EF JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1782 PUSH2 0x177D DUP3 PUSH2 0x1736 JUMP JUMPDEST PUSH2 0x1705 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17EC DUP7 DUP3 DUP8 ADD PUSH2 0x175E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1804 DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x182F DUP2 PUSH2 0x16BD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x183F DUP2 PUSH2 0x16BD JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x187A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x18BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x18E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1904 DUP14 DUP4 DUP15 ADD PUSH2 0x175E JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1916 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP1 PUSH2 0x1936 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x194C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1959 DUP13 DUP3 DUP14 ADD PUSH2 0x1850 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD PUSH2 0x196D DUP2 PUSH2 0x189C JUMP JUMPDEST SWAP2 POP PUSH2 0x197B PUSH1 0xE0 DUP12 ADD PUSH2 0x18AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x199C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A10 DUP15 DUP4 DUP16 ADD PUSH2 0x198A JUMP JUMPDEST SWAP1 SWAP13 POP SWAP11 POP PUSH1 0x20 DUP14 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1A25 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP9 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP8 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP7 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP1 PUSH2 0x1A45 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 SWAP6 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A68 DUP14 DUP3 DUP15 ADD PUSH2 0x1850 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD PUSH2 0x1A7C DUP2 PUSH2 0x189C JUMP JUMPDEST SWAP2 POP PUSH2 0x1A8A PUSH1 0xE0 DUP13 ADD PUSH2 0x18AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AE9 DUP5 DUP3 DUP6 ADD PUSH2 0x175E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B29 DUP7 DUP3 DUP8 ADD PUSH2 0x198A JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B71 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B59 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B92 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1BB9 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1B7A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1C13 JUMPI PUSH2 0x1C13 PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEE8 DUP2 PUSH2 0x189C JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP6 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP5 PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1CF8 JUMPI DUP3 DUP5 SUB DUP10 MSTORE DUP2 CALLDATALOAD PUSH1 0x1E NOT DUP9 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1CAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 ADD DUP6 DUP2 ADD SWAP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x1CD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CE4 DUP7 DUP3 DUP5 PUSH2 0x1C4A JUMP JUMPDEST SWAP11 DUP8 ADD SWAP11 SWAP6 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1C8D JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP12 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND PUSH1 0x20 DUP6 ADD MSTORE DUP11 PUSH1 0x40 DUP6 ADD MSTORE DUP10 PUSH1 0x60 DUP6 ADD MSTORE DUP1 DUP10 AND PUSH1 0x80 DUP6 ADD MSTORE POP DUP1 PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1D45 DUP2 DUP5 ADD DUP8 DUP10 PUSH2 0x1C73 JUMP JUMPDEST SWAP5 ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE POP POP PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0xE0 SWAP1 SWAP2 ADD MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x593 JUMPI PUSH2 0x593 PUSH2 0x1D67 JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DA4 PUSH1 0xA0 DUP4 ADD DUP9 DUP11 PUSH2 0x1C4A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP6 PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH2 0xFFFF DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DFE PUSH1 0x80 DUP4 ADD DUP8 DUP10 PUSH2 0x1C4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x593 JUMPI PUSH2 0x593 PUSH2 0x1D67 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1E42 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1C4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x7DC PUSH1 0x40 DUP4 ADD DUP5 DUP7 PUSH2 0x1C73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1EAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1EC0 JUMPI PUSH2 0x1EC0 PUSH2 0x16EF JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x1ECF DUP6 DUP3 ADD PUSH2 0x1705 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP6 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP7 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x1F61 JUMPI DUP3 MLOAD DUP6 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP7 ADD PUSH1 0x3F DUP2 ADD DUP12 SGT PUSH2 0x1F19 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP8 DUP2 ADD MLOAD PUSH1 0x40 PUSH2 0x1F2B PUSH2 0x177D DUP4 PUSH2 0x1736 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP14 DUP3 DUP5 DUP7 ADD ADD GT ISZERO PUSH2 0x1F40 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F4F DUP4 DUP13 DUP4 ADD DUP5 DUP8 ADD PUSH2 0x1B56 JUMP JUMPDEST DUP6 MSTORE POP POP POP SWAP2 DUP7 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH2 0x1EEF JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F80 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B56 JUMP JUMPDEST PUSH32 0x2E7363726F6C6C00000000000000000000000000000000000000000000000000 SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x7 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1FE3 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1B7A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2015 JUMPI PUSH2 0x2015 PUSH2 0x1D67 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO PUSH16 0x9B8545C259C39312F753EE96CBD12CAB 0xB5 0xEF 0xA8 DUP5 ISZERO 0xFB SWAP2 0xC5 SHL ADDMOD 0xA6 0x27 SWAP2 XOR PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1325:8308:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7902:238;;;;;;;;;;-1:-1:-1;7902:238:16;;;;;:::i;:::-;;:::i;:::-;;;516:14:44;;509:22;491:41;;479:2;464:18;7902:238:16;;;;;;;;2062:28;;;;;;;;;;;;;;;;;;;689:25:44;;;677:2;662:18;2062:28:16;543:177:44;2800:273:16;;;;;;;;;;-1:-1:-1;2800:273:16;;;;;:::i;:::-;;:::i;:::-;;7804:92;;;;;;;;;;;;;:::i;3823:363::-;;;;;;;;;;-1:-1:-1;3823:363:16;;;;;:::i;:::-;;:::i;:::-;;;;3069:13:44;;3051:32;;3139:4;3127:17;;;3121:24;3099:20;;;3092:54;;;;3024:18;3823:363:16;2859:293:44;633:171:40;;;;;;;;;;-1:-1:-1;633:171:40;;;;;:::i;:::-;;:::i;4508:814:16:-;;;;;;;;;;-1:-1:-1;4508:814:16;;;;;:::i;:::-;;:::i;1824:101:0:-;;;;;;;;;;;;;:::i;5593:1578:16:-;;;;;;:::i;:::-;;:::i;1959:50::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7791:55:44;;;7773:74;;7761:2;7746:18;1959:50:16;7602:251:44;2126:46:16;;;;;;;;;;-1:-1:-1;2126:46:16;;;;;:::i;:::-;;;;;;;;;;;;;;1523:59;;;;;;;;;;;;1575:7;1523:59;;2096:24;;;;;;;;;;-1:-1:-1;2096:24:16;;;;-1:-1:-1;;;;;2096:24:16;;;1865:41;;;;;;;;;;;;;;;1201:85:0;;;;;;;;;;-1:-1:-1;1247:7:0;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;4192:112:16;;;;;;;;;;-1:-1:-1;4192:112:16;;;;;:::i;:::-;;:::i;2015:41::-;;;;;;;;;;;;;;;7177:621;;;;;;:::i;:::-;;:::i;4310:192::-;;;;;;;;;;-1:-1:-1;4310:192:16;;;;;:::i;:::-;;:::i;1912:41::-;;;;;;;;;;;;;;;1833:26;;;;;;;;;;-1:-1:-1;1833:26:16;;;;-1:-1:-1;;;;;1833:26:16;;;2601:193;;;;;;;;;;-1:-1:-1;2601:193:16;;;;;:::i;:::-;;:::i;5328:259::-;;;;;;;;;;-1:-1:-1;5328:259:16;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;7902:238:16:-;7986:4;8021:40;;;8036:25;8021:40;;:112;;-1:-1:-1;8077:56:16;;;8092:41;8077:56;8021:112;8002:131;7902:238;-1:-1:-1;;7902:238:16:o;2800:273::-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;2890:32:16;::::1;2869:108;;;::::0;-1:-1:-1;;;2869:108:16;;10242:2:44;2869:108:16::1;::::0;::::1;10224:21:44::0;10281:2;10261:18;;;10254:30;10320:31;10300:18;;;10293:59;10369:18;;2869:108:16::1;;;;;;;;;3013:6;::::0;2993:46:::1;::::0;;-1:-1:-1;;;;;3013:6:16;;::::1;10633:34:44::0;;10703:15;;;10698:2;10683:18;;10676:43;2993:46:16::1;::::0;10545:18:44;2993:46:16::1;;;;;;;3050:6;:16:::0;;-1:-1:-1;;3050:16:16::1;-1:-1:-1::0;;;;;3050:16:16;;;::::1;::::0;;;::::1;::::0;;2800:273::o;7804:92::-;1247:7:0;1273:6;;7841:48:16;;-1:-1:-1;;;;;1273:6:0;;;;7867:21:16;7841:48;;;;;7867:21;;7841:48;1247:7:0;7841:48:16;7867:21;1273:6:0;7841:48:16;;;;;;;;;;;;;;;;;;;;;7804:92::o;3823:363::-;-1:-1:-1;;;;;;;;;;;;;;;;;4013:22:16;;;;;;4053:6;;4097:32;;;;;;;;689:25:44;;;-1:-1:-1;;;;;4053:6:16;;;;:12;;4013:22;;4097:4;:16;;;;662:18:44;;4097:32:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4143:8;4165:4;4053:126;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4045:134;3823:363;-1:-1:-1;;;;;3823:363:16:o;633:171:40:-;1094:13:0;:11;:13::i;:::-;760:37:40::1;::::0;;;;-1:-1:-1;;;;;12635:55:44;;;760:37:40::1;::::0;::::1;12617:74:44::0;12707:18;;;12700:34;;;760:23:40;::::1;::::0;::::1;::::0;12590:18:44;;760:37:40::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;633:171:::0;;;:::o;4508:814:16:-;4827:22;;;;;;4792:7;;4863:15;;;;;:41;;-1:-1:-1;;;;;;4882:22:16;;;4863:41;4859:113;;;4927:34;;;;;;;;;;;;;;4859:113;5059:5;5086:6;5114:8;5144:6;5172:8;5202:4;;5228:13;5263:20;5027:274;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5000:315;;;;;;4981:334;;;4508:814;;;;;;;;;;;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;5593:1578:16:-;5877:31;5911:37;5921:4;;5911:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5927:8:16;;-1:-1:-1;5937:10:16;;-1:-1:-1;5911:9:16;;-1:-1:-1;5911:37:16:i;:::-;5987:13;;;;5974:10;;5877:71;;-1:-1:-1;5974:26:16;;;:::i;:::-;5962:9;:38;5958:95;;;6023:19;;-1:-1:-1;;;6023:19:16;;;;;;;;;;;5958:95;6063:323;6095:4;;6063:323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6113:8;6135:241;6167:4;;6135:241;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6189:6;6213:8;6239:6;6263:8;6289:4;;6311:13;6342:20;6135:14;:241::i;:::-;6063:18;:323::i;:::-;6415:159;;;;;6397:15;;-1:-1:-1;;;;;6415:11:16;:33;;;;:159;;6462:4;;;;6480:6;;6500:8;;6522;;6544:20;;6415:159;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6397:177;-1:-1:-1;6589:15:16;;6585:97;;6620:51;6632:8;6658:4;;6642:22;;;;;;;:::i;:::-;;;;;;;;6666:4;;6620:11;:51::i;:::-;6696:13;6692:89;;;6725:45;6743:4;;6725:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6749:8:16;;-1:-1:-1;6759:10:16;;-1:-1:-1;6725:17:16;;-1:-1:-1;6725:45:16:i;:::-;6878:6;-1:-1:-1;;;;;6796:187:16;6858:4;;6842:22;;;;;;;:::i;:::-;;;;;;;;6796:187;6824:4;;6898:5;:10;;;6922:5;:13;;;6949:7;6796:187;;;;;;;;;;:::i;:::-;;;;;;;;7024:13;;;;7011:10;;:26;;7024:13;7011:26;:::i;:::-;6998:9;:40;6994:171;;;7126:13;;;;7113:10;;7062;;7054:100;;7113:26;;7126:13;7113:26;:::i;:::-;7100:40;;:9;:40;:::i;:::-;7054:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6994:171;5867:1304;;5593:1578;;;;;;;;;;:::o;4192:112::-;4248:4;4288:9;;4271:13;:4;:11;:13::i;:::-;:26;;;4192:112;-1:-1:-1;;4192:112:16:o;7177:621::-;7290:17;7326:4;;7310:22;;;;;;;:::i;:::-;;;;;;;;;;7422:37;;;;;;;;;;;;;;;;;;;7310:22;-1:-1:-1;7310:22:16;;7342:15;;7422:37;;7310:22;7432:4;;;;;;7422:37;;7432:4;;;;7422:37;;;;;;;;;-1:-1:-1;7438:8:16;;-1:-1:-1;7448:10:16;;-1:-1:-1;7422:9:16;;-1:-1:-1;7422:37:16:i;:::-;7485:10;;7388:71;;-1:-1:-1;7473:9:16;:22;7469:79;;;7518:19;;-1:-1:-1;;;7518:19:16;;;;;;;;;;;7469:79;7575:36;;;;;;;;17277:25:44;;;17318:18;;;17311:34;;;7557:15:16;;7575:11;-1:-1:-1;;;;;7575:17:16;;;;17250:18:44;;7575:36:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7638:10;;7557:54;;-1:-1:-1;7626:9:16;:22;7622:105;;;7705:10;;7672;;7664:52;;7693:22;;:9;:22;:::i;:::-;7664:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7622:105;7760:9;7742:49;7754:4;;7771:5;:10;;;7783:7;7742:49;;;;;;;;;:::i;:::-;;;;;;;;7280:518;;;;7177:621;;;:::o;4310:192::-;4411:22;;;;;;4379:4;;4450:11;4427:4;4450:5;:11::i;:::-;:45;;;;-1:-1:-1;4465:30:16;;;;;;;;689:25:44;;;4465:4:16;-1:-1:-1;;;;;4465:14:16;;;;662:18:44;;4465:30:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4443:52;4310:192;-1:-1:-1;;;4310:192:16:o;2601:193::-;1094:13:0;:11;:13::i;:::-;2681:1:16::1;2674:4;:8;2666:54;;;::::0;-1:-1:-1;;;2666:54:16;;17951:2:44;2666:54:16::1;::::0;::::1;17933:21:44::0;17990:2;17970:18;;;17963:30;18029:34;18009:18;;;18002:62;18100:3;18080:18;;;18073:31;18121:19;;2666:54:16::1;17749:397:44::0;2666:54:16::1;2730:9;:16:::0;;;2761:26:::1;::::0;689:25:44;;;2761:26:16::1;::::0;677:2:44;662:18;2761:26:16::1;;;;;;;2601:193:::0;:::o;5328:259::-;5411:23;;;;:11;:23;;;;;;5456:15;;5411:42;;5437:16;;5411:42;:::i;:::-;:60;5390:139;;;;-1:-1:-1;;;5390:139:16;;18353:2:44;5390:139:16;;;18335:21:44;;;18372:18;;;18365:30;18431:34;18411:18;;;18404:62;18483:18;;5390:139:16;18151:356:44;5390:139:16;5539:23;;;;:11;:23;;;;;5565:15;5539:41;;5328:259::o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;18714:2:44;2154:73:0::1;::::0;::::1;18696:21:44::0;18753:2;18733:18;;;18726:30;18792:34;18772:18;;;18765:62;18863:8;18843:18;;;18836:36;18889:19;;2154:73:0::1;18512:402:44::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;1359:130::-:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;19121:2:44;1414:68:0;;;19103:21:44;;;19140:18;;;19133:30;19199:34;19179:18;;;19172:62;19251:18;;1414:68:0;18919:356:44;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;8176:801:16:-;8416:23;;;;:11;:23;;;;;;8461:15;;8416:42;;8442:16;;8416:42;:::i;:::-;:60;8395:130;;;;-1:-1:-1;;;8395:130:16;;19482:2:44;8395:130:16;;;19464:21:44;19521:2;19501:18;;;19494:30;19560:25;19540:18;;;19533:53;19603:18;;8395:130:16;19280:347:44;8395:130:16;8630:23;;;;:11;:23;;;;;;8675:15;;8630:42;;8656:16;;8630:42;:::i;:::-;:60;8609:127;;;;-1:-1:-1;;;8609:127:16;;19834:2:44;8609:127:16;;;19816:21:44;19873:2;19853:18;;;19846:30;19912:22;19892:18;;;19885:50;19952:18;;8609:127:16;19632:344:44;8609:127:16;8754:15;8764:4;8754:9;:15::i;:::-;8746:51;;;;-1:-1:-1;;;8746:51:16;;20183:2:44;8746:51:16;;;20165:21:44;20222:2;20202:18;;;20195:30;20261:25;20241:18;;;20234:53;20304:18;;8746:51:16;19981:347:44;8746:51:16;8816:23;;;;:11;:23;;;;;8808:32;1575:7;8872:36;;8851:106;;;;-1:-1:-1;;;8851:106:16;;20535:2:44;8851:106:16;;;20517:21:44;20574:2;20554:18;;;20547:30;20613:25;20593:18;;;20586:53;20656:18;;8851:106:16;20333:347:44;8851:106:16;8176:801;;;:::o;8983:354::-;9184:33;;;1632:66;9184:33;;;;20842:19:44;;;;20877:12;;;20870:28;;;9184:33:16;;;;;;;;;20914:12:44;;;9184:33:16;;;;9174:44;;;;;9283:47;;;;9257:15;;-1:-1:-1;;;;;9283:31:16;;;;;:47;;9174:44;;9325:4;;;;9283:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9283:47:16;;;;;;;;;;;;:::i;:::-;;9106:231;;8983:354;;;;:::o;9343:288::-;9473:16;-1:-1:-1;;;;;9473:31:16;;9518:10;9542:6;9562:8;9598:4;9584:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;9473:151;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;222:622:22:-;362:15;;278:7;;;;;;387:431;405:10;401:1;:14;387:431;;;438:8;455:1;458;449:11;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;449:11:22;;-1:-1:-1;478:8:22;;;474:334;;;506:6;511:1;506:6;;:::i;:::-;;;474:334;;;537:8;-1:-1:-1;;;;;;537:8:22;;;533:275;;;565:6;570:1;565:6;;:::i;533:275::-;596:8;-1:-1:-1;;;;;;596:8:22;;;592:216;;;624:6;629:1;624:6;;:::i;592:216::-;655:8;-1:-1:-1;;;;;;655:8:22;;;651:157;;;683:6;688:1;683:6;;:::i;651:157::-;714:8;-1:-1:-1;;;;;;714:8:22;;;710:98;;;742:6;747:1;742:6;;:::i;710:98::-;787:6;792:1;787:6;;:::i;:::-;;;710:98;-1:-1:-1;417:5:22;;;;:::i;:::-;;;;387:431;;;-1:-1:-1;834:3:22;;222:622;-1:-1:-1;;;222:622:22:o;14:332:44:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:168;-1:-1:-1;;;;;818:5:44;814:54;807:5;804:65;794:93;;883:1;880;873:12;898:282;978:6;1031:2;1019:9;1010:7;1006:23;1002:32;999:52;;;1047:1;1044;1037:12;999:52;1086:9;1073:23;1105:45;1144:5;1105:45;:::i;1185:184::-;-1:-1:-1;;;1234:1:44;1227:88;1334:4;1331:1;1324:15;1358:4;1355:1;1348:15;1374:275;1445:2;1439:9;1510:2;1491:13;;-1:-1:-1;;1487:27:44;1475:40;;1545:18;1530:34;;1566:22;;;1527:62;1524:88;;;1592:18;;:::i;:::-;1628:2;1621:22;1374:275;;-1:-1:-1;1374:275:44:o;1654:187::-;1703:4;1736:18;1728:6;1725:30;1722:56;;;1758:18;;:::i;:::-;-1:-1:-1;1824:2:44;1803:15;-1:-1:-1;;1799:29:44;1830:4;1795:40;;1654:187::o;1846:464::-;1889:5;1942:3;1935:4;1927:6;1923:17;1919:27;1909:55;;1960:1;1957;1950:12;1909:55;1996:6;1983:20;2027:49;2043:32;2072:2;2043:32;:::i;:::-;2027:49;:::i;:::-;2101:2;2092:7;2085:19;2147:3;2140:4;2135:2;2127:6;2123:15;2119:26;2116:35;2113:55;;;2164:1;2161;2154:12;2113:55;2229:2;2222:4;2214:6;2210:17;2203:4;2194:7;2190:18;2177:55;2277:1;2252:16;;;2270:4;2248:27;2241:38;;;;2256:7;1846:464;-1:-1:-1;;;1846:464:44:o;2315:539::-;2402:6;2410;2418;2471:2;2459:9;2450:7;2446:23;2442:32;2439:52;;;2487:1;2484;2477:12;2439:52;2527:9;2514:23;2560:18;2552:6;2549:30;2546:50;;;2592:1;2589;2582:12;2546:50;2615;2657:7;2648:6;2637:9;2633:22;2615:50;:::i;:::-;2605:60;;;2712:2;2701:9;2697:18;2684:32;2674:42;;2766:2;2755:9;2751:18;2738:32;2779:45;2818:5;2779:45;:::i;:::-;2843:5;2833:15;;;2315:539;;;;;:::o;3157:484::-;3234:6;3242;3250;3303:2;3291:9;3282:7;3278:23;3274:32;3271:52;;;3319:1;3316;3309:12;3271:52;3358:9;3345:23;3377:45;3416:5;3377:45;:::i;:::-;3441:5;-1:-1:-1;3498:2:44;3483:18;;3470:32;3511:47;3470:32;3511:47;:::i;:::-;3157:484;;3577:7;;-1:-1:-1;;;3631:2:44;3616:18;;;;3603:32;;3157:484::o;3646:374::-;3716:8;3726:6;3780:3;3773:4;3765:6;3761:17;3757:27;3747:55;;3798:1;3795;3788:12;3747:55;-1:-1:-1;3821:20:44;;3864:18;3853:30;;3850:50;;;3896:1;3893;3886:12;3850:50;3933:4;3925:6;3921:17;3909:29;;3993:3;3986:4;3976:6;3973:1;3969:14;3961:6;3957:27;3953:38;3950:47;3947:67;;;4010:1;4007;4000:12;3947:67;3646:374;;;;;:::o;4025:118::-;4111:5;4104:13;4097:21;4090:5;4087:32;4077:60;;4133:1;4130;4123:12;4148:159;4215:20;;4275:6;4264:18;;4254:29;;4244:57;;4297:1;4294;4287:12;4244:57;4148:159;;;:::o;4312:1328::-;4478:6;4486;4494;4502;4510;4518;4526;4534;4542;4595:3;4583:9;4574:7;4570:23;4566:33;4563:53;;;4612:1;4609;4602:12;4563:53;4652:9;4639:23;4681:18;4722:2;4714:6;4711:14;4708:34;;;4738:1;4735;4728:12;4708:34;4761:50;4803:7;4794:6;4783:9;4779:22;4761:50;:::i;:::-;4751:60;;4861:2;4850:9;4846:18;4833:32;4820:45;;4874;4913:5;4874:45;:::i;:::-;4938:5;;-1:-1:-1;4990:2:44;4975:18;;4962:32;;-1:-1:-1;5041:2:44;5026:18;;5013:32;;-1:-1:-1;5097:3:44;5082:19;;5069:33;;5111:47;5069:33;5111:47;:::i;:::-;5177:7;;-1:-1:-1;5237:3:44;5222:19;;5209:33;;5254:16;;;5251:36;;;5283:1;5280;5273:12;5251:36;;5322:79;5393:7;5382:8;5371:9;5367:24;5322:79;:::i;:::-;5420:8;;-1:-1:-1;5296:105:44;-1:-1:-1;;5507:3:44;5492:19;;5479:33;5521:30;5479:33;5521:30;:::i;:::-;5570:7;-1:-1:-1;5596:38:44;5629:3;5614:19;;5596:38;:::i;:::-;5586:48;;4312:1328;;;;;;;;;;;:::o;5827:348::-;5879:8;5889:6;5943:3;5936:4;5928:6;5924:17;5920:27;5910:55;;5961:1;5958;5951:12;5910:55;-1:-1:-1;5984:20:44;;6027:18;6016:30;;6013:50;;;6059:1;6056;6049:12;6013:50;6096:4;6088:6;6084:17;6072:29;;6148:3;6141:4;6132:6;6124;6120:19;6116:30;6113:39;6110:59;;;6165:1;6162;6155:12;6180:1417;6348:6;6356;6364;6372;6380;6388;6396;6404;6412;6420;6473:3;6461:9;6452:7;6448:23;6444:33;6441:53;;;6490:1;6487;6480:12;6441:53;6530:9;6517:23;6559:18;6600:2;6592:6;6589:14;6586:34;;;6616:1;6613;6606:12;6586:34;6655:59;6706:7;6697:6;6686:9;6682:22;6655:59;:::i;:::-;6733:8;;-1:-1:-1;6629:85:44;-1:-1:-1;6818:2:44;6803:18;;6790:32;;-1:-1:-1;6831:45:44;6790:32;6831:45;:::i;:::-;6895:5;;-1:-1:-1;6947:2:44;6932:18;;6919:32;;-1:-1:-1;6998:2:44;6983:18;;6970:32;;-1:-1:-1;7054:3:44;7039:19;;7026:33;;7068:47;7026:33;7068:47;:::i;:::-;7134:7;;-1:-1:-1;7194:3:44;7179:19;;7166:33;;7211:16;;;7208:36;;;7240:1;7237;7230:12;7208:36;;7279:79;7350:7;7339:8;7328:9;7324:24;7279:79;:::i;:::-;7377:8;;-1:-1:-1;7253:105:44;-1:-1:-1;;7464:3:44;7449:19;;7436:33;7478:30;7436:33;7478:30;:::i;:::-;7527:7;-1:-1:-1;7553:38:44;7586:3;7571:19;;7553:38;:::i;:::-;7543:48;;6180:1417;;;;;;;;;;;;;:::o;7858:180::-;7917:6;7970:2;7958:9;7949:7;7945:23;7941:32;7938:52;;;7986:1;7983;7976:12;7938:52;-1:-1:-1;8009:23:44;;7858:180;-1:-1:-1;7858:180:44:o;8274:322::-;8343:6;8396:2;8384:9;8375:7;8371:23;8367:32;8364:52;;;8412:1;8409;8402:12;8364:52;8452:9;8439:23;8485:18;8477:6;8474:30;8471:50;;;8517:1;8514;8507:12;8471:50;8540;8582:7;8573:6;8562:9;8558:22;8540:50;:::i;:::-;8530:60;8274:322;-1:-1:-1;;;;8274:322:44:o;8853:479::-;8933:6;8941;8949;9002:2;8990:9;8981:7;8977:23;8973:32;8970:52;;;9018:1;9015;9008:12;8970:52;9058:9;9045:23;9091:18;9083:6;9080:30;9077:50;;;9123:1;9120;9113:12;9077:50;9162:59;9213:7;9204:6;9193:9;9189:22;9162:59;:::i;:::-;9240:8;;9136:85;;-1:-1:-1;9322:2:44;9307:18;;;;9294:32;;8853:479;-1:-1:-1;;;;8853:479:44:o;10730:184::-;10800:6;10853:2;10841:9;10832:7;10828:23;10824:32;10821:52;;;10869:1;10866;10859:12;10821:52;-1:-1:-1;10892:16:44;;10730:184;-1:-1:-1;10730:184:44:o;10919:250::-;11004:1;11014:113;11028:6;11025:1;11022:13;11014:113;;;11104:11;;;11098:18;11085:11;;;11078:39;11050:2;11043:10;11014:113;;;-1:-1:-1;;11161:1:44;11143:16;;11136:27;10919:250::o;11174:271::-;11216:3;11254:5;11248:12;11281:6;11276:3;11269:19;11297:76;11366:6;11359:4;11354:3;11350:14;11343:4;11336:5;11332:16;11297:76;:::i;:::-;11427:2;11406:15;-1:-1:-1;;11402:29:44;11393:39;;;;11434:4;11389:50;;11174:271;-1:-1:-1;;11174:271:44:o;11450:484::-;11683:3;11672:9;11665:22;11646:4;11704:46;11745:3;11734:9;11730:19;11722:6;11704:46;:::i;:::-;11781:2;11766:18;;11759:34;;;;-1:-1:-1;11824:2:44;11809:18;;11802:34;;;;-1:-1:-1;;;;;11872:55:44;11867:2;11852:18;;;11845:83;11696:54;11450:484;-1:-1:-1;11450:484:44:o;11939:499::-;12032:6;12085:2;12073:9;12064:7;12060:23;12056:32;12053:52;;;12101:1;12098;12091:12;12053:52;12134:2;12128:9;12176:2;12168:6;12164:15;12245:6;12233:10;12230:22;12209:18;12197:10;12194:34;12191:62;12188:88;;;12256:18;;:::i;:::-;12292:2;12285:22;12331:16;;12316:32;;12402:2;12387:18;;;12381:25;12364:15;;;12357:50;;;;-1:-1:-1;12323:6:44;11939:499;-1:-1:-1;11939:499:44:o;12745:245::-;12812:6;12865:2;12853:9;12844:7;12840:23;12836:32;12833:52;;;12881:1;12878;12871:12;12833:52;12913:9;12907:16;12932:28;12954:5;12932:28;:::i;12995:266::-;13083:6;13078:3;13071:19;13135:6;13128:5;13121:4;13116:3;13112:14;13099:43;-1:-1:-1;13187:1:44;13162:16;;;13180:4;13158:27;;;13151:38;;;;13243:2;13222:15;;;-1:-1:-1;;13218:29:44;13209:39;;;13205:50;;12995:266::o;13266:1067::-;13373:6;13368:3;13361:19;13343:3;13399:4;13440:2;13435:3;13431:12;13465:11;13492;13485:18;;13542:6;13539:1;13535:14;13528:5;13524:26;13512:38;;13573:5;13596:1;13606:701;13620:6;13617:1;13614:13;13606:701;;;13691:5;13685:4;13681:16;13676:3;13669:29;13750:6;13737:20;13840:2;13836:7;13828:5;13812:14;13808:26;13804:40;13784:18;13780:65;13770:93;;13859:1;13856;13849:12;13770:93;13891:30;;13999:16;;;;13950:21;14044:18;14031:32;;14028:52;;;14076:1;14073;14066:12;14028:52;14129:8;14113:14;14109:29;14100:7;14096:43;14093:63;;;14152:1;14149;14142:12;14093:63;14177:50;14222:4;14212:8;14203:7;14177:50;:::i;:::-;14285:12;;;;14169:58;-1:-1:-1;;;14250:15:44;;;;13642:1;13635:9;13606:701;;;-1:-1:-1;14323:4:44;;13266:1067;-1:-1:-1;;;;;;;13266:1067:44:o;14338:938::-;14698:4;14727:3;14757:6;14746:9;14739:25;-1:-1:-1;;;;;14873:2:44;14865:6;14861:15;14856:2;14845:9;14841:18;14834:43;14913:6;14908:2;14897:9;14893:18;14886:34;14956:6;14951:2;14940:9;14936:18;14929:34;15012:2;15004:6;15000:15;14994:3;14983:9;14979:19;14972:44;;15053:2;15047:3;15036:9;15032:19;15025:31;15073:80;15149:2;15138:9;15134:18;15126:6;15118;15073:80;:::i;:::-;15197:14;;15190:22;15184:3;15169:19;;15162:51;-1:-1:-1;;15262:6:44;15250:19;;;;15244:3;15229:19;;;15222:48;15065:88;14338:938;-1:-1:-1;;;;;;;14338:938:44:o;15281:184::-;-1:-1:-1;;;15330:1:44;15323:88;15430:4;15427:1;15420:15;15454:4;15451:1;15444:15;15470:125;15535:9;;;15556:10;;;15553:36;;;15569:18;;:::i;15600:623::-;15869:3;15858:9;15851:22;15832:4;15890:62;15947:3;15936:9;15932:19;15924:6;15916;15890:62;:::i;:::-;15882:70;;-1:-1:-1;;;;;16061:2:44;16053:6;16049:15;16044:2;16033:9;16029:18;16022:43;16101:6;16096:2;16085:9;16081:18;16074:34;16156:2;16148:6;16144:15;16139:2;16128:9;16124:18;16117:43;;16209:6;16201;16197:19;16191:3;16180:9;16176:19;16169:48;15600:623;;;;;;;;;:::o;16228:271::-;16411:6;16403;16398:3;16385:33;16367:3;16437:16;;16462:13;;;16437:16;16228:271;-1:-1:-1;16228:271:44:o;16504:461::-;16747:3;16736:9;16729:22;16710:4;16768:62;16825:3;16814:9;16810:19;16802:6;16794;16768:62;:::i;:::-;16861:2;16846:18;;16839:34;;;;-1:-1:-1;16904:2:44;16889:18;;16882:34;;;;16947:2;16932:18;;;16925:34;16760:70;16504:461;-1:-1:-1;;16504:461:44:o;16970:128::-;17037:9;;;17058:11;;;17055:37;;;17072:18;;:::i;17356:388::-;17571:2;17560:9;17553:21;17534:4;17591:61;17648:2;17637:9;17633:18;17625:6;17617;17591:61;:::i;:::-;17683:2;17668:18;;17661:34;;;;-1:-1:-1;17726:2:44;17711:18;17704:34;17583:69;17356:388;-1:-1:-1;;17356:388:44:o;20937:386::-;21174:6;21163:9;21156:25;21217:2;21212;21201:9;21197:18;21190:30;21137:4;21237:80;21313:2;21302:9;21298:18;21290:6;21282;21237:80;:::i;21328:1676::-;21432:6;21463:2;21506;21494:9;21485:7;21481:23;21477:32;21474:52;;;21522:1;21519;21512:12;21474:52;21555:9;21549:16;21584:18;21625:2;21617:6;21614:14;21611:34;;;21641:1;21638;21631:12;21611:34;21679:6;21668:9;21664:22;21654:32;;21724:7;21717:4;21713:2;21709:13;21705:27;21695:55;;21746:1;21743;21736:12;21695:55;21775:2;21769:9;21797:2;21793;21790:10;21787:36;;;21803:18;;:::i;:::-;21849:2;21846:1;21842:10;21872:28;21896:2;21892;21888:11;21872:28;:::i;:::-;21934:15;;;22004:11;;;22000:20;;;21965:12;;;;22032:19;;;22029:39;;;22064:1;22061;22054:12;22029:39;22096:2;22092;22088:11;22077:22;;22108:866;22124:6;22119:3;22116:15;22108:866;;;22203:3;22197:10;22239:2;22226:11;22223:19;22220:109;;;22283:1;22312:2;22308;22301:14;22220:109;22352:20;;22407:2;22399:11;;22395:25;-1:-1:-1;22385:123:44;;22462:1;22491:2;22487;22480:14;22385:123;22545:2;22541;22537:11;22531:18;22573:2;22601:49;22617:32;22646:2;22617:32;:::i;22601:49::-;22677:2;22670:5;22663:17;22722:7;22716:3;22711:2;22707;22703:11;22699:21;22696:34;22693:127;;;22772:1;22802:3;22797;22790:16;22693:127;22833:68;22898:2;22893;22886:5;22882:14;22876:3;22872:2;22868:12;22833:68;:::i;:::-;22914:18;;-1:-1:-1;;;22141:12:44;;;;22952;;;;22108:866;;;22993:5;21328:1676;-1:-1:-1;;;;;;;;;21328:1676:44:o;23009:447::-;23230:3;23268:6;23262:13;23284:66;23343:6;23338:3;23331:4;23323:6;23319:17;23284:66;:::i;:::-;23411:9;23372:16;;23397:24;;;-1:-1:-1;23448:1:44;23437:13;;23009:447;-1:-1:-1;23009:447:44:o;23461:523::-;23657:4;-1:-1:-1;;;;;23767:2:44;23759:6;23755:15;23744:9;23737:34;23819:2;23811:6;23807:15;23802:2;23791:9;23787:18;23780:43;23871:2;23863:6;23859:15;23854:2;23843:9;23839:18;23832:43;;23911:3;23906:2;23895:9;23891:18;23884:31;23932:46;23973:3;23962:9;23958:19;23950:6;23932:46;:::i;:::-;23924:54;23461:523;-1:-1:-1;;;;;;23461:523:44:o;24178:184::-;-1:-1:-1;;;24227:1:44;24220:88;24327:4;24324:1;24317:15;24351:4;24348:1;24341:15;24367:135;24406:3;24427:17;;;24424:43;;24447:18;;:::i;:::-;-1:-1:-1;24494:1:44;24483:13;;24367:135::o"},"gasEstimates":{"creation":{"codeDepositCost":"1654800","executionCost":"infinite","totalCost":"infinite"},"external":{"MIN_REGISTRATION_DURATION()":"284","available(string)":"infinite","commit(bytes32)":"infinite","commitments(bytes32)":"2505","makeCommitment(string,address,uint256,bytes32,address,bytes[],bool,uint16)":"infinite","maxCommitmentAge()":"infinite","maxLenght()":"2364","minCommitmentAge()":"infinite","nameWrapper()":"infinite","owner()":"2421","prices()":"2426","recoverFunds(address,address,uint256)":"infinite","register(string,address,uint256,bytes32,address,bytes[],bool,uint16)":"infinite","renew(string,uint256)":"infinite","renounceOwnership()":"infinite","rentPrice(string,uint256,address)":"infinite","reverseRegistrar()":"infinite","setMaxLength(uint256)":"25620","setPrice(address)":"30304","supportsInterface(bytes4)":"416","transferOwnership(address)":"infinite","valid(string)":"infinite","walletDev()":"2383","withdraw()":"infinite"},"internal":{"_consumeCommitment(string memory,uint256,bytes32)":"infinite","_setRecords(address,bytes32,bytes calldata[] calldata)":"infinite","_setReverseRecord(string memory,address,address)":"infinite"}},"methodIdentifiers":{"MIN_REGISTRATION_DURATION()":"8a95b09f","available(string)":"aeb8ce9b","commit(bytes32)":"f14fcbc8","commitments(bytes32)":"839df945","makeCommitment(string,address,uint256,bytes32,address,bytes[],bool,uint16)":"65a69dcf","maxCommitmentAge()":"ce1e09c0","maxLenght()":"1ee0f10d","minCommitmentAge()":"8d839ffe","nameWrapper()":"a8e5fbc0","owner()":"8da5cb5b","prices()":"d3419bf3","recoverFunds(address,address,uint256)":"5d3590d5","register(string,address,uint256,bytes32,address,bytes[],bool,uint16)":"74694a2b","renew(string,uint256)":"acf1a841","renounceOwnership()":"715018a6","rentPrice(string,uint256,address)":"44d31f06","reverseRegistrar()":"80869853","setMaxLength(uint256)":"dc2f7867","setPrice(address)":"3b324790","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","valid(string)":"9791c097","walletDev()":"8c254c0b","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BaseRegistrarImplementation\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"contract ReverseRegistrar\",\"name\":\"_reverseRegistrar\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitmentAgeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitmentAgeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverRequiredWhenDataSupplied\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPrice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPrice\",\"type\":\"address\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"reverseRecord\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"reverseRecord\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rentPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseRegistrar\",\"outputs\":[{\"internalType\":\"contract ReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"_prices\",\"type\":\"address\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A registrar controller for registering and renewing names at fixed cost.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverFunds(address,address,uint256)\":{\"details\":\"The contract is Ownable and only the owner can call the recover function.\",\"params\":{\"_amount\":\"The amount of tokens to recover.\",\"_to\":\"The address to send the tokens to.\",\"_token\":\"The address of the ERC20 token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverFunds(address,address,uint256)\":{\"notice\":\"Recover ERC20 tokens sent to the contract by mistake.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/ETHRegistrarController.sol\":\"ETHRegistrarController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ethregistrar/BaseRegistrarImplementation.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseRegistrarImplementation is ERC721, IBaseRegistrar, Ownable {\\n    // A map of expiry times\\n    mapping(uint256 => uint256) expiries;\\n    // The ENS registry\\n    ENS public ens;\\n    // The namehash of the TLD this registrar owns (eg, .eth)\\n    bytes32 public baseNode;\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address => bool) public controllers;\\n    uint256 public constant GRACE_PERIOD = 90 days;\\n    bytes4 private constant INTERFACE_META_ID =\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 private constant ERC721_ID =\\n        bytes4(\\n            keccak256(\\\"balanceOf(address)\\\") ^\\n                keccak256(\\\"ownerOf(uint256)\\\") ^\\n                keccak256(\\\"approve(address,uint256)\\\") ^\\n                keccak256(\\\"getApproved(uint256)\\\") ^\\n                keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n                keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n                keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n        );\\n    bytes4 private constant RECLAIM_ID =\\n        bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n\\n    /**\\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view override returns (bool) {\\n        address _owner = ownerOf(tokenId);\\n        return (spender == _owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(_owner, spender));\\n    }\\n\\n    constructor(ENS _ens, bytes32 _baseNode) ERC721(\\\"\\\", \\\"\\\") {\\n        ens = _ens;\\n        baseNode = _baseNode;\\n    }\\n\\n    modifier live() {\\n        require(ens.owner(baseNode) == address(this));\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(controllers[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID. Names become unowned\\n     *      when their registration expires.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view override(IERC721, ERC721) returns (address) {\\n        require(expiries[tokenId] > block.timestamp);\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external override onlyOwner {\\n        controllers[controller] = true;\\n        emit ControllerAdded(controller);\\n    }\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external override onlyOwner {\\n        controllers[controller] = false;\\n        emit ControllerRemoved(controller);\\n    }\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external override onlyOwner {\\n        ens.setResolver(baseNode, resolver);\\n    }\\n\\n    // Returns the expiration timestamp of the specified id.\\n    function nameExpires(uint256 id) external view override returns (uint256) {\\n        return expiries[id];\\n    }\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public view override returns (bool) {\\n        // Not available if it's registered here or in its grace period.\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external override returns (uint256) {\\n        return _register(id, _owner, duration, true);\\n    }\\n\\n    /**\\n     * @dev Register a name, without modifying the registry.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function registerOnly(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external returns (uint256) {\\n        return _register(id, _owner, duration, false);\\n    }\\n\\n    function _register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration,\\n        bool updateRegistry\\n    ) internal live onlyController returns (uint256) {\\n        require(available(id));\\n        require(\\n            block.timestamp + duration + GRACE_PERIOD >\\n                block.timestamp + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] = block.timestamp + duration;\\n        if (_exists(id)) {\\n            // Name was previously owned, and expired\\n            _burn(id);\\n        }\\n        _mint(_owner, id);\\n        if (updateRegistry) {\\n            ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n        }\\n\\n        emit NameRegistered(id, _owner, block.timestamp + duration);\\n\\n        return block.timestamp + duration;\\n        // return 0;\\n    }\\n\\n    function renew(\\n        uint256 id,\\n        uint256 duration\\n    ) external override live onlyController returns (uint256) {\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\n        require(\\n            expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] += duration;\\n        emit NameRenewed(id, expiries[id]);\\n        return expiries[id];\\n    }\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address _owner) external override live {\\n        require(_isApprovedOrOwner(msg.sender, id));\\n        ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view override(ERC721, IERC165) returns (bool) {\\n        return\\n            interfaceID == INTERFACE_META_ID ||\\n            interfaceID == ERC721_ID ||\\n            interfaceID == RECLAIM_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xe37ce2b399a3e944483b0fe97ac570512fd27ab64b10e10f953381503d3b4c3e\"},\"contracts/ethregistrar/ETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport {BaseRegistrarImplementation} from \\\"./BaseRegistrarImplementation.sol\\\";\\nimport {StringUtils} from \\\"./StringUtils.sol\\\";\\nimport {Resolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {ReverseRegistrar} from \\\"../reverseRegistrar/ReverseRegistrar.sol\\\";\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\nimport {IETHRegistrarController, IPriceOracle} from \\\"./IETHRegistrarController.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\nimport {ERC20Recoverable} from \\\"../utils/ERC20Recoverable.sol\\\";\\n\\nerror CommitmentTooNew(bytes32 commitment);\\nerror CommitmentTooOld(bytes32 commitment);\\nerror NameNotAvailable(string name);\\nerror DurationTooShort(uint256 duration);\\nerror ResolverRequiredWhenDataSupplied();\\nerror UnexpiredCommitmentExists(bytes32 commitment);\\nerror InsufficientValue();\\nerror Unauthorised(bytes32 node);\\nerror MaxCommitmentAgeTooLow();\\nerror MaxCommitmentAgeTooHigh();\\n\\n/**\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\n */\\ncontract ETHRegistrarController is\\n    Ownable,\\n    IETHRegistrarController,\\n    IERC165,\\n    ERC20Recoverable,\\n    ReverseClaimer\\n{\\n    using StringUtils for *;\\n    using Address for address;\\n\\n    uint256 public constant MIN_REGISTRATION_DURATION = 28 days;\\n    bytes32 private constant ETH_NODE =\\n        0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa; // namehash('scroll')\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\n    BaseRegistrarImplementation immutable base;\\n    IPriceOracle public prices;\\n    uint256 public immutable minCommitmentAge;\\n    uint256 public immutable maxCommitmentAge;\\n    ReverseRegistrar public immutable reverseRegistrar;\\n    INameWrapper public immutable nameWrapper;\\n    uint256 public maxLenght = 3;\\n    address public walletDev;\\n    mapping(bytes32 => uint256) public commitments;\\n\\n    event NameRegistered(\\n        string name,\\n        bytes32 indexed label,\\n        address indexed owner,\\n        uint256 baseCost,\\n        uint256 premium,\\n        uint256 expires\\n    );\\n\\n    event NameRenewed(\\n        string name,\\n        bytes32 indexed label,\\n        uint256 cost,\\n        uint256 expires\\n    );\\n\\n    event PriceChange(address oldPrice, address newPrice);\\n\\n    event ChangeMaxLength(uint256 max);\\n\\n    function setMaxLength(uint256 _max) external onlyOwner {\\n        require(_max > 0, \\\"ERROR: Max must be greater than 0\\\");\\n        maxLenght = _max;\\n        emit ChangeMaxLength(maxLenght);\\n    }\\n\\n    function setPrice(IPriceOracle _prices) external onlyOwner {\\n        require(\\n            address(_prices) != address(0x0),\\n            \\\"ERROR: Prices is zero address\\\"\\n        );\\n\\n        emit PriceChange(address(prices), address(_prices));\\n\\n        prices = _prices;\\n    }\\n\\n    constructor(\\n        BaseRegistrarImplementation _base,\\n        IPriceOracle _prices,\\n        uint256 _minCommitmentAge,\\n        uint256 _maxCommitmentAge,\\n        ReverseRegistrar _reverseRegistrar,\\n        INameWrapper _nameWrapper,\\n        ENS _ens\\n    ) ReverseClaimer(_ens, msg.sender) {\\n        if (_maxCommitmentAge <= _minCommitmentAge) {\\n            revert MaxCommitmentAgeTooLow();\\n        }\\n\\n        if (_maxCommitmentAge > block.timestamp) {\\n            revert MaxCommitmentAgeTooHigh();\\n        }\\n\\n        base = _base;\\n        prices = _prices;\\n        minCommitmentAge = _minCommitmentAge;\\n        maxCommitmentAge = _maxCommitmentAge;\\n        reverseRegistrar = _reverseRegistrar;\\n        nameWrapper = _nameWrapper;\\n    }\\n\\n    function rentPrice(\\n        string memory name,\\n        uint256 duration,\\n        address user\\n    ) public view override returns (IPriceOracle.Price memory price) {\\n        bytes32 label = keccak256(bytes(name));\\n        price = prices.price(\\n            name,\\n            base.nameExpires(uint256(label)),\\n            duration,\\n            user\\n        );\\n    }\\n\\n    function valid(string memory name) public view returns (bool) {\\n        return name.strlen() >= maxLenght;\\n    }\\n\\n    function available(string memory name) public view override returns (bool) {\\n        bytes32 label = keccak256(bytes(name));\\n        return valid(name) && base.available(uint256(label));\\n    }\\n\\n    function makeCommitment(\\n        string memory name,\\n        address _owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) public pure override returns (bytes32) {\\n        bytes32 label = keccak256(bytes(name));\\n        if (data.length > 0 && resolver == address(0)) {\\n            revert ResolverRequiredWhenDataSupplied();\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    label,\\n                    _owner,\\n                    duration,\\n                    secret,\\n                    resolver,\\n                    data,\\n                    reverseRecord,\\n                    ownerControlledFuses\\n                )\\n            );\\n    }\\n\\n    function commit(bytes32 commitment) public override {\\n        require(\\n            commitments[commitment] + maxCommitmentAge < block.timestamp,\\n            \\\"ERROR: UnexpiredCommitmentExists\\\"\\n        );\\n        commitments[commitment] = block.timestamp;\\n    }\\n\\n    function register(\\n        string calldata name,\\n        address _owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) public payable override {\\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\\n        if (msg.value < price.base + price.premium) {\\n            revert InsufficientValue();\\n        }\\n\\n        _consumeCommitment(\\n            name,\\n            duration,\\n            makeCommitment(\\n                name,\\n                _owner,\\n                duration,\\n                secret,\\n                resolver,\\n                data,\\n                reverseRecord,\\n                ownerControlledFuses\\n            )\\n        );\\n\\n        uint256 expires = nameWrapper.registerAndWrapETH2LD(\\n            name,\\n            _owner,\\n            duration,\\n            resolver,\\n            ownerControlledFuses\\n        );\\n\\n        if (data.length > 0) {\\n            _setRecords(resolver, keccak256(bytes(name)), data);\\n        }\\n\\n        if (reverseRecord) {\\n            _setReverseRecord(name, resolver, msg.sender);\\n        }\\n\\n        emit NameRegistered(\\n            name,\\n            keccak256(bytes(name)),\\n            _owner,\\n            price.base,\\n            price.premium,\\n            expires\\n            // 0\\n        );\\n\\n        if (msg.value > (price.base + price.premium)) {\\n            payable(msg.sender).transfer(\\n                msg.value - (price.base + price.premium)\\n            );\\n        }\\n    }\\n\\n    function renew(\\n        string calldata name,\\n        uint256 duration\\n    ) external payable override {\\n        bytes32 labelhash = keccak256(bytes(name));\\n        uint256 tokenId = uint256(labelhash);\\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\\n        if (msg.value < price.base) {\\n            revert InsufficientValue();\\n        }\\n        uint256 expires = nameWrapper.renew(tokenId, duration);\\n\\n        if (msg.value > price.base) {\\n            payable(msg.sender).transfer(msg.value - price.base);\\n        }\\n\\n        emit NameRenewed(name, labelhash, price.base, expires);\\n    }\\n\\n    function withdraw() public {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) external pure returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IETHRegistrarController).interfaceId;\\n    }\\n\\n    /* Internal functions */\\n\\n    function _consumeCommitment(\\n        string memory name,\\n        uint256 duration,\\n        bytes32 commitment\\n    ) internal {\\n        // if(minCommitmentAge != 0) {\\n        // Require an old enough commitment.\\n        require(\\n            commitments[commitment] + minCommitmentAge < block.timestamp,\\n            \\\"ERROR: CommitmentTooNew\\\"\\n        );\\n\\n        // If the commitment is too old, or the name is registered, stop\\n        require(\\n            commitments[commitment] + maxCommitmentAge > block.timestamp,\\n            \\\"ERROR: Commit to old\\\"\\n        );\\n        require(available(name), \\\"ERROR: NameNotAvailable\\\");\\n\\n        delete (commitments[commitment]);\\n\\n        require(\\n            duration > MIN_REGISTRATION_DURATION,\\n            \\\"ERROR: DurationTooShort\\\"\\n        );\\n        // }\\n    }\\n\\n    function _setRecords(\\n        address resolverAddress,\\n        bytes32 label,\\n        bytes[] calldata data\\n    ) internal {\\n        // use hardcoded .eth namehash\\n        bytes32 nodehash = keccak256(abi.encodePacked(ETH_NODE, label));\\n        Resolver resolver = Resolver(resolverAddress);\\n        resolver.multicallWithNodeCheck(nodehash, data);\\n    }\\n\\n    function _setReverseRecord(\\n        string memory name,\\n        address resolver,\\n        address _owner\\n    ) internal {\\n        reverseRegistrar.setNameForAddr(\\n            msg.sender,\\n            _owner,\\n            resolver,\\n            string.concat(name, \\\".scroll\\\")\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8164bea3d6bb1a57d45af0d2c69b6fd69e68123b849958d8969c495f3071393a\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/ethregistrar/IETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IETHRegistrarController {\\n    function rentPrice(\\n        string memory,\\n        uint256,\\n        address\\n    ) external view returns (IPriceOracle.Price memory);\\n\\n    function available(string memory) external returns (bool);\\n\\n    function makeCommitment(\\n        string memory,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32) external;\\n\\n    function register(\\n        string calldata,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external payable;\\n\\n    function renew(string calldata, uint256) external payable;\\n}\\n\",\"keccak256\":\"0x86368c7f22a817e407e757759fc22ca41171a75ce05abb0d721d1f1df02469ae\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    //    struct scrollToken {\\n    //        uint256 minAmount;\\n    //        uint256 maxRentTime;\\n    //    }\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration,\\n        address user\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x09c26233169d97f180cd7ad3cd1e9bd837554e6244b82c0e44637a79b02fb866\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setApprovalForAll(address, bool) external;\\n\\n    function approve(bytes32 node, address delegate, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external;\\n\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) external;\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xfc77ab6b7c59c3ebfe1c720bdebf9b08c2488ff7ac9501a9aa056c5d6d5b50c5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address _owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, _owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(\\n        address _owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param _owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, _owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a94f7a4478af1bcc9d3ac657dece4df9f0134cff1c1b52e0f230998fdd154b7\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(address nft,uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6249b6a2195ec9aa5d87f5abddac5d0de45aa3ac067fb969e4bc096226f4c246\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/ethregistrar/ETHRegistrarController.sol:ETHRegistrarController","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3829,"contract":"contracts/ethregistrar/ETHRegistrarController.sol:ETHRegistrarController","label":"prices","offset":0,"slot":"1","type":"t_contract(IPriceOracle)4781"},{"astId":3842,"contract":"contracts/ethregistrar/ETHRegistrarController.sol:ETHRegistrarController","label":"maxLenght","offset":0,"slot":"2","type":"t_uint256"},{"astId":3844,"contract":"contracts/ethregistrar/ETHRegistrarController.sol:ETHRegistrarController","label":"walletDev","offset":0,"slot":"3","type":"t_address"},{"astId":3848,"contract":"contracts/ethregistrar/ETHRegistrarController.sol:ETHRegistrarController","label":"commitments","offset":0,"slot":"4","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IPriceOracle)4781":{"encoding":"inplace","label":"contract IPriceOracle","numberOfBytes":"20"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"recoverFunds(address,address,uint256)":{"notice":"Recover ERC20 tokens sent to the contract by mistake."}},"version":1}}},"contracts/ethregistrar/IBaseRegistrar.sol":{"IBaseRegistrar":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"}],"name":"ControllerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"}],"name":"ControllerRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameMigrated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRenewed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"controller","type":"address"}],"name":"addController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"available","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"nameExpires","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"reclaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"register","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"}],"name":"removeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"reclaim(uint256,address)":{"details":"Reclaim ownership of a name in ENS, if you own it in the registrar."},"register(uint256,address,uint256)":{"details":"Register a name."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addController(address)":"a7fc7a07","approve(address,uint256)":"095ea7b3","available(uint256)":"96e494e8","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","nameExpires(uint256)":"d6e4fa86","ownerOf(uint256)":"6352211e","reclaim(uint256,address)":"28ed4f6c","register(uint256,address,uint256)":"fca247ac","removeController(address)":"f6a74ed7","renew(uint256,uint256)":"c475abff","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setResolver(address)":"4e543b26","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nameExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"reclaim(uint256,address)\":{\"details\":\"Reclaim ownership of a name in ENS, if you own it in the registrar.\"},\"register(uint256,address,uint256)\":{\"details\":\"Register a name.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/IBaseRegistrar.sol\":\"IBaseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/IBulkRenewal.sol":{"IBulkRenewal":{"abi":[{"inputs":[{"internalType":"string[]","name":"names","type":"string[]"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renewAll","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string[]","name":"names","type":"string[]"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"rentPrice","outputs":[{"internalType":"uint256","name":"total","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"renewAll(string[],uint256)":"e8d6dbb4","rentPrice(string[],uint256,address)":"591ebfb4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/IBulkRenewal.sol\":\"IBulkRenewal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/ethregistrar/IBulkRenewal.sol\":{\"content\":\"interface IBulkRenewal {\\n    function rentPrice(\\n        string[] calldata names,\\n        uint256 duration,\\n        address user\\n    ) external view returns (uint256 total);\\n\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xaaaab2037d3a98a51698b1cc77957de00491709610f621667b5f0b38657abfeb\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/IETHRegistrarController.sol":{"IETHRegistrarController":{"abi":[{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"available","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"commit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"},{"internalType":"bytes[]","name":"","type":"bytes[]"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"makeCommitment","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"},{"internalType":"bytes[]","name":"","type":"bytes[]"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"register","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"renew","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"rentPrice","outputs":[{"components":[{"internalType":"uint256","name":"base","type":"uint256"},{"internalType":"uint256","name":"premium","type":"uint256"}],"internalType":"struct IPriceOracle.Price","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"available(string)":"aeb8ce9b","commit(bytes32)":"f14fcbc8","makeCommitment(string,address,uint256,bytes32,address,bytes[],bool,uint16)":"65a69dcf","register(string,address,uint256,bytes32,address,bytes[],bool,uint16)":"74694a2b","renew(string,uint256)":"acf1a841","rentPrice(string,uint256,address)":"44d31f06"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rentPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/IETHRegistrarController.sol\":\"IETHRegistrarController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/ethregistrar/IETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IETHRegistrarController {\\n    function rentPrice(\\n        string memory,\\n        uint256,\\n        address\\n    ) external view returns (IPriceOracle.Price memory);\\n\\n    function available(string memory) external returns (bool);\\n\\n    function makeCommitment(\\n        string memory,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32) external;\\n\\n    function register(\\n        string calldata,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external payable;\\n\\n    function renew(string calldata, uint256) external payable;\\n}\\n\",\"keccak256\":\"0x86368c7f22a817e407e757759fc22ca41171a75ce05abb0d721d1f1df02469ae\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    //    struct scrollToken {\\n    //        uint256 minAmount;\\n    //        uint256 maxRentTime;\\n    //    }\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration,\\n        address user\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x09c26233169d97f180cd7ad3cd1e9bd837554e6244b82c0e44637a79b02fb866\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/IPriceOracle.sol":{"IPriceOracle":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"expires","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"price","outputs":[{"components":[{"internalType":"uint256","name":"base","type":"uint256"},{"internalType":"uint256","name":"premium","type":"uint256"}],"internalType":"struct IPriceOracle.Price","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"price(string,uint256,uint256,address)":{"details":"Returns the price to register or renew a name.","params":{"duration":"How long the name is being registered or extended for, in seconds.","expires":"When the name presently expires (0 if this is a new registration).","name":"The name being registered or renewed."},"returns":{"_0":"base premium tuple of base price + premium price"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"price(string,uint256,uint256,address)":"89fce619"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"price(string,uint256,uint256,address)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/IPriceOracle.sol\":\"IPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    //    struct scrollToken {\\n    //        uint256 minAmount;\\n    //        uint256 maxRentTime;\\n    //    }\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration,\\n        address user\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x09c26233169d97f180cd7ad3cd1e9bd837554e6244b82c0e44637a79b02fb866\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/StaticBulkRenewal.sol":{"StaticBulkRenewal":{"abi":[{"inputs":[{"internalType":"contract ETHRegistrarController","name":"_controller","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string[]","name":"names","type":"string[]"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renewAll","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string[]","name":"names","type":"string[]"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"rentPrice","outputs":[{"internalType":"uint256","name":"total","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4803":{"entryPoint":null,"id":4803,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_ETHRegistrarController_$4564_fromMemory":{"entryPoint":84,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:337:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"126:209:44","statements":[{"body":{"nodeType":"YulBlock","src":"172:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"181:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"184:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"174:6:44"},"nodeType":"YulFunctionCall","src":"174:12:44"},"nodeType":"YulExpressionStatement","src":"174:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"147:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"156:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"143:3:44"},"nodeType":"YulFunctionCall","src":"143:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"168:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"139:3:44"},"nodeType":"YulFunctionCall","src":"139:32:44"},"nodeType":"YulIf","src":"136:52:44"},{"nodeType":"YulVariableDeclaration","src":"197:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"216:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:44"},"nodeType":"YulFunctionCall","src":"210:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"201:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"289:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"298:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"301:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"291:6:44"},"nodeType":"YulFunctionCall","src":"291:12:44"},"nodeType":"YulExpressionStatement","src":"291:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"248:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"259:5:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"279:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"270:3:44"},"nodeType":"YulFunctionCall","src":"270:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"283:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"266:3:44"},"nodeType":"YulFunctionCall","src":"266:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"255:3:44"},"nodeType":"YulFunctionCall","src":"255:31:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"245:2:44"},"nodeType":"YulFunctionCall","src":"245:42:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"238:6:44"},"nodeType":"YulFunctionCall","src":"238:50:44"},"nodeType":"YulIf","src":"235:70:44"},{"nodeType":"YulAssignment","src":"314:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"324:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"314:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_ETHRegistrarController_$4564_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"92:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"103:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"115:6:44","type":""}],"src":"14:321:44"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_ETHRegistrarController_$4564_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161074938038061074983398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6106b6806100936000396000f3fe6080604052600436106100345760003560e01c806301ffc9a714610039578063591ebfb41461006e578063e8d6dbb41461009c575b600080fd5b34801561004557600080fd5b506100596100543660046103be565b6100b1565b60405190151581526020015b60405180910390f35b34801561007a57600080fd5b5061008e610089366004610453565b61014a565b604051908152602001610065565b6100af6100aa3660046104cb565b61021b565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061014457507fffffffff0000000000000000000000000000000000000000000000000000000082167fb1c8640000000000000000000000000000000000000000000000000000000000145b92915050565b600083815b81811015610211576000805473ffffffffffffffffffffffffffffffffffffffff166344d31f0689898581811061018857610188610517565b905060200281019061019a919061052d565b89896040518563ffffffff1660e01b81526004016101bb949392919061059d565b6040805180830381865afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb91906105de565b602081015190510193909301925060010161014f565b5050949350505050565b816000805b82811015610389576000805473ffffffffffffffffffffffffffffffffffffffff166344d31f0688888581811061025957610259610517565b905060200281019061026b919061052d565b88336040518563ffffffff1660e01b815260040161028c949392919061059d565b6040805180830381865afa1580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc91906105de565b90506000816020015182600001516102e4919061063b565b60005490915073ffffffffffffffffffffffffffffffffffffffff1663acf1a841828a8a8781811061031857610318610517565b905060200281019061032a919061052d565b8a6040518563ffffffff1660e01b81526004016103499392919061065c565b6000604051808303818588803b15801561036257600080fd5b505af1158015610376573d6000803e3d6000fd5b5050509190940193505050600101610220565b5060405133904780156108fc02916000818181858888f193505050501580156103b6573d6000803e3d6000fd5b505050505050565b6000602082840312156103d057600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461040057600080fd5b9392505050565b60008083601f84011261041957600080fd5b50813567ffffffffffffffff81111561043157600080fd5b6020830191508360208260051b850101111561044c57600080fd5b9250929050565b6000806000806060858703121561046957600080fd5b843567ffffffffffffffff81111561048057600080fd5b61048c87828801610407565b90955093505060208501359150604085013573ffffffffffffffffffffffffffffffffffffffff811681146104c057600080fd5b939692955090935050565b6000806000604084860312156104e057600080fd5b833567ffffffffffffffff8111156104f757600080fd5b61050386828701610407565b909790965060209590950135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261054457600080fd5b83018035915067ffffffffffffffff82111561055f57600080fd5b60200191503681900382131561044c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006105b1606083018688610574565b905083602083015273ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b6000604082840312156105f057600080fd5b6040516040810181811067ffffffffffffffff8211171561062157634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b8082018082111561014457634e487b7160e01b600052601160045260246000fd5b604081526000610670604083018587610574565b905082602083015294935050505056fea2646970667358221220032b549c9eaa29b4e73482b08816ec8a87918097dd404c9f51bf7a653a6ee5fb64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x749 CODESIZE SUB DUP1 PUSH2 0x749 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6B6 DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x591EBFB4 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xE8D6DBB4 EQ PUSH2 0x9C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BE JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8E PUSH2 0x89 CALLDATASIZE PUSH1 0x4 PUSH2 0x453 JUMP JUMPDEST PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x65 JUMP JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x144 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xB1C8640000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x211 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x44D31F06 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x188 JUMPI PUSH2 0x188 PUSH2 0x517 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x52D JUMP JUMPDEST DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD ADD SWAP4 SWAP1 SWAP4 ADD SWAP3 POP PUSH1 0x1 ADD PUSH2 0x14F JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x44D31F06 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x259 JUMPI PUSH2 0x259 PUSH2 0x517 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x26B SWAP2 SWAP1 PUSH2 0x52D JUMP JUMPDEST DUP9 CALLER PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CC SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xACF1A841 DUP3 DUP11 DUP11 DUP8 DUP2 DUP2 LT PUSH2 0x318 JUMPI PUSH2 0x318 PUSH2 0x517 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x52D JUMP JUMPDEST DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x349 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x376 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP SWAP2 SWAP1 SWAP5 ADD SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x220 JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48C DUP8 DUP3 DUP9 ADD PUSH2 0x407 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x503 DUP7 DUP3 DUP8 ADD PUSH2 0x407 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5B1 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x574 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x621 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x144 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x670 PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0x574 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB 0x2B SLOAD SWAP13 SWAP15 0xAA 0x29 0xB4 0xE7 CALLVALUE DUP3 0xB0 DUP9 AND 0xEC DUP11 DUP8 SWAP2 DUP1 SWAP8 0xDD BLOCKHASH 0x4C SWAP16 MLOAD 0xBF PUSH27 0x653A6EE5FB64736F6C634300081100330000000000000000000000 ","sourceMap":"222:1667:21:-:0;;;311:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;369:10;:24;;-1:-1:-1;;;;;;369:24:21;-1:-1:-1;;;;;369:24:21;;;;;;;;;;222:1667;;14:321:44;115:6;168:2;156:9;147:7;143:23;139:32;136:52;;;184:1;181;174:12;136:52;210:16;;-1:-1:-1;;;;;255:31:44;;245:42;;235:70;;301:1;298;291:12;235:70;324:5;14:321;-1:-1:-1;;;14:321:44:o;:::-;222:1667:21;;;;;;"},"deployedBytecode":{"functionDebugData":{"@renewAll_4940":{"entryPoint":539,"id":4940,"parameterSlots":3,"returnSlots":0},"@rentPrice_4858":{"entryPoint":330,"id":4858,"parameterSlots":4,"returnSlots":1},"@supportsInterface_4962":{"entryPoint":177,"id":4962,"parameterSlots":1,"returnSlots":1},"abi_decode_array_string_calldata_dyn_calldata":{"entryPoint":1031,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256":{"entryPoint":1227,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256t_address":{"entryPoint":1107,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":958,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory":{"entryPoint":1502,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":1396,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":1628,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed":{"entryPoint":1437,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_string_calldata_ptr":{"entryPoint":1325,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":1595,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":1303,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5055:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:44","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:44"},"nodeType":"YulFunctionCall","src":"131:12:44"},"nodeType":"YulExpressionStatement","src":"131:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:44"},"nodeType":"YulFunctionCall","src":"100:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:44"},"nodeType":"YulFunctionCall","src":"96:32:44"},"nodeType":"YulIf","src":"93:52:44"},{"nodeType":"YulVariableDeclaration","src":"154:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:44"},"nodeType":"YulFunctionCall","src":"167:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:44"},"nodeType":"YulFunctionCall","src":"302:12:44"},"nodeType":"YulExpressionStatement","src":"302:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:44","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:44"},"nodeType":"YulFunctionCall","src":"219:78:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:44"},"nodeType":"YulFunctionCall","src":"209:89:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:44"},"nodeType":"YulFunctionCall","src":"202:97:44"},"nodeType":"YulIf","src":"199:117:44"},{"nodeType":"YulAssignment","src":"325:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:44"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:44","type":""}],"src":"14:332:44"},{"body":{"nodeType":"YulBlock","src":"446:92:44","statements":[{"nodeType":"YulAssignment","src":"456:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:44"},"nodeType":"YulFunctionCall","src":"464:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:44"},"nodeType":"YulFunctionCall","src":"516:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:44"},"nodeType":"YulFunctionCall","src":"509:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:44"},"nodeType":"YulFunctionCall","src":"491:41:44"},"nodeType":"YulExpressionStatement","src":"491:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:44","type":""}],"src":"351:187:44"},{"body":{"nodeType":"YulBlock","src":"635:283:44","statements":[{"body":{"nodeType":"YulBlock","src":"684:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"693:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"696:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"686:6:44"},"nodeType":"YulFunctionCall","src":"686:12:44"},"nodeType":"YulExpressionStatement","src":"686:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"663:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"671:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"659:3:44"},"nodeType":"YulFunctionCall","src":"659:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"678:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"655:3:44"},"nodeType":"YulFunctionCall","src":"655:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"648:6:44"},"nodeType":"YulFunctionCall","src":"648:35:44"},"nodeType":"YulIf","src":"645:55:44"},{"nodeType":"YulAssignment","src":"709:30:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"732:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"719:12:44"},"nodeType":"YulFunctionCall","src":"719:20:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"709:6:44"}]},{"body":{"nodeType":"YulBlock","src":"782:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"791:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"794:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"784:6:44"},"nodeType":"YulFunctionCall","src":"784:12:44"},"nodeType":"YulExpressionStatement","src":"784:12:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"754:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"762:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:44"},"nodeType":"YulFunctionCall","src":"751:30:44"},"nodeType":"YulIf","src":"748:50:44"},{"nodeType":"YulAssignment","src":"807:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"823:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"831:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"819:3:44"},"nodeType":"YulFunctionCall","src":"819:17:44"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"807:8:44"}]},{"body":{"nodeType":"YulBlock","src":"896:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"908:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"898:6:44"},"nodeType":"YulFunctionCall","src":"898:12:44"},"nodeType":"YulExpressionStatement","src":"898:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"859:6:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"871:1:44","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"874:6:44"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"867:3:44"},"nodeType":"YulFunctionCall","src":"867:14:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"855:3:44"},"nodeType":"YulFunctionCall","src":"855:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"884:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"851:3:44"},"nodeType":"YulFunctionCall","src":"851:38:44"},{"name":"end","nodeType":"YulIdentifier","src":"891:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"848:2:44"},"nodeType":"YulFunctionCall","src":"848:47:44"},"nodeType":"YulIf","src":"845:67:44"}]},"name":"abi_decode_array_string_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"598:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"606:3:44","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"614:8:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"624:6:44","type":""}],"src":"543:375:44"},{"body":{"nodeType":"YulBlock","src":"1074:571:44","statements":[{"body":{"nodeType":"YulBlock","src":"1120:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1129:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1132:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1122:6:44"},"nodeType":"YulFunctionCall","src":"1122:12:44"},"nodeType":"YulExpressionStatement","src":"1122:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1095:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1104:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1091:3:44"},"nodeType":"YulFunctionCall","src":"1091:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1116:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1087:3:44"},"nodeType":"YulFunctionCall","src":"1087:32:44"},"nodeType":"YulIf","src":"1084:52:44"},{"nodeType":"YulVariableDeclaration","src":"1145:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1172:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1159:12:44"},"nodeType":"YulFunctionCall","src":"1159:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1149:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1225:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1234:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1237:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1227:6:44"},"nodeType":"YulFunctionCall","src":"1227:12:44"},"nodeType":"YulExpressionStatement","src":"1227:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1197:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1205:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1194:2:44"},"nodeType":"YulFunctionCall","src":"1194:30:44"},"nodeType":"YulIf","src":"1191:50:44"},{"nodeType":"YulVariableDeclaration","src":"1250:104:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1326:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"1337:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1322:3:44"},"nodeType":"YulFunctionCall","src":"1322:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1346:7:44"}],"functionName":{"name":"abi_decode_array_string_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"1276:45:44"},"nodeType":"YulFunctionCall","src":"1276:78:44"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1254:8:44","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1264:8:44","type":""}]},{"nodeType":"YulAssignment","src":"1363:18:44","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1373:8:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1363:6:44"}]},{"nodeType":"YulAssignment","src":"1390:18:44","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1400:8:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1390:6:44"}]},{"nodeType":"YulAssignment","src":"1417:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1444:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1440:3:44"},"nodeType":"YulFunctionCall","src":"1440:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1427:12:44"},"nodeType":"YulFunctionCall","src":"1427:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1417:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1468:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1498:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1509:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:44"},"nodeType":"YulFunctionCall","src":"1494:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1481:12:44"},"nodeType":"YulFunctionCall","src":"1481:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1472:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1599:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1608:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1611:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1601:6:44"},"nodeType":"YulFunctionCall","src":"1601:12:44"},"nodeType":"YulExpressionStatement","src":"1601:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1535:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1546:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"1553:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1542:3:44"},"nodeType":"YulFunctionCall","src":"1542:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1532:2:44"},"nodeType":"YulFunctionCall","src":"1532:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1525:6:44"},"nodeType":"YulFunctionCall","src":"1525:73:44"},"nodeType":"YulIf","src":"1522:93:44"},{"nodeType":"YulAssignment","src":"1624:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1624:6:44"}]}]},"name":"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1016:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1027:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1039:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1047:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1055:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1063:6:44","type":""}],"src":"923:722:44"},{"body":{"nodeType":"YulBlock","src":"1751:76:44","statements":[{"nodeType":"YulAssignment","src":"1761:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1773:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1784:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1769:3:44"},"nodeType":"YulFunctionCall","src":"1769:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1761:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1803:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"1814:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1796:6:44"},"nodeType":"YulFunctionCall","src":"1796:25:44"},"nodeType":"YulExpressionStatement","src":"1796:25:44"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1720:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1731:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1742:4:44","type":""}],"src":"1650:177:44"},{"body":{"nodeType":"YulBlock","src":"1966:391:44","statements":[{"body":{"nodeType":"YulBlock","src":"2012:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2021:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2024:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2014:6:44"},"nodeType":"YulFunctionCall","src":"2014:12:44"},"nodeType":"YulExpressionStatement","src":"2014:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1987:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1996:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1983:3:44"},"nodeType":"YulFunctionCall","src":"1983:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2008:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1979:3:44"},"nodeType":"YulFunctionCall","src":"1979:32:44"},"nodeType":"YulIf","src":"1976:52:44"},{"nodeType":"YulVariableDeclaration","src":"2037:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2064:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2051:12:44"},"nodeType":"YulFunctionCall","src":"2051:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2041:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2117:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2126:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2129:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2119:6:44"},"nodeType":"YulFunctionCall","src":"2119:12:44"},"nodeType":"YulExpressionStatement","src":"2119:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2089:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2097:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2086:2:44"},"nodeType":"YulFunctionCall","src":"2086:30:44"},"nodeType":"YulIf","src":"2083:50:44"},{"nodeType":"YulVariableDeclaration","src":"2142:104:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2218:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"2229:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2214:3:44"},"nodeType":"YulFunctionCall","src":"2214:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2238:7:44"}],"functionName":{"name":"abi_decode_array_string_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"2168:45:44"},"nodeType":"YulFunctionCall","src":"2168:78:44"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2146:8:44","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2156:8:44","type":""}]},{"nodeType":"YulAssignment","src":"2255:18:44","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2265:8:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2255:6:44"}]},{"nodeType":"YulAssignment","src":"2282:18:44","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2292:8:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2282:6:44"}]},{"nodeType":"YulAssignment","src":"2309:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2336:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2332:3:44"},"nodeType":"YulFunctionCall","src":"2332:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2319:12:44"},"nodeType":"YulFunctionCall","src":"2319:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2309:6:44"}]}]},"name":"abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1916:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1927:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1939:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1947:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1955:6:44","type":""}],"src":"1832:525:44"},{"body":{"nodeType":"YulBlock","src":"2394:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2411:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2414:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2404:6:44"},"nodeType":"YulFunctionCall","src":"2404:88:44"},"nodeType":"YulExpressionStatement","src":"2404:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2508:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2511:4:44","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2501:6:44"},"nodeType":"YulFunctionCall","src":"2501:15:44"},"nodeType":"YulExpressionStatement","src":"2501:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2532:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2535:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2525:6:44"},"nodeType":"YulFunctionCall","src":"2525:15:44"},"nodeType":"YulExpressionStatement","src":"2525:15:44"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2362:184:44"},{"body":{"nodeType":"YulBlock","src":"2646:427:44","statements":[{"nodeType":"YulVariableDeclaration","src":"2656:51:44","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"2695:11:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2682:12:44"},"nodeType":"YulFunctionCall","src":"2682:25:44"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"2660:18:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2796:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2805:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2808:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2798:6:44"},"nodeType":"YulFunctionCall","src":"2798:12:44"},"nodeType":"YulExpressionStatement","src":"2798:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"2730:18:44"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"2758:12:44"},"nodeType":"YulFunctionCall","src":"2758:14:44"},{"name":"base_ref","nodeType":"YulIdentifier","src":"2774:8:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2754:3:44"},"nodeType":"YulFunctionCall","src":"2754:29:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2789:2:44","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2785:3:44"},"nodeType":"YulFunctionCall","src":"2785:7:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2750:3:44"},"nodeType":"YulFunctionCall","src":"2750:43:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2726:3:44"},"nodeType":"YulFunctionCall","src":"2726:68:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2719:6:44"},"nodeType":"YulFunctionCall","src":"2719:76:44"},"nodeType":"YulIf","src":"2716:96:44"},{"nodeType":"YulVariableDeclaration","src":"2821:47:44","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"2839:8:44"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"2849:18:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2835:3:44"},"nodeType":"YulFunctionCall","src":"2835:33:44"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"2825:6:44","type":""}]},{"nodeType":"YulAssignment","src":"2877:30:44","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"2900:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2887:12:44"},"nodeType":"YulFunctionCall","src":"2887:20:44"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2877:6:44"}]},{"body":{"nodeType":"YulBlock","src":"2950:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2959:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2962:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2952:6:44"},"nodeType":"YulFunctionCall","src":"2952:12:44"},"nodeType":"YulExpressionStatement","src":"2952:12:44"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2922:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2930:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2919:2:44"},"nodeType":"YulFunctionCall","src":"2919:30:44"},"nodeType":"YulIf","src":"2916:50:44"},{"nodeType":"YulAssignment","src":"2975:25:44","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"2987:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2995:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2983:3:44"},"nodeType":"YulFunctionCall","src":"2983:17:44"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"2975:4:44"}]},{"body":{"nodeType":"YulBlock","src":"3051:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3060:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3063:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3053:6:44"},"nodeType":"YulFunctionCall","src":"3053:12:44"},"nodeType":"YulExpressionStatement","src":"3053:12:44"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"3016:4:44"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"3026:12:44"},"nodeType":"YulFunctionCall","src":"3026:14:44"},{"name":"length","nodeType":"YulIdentifier","src":"3042:6:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3022:3:44"},"nodeType":"YulFunctionCall","src":"3022:27:44"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"3012:3:44"},"nodeType":"YulFunctionCall","src":"3012:38:44"},"nodeType":"YulIf","src":"3009:58:44"}]},"name":"access_calldata_tail_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"2603:8:44","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"2613:11:44","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"2629:4:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"2635:6:44","type":""}],"src":"2551:522:44"},{"body":{"nodeType":"YulBlock","src":"3145:200:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3162:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"3167:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3155:6:44"},"nodeType":"YulFunctionCall","src":"3155:19:44"},"nodeType":"YulExpressionStatement","src":"3155:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3200:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"3205:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3196:3:44"},"nodeType":"YulFunctionCall","src":"3196:14:44"},{"name":"start","nodeType":"YulIdentifier","src":"3212:5:44"},{"name":"length","nodeType":"YulIdentifier","src":"3219:6:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3183:12:44"},"nodeType":"YulFunctionCall","src":"3183:43:44"},"nodeType":"YulExpressionStatement","src":"3183:43:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3250:3:44"},{"name":"length","nodeType":"YulIdentifier","src":"3255:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3246:3:44"},"nodeType":"YulFunctionCall","src":"3246:16:44"},{"kind":"number","nodeType":"YulLiteral","src":"3264:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3242:3:44"},"nodeType":"YulFunctionCall","src":"3242:27:44"},{"kind":"number","nodeType":"YulLiteral","src":"3271:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3235:6:44"},"nodeType":"YulFunctionCall","src":"3235:38:44"},"nodeType":"YulExpressionStatement","src":"3235:38:44"},{"nodeType":"YulAssignment","src":"3282:57:44","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3297:3:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3310:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3318:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3306:3:44"},"nodeType":"YulFunctionCall","src":"3306:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3327:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3323:3:44"},"nodeType":"YulFunctionCall","src":"3323:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3302:3:44"},"nodeType":"YulFunctionCall","src":"3302:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3293:3:44"},"nodeType":"YulFunctionCall","src":"3293:39:44"},{"kind":"number","nodeType":"YulLiteral","src":"3334:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3289:3:44"},"nodeType":"YulFunctionCall","src":"3289:50:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3282:3:44"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"3114:5:44","type":""},{"name":"length","nodeType":"YulTypedName","src":"3121:6:44","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3129:3:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3137:3:44","type":""}],"src":"3078:267:44"},{"body":{"nodeType":"YulBlock","src":"3537:251:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3554:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3565:2:44","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3547:6:44"},"nodeType":"YulFunctionCall","src":"3547:21:44"},"nodeType":"YulExpressionStatement","src":"3547:21:44"},{"nodeType":"YulAssignment","src":"3577:70:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3612:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"3620:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3632:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3643:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3628:3:44"},"nodeType":"YulFunctionCall","src":"3628:18:44"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"3585:26:44"},"nodeType":"YulFunctionCall","src":"3585:62:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3577:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3667:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3678:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3663:3:44"},"nodeType":"YulFunctionCall","src":"3663:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"3683:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3656:6:44"},"nodeType":"YulFunctionCall","src":"3656:34:44"},"nodeType":"YulExpressionStatement","src":"3656:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3710:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3721:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3706:3:44"},"nodeType":"YulFunctionCall","src":"3706:18:44"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"3730:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3738:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3726:3:44"},"nodeType":"YulFunctionCall","src":"3726:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3699:6:44"},"nodeType":"YulFunctionCall","src":"3699:83:44"},"nodeType":"YulExpressionStatement","src":"3699:83:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3482:9:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3493:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3501:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3509:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3517:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3528:4:44","type":""}],"src":"3350:438:44"},{"body":{"nodeType":"YulBlock","src":"3897:549:44","statements":[{"body":{"nodeType":"YulBlock","src":"3943:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3952:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3955:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3945:6:44"},"nodeType":"YulFunctionCall","src":"3945:12:44"},"nodeType":"YulExpressionStatement","src":"3945:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3918:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"3927:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3914:3:44"},"nodeType":"YulFunctionCall","src":"3914:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"3939:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3910:3:44"},"nodeType":"YulFunctionCall","src":"3910:32:44"},"nodeType":"YulIf","src":"3907:52:44"},{"nodeType":"YulVariableDeclaration","src":"3968:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3988:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3982:5:44"},"nodeType":"YulFunctionCall","src":"3982:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3972:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4000:33:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4022:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4030:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4018:3:44"},"nodeType":"YulFunctionCall","src":"4018:15:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4004:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4116:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4137:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4140:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4130:6:44"},"nodeType":"YulFunctionCall","src":"4130:88:44"},"nodeType":"YulExpressionStatement","src":"4130:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4238:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4241:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4231:6:44"},"nodeType":"YulFunctionCall","src":"4231:15:44"},"nodeType":"YulExpressionStatement","src":"4231:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4266:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4269:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4259:6:44"},"nodeType":"YulFunctionCall","src":"4259:15:44"},"nodeType":"YulExpressionStatement","src":"4259:15:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4051:10:44"},{"kind":"number","nodeType":"YulLiteral","src":"4063:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4048:2:44"},"nodeType":"YulFunctionCall","src":"4048:34:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4087:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4099:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4084:2:44"},"nodeType":"YulFunctionCall","src":"4084:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4045:2:44"},"nodeType":"YulFunctionCall","src":"4045:62:44"},"nodeType":"YulIf","src":"4042:242:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4300:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4304:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4293:6:44"},"nodeType":"YulFunctionCall","src":"4293:22:44"},"nodeType":"YulExpressionStatement","src":"4293:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4331:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4345:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4339:5:44"},"nodeType":"YulFunctionCall","src":"4339:16:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4324:6:44"},"nodeType":"YulFunctionCall","src":"4324:32:44"},"nodeType":"YulExpressionStatement","src":"4324:32:44"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4376:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:44"},"nodeType":"YulFunctionCall","src":"4372:15:44"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4399:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4395:3:44"},"nodeType":"YulFunctionCall","src":"4395:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4389:5:44"},"nodeType":"YulFunctionCall","src":"4389:25:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4365:6:44"},"nodeType":"YulFunctionCall","src":"4365:50:44"},"nodeType":"YulExpressionStatement","src":"4365:50:44"},{"nodeType":"YulAssignment","src":"4424:16:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4434:6:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4424:6:44"}]}]},"name":"abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3863:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3874:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3886:6:44","type":""}],"src":"3793:653:44"},{"body":{"nodeType":"YulBlock","src":"4499:231:44","statements":[{"nodeType":"YulAssignment","src":"4509:16:44","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4520:1:44"},{"name":"y","nodeType":"YulIdentifier","src":"4523:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4516:3:44"},"nodeType":"YulFunctionCall","src":"4516:9:44"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4509:3:44"}]},{"body":{"nodeType":"YulBlock","src":"4556:168:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4577:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4580:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4570:6:44"},"nodeType":"YulFunctionCall","src":"4570:88:44"},"nodeType":"YulExpressionStatement","src":"4570:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4678:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4681:4:44","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4671:6:44"},"nodeType":"YulFunctionCall","src":"4671:15:44"},"nodeType":"YulExpressionStatement","src":"4671:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4706:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4709:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4699:6:44"},"nodeType":"YulFunctionCall","src":"4699:15:44"},"nodeType":"YulExpressionStatement","src":"4699:15:44"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4540:1:44"},{"name":"sum","nodeType":"YulIdentifier","src":"4543:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4537:2:44"},"nodeType":"YulFunctionCall","src":"4537:10:44"},"nodeType":"YulIf","src":"4534:190:44"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4482:1:44","type":""},{"name":"y","nodeType":"YulTypedName","src":"4485:1:44","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4491:3:44","type":""}],"src":"4451:279:44"},{"body":{"nodeType":"YulBlock","src":"4894:159:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4911:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4922:2:44","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4904:6:44"},"nodeType":"YulFunctionCall","src":"4904:21:44"},"nodeType":"YulExpressionStatement","src":"4904:21:44"},{"nodeType":"YulAssignment","src":"4934:70:44","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4969:6:44"},{"name":"value1","nodeType":"YulIdentifier","src":"4977:6:44"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4989:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5000:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4985:3:44"},"nodeType":"YulFunctionCall","src":"4985:18:44"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"4942:26:44"},"nodeType":"YulFunctionCall","src":"4942:62:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4934:4:44"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5024:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5035:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5020:3:44"},"nodeType":"YulFunctionCall","src":"5020:18:44"},{"name":"value2","nodeType":"YulIdentifier","src":"5040:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5013:6:44"},"nodeType":"YulFunctionCall","src":"5013:34:44"},"nodeType":"YulExpressionStatement","src":"5013:34:44"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4847:9:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4858:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4866:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4874:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4885:4:44","type":""}],"src":"4735:318:44"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_string_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_string_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value3 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_string_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_string_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 96))\n        mstore(add(headStart, 32), value2)\n        mstore(add(headStart, 64), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_struct$_Price_$4765_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        mstore(64, newFreePtr)\n        mstore(memPtr, mload(headStart))\n        mstore(add(memPtr, 32), mload(add(headStart, 32)))\n        value0 := memPtr\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), value2)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100345760003560e01c806301ffc9a714610039578063591ebfb41461006e578063e8d6dbb41461009c575b600080fd5b34801561004557600080fd5b506100596100543660046103be565b6100b1565b60405190151581526020015b60405180910390f35b34801561007a57600080fd5b5061008e610089366004610453565b61014a565b604051908152602001610065565b6100af6100aa3660046104cb565b61021b565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061014457507fffffffff0000000000000000000000000000000000000000000000000000000082167fb1c8640000000000000000000000000000000000000000000000000000000000145b92915050565b600083815b81811015610211576000805473ffffffffffffffffffffffffffffffffffffffff166344d31f0689898581811061018857610188610517565b905060200281019061019a919061052d565b89896040518563ffffffff1660e01b81526004016101bb949392919061059d565b6040805180830381865afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb91906105de565b602081015190510193909301925060010161014f565b5050949350505050565b816000805b82811015610389576000805473ffffffffffffffffffffffffffffffffffffffff166344d31f0688888581811061025957610259610517565b905060200281019061026b919061052d565b88336040518563ffffffff1660e01b815260040161028c949392919061059d565b6040805180830381865afa1580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc91906105de565b90506000816020015182600001516102e4919061063b565b60005490915073ffffffffffffffffffffffffffffffffffffffff1663acf1a841828a8a8781811061031857610318610517565b905060200281019061032a919061052d565b8a6040518563ffffffff1660e01b81526004016103499392919061065c565b6000604051808303818588803b15801561036257600080fd5b505af1158015610376573d6000803e3d6000fd5b5050509190940193505050600101610220565b5060405133904780156108fc02916000818181858888f193505050501580156103b6573d6000803e3d6000fd5b505050505050565b6000602082840312156103d057600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461040057600080fd5b9392505050565b60008083601f84011261041957600080fd5b50813567ffffffffffffffff81111561043157600080fd5b6020830191508360208260051b850101111561044c57600080fd5b9250929050565b6000806000806060858703121561046957600080fd5b843567ffffffffffffffff81111561048057600080fd5b61048c87828801610407565b90955093505060208501359150604085013573ffffffffffffffffffffffffffffffffffffffff811681146104c057600080fd5b939692955090935050565b6000806000604084860312156104e057600080fd5b833567ffffffffffffffff8111156104f757600080fd5b61050386828701610407565b909790965060209590950135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261054457600080fd5b83018035915067ffffffffffffffff82111561055f57600080fd5b60200191503681900382131561044c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006105b1606083018688610574565b905083602083015273ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b6000604082840312156105f057600080fd5b6040516040810181811067ffffffffffffffff8211171561062157634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b8082018082111561014457634e487b7160e01b600052601160045260246000fd5b604081526000610670604083018587610574565b905082602083015294935050505056fea2646970667358221220032b549c9eaa29b4e73482b08816ec8a87918097dd404c9f51bf7a653a6ee5fb64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x591EBFB4 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xE8D6DBB4 EQ PUSH2 0x9C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BE JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8E PUSH2 0x89 CALLDATASIZE PUSH1 0x4 PUSH2 0x453 JUMP JUMPDEST PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x65 JUMP JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x144 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xB1C8640000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x211 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x44D31F06 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x188 JUMPI PUSH2 0x188 PUSH2 0x517 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x52D JUMP JUMPDEST DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD ADD SWAP4 SWAP1 SWAP4 ADD SWAP3 POP PUSH1 0x1 ADD PUSH2 0x14F JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x44D31F06 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x259 JUMPI PUSH2 0x259 PUSH2 0x517 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x26B SWAP2 SWAP1 PUSH2 0x52D JUMP JUMPDEST DUP9 CALLER PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CC SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x63B JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xACF1A841 DUP3 DUP11 DUP11 DUP8 DUP2 DUP2 LT PUSH2 0x318 JUMPI PUSH2 0x318 PUSH2 0x517 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x52D JUMP JUMPDEST DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x349 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x376 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP SWAP2 SWAP1 SWAP5 ADD SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x220 JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48C DUP8 DUP3 DUP9 ADD PUSH2 0x407 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x503 DUP7 DUP3 DUP8 ADD PUSH2 0x407 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5B1 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x574 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x621 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x144 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x670 PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0x574 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB 0x2B SLOAD SWAP13 SWAP15 0xAA 0x29 0xB4 0xE7 CALLVALUE DUP3 0xB0 DUP9 AND 0xEC DUP11 DUP8 SWAP2 DUP1 SWAP8 0xDD BLOCKHASH 0x4C SWAP16 MLOAD 0xBF PUSH27 0x653A6EE5FB64736F6C634300081100330000000000000000000000 ","sourceMap":"222:1667:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1660:227;;;;;;;;;;-1:-1:-1;1660:227:21;;;;;:::i;:::-;;:::i;:::-;;;516:14:44;;509:22;491:41;;479:2;464:18;1660:227:21;;;;;;;;406:523;;;;;;;;;;-1:-1:-1;406:523:21;;;;;:::i;:::-;;:::i;:::-;;;1796:25:44;;;1784:2;1769:18;406:523:21;1650:177:44;935:719:21;;;;;;:::i;:::-;;:::i;:::-;;1660:227;1744:4;1779:40;;;1794:25;1779:40;;:101;;-1:-1:-1;1835:45:21;;;1850:30;1835:45;1779:101;1760:120;1660:227;-1:-1:-1;;1660:227:21:o;406:523::-;544:13;586:5;544:13;608:315;632:6;628:1;:10;608:315;;;656:31;690:10;;;;:20;728:5;;734:1;728:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;754;780:4;690:108;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;884:13;;;;871:10;;:26;861:37;;;;;-1:-1:-1;840:3:21;;608:315;;;;559:370;406:523;;;;;;:::o;935:719::-;1071:5;1054:14;;1116:433;1140:6;1136:1;:10;1116:433;;;1164:31;1198:10;;;;:20;1236:5;;1242:1;1236:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1262;1288:10;1198:114;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1164:148;;1326:18;1360:5;:13;;;1347:5;:10;;;:26;;;;:::i;:::-;1387:10;;1326:47;;-1:-1:-1;1387:10:21;;:16;1326:47;1423:5;;1429:1;1423:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1433;1387:55;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1505:19:21;;;;;-1:-1:-1;;;1484:3:21;;1116:433;;;-1:-1:-1;1596:51:21;;1604:10;;1625:21;1596:51;;;;;;;;;1625:21;1604:10;1596:51;;;;;;;;;;;;;;;;;;;;;1044:610;;935:719;;;:::o;14:332:44:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:44:o;543:375::-;614:8;624:6;678:3;671:4;663:6;659:17;655:27;645:55;;696:1;693;686:12;645:55;-1:-1:-1;719:20:44;;762:18;751:30;;748:50;;;794:1;791;784:12;748:50;831:4;823:6;819:17;807:29;;891:3;884:4;874:6;871:1;867:14;859:6;855:27;851:38;848:47;845:67;;;908:1;905;898:12;845:67;543:375;;;;;:::o;923:722::-;1039:6;1047;1055;1063;1116:2;1104:9;1095:7;1091:23;1087:32;1084:52;;;1132:1;1129;1122:12;1084:52;1172:9;1159:23;1205:18;1197:6;1194:30;1191:50;;;1237:1;1234;1227:12;1191:50;1276:78;1346:7;1337:6;1326:9;1322:22;1276:78;:::i;:::-;1373:8;;-1:-1:-1;1250:104:44;-1:-1:-1;;1455:2:44;1440:18;;1427:32;;-1:-1:-1;1509:2:44;1494:18;;1481:32;1553:42;1542:54;;1532:65;;1522:93;;1611:1;1608;1601:12;1522:93;923:722;;;;-1:-1:-1;923:722:44;;-1:-1:-1;;923:722:44:o;1832:525::-;1939:6;1947;1955;2008:2;1996:9;1987:7;1983:23;1979:32;1976:52;;;2024:1;2021;2014:12;1976:52;2064:9;2051:23;2097:18;2089:6;2086:30;2083:50;;;2129:1;2126;2119:12;2083:50;2168:78;2238:7;2229:6;2218:9;2214:22;2168:78;:::i;:::-;2265:8;;2142:104;;-1:-1:-1;2347:2:44;2332:18;;;;2319:32;;1832:525;-1:-1:-1;;;;1832:525:44:o;2362:184::-;-1:-1:-1;;;2411:1:44;2404:88;2511:4;2508:1;2501:15;2535:4;2532:1;2525:15;2551:522;2629:4;2635:6;2695:11;2682:25;2789:2;2785:7;2774:8;2758:14;2754:29;2750:43;2730:18;2726:68;2716:96;;2808:1;2805;2798:12;2716:96;2835:33;;2887:20;;;-1:-1:-1;2930:18:44;2919:30;;2916:50;;;2962:1;2959;2952:12;2916:50;2995:4;2983:17;;-1:-1:-1;3026:14:44;3022:27;;;3012:38;;3009:58;;;3063:1;3060;3053:12;3078:267;3167:6;3162:3;3155:19;3219:6;3212:5;3205:4;3200:3;3196:14;3183:43;-1:-1:-1;3271:1:44;3246:16;;;3264:4;3242:27;;;3235:38;;;;3327:2;3306:15;;;-1:-1:-1;;3302:29:44;3293:39;;;3289:50;;3078:267::o;3350:438::-;3565:2;3554:9;3547:21;3528:4;3585:62;3643:2;3632:9;3628:18;3620:6;3612;3585:62;:::i;:::-;3577:70;;3683:6;3678:2;3667:9;3663:18;3656:34;3738:42;3730:6;3726:55;3721:2;3710:9;3706:18;3699:83;3350:438;;;;;;;:::o;3793:653::-;3886:6;3939:2;3927:9;3918:7;3914:23;3910:32;3907:52;;;3955:1;3952;3945:12;3907:52;3988:2;3982:9;4030:2;4022:6;4018:15;4099:6;4087:10;4084:22;4063:18;4051:10;4048:34;4045:62;4042:242;;;-1:-1:-1;;;4137:1:44;4130:88;4241:4;4238:1;4231:15;4269:4;4266:1;4259:15;4042:242;4300:2;4293:22;4339:16;;4324:32;;4410:2;4395:18;;;4389:25;4372:15;;;4365:50;;;;-1:-1:-1;4331:6:44;3793:653;-1:-1:-1;3793:653:44:o;4451:279::-;4516:9;;;4537:10;;;4534:190;;;-1:-1:-1;;;4577:1:44;4570:88;4681:4;4678:1;4671:15;4709:4;4706:1;4699:15;4735:318;4922:2;4911:9;4904:21;4885:4;4942:62;5000:2;4989:9;4985:18;4977:6;4969;4942:62;:::i;:::-;4934:70;;5040:6;5035:2;5024:9;5020:18;5013:34;4735:318;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"343600","executionCost":"infinite","totalCost":"infinite"},"external":{"renewAll(string[],uint256)":"infinite","rentPrice(string[],uint256,address)":"infinite","supportsInterface(bytes4)":"347"}},"methodIdentifiers":{"renewAll(string[],uint256)":"e8d6dbb4","rentPrice(string[],uint256,address)":"591ebfb4","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ETHRegistrarController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StaticBulkRenewal.sol\":\"StaticBulkRenewal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ethregistrar/BaseRegistrarImplementation.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseRegistrarImplementation is ERC721, IBaseRegistrar, Ownable {\\n    // A map of expiry times\\n    mapping(uint256 => uint256) expiries;\\n    // The ENS registry\\n    ENS public ens;\\n    // The namehash of the TLD this registrar owns (eg, .eth)\\n    bytes32 public baseNode;\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address => bool) public controllers;\\n    uint256 public constant GRACE_PERIOD = 90 days;\\n    bytes4 private constant INTERFACE_META_ID =\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 private constant ERC721_ID =\\n        bytes4(\\n            keccak256(\\\"balanceOf(address)\\\") ^\\n                keccak256(\\\"ownerOf(uint256)\\\") ^\\n                keccak256(\\\"approve(address,uint256)\\\") ^\\n                keccak256(\\\"getApproved(uint256)\\\") ^\\n                keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n                keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n                keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n                keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n        );\\n    bytes4 private constant RECLAIM_ID =\\n        bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n\\n    /**\\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view override returns (bool) {\\n        address _owner = ownerOf(tokenId);\\n        return (spender == _owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(_owner, spender));\\n    }\\n\\n    constructor(ENS _ens, bytes32 _baseNode) ERC721(\\\"\\\", \\\"\\\") {\\n        ens = _ens;\\n        baseNode = _baseNode;\\n    }\\n\\n    modifier live() {\\n        require(ens.owner(baseNode) == address(this));\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(controllers[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID. Names become unowned\\n     *      when their registration expires.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view override(IERC721, ERC721) returns (address) {\\n        require(expiries[tokenId] > block.timestamp);\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external override onlyOwner {\\n        controllers[controller] = true;\\n        emit ControllerAdded(controller);\\n    }\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external override onlyOwner {\\n        controllers[controller] = false;\\n        emit ControllerRemoved(controller);\\n    }\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external override onlyOwner {\\n        ens.setResolver(baseNode, resolver);\\n    }\\n\\n    // Returns the expiration timestamp of the specified id.\\n    function nameExpires(uint256 id) external view override returns (uint256) {\\n        return expiries[id];\\n    }\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public view override returns (bool) {\\n        // Not available if it's registered here or in its grace period.\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external override returns (uint256) {\\n        return _register(id, _owner, duration, true);\\n    }\\n\\n    /**\\n     * @dev Register a name, without modifying the registry.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param _owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function registerOnly(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration\\n    ) external returns (uint256) {\\n        return _register(id, _owner, duration, false);\\n    }\\n\\n    function _register(\\n        uint256 id,\\n        address _owner,\\n        uint256 duration,\\n        bool updateRegistry\\n    ) internal live onlyController returns (uint256) {\\n        require(available(id));\\n        require(\\n            block.timestamp + duration + GRACE_PERIOD >\\n                block.timestamp + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] = block.timestamp + duration;\\n        if (_exists(id)) {\\n            // Name was previously owned, and expired\\n            _burn(id);\\n        }\\n        _mint(_owner, id);\\n        if (updateRegistry) {\\n            ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n        }\\n\\n        emit NameRegistered(id, _owner, block.timestamp + duration);\\n\\n        return block.timestamp + duration;\\n        // return 0;\\n    }\\n\\n    function renew(\\n        uint256 id,\\n        uint256 duration\\n    ) external override live onlyController returns (uint256) {\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\n        require(\\n            expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD\\n        ); // Prevent future overflow\\n\\n        expiries[id] += duration;\\n        emit NameRenewed(id, expiries[id]);\\n        return expiries[id];\\n    }\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address _owner) external override live {\\n        require(_isApprovedOrOwner(msg.sender, id));\\n        ens.setSubnodeOwner(baseNode, bytes32(id), _owner);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view override(ERC721, IERC165) returns (bool) {\\n        return\\n            interfaceID == INTERFACE_META_ID ||\\n            interfaceID == ERC721_ID ||\\n            interfaceID == RECLAIM_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xe37ce2b399a3e944483b0fe97ac570512fd27ab64b10e10f953381503d3b4c3e\"},\"contracts/ethregistrar/ETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport {BaseRegistrarImplementation} from \\\"./BaseRegistrarImplementation.sol\\\";\\nimport {StringUtils} from \\\"./StringUtils.sol\\\";\\nimport {Resolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {ReverseRegistrar} from \\\"../reverseRegistrar/ReverseRegistrar.sol\\\";\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\nimport {IETHRegistrarController, IPriceOracle} from \\\"./IETHRegistrarController.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\nimport {ERC20Recoverable} from \\\"../utils/ERC20Recoverable.sol\\\";\\n\\nerror CommitmentTooNew(bytes32 commitment);\\nerror CommitmentTooOld(bytes32 commitment);\\nerror NameNotAvailable(string name);\\nerror DurationTooShort(uint256 duration);\\nerror ResolverRequiredWhenDataSupplied();\\nerror UnexpiredCommitmentExists(bytes32 commitment);\\nerror InsufficientValue();\\nerror Unauthorised(bytes32 node);\\nerror MaxCommitmentAgeTooLow();\\nerror MaxCommitmentAgeTooHigh();\\n\\n/**\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\n */\\ncontract ETHRegistrarController is\\n    Ownable,\\n    IETHRegistrarController,\\n    IERC165,\\n    ERC20Recoverable,\\n    ReverseClaimer\\n{\\n    using StringUtils for *;\\n    using Address for address;\\n\\n    uint256 public constant MIN_REGISTRATION_DURATION = 28 days;\\n    bytes32 private constant ETH_NODE =\\n        0xd051e4f8cb1870f877b00266e1292322bea4c492a9933488e94d7c1a935e8dfa; // namehash('scroll')\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\n    BaseRegistrarImplementation immutable base;\\n    IPriceOracle public prices;\\n    uint256 public immutable minCommitmentAge;\\n    uint256 public immutable maxCommitmentAge;\\n    ReverseRegistrar public immutable reverseRegistrar;\\n    INameWrapper public immutable nameWrapper;\\n    uint256 public maxLenght = 3;\\n    address public walletDev;\\n    mapping(bytes32 => uint256) public commitments;\\n\\n    event NameRegistered(\\n        string name,\\n        bytes32 indexed label,\\n        address indexed owner,\\n        uint256 baseCost,\\n        uint256 premium,\\n        uint256 expires\\n    );\\n\\n    event NameRenewed(\\n        string name,\\n        bytes32 indexed label,\\n        uint256 cost,\\n        uint256 expires\\n    );\\n\\n    event PriceChange(address oldPrice, address newPrice);\\n\\n    event ChangeMaxLength(uint256 max);\\n\\n    function setMaxLength(uint256 _max) external onlyOwner {\\n        require(_max > 0, \\\"ERROR: Max must be greater than 0\\\");\\n        maxLenght = _max;\\n        emit ChangeMaxLength(maxLenght);\\n    }\\n\\n    function setPrice(IPriceOracle _prices) external onlyOwner {\\n        require(\\n            address(_prices) != address(0x0),\\n            \\\"ERROR: Prices is zero address\\\"\\n        );\\n\\n        emit PriceChange(address(prices), address(_prices));\\n\\n        prices = _prices;\\n    }\\n\\n    constructor(\\n        BaseRegistrarImplementation _base,\\n        IPriceOracle _prices,\\n        uint256 _minCommitmentAge,\\n        uint256 _maxCommitmentAge,\\n        ReverseRegistrar _reverseRegistrar,\\n        INameWrapper _nameWrapper,\\n        ENS _ens\\n    ) ReverseClaimer(_ens, msg.sender) {\\n        if (_maxCommitmentAge <= _minCommitmentAge) {\\n            revert MaxCommitmentAgeTooLow();\\n        }\\n\\n        if (_maxCommitmentAge > block.timestamp) {\\n            revert MaxCommitmentAgeTooHigh();\\n        }\\n\\n        base = _base;\\n        prices = _prices;\\n        minCommitmentAge = _minCommitmentAge;\\n        maxCommitmentAge = _maxCommitmentAge;\\n        reverseRegistrar = _reverseRegistrar;\\n        nameWrapper = _nameWrapper;\\n    }\\n\\n    function rentPrice(\\n        string memory name,\\n        uint256 duration,\\n        address user\\n    ) public view override returns (IPriceOracle.Price memory price) {\\n        bytes32 label = keccak256(bytes(name));\\n        price = prices.price(\\n            name,\\n            base.nameExpires(uint256(label)),\\n            duration,\\n            user\\n        );\\n    }\\n\\n    function valid(string memory name) public view returns (bool) {\\n        return name.strlen() >= maxLenght;\\n    }\\n\\n    function available(string memory name) public view override returns (bool) {\\n        bytes32 label = keccak256(bytes(name));\\n        return valid(name) && base.available(uint256(label));\\n    }\\n\\n    function makeCommitment(\\n        string memory name,\\n        address _owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) public pure override returns (bytes32) {\\n        bytes32 label = keccak256(bytes(name));\\n        if (data.length > 0 && resolver == address(0)) {\\n            revert ResolverRequiredWhenDataSupplied();\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    label,\\n                    _owner,\\n                    duration,\\n                    secret,\\n                    resolver,\\n                    data,\\n                    reverseRecord,\\n                    ownerControlledFuses\\n                )\\n            );\\n    }\\n\\n    function commit(bytes32 commitment) public override {\\n        require(\\n            commitments[commitment] + maxCommitmentAge < block.timestamp,\\n            \\\"ERROR: UnexpiredCommitmentExists\\\"\\n        );\\n        commitments[commitment] = block.timestamp;\\n    }\\n\\n    function register(\\n        string calldata name,\\n        address _owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) public payable override {\\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\\n        if (msg.value < price.base + price.premium) {\\n            revert InsufficientValue();\\n        }\\n\\n        _consumeCommitment(\\n            name,\\n            duration,\\n            makeCommitment(\\n                name,\\n                _owner,\\n                duration,\\n                secret,\\n                resolver,\\n                data,\\n                reverseRecord,\\n                ownerControlledFuses\\n            )\\n        );\\n\\n        uint256 expires = nameWrapper.registerAndWrapETH2LD(\\n            name,\\n            _owner,\\n            duration,\\n            resolver,\\n            ownerControlledFuses\\n        );\\n\\n        if (data.length > 0) {\\n            _setRecords(resolver, keccak256(bytes(name)), data);\\n        }\\n\\n        if (reverseRecord) {\\n            _setReverseRecord(name, resolver, msg.sender);\\n        }\\n\\n        emit NameRegistered(\\n            name,\\n            keccak256(bytes(name)),\\n            _owner,\\n            price.base,\\n            price.premium,\\n            expires\\n            // 0\\n        );\\n\\n        if (msg.value > (price.base + price.premium)) {\\n            payable(msg.sender).transfer(\\n                msg.value - (price.base + price.premium)\\n            );\\n        }\\n    }\\n\\n    function renew(\\n        string calldata name,\\n        uint256 duration\\n    ) external payable override {\\n        bytes32 labelhash = keccak256(bytes(name));\\n        uint256 tokenId = uint256(labelhash);\\n        IPriceOracle.Price memory price = rentPrice(name, duration, msg.sender);\\n        if (msg.value < price.base) {\\n            revert InsufficientValue();\\n        }\\n        uint256 expires = nameWrapper.renew(tokenId, duration);\\n\\n        if (msg.value > price.base) {\\n            payable(msg.sender).transfer(msg.value - price.base);\\n        }\\n\\n        emit NameRenewed(name, labelhash, price.base, expires);\\n    }\\n\\n    function withdraw() public {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) external pure returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IETHRegistrarController).interfaceId;\\n    }\\n\\n    /* Internal functions */\\n\\n    function _consumeCommitment(\\n        string memory name,\\n        uint256 duration,\\n        bytes32 commitment\\n    ) internal {\\n        // if(minCommitmentAge != 0) {\\n        // Require an old enough commitment.\\n        require(\\n            commitments[commitment] + minCommitmentAge < block.timestamp,\\n            \\\"ERROR: CommitmentTooNew\\\"\\n        );\\n\\n        // If the commitment is too old, or the name is registered, stop\\n        require(\\n            commitments[commitment] + maxCommitmentAge > block.timestamp,\\n            \\\"ERROR: Commit to old\\\"\\n        );\\n        require(available(name), \\\"ERROR: NameNotAvailable\\\");\\n\\n        delete (commitments[commitment]);\\n\\n        require(\\n            duration > MIN_REGISTRATION_DURATION,\\n            \\\"ERROR: DurationTooShort\\\"\\n        );\\n        // }\\n    }\\n\\n    function _setRecords(\\n        address resolverAddress,\\n        bytes32 label,\\n        bytes[] calldata data\\n    ) internal {\\n        // use hardcoded .eth namehash\\n        bytes32 nodehash = keccak256(abi.encodePacked(ETH_NODE, label));\\n        Resolver resolver = Resolver(resolverAddress);\\n        resolver.multicallWithNodeCheck(nodehash, data);\\n    }\\n\\n    function _setReverseRecord(\\n        string memory name,\\n        address resolver,\\n        address _owner\\n    ) internal {\\n        reverseRegistrar.setNameForAddr(\\n            msg.sender,\\n            _owner,\\n            resolver,\\n            string.concat(name, \\\".scroll\\\")\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8164bea3d6bb1a57d45af0d2c69b6fd69e68123b849958d8969c495f3071393a\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/ethregistrar/IBulkRenewal.sol\":{\"content\":\"interface IBulkRenewal {\\n    function rentPrice(\\n        string[] calldata names,\\n        uint256 duration,\\n        address user\\n    ) external view returns (uint256 total);\\n\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xaaaab2037d3a98a51698b1cc77957de00491709610f621667b5f0b38657abfeb\"},\"contracts/ethregistrar/IETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IETHRegistrarController {\\n    function rentPrice(\\n        string memory,\\n        uint256,\\n        address\\n    ) external view returns (IPriceOracle.Price memory);\\n\\n    function available(string memory) external returns (bool);\\n\\n    function makeCommitment(\\n        string memory,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32) external;\\n\\n    function register(\\n        string calldata,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16\\n    ) external payable;\\n\\n    function renew(string calldata, uint256) external payable;\\n}\\n\",\"keccak256\":\"0x86368c7f22a817e407e757759fc22ca41171a75ce05abb0d721d1f1df02469ae\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    //    struct scrollToken {\\n    //        uint256 minAmount;\\n    //        uint256 maxRentTime;\\n    //    }\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration,\\n        address user\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x09c26233169d97f180cd7ad3cd1e9bd837554e6244b82c0e44637a79b02fb866\",\"license\":\"MIT\"},\"contracts/ethregistrar/StaticBulkRenewal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./ETHRegistrarController.sol\\\";\\nimport \\\"./IBulkRenewal.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ncontract StaticBulkRenewal is IBulkRenewal {\\n    ETHRegistrarController controller;\\n\\n    constructor(ETHRegistrarController _controller) {\\n        controller = _controller;\\n    }\\n\\n    function rentPrice(\\n        string[] calldata names,\\n        uint256 duration,\\n        address user\\n    ) external view override returns (uint256 total) {\\n        uint256 length = names.length;\\n        for (uint256 i = 0; i < length; ) {\\n            IPriceOracle.Price memory price = controller.rentPrice(\\n                names[i],\\n                duration,\\n                user\\n            );\\n            unchecked {\\n                ++i;\\n                total += (price.base + price.premium);\\n            }\\n        }\\n    }\\n\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration\\n    ) external payable override {\\n        uint256 length = names.length;\\n        uint256 total;\\n        for (uint256 i = 0; i < length; ) {\\n            IPriceOracle.Price memory price = controller.rentPrice(\\n                names[i],\\n                duration,\\n                msg.sender\\n            );\\n            uint256 totalPrice = price.base + price.premium;\\n            controller.renew{value: totalPrice}(names[i], duration);\\n            unchecked {\\n                ++i;\\n                total += totalPrice;\\n            }\\n        }\\n        // Send any excess funds back\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) external pure returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IBulkRenewal).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x3f2b78d94101a3356406c8ea201fcf6c3b7fe6f4b367ffb023a8901eb4938b4e\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setApprovalForAll(address, bool) external;\\n\\n    function approve(bytes32 node, address delegate, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external;\\n\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) external;\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xfc77ab6b7c59c3ebfe1c720bdebf9b08c2488ff7ac9501a9aa056c5d6d5b50c5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address _owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, _owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(\\n        address _owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param _owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, _owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a94f7a4478af1bcc9d3ac657dece4df9f0134cff1c1b52e0f230998fdd154b7\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(address nft,uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6249b6a2195ec9aa5d87f5abddac5d0de45aa3ac067fb969e4bc096226f4c246\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4792,"contract":"contracts/ethregistrar/StaticBulkRenewal.sol:StaticBulkRenewal","label":"controller","offset":0,"slot":"0","type":"t_contract(ETHRegistrarController)4564"}],"types":{"t_contract(ETHRegistrarController)4564":{"encoding":"inplace","label":"contract ETHRegistrarController","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/StringUtils.sol":{"StringUtils":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d91a206aa7255c1aec6373400f1c738e9fdda4910dfd2f355a25fd6def61c34664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 BYTE KECCAK256 PUSH11 0xA7255C1AEC6373400F1C73 DUP15 SWAP16 0xDD LOG4 SWAP2 0xD REVERT 0x2F CALLDATALOAD GAS 0x25 REVERT PUSH14 0xEF61C34664736F6C634300081100 CALLER ","sourceMap":"26:820:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;26:820:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d91a206aa7255c1aec6373400f1c738e9fdda4910dfd2f355a25fd6def61c34664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 BYTE KECCAK256 PUSH11 0xA7255C1AEC6373400F1C73 DUP15 SWAP16 0xDD LOG4 SWAP2 0xD REVERT 0x2F CALLDATALOAD GAS 0x25 REVERT PUSH14 0xEF61C34664736F6C634300081100 CALLER ","sourceMap":"26:820:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"strlen(string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StringUtils.sol\":\"StringUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/registry/ENS.sol":{"ENS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NewOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"NewResolver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"NewTTL","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"recordExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"resolver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setSubnodeRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForAll(address,address)":"e985e9c5","owner(bytes32)":"02571be3","recordExists(bytes32)":"f79fe538","resolver(bytes32)":"0178b8bf","setApprovalForAll(address,bool)":"a22cb465","setOwner(bytes32,address)":"5b0fc9c3","setRecord(bytes32,address,address,uint64)":"cf408823","setResolver(bytes32,address)":"1896f70a","setSubnodeOwner(bytes32,bytes32,address)":"06ab5923","setSubnodeRecord(bytes32,bytes32,address,address,uint64)":"5ef2c7f0","setTTL(bytes32,uint64)":"14ab9038","ttl(bytes32)":"16a25cbd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/ENS.sol\":\"ENS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/resolvers/Resolver.sol":{"Resolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"ContentChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"content","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"}],"name":"isApprovedFor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"nodehash","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicallWithNodeCheck","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"multihash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"resolve","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentType","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setABI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bool","name":"","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"setContent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setDnsrr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"internalType":"address","name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setMultihash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"_name","type":"string"}],"name":"setName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"setText","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}},"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}},"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}},"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}},"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}},"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}},"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}},"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56","addr(bytes32)":"3b3b57de","addr(bytes32,uint256)":"f1cb7e06","approve(bytes32,address,bool)":"a4b91a01","content(bytes32)":"2dff6941","contenthash(bytes32)":"bc1c58d1","dnsRecord(bytes32,bytes32,uint16)":"a8fa5682","interfaceImplementer(bytes32,bytes4)":"124a319c","isApprovedFor(address,bytes32,address)":"a9784b3e","isApprovedForAll(address,address)":"e985e9c5","multicall(bytes[])":"ac9650d8","multicallWithNodeCheck(bytes32,bytes[])":"e32954eb","multihash(bytes32)":"e89401a1","name(bytes32)":"691f3431","pubkey(bytes32)":"c8690233","resolve(bytes,bytes)":"9061b923","setABI(bytes32,uint256,bytes)":"623195b0","setAddr(bytes32,address)":"d5fa2b00","setAddr(bytes32,uint256,bytes)":"8b95dd71","setApprovalForAll(address,bool)":"a22cb465","setContent(bytes32,bytes32)":"c3d014d6","setContenthash(bytes32,bytes)":"304e6ade","setDnsrr(bytes32,bytes)":"76196c88","setInterface(bytes32,bytes4,address)":"e59d895d","setMultihash(bytes32,bytes)":"aa4cb547","setName(bytes32,string)":"77372213","setPubkey(bytes32,bytes32,bytes32)":"29cd62ea","setText(bytes32,string,string)":"10f13a8c","supportsInterface(bytes4)":"01ffc9a7","text(bytes32,string)":"59d1d43c","zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"content\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"multihash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"setContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDnsrr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setMultihash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"notice\":\"A generic resolver interface which includes all the functions including the ones deprecated\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/Resolver.sol\":\"Resolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setApprovalForAll(address, bool) external;\\n\\n    function approve(bytes32 node, address delegate, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external;\\n\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) external;\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xfc77ab6b7c59c3ebfe1c720bdebf9b08c2488ff7ac9501a9aa056c5d6d5b50c5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."},"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."},"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."},"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."},"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."},"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."},"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."},"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."},"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"notice":"A generic resolver interface which includes all the functions including the ones deprecated","version":1}}},"contracts/resolvers/profiles/IABIResolver.sol":{"IABIResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IABIResolver.sol\":\"IABIResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."}},"version":1}}},"contracts/resolvers/profiles/IAddrResolver.sol":{"IAddrResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32)":"3b3b57de"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"}},\"notice\":\"Interface for the legacy (ETH-only) addr function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IAddrResolver.sol\":\"IAddrResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."}},"notice":"Interface for the legacy (ETH-only) addr function.","version":1}}},"contracts/resolvers/profiles/IAddressResolver.sol":{"IAddressResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32,uint256)":"f1cb7e06"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for the new (multicoin) addr function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IAddressResolver.sol\":\"IAddressResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for the new (multicoin) addr function.","version":1}}},"contracts/resolvers/profiles/IContentHashResolver.sol":{"IContentHashResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"contenthash(bytes32)":"bc1c58d1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IContentHashResolver.sol\":\"IContentHashResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."}},"version":1}}},"contracts/resolvers/profiles/IDNSRecordResolver.sol":{"IDNSRecordResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"dnsRecord(bytes32,bytes32,uint16)":"a8fa5682"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":\"IDNSRecordResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."}},"version":1}}},"contracts/resolvers/profiles/IDNSZoneResolver.sol":{"IDNSZoneResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":\"IDNSZoneResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"version":1}}},"contracts/resolvers/profiles/IExtendedResolver.sol":{"IExtendedResolver":{"abi":[{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"resolve","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"resolve(bytes,bytes)":"9061b923"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IExtendedResolver.sol\":\"IExtendedResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/resolvers/profiles/IInterfaceResolver.sol":{"IInterfaceResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"interfaceImplementer(bytes32,bytes4)":"124a319c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IInterfaceResolver.sol\":\"IInterfaceResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."}},"version":1}}},"contracts/resolvers/profiles/INameResolver.sol":{"INameResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name(bytes32)":"691f3431"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/INameResolver.sol\":\"INameResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."}},"version":1}}},"contracts/resolvers/profiles/IPubkeyResolver.sol":{"IPubkeyResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pubkey(bytes32)":"c8690233"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IPubkeyResolver.sol\":\"IPubkeyResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."}},"version":1}}},"contracts/resolvers/profiles/ITextResolver.sol":{"ITextResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"text(bytes32,string)":"59d1d43c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/ITextResolver.sol\":\"ITextResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."}},"version":1}}},"contracts/reverseRegistrar/IReverseRegistrar.sol":{"IReverseRegistrar":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"claim","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimForAddr","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimWithResolver","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"node","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"resolver","type":"address"}],"name":"setDefaultResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"setName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"string","name":"name","type":"string"}],"name":"setNameForAddr","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"claim(address)":"1e83409a","claimForAddr(address,address,address)":"65669631","claimWithResolver(address,address)":"0f5a5466","node(address)":"bffbe61c","setDefaultResolver(address)":"c66485b2","setName(string)":"c47f0027","setNameForAddr(address,address,address,string)":"7a806d6b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setDefaultResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/IReverseRegistrar.sol\":\"IReverseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/reverseRegistrar/ReverseClaimer.sol":{"ReverseClaimer":{"abi":[{"inputs":[{"internalType":"contract ENS","name":"ens","type":"address"},{"internalType":"address","name":"claimant","type":"address"}],"stateMutability":"nonpayable","type":"constructor"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5718":{"entryPoint":null,"id":5718,"parameterSlots":2,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":389,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":425,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ENS_$5200t_address_fromMemory":{"entryPoint":331,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_ENS":{"entryPoint":307,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1404:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"64:86:44","statements":[{"body":{"nodeType":"YulBlock","src":"128:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"137:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"140:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"130:6:44"},"nodeType":"YulFunctionCall","src":"130:12:44"},"nodeType":"YulExpressionStatement","src":"130:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"87:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"98:5:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"113:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"118:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"109:3:44"},"nodeType":"YulFunctionCall","src":"109:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"122:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"105:3:44"},"nodeType":"YulFunctionCall","src":"105:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"94:3:44"},"nodeType":"YulFunctionCall","src":"94:31:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"84:2:44"},"nodeType":"YulFunctionCall","src":"84:42:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"77:6:44"},"nodeType":"YulFunctionCall","src":"77:50:44"},"nodeType":"YulIf","src":"74:70:44"}]},"name":"validator_revert_contract_ENS","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"53:5:44","type":""}],"src":"14:136:44"},{"body":{"nodeType":"YulBlock","src":"265:297:44","statements":[{"body":{"nodeType":"YulBlock","src":"311:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"323:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"313:6:44"},"nodeType":"YulFunctionCall","src":"313:12:44"},"nodeType":"YulExpressionStatement","src":"313:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"286:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"295:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"282:3:44"},"nodeType":"YulFunctionCall","src":"282:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"307:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"278:3:44"},"nodeType":"YulFunctionCall","src":"278:32:44"},"nodeType":"YulIf","src":"275:52:44"},{"nodeType":"YulVariableDeclaration","src":"336:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"355:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"349:5:44"},"nodeType":"YulFunctionCall","src":"349:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"340:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:44"}],"functionName":{"name":"validator_revert_contract_ENS","nodeType":"YulIdentifier","src":"374:29:44"},"nodeType":"YulFunctionCall","src":"374:36:44"},"nodeType":"YulExpressionStatement","src":"374:36:44"},{"nodeType":"YulAssignment","src":"419:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"429:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"419:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"443:40:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:44"},"nodeType":"YulFunctionCall","src":"464:18:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"458:5:44"},"nodeType":"YulFunctionCall","src":"458:25:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"447:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"522:7:44"}],"functionName":{"name":"validator_revert_contract_ENS","nodeType":"YulIdentifier","src":"492:29:44"},"nodeType":"YulFunctionCall","src":"492:38:44"},"nodeType":"YulExpressionStatement","src":"492:38:44"},{"nodeType":"YulAssignment","src":"539:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"549:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"539:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_ENS_$5200t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"223:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"234:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"246:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"254:6:44","type":""}],"src":"155:407:44"},{"body":{"nodeType":"YulBlock","src":"668:76:44","statements":[{"nodeType":"YulAssignment","src":"678:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"690:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"701:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"686:3:44"},"nodeType":"YulFunctionCall","src":"686:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"678:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"720:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"731:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"713:6:44"},"nodeType":"YulFunctionCall","src":"713:25:44"},"nodeType":"YulExpressionStatement","src":"713:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"637:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"648:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"659:4:44","type":""}],"src":"567:177:44"},{"body":{"nodeType":"YulBlock","src":"830:175:44","statements":[{"body":{"nodeType":"YulBlock","src":"876:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"885:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"888:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"878:6:44"},"nodeType":"YulFunctionCall","src":"878:12:44"},"nodeType":"YulExpressionStatement","src":"878:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"851:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"860:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"847:3:44"},"nodeType":"YulFunctionCall","src":"847:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"872:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"843:3:44"},"nodeType":"YulFunctionCall","src":"843:32:44"},"nodeType":"YulIf","src":"840:52:44"},{"nodeType":"YulVariableDeclaration","src":"901:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"920:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"914:5:44"},"nodeType":"YulFunctionCall","src":"914:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"905:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"969:5:44"}],"functionName":{"name":"validator_revert_contract_ENS","nodeType":"YulIdentifier","src":"939:29:44"},"nodeType":"YulFunctionCall","src":"939:36:44"},"nodeType":"YulExpressionStatement","src":"939:36:44"},{"nodeType":"YulAssignment","src":"984:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"994:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"984:6:44"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"796:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"807:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"819:6:44","type":""}],"src":"749:256:44"},{"body":{"nodeType":"YulBlock","src":"1111:102:44","statements":[{"nodeType":"YulAssignment","src":"1121:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1133:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1144:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1129:3:44"},"nodeType":"YulFunctionCall","src":"1129:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1121:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1163:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1178:6:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1194:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1199:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1190:3:44"},"nodeType":"YulFunctionCall","src":"1190:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"1203:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1186:3:44"},"nodeType":"YulFunctionCall","src":"1186:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1174:3:44"},"nodeType":"YulFunctionCall","src":"1174:32:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1156:6:44"},"nodeType":"YulFunctionCall","src":"1156:51:44"},"nodeType":"YulExpressionStatement","src":"1156:51:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1080:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1091:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1102:4:44","type":""}],"src":"1010:203:44"},{"body":{"nodeType":"YulBlock","src":"1299:103:44","statements":[{"body":{"nodeType":"YulBlock","src":"1345:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1354:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1357:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1347:6:44"},"nodeType":"YulFunctionCall","src":"1347:12:44"},"nodeType":"YulExpressionStatement","src":"1347:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1320:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1329:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1316:3:44"},"nodeType":"YulFunctionCall","src":"1316:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1341:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1312:3:44"},"nodeType":"YulFunctionCall","src":"1312:32:44"},"nodeType":"YulIf","src":"1309:52:44"},{"nodeType":"YulAssignment","src":"1370:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1386:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1380:5:44"},"nodeType":"YulFunctionCall","src":"1380:16:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1370:6:44"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1265:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1276:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1288:6:44","type":""}],"src":"1218:184:44"}]},"contents":"{\n    { }\n    function validator_revert_contract_ENS(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_ENS_$5200t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_ENS(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_ENS(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_ENS(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161020f38038061020f83398101604081905261002f9161014b565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526000906001600160a01b038416906302571be390602401602060405180830381865afa158015610096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ba9190610185565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af1158015610106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012a91906101a9565b505050506101c2565b6001600160a01b038116811461014857600080fd5b50565b6000806040838503121561015e57600080fd5b825161016981610133565b602084015190925061017a81610133565b809150509250929050565b60006020828403121561019757600080fd5b81516101a281610133565b9392505050565b6000602082840312156101bb57600080fd5b5051919050565b603f806101d06000396000f3fe6080604052600080fdfea2646970667358221220545e8542c929bf2411d9c142754015773c391fafcc13a5b75405994891280a5464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x20F CODESIZE SUB DUP1 PUSH2 0x20F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x14B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBA SWAP2 SWAP1 PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF41A04D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP3 AND SWAP1 PUSH4 0x1E83409A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x1A9 JUMP JUMPDEST POP POP POP POP PUSH2 0x1C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x148 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x169 DUP2 PUSH2 0x133 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x17A DUP2 PUSH2 0x133 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1A2 DUP2 PUSH2 0x133 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3F DUP1 PUSH2 0x1D0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD 0x5E DUP6 TIMESTAMP 0xC9 0x29 0xBF 0x24 GT 0xD9 0xC1 TIMESTAMP PUSH22 0x4015773C391FAFCC13A5B75405994891280A5464736F PUSH13 0x63430008110033000000000000 ","sourceMap":"184:354:37:-:0;;;332:204;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;449:28;;-1:-1:-1;;;449:28:37;;259:66;449:28;;;713:25:44;381:34:37;;-1:-1:-1;;;;;449:9:37;;;;;686:18:44;;449:28:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;497:32;;-1:-1:-1;;;497:32:37;;-1:-1:-1;;;;;1174:32:44;;;497::37;;;1156:51:44;381:106:37;;-1:-1:-1;497:22:37;;;;;;1129:18:44;;497:32:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;371:165;332:204;;184:354;;14:136:44;-1:-1:-1;;;;;94:31:44;;84:42;;74:70;;140:1;137;130:12;74:70;14:136;:::o;155:407::-;246:6;254;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;355:9;349:16;374:36;404:5;374:36;:::i;:::-;479:2;464:18;;458:25;429:5;;-1:-1:-1;492:38:44;458:25;492:38;:::i;:::-;549:7;539:17;;;155:407;;;;;:::o;749:256::-;819:6;872:2;860:9;851:7;847:23;843:32;840:52;;;888:1;885;878:12;840:52;920:9;914:16;939:36;969:5;939:36;:::i;:::-;994:5;749:256;-1:-1:-1;;;749:256:44:o;1218:184::-;1288:6;1341:2;1329:9;1320:7;1316:23;1312:32;1309:52;;;1357:1;1354;1347:12;1309:52;-1:-1:-1;1380:16:44;;1218:184;-1:-1:-1;1218:184:44:o;:::-;184:354:37;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220545e8542c929bf2411d9c142754015773c391fafcc13a5b75405994891280a5464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD 0x5E DUP6 TIMESTAMP 0xC9 0x29 0xBF 0x24 GT 0xD9 0xC1 TIMESTAMP PUSH22 0x4015773C391FAFCC13A5B75405994891280A5464736F PUSH13 0x63430008110033000000000000 ","sourceMap":"184:354:37:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/ReverseClaimer.sol\":\"ReverseClaimer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/reverseRegistrar/ReverseRegistrar.sol":{"NameResolver":{"abi":[{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"name","type":"string"}],"name":"setName","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setName(bytes32,string)":"77372213"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/ReverseRegistrar.sol\":\"NameResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address _owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, _owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(\\n        address _owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param _owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, _owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a94f7a4478af1bcc9d3ac657dece4df9f0134cff1c1b52e0f230998fdd154b7\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"ReverseRegistrar":{"abi":[{"inputs":[{"internalType":"contract ENS","name":"ensAddr","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"},{"indexed":false,"internalType":"bool","name":"enabled","type":"bool"}],"name":"ControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract NameResolver","name":"resolver","type":"address"}],"name":"DefaultResolverChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"addr","type":"address"},{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"ReverseClaimed","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"claim","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimForAddr","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimWithResolver","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"controllers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultResolver","outputs":[{"internalType":"contract NameResolver","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"node","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"},{"internalType":"bool","name":"enabled","type":"bool"}],"name":"setController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"resolver","type":"address"}],"name":"setDefaultResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"setName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"string","name":"name","type":"string"}],"name":"setNameForAddr","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"claim(address)":{"details":"Transfers ownership of the reverse ENS record associated with the      calling account.","params":{"_owner":"The address to set as the owner of the reverse record in ENS."},"returns":{"_0":"The ENS node hash of the reverse record."}},"claimForAddr(address,address,address)":{"details":"Transfers ownership of the reverse ENS record associated with the      calling account.","params":{"_owner":"The address to set as the owner of the reverse record in ENS.","addr":"The reverse record to set","resolver":"The resolver of the reverse node"},"returns":{"_0":"The ENS node hash of the reverse record."}},"claimWithResolver(address,address)":{"details":"Transfers ownership of the reverse ENS record associated with the      calling account.","params":{"_owner":"The address to set as the owner of the reverse record in ENS.","resolver":"The address of the resolver to set; 0 to leave unchanged."},"returns":{"_0":"The ENS node hash of the reverse record."}},"constructor":{"details":"Constructor","params":{"ensAddr":"The address of the ENS registry."}},"node(address)":{"details":"Returns the node hash for a given account's reverse records.","params":{"addr":"The address to hash"},"returns":{"_0":"The ENS node hash."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setName(string)":{"details":"Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.","params":{"name":"The name to set for this address."},"returns":{"_0":"The ENS node hash of the reverse record."}},"setNameForAddr(address,address,address,string)":{"details":"Sets the `name()` record for the reverse ENS record associated with the account provided. Updates the resolver to a designated resolver Only callable by controllers and authorised users","params":{"_owner":"The owner of the reverse node","addr":"The reverse record to set","name":"The name to set for this address.","resolver":"The resolver of the reverse node"},"returns":{"_0":"The ENS node hash of the reverse record."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_5802":{"entryPoint":null,"id":5802,"parameterSlots":1,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":334,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":474,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ENS_$5200_fromMemory":{"entryPoint":438,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_ENS":{"entryPoint":414,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1265:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"64:86:44","statements":[{"body":{"nodeType":"YulBlock","src":"128:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"137:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"140:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"130:6:44"},"nodeType":"YulFunctionCall","src":"130:12:44"},"nodeType":"YulExpressionStatement","src":"130:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"87:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"98:5:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"113:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"118:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"109:3:44"},"nodeType":"YulFunctionCall","src":"109:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"122:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"105:3:44"},"nodeType":"YulFunctionCall","src":"105:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"94:3:44"},"nodeType":"YulFunctionCall","src":"94:31:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"84:2:44"},"nodeType":"YulFunctionCall","src":"84:42:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"77:6:44"},"nodeType":"YulFunctionCall","src":"77:50:44"},"nodeType":"YulIf","src":"74:70:44"}]},"name":"validator_revert_contract_ENS","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"53:5:44","type":""}],"src":"14:136:44"},{"body":{"nodeType":"YulBlock","src":"248:175:44","statements":[{"body":{"nodeType":"YulBlock","src":"294:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"303:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"306:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"296:6:44"},"nodeType":"YulFunctionCall","src":"296:12:44"},"nodeType":"YulExpressionStatement","src":"296:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"269:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"278:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"265:3:44"},"nodeType":"YulFunctionCall","src":"265:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"290:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"261:3:44"},"nodeType":"YulFunctionCall","src":"261:32:44"},"nodeType":"YulIf","src":"258:52:44"},{"nodeType":"YulVariableDeclaration","src":"319:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"338:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"332:5:44"},"nodeType":"YulFunctionCall","src":"332:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"323:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"387:5:44"}],"functionName":{"name":"validator_revert_contract_ENS","nodeType":"YulIdentifier","src":"357:29:44"},"nodeType":"YulFunctionCall","src":"357:36:44"},"nodeType":"YulExpressionStatement","src":"357:36:44"},{"nodeType":"YulAssignment","src":"402:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"412:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"402:6:44"}]}]},"name":"abi_decode_tuple_t_contract$_ENS_$5200_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"214:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"225:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"237:6:44","type":""}],"src":"155:268:44"},{"body":{"nodeType":"YulBlock","src":"529:76:44","statements":[{"nodeType":"YulAssignment","src":"539:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"551:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"562:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"547:3:44"},"nodeType":"YulFunctionCall","src":"547:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"539:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"581:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"592:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"574:6:44"},"nodeType":"YulFunctionCall","src":"574:25:44"},"nodeType":"YulExpressionStatement","src":"574:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"498:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"509:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"520:4:44","type":""}],"src":"428:177:44"},{"body":{"nodeType":"YulBlock","src":"691:175:44","statements":[{"body":{"nodeType":"YulBlock","src":"737:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"746:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"749:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"739:6:44"},"nodeType":"YulFunctionCall","src":"739:12:44"},"nodeType":"YulExpressionStatement","src":"739:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"712:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"721:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"708:3:44"},"nodeType":"YulFunctionCall","src":"708:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"733:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"704:3:44"},"nodeType":"YulFunctionCall","src":"704:32:44"},"nodeType":"YulIf","src":"701:52:44"},{"nodeType":"YulVariableDeclaration","src":"762:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"781:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"775:5:44"},"nodeType":"YulFunctionCall","src":"775:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"766:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"830:5:44"}],"functionName":{"name":"validator_revert_contract_ENS","nodeType":"YulIdentifier","src":"800:29:44"},"nodeType":"YulFunctionCall","src":"800:36:44"},"nodeType":"YulExpressionStatement","src":"800:36:44"},{"nodeType":"YulAssignment","src":"845:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"855:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"845:6:44"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"657:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"668:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"680:6:44","type":""}],"src":"610:256:44"},{"body":{"nodeType":"YulBlock","src":"972:102:44","statements":[{"nodeType":"YulAssignment","src":"982:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"994:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1005:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"990:3:44"},"nodeType":"YulFunctionCall","src":"990:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"982:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1024:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1039:6:44"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1055:3:44","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1060:1:44","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1051:3:44"},"nodeType":"YulFunctionCall","src":"1051:11:44"},{"kind":"number","nodeType":"YulLiteral","src":"1064:1:44","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1047:3:44"},"nodeType":"YulFunctionCall","src":"1047:19:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1035:3:44"},"nodeType":"YulFunctionCall","src":"1035:32:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1017:6:44"},"nodeType":"YulFunctionCall","src":"1017:51:44"},"nodeType":"YulExpressionStatement","src":"1017:51:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"941:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"952:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"963:4:44","type":""}],"src":"871:203:44"},{"body":{"nodeType":"YulBlock","src":"1160:103:44","statements":[{"body":{"nodeType":"YulBlock","src":"1206:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1215:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1218:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1208:6:44"},"nodeType":"YulFunctionCall","src":"1208:12:44"},"nodeType":"YulExpressionStatement","src":"1208:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1181:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1190:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1177:3:44"},"nodeType":"YulFunctionCall","src":"1177:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1202:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1173:3:44"},"nodeType":"YulFunctionCall","src":"1173:32:44"},"nodeType":"YulIf","src":"1170:52:44"},{"nodeType":"YulAssignment","src":"1231:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1247:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1241:5:44"},"nodeType":"YulFunctionCall","src":"1241:16:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1231:6:44"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1126:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1137:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1149:6:44","type":""}],"src":"1079:184:44"}]},"contents":"{\n    { }\n    function validator_revert_contract_ENS(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_ENS_$5200_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_ENS(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_ENS(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b5060405162000f5338038062000f53833981016040819052610031916101b6565b61003a3361014e565b6001600160a01b03811660808190526040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152600091906302571be390602401602060405180830381865afa1580156100a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ca91906101b6565b90506001600160a01b0381161561014757604051630f41a04d60e11b81523360048201526001600160a01b03821690631e83409a906024016020604051808303816000875af1158015610121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014591906101da565b505b50506101f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146101b357600080fd5b50565b6000602082840312156101c857600080fd5b81516101d38161019e565b9392505050565b6000602082840312156101ec57600080fd5b5051919050565b608051610d366200021d6000396000818161012d015281816102f001526105070152610d366000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c66485b211610066578063c66485b2146101e1578063da8c229e146101f4578063e0dba60f14610227578063f2fde38b1461023a57600080fd5b80638da5cb5b146101aa578063bffbe61c146101bb578063c47f0027146101ce57600080fd5b806365669631116100c85780636566963114610167578063715018a61461017a5780637a806d6b14610184578063828eab0e1461019757600080fd5b80630f5a5466146100ef5780631e83409a146101155780633f15457f14610128575b600080fd5b6101026100fd366004610a25565b61024d565b6040519081526020015b60405180910390f35b610102610123366004610a5e565b610261565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010c565b610102610175366004610a7b565b610283565b61018261056e565b005b610102610192366004610b82565b610582565b60025461014f906001600160a01b031681565b6000546001600160a01b031661014f565b6101026101c9366004610a5e565b610616565b6101026101dc366004610bf7565b610671565b6101826101ef366004610a5e565b61068e565b610217610202366004610a5e565b60016020526000908152604090205460ff1681565b604051901515815260200161010c565b610182610235366004610c42565b610769565b610182610248366004610a5e565b6107d0565b600061025a338484610283565b9392505050565b60025460009061027d90339084906001600160a01b0316610283565b92915050565b6000836001600160a01b0381163314806102ac57503360009081526001602052604090205460ff165b8061035b57506040517fe985e9c50000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b9190610c70565b8061036a575061036a81610860565b6104075760405162461bcd60e51b815260206004820152605b60248201527f526576657273655265676973747261723a2043616c6c6572206973206e6f742060448201527f6120636f6e74726f6c6c6572206f7220617574686f726973656420627920616460648201527f6472657373206f7220746865206164647265737320697473656c660000000000608482015260a4015b60405180910390fd5b6000610412866108d9565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2602080830191909152818301849052825180830384018152606090920192839052815191012091925081906001600160a01b038916907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a36040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152602481018390526001600160a01b0387811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561054b57600080fd5b505af115801561055f573d6000803e3d6000fd5b50929998505050505050505050565b610576610959565b61058060006109b3565b565b600080610590868686610283565b6040517f773722130000000000000000000000000000000000000000000000000000000081529091506001600160a01b038516906377372213906105da9084908790600401610c8d565b600060405180830381600087803b1580156105f457600080fd5b505af1158015610608573d6000803e3d6000fd5b509298975050505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610642836108d9565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b60025460009061027d90339081906001600160a01b031685610582565b610696610959565b6001600160a01b0381166107125760405162461bcd60e51b815260206004820152603060248201527f526576657273655265676973747261723a205265736f6c76657220616464726560448201527f7373206d757374206e6f7420626520300000000000000000000000000000000060648201526084016103fe565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517feae17a84d9eb83d8c8eb317f9e7d64857bc363fa51674d996c023f4340c577cf90600090a250565b610771610959565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b6107d8610959565b6001600160a01b0381166108545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103fe565b61085d816109b3565b50565b6000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156108bc575060408051601f3d908101601f191682019092526108b991810190610ce3565b60015b6108c857506000919050565b6001600160a01b0316331492915050565b600060285b801561094d57600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506108de565b50506028600020919050565b6000546001600160a01b031633146105805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103fe565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461085d57600080fd5b60008060408385031215610a3857600080fd5b8235610a4381610a10565b91506020830135610a5381610a10565b809150509250929050565b600060208284031215610a7057600080fd5b813561025a81610a10565b600080600060608486031215610a9057600080fd5b8335610a9b81610a10565b92506020840135610aab81610a10565b91506040840135610abb81610a10565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610b0657600080fd5b813567ffffffffffffffff80821115610b2157610b21610ac6565b604051601f8301601f19908116603f01168101908282118183101715610b4957610b49610ac6565b81604052838152866020858801011115610b6257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610b9857600080fd5b8435610ba381610a10565b93506020850135610bb381610a10565b92506040850135610bc381610a10565b9150606085013567ffffffffffffffff811115610bdf57600080fd5b610beb87828801610af5565b91505092959194509250565b600060208284031215610c0957600080fd5b813567ffffffffffffffff811115610c2057600080fd5b610c2c84828501610af5565b949350505050565b801515811461085d57600080fd5b60008060408385031215610c5557600080fd5b8235610c6081610a10565b91506020830135610a5381610c34565b600060208284031215610c8257600080fd5b815161025a81610c34565b82815260006020604081840152835180604085015260005b81811015610cc157858101830151858201606001528201610ca5565b506000606082860101526060601f19601f830116850101925050509392505050565b600060208284031215610cf557600080fd5b815161025a81610a1056fea26469706673582212202410376252cdd0e99cb7aab6ba74c080f86351748fc640a4cea28f4475e0a03664736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xF53 CODESIZE SUB DUP1 PUSH3 0xF53 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x31 SWAP2 PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x3A CALLER PUSH2 0x14E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x147 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF41A04D PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x1E83409A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x121 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x1DA JUMP JUMPDEST POP JUMPDEST POP POP PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1D3 DUP2 PUSH2 0x19E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xD36 PUSH3 0x21D PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x12D ADD MSTORE DUP2 DUP2 PUSH2 0x2F0 ADD MSTORE PUSH2 0x507 ADD MSTORE PUSH2 0xD36 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC66485B2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC66485B2 EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xDA8C229E EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xE0DBA60F EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0xBFFBE61C EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xC47F0027 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65669631 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x65669631 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x7A806D6B EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x828EAB0E EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF5A5466 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x1E83409A EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x3F15457F EQ PUSH2 0x128 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0x123 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x261 JUMP JUMPDEST PUSH2 0x14F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10C JUMP JUMPDEST PUSH2 0x102 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xA7B JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x56E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x102 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xB82 JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x14F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14F JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x616 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0xBF7 JUMP JUMPDEST PUSH2 0x671 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST PUSH2 0x217 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10C JUMP JUMPDEST PUSH2 0x182 PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0xC42 JUMP JUMPDEST PUSH2 0x769 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x7D0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25A CALLER DUP5 DUP5 PUSH2 0x283 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x27D SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x283 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x2AC JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x35B JUMPI POP PUSH1 0x40 MLOAD PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xE985E9C5 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x337 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35B SWAP2 SWAP1 PUSH2 0xC70 JUMP JUMPDEST DUP1 PUSH2 0x36A JUMPI POP PUSH2 0x36A DUP2 PUSH2 0x860 JUMP JUMPDEST PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526576657273655265676973747261723A2043616C6C6572206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6120636F6E74726F6C6C6572206F7220617574686F7269736564206279206164 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6472657373206F7220746865206164647265737320697473656C660000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x412 DUP7 PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP4 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 SWAP3 POP DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH32 0x6ADA868DD3058CF77A48A74489FD7963688E5464B2B0FA957ACE976243270E92 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x40 MLOAD PUSH32 0x5EF2C7F000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5EF2C7F0 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x55F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x576 PUSH2 0x959 JUMP JUMPDEST PUSH2 0x580 PUSH1 0x0 PUSH2 0x9B3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x590 DUP7 DUP7 DUP7 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7737221300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x77372213 SWAP1 PUSH2 0x5DA SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xC8D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x608 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH2 0x642 DUP4 PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x27D SWAP1 CALLER SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x582 JUMP JUMPDEST PUSH2 0x696 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x712 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526576657273655265676973747261723A205265736F6C766572206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373206D757374206E6F74206265203000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xEAE17A84D9EB83D8C8EB317F9E7D64857BC363FA51674D996C023F4340C577CF SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x771 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x4C97694570A07277810AF7E5669FFD5F6A2D6B74B6E9A274B8B870FD5114CF87 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x7D8 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x854 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3FE JUMP JUMPDEST PUSH2 0x85D DUP2 PUSH2 0x9B3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8BC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8B9 SWAP2 DUP2 ADD SWAP1 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8C8 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x28 JUMPDEST DUP1 ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP5 AND BYTE DUP2 MSTORE8 PUSH1 0x10 SWAP1 SWAP3 DIV SWAP2 PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP5 AND BYTE DUP2 MSTORE8 PUSH1 0x10 DUP4 DIV SWAP3 POP PUSH2 0x8DE JUMP JUMPDEST POP POP PUSH1 0x28 PUSH1 0x0 KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x580 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x85D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA43 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xA53 DUP2 PUSH2 0xA10 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x25A DUP2 PUSH2 0xA10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xA9B DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xAAB DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xABB DUP2 PUSH2 0xA10 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB21 JUMPI PUSH2 0xB21 PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xB49 JUMPI PUSH2 0xB49 PUSH2 0xAC6 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0xB62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xBA3 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0xBB3 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xBC3 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBEB DUP8 DUP3 DUP9 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC2C DUP5 DUP3 DUP6 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x85D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xC60 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xA53 DUP2 PUSH2 0xC34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x25A DUP2 PUSH2 0xC34 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCC1 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0xCA5 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x25A DUP2 PUSH2 0xA10 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 LT CALLDATACOPY PUSH3 0x52CDD0 0xE9 SWAP13 0xB7 0xAA 0xB6 0xBA PUSH21 0xC080F86351748FC640A4CEA28F4475E0A03664736F PUSH13 0x63430008110033000000000000 ","sourceMap":"516:5995:38:-:0;;;895:343;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:8;936:18:0;:32::i;:::-;-1:-1:-1;;;;;930:13:38;;;;;;1082:32;;-1:-1:-1;;;1082:32:38;;418:66;1082:32;;;574:25:44;1020:29:38;;930:13;1082;;547:18:44;;1082:32:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1020:104;-1:-1:-1;;;;;;1138:37:38;;;1134:98;;1191:30;;-1:-1:-1;;;1191:30:38;;1210:10;1191:30;;;1017:51:44;-1:-1:-1;;;;;1191:18:38;;;;;990::44;;1191:30:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1134:98;920:318;895:343;516:5995;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:136:44:-;-1:-1:-1;;;;;94:31:44;;84:42;;74:70;;140:1;137;130:12;74:70;14:136;:::o;155:268::-;237:6;290:2;278:9;269:7;265:23;261:32;258:52;;;306:1;303;296:12;258:52;338:9;332:16;357:36;387:5;357:36;:::i;:::-;412:5;155:268;-1:-1:-1;;;155:268:44:o;1079:184::-;1149:6;1202:2;1190:9;1181:7;1177:23;1173:32;1170:52;;;1218:1;1215;1208:12;1170:52;-1:-1:-1;1241:16:44;;1079:184;-1:-1:-1;1079:184:44:o;:::-;516:5995:38;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":2393,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":2483,"id":111,"parameterSlots":1,"returnSlots":0},"@claimForAddr_5936":{"entryPoint":643,"id":5936,"parameterSlots":3,"returnSlots":1},"@claimWithResolver_5955":{"entryPoint":589,"id":5955,"parameterSlots":2,"returnSlots":1},"@claim_5886":{"entryPoint":609,"id":5886,"parameterSlots":1,"returnSlots":1},"@controllers_6079":{"entryPoint":null,"id":6079,"parameterSlots":0,"returnSlots":0},"@defaultResolver_5751":{"entryPoint":null,"id":5751,"parameterSlots":0,"returnSlots":0},"@ens_5748":{"entryPoint":null,"id":5748,"parameterSlots":0,"returnSlots":0},"@node_6031":{"entryPoint":1558,"id":6031,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@ownsContract_6069":{"entryPoint":2144,"id":6069,"parameterSlots":1,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":1390,"id":68,"parameterSlots":0,"returnSlots":0},"@setController_6118":{"entryPoint":1897,"id":6118,"parameterSlots":2,"returnSlots":0},"@setDefaultResolver_5866":{"entryPoint":1678,"id":5866,"parameterSlots":1,"returnSlots":0},"@setNameForAddr_6011":{"entryPoint":1410,"id":6011,"parameterSlots":4,"returnSlots":1},"@setName_5977":{"entryPoint":1649,"id":5977,"parameterSlots":1,"returnSlots":1},"@sha3HexAddress_6041":{"entryPoint":2265,"id":6041,"parameterSlots":1,"returnSlots":1},"@transferOwnership_91":{"entryPoint":2000,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_string":{"entryPoint":2805,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2654,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":3299,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2597,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_address":{"entryPoint":2683,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_addresst_string_memory_ptr":{"entryPoint":2946,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3138,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3184,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":3063,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_address_t_rational_0_by_1__to_t_bytes32_t_bytes32_t_address_t_address_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_string_memory_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3213,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_NameResolver_$5733__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eb02bca886b66c8cccb8ebdd5f9e523f0cb437ea36db9ae94c35db86f94aa5fa__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fe4e6cb0d911fbb084bbc1b17d0a5ac5b55e0dd119afa63b9e266f785db0c22d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":2758,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":2576,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":3124,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8922:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:109:44","statements":[{"body":{"nodeType":"YulBlock","src":"146:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"155:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"158:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"148:6:44"},"nodeType":"YulFunctionCall","src":"148:12:44"},"nodeType":"YulExpressionStatement","src":"148:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"100:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:44"},"nodeType":"YulFunctionCall","src":"89:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:44"},"nodeType":"YulFunctionCall","src":"79:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:44"},"nodeType":"YulFunctionCall","src":"72:73:44"},"nodeType":"YulIf","src":"69:93:44"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:44","type":""}],"src":"14:154:44"},{"body":{"nodeType":"YulBlock","src":"260:301:44","statements":[{"body":{"nodeType":"YulBlock","src":"306:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"315:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"308:6:44"},"nodeType":"YulFunctionCall","src":"308:12:44"},"nodeType":"YulExpressionStatement","src":"308:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"281:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"290:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"277:3:44"},"nodeType":"YulFunctionCall","src":"277:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"302:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"273:3:44"},"nodeType":"YulFunctionCall","src":"273:32:44"},"nodeType":"YulIf","src":"270:52:44"},{"nodeType":"YulVariableDeclaration","src":"331:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"357:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"344:12:44"},"nodeType":"YulFunctionCall","src":"344:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"335:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"401:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"376:24:44"},"nodeType":"YulFunctionCall","src":"376:31:44"},"nodeType":"YulExpressionStatement","src":"376:31:44"},{"nodeType":"YulAssignment","src":"416:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"426:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"416:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"440:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"472:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"483:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:44"},"nodeType":"YulFunctionCall","src":"468:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"455:12:44"},"nodeType":"YulFunctionCall","src":"455:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"444:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"521:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"496:24:44"},"nodeType":"YulFunctionCall","src":"496:33:44"},"nodeType":"YulExpressionStatement","src":"496:33:44"},{"nodeType":"YulAssignment","src":"538:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"548:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"538:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"218:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"229:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"241:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"249:6:44","type":""}],"src":"173:388:44"},{"body":{"nodeType":"YulBlock","src":"667:76:44","statements":[{"nodeType":"YulAssignment","src":"677:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"689:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"700:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"685:3:44"},"nodeType":"YulFunctionCall","src":"685:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"677:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"719:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"730:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"712:6:44"},"nodeType":"YulFunctionCall","src":"712:25:44"},"nodeType":"YulExpressionStatement","src":"712:25:44"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"636:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"647:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"658:4:44","type":""}],"src":"566:177:44"},{"body":{"nodeType":"YulBlock","src":"818:177:44","statements":[{"body":{"nodeType":"YulBlock","src":"864:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"873:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"876:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"866:6:44"},"nodeType":"YulFunctionCall","src":"866:12:44"},"nodeType":"YulExpressionStatement","src":"866:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"839:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"848:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"835:3:44"},"nodeType":"YulFunctionCall","src":"835:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"860:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"831:3:44"},"nodeType":"YulFunctionCall","src":"831:32:44"},"nodeType":"YulIf","src":"828:52:44"},{"nodeType":"YulVariableDeclaration","src":"889:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"915:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"902:12:44"},"nodeType":"YulFunctionCall","src":"902:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"893:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"959:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"934:24:44"},"nodeType":"YulFunctionCall","src":"934:31:44"},"nodeType":"YulExpressionStatement","src":"934:31:44"},{"nodeType":"YulAssignment","src":"974:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"984:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"974:6:44"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"784:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"795:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"807:6:44","type":""}],"src":"748:247:44"},{"body":{"nodeType":"YulBlock","src":"1113:125:44","statements":[{"nodeType":"YulAssignment","src":"1123:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1135:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1146:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1131:3:44"},"nodeType":"YulFunctionCall","src":"1131:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1123:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1165:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1180:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1188:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1176:3:44"},"nodeType":"YulFunctionCall","src":"1176:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1158:6:44"},"nodeType":"YulFunctionCall","src":"1158:74:44"},"nodeType":"YulExpressionStatement","src":"1158:74:44"}]},"name":"abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1082:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1093:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1104:4:44","type":""}],"src":"1000:238:44"},{"body":{"nodeType":"YulBlock","src":"1347:425:44","statements":[{"body":{"nodeType":"YulBlock","src":"1393:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1402:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1405:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1395:6:44"},"nodeType":"YulFunctionCall","src":"1395:12:44"},"nodeType":"YulExpressionStatement","src":"1395:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1368:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1377:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1364:3:44"},"nodeType":"YulFunctionCall","src":"1364:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1389:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1360:3:44"},"nodeType":"YulFunctionCall","src":"1360:32:44"},"nodeType":"YulIf","src":"1357:52:44"},{"nodeType":"YulVariableDeclaration","src":"1418:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1444:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1431:12:44"},"nodeType":"YulFunctionCall","src":"1431:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1422:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1488:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1463:24:44"},"nodeType":"YulFunctionCall","src":"1463:31:44"},"nodeType":"YulExpressionStatement","src":"1463:31:44"},{"nodeType":"YulAssignment","src":"1503:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1513:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1503:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1527:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1559:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1570:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1555:3:44"},"nodeType":"YulFunctionCall","src":"1555:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1542:12:44"},"nodeType":"YulFunctionCall","src":"1542:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1531:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1608:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1583:24:44"},"nodeType":"YulFunctionCall","src":"1583:33:44"},"nodeType":"YulExpressionStatement","src":"1583:33:44"},{"nodeType":"YulAssignment","src":"1625:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1635:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1625:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1651:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1683:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1694:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1679:3:44"},"nodeType":"YulFunctionCall","src":"1679:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1666:12:44"},"nodeType":"YulFunctionCall","src":"1666:32:44"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1655:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1732:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1707:24:44"},"nodeType":"YulFunctionCall","src":"1707:33:44"},"nodeType":"YulExpressionStatement","src":"1707:33:44"},{"nodeType":"YulAssignment","src":"1749:17:44","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1759:7:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1749:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1297:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1308:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1320:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1328:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1336:6:44","type":""}],"src":"1243:529:44"},{"body":{"nodeType":"YulBlock","src":"1809:152:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1826:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1829:77:44","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1819:6:44"},"nodeType":"YulFunctionCall","src":"1819:88:44"},"nodeType":"YulExpressionStatement","src":"1819:88:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1923:1:44","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1926:4:44","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1916:6:44"},"nodeType":"YulFunctionCall","src":"1916:15:44"},"nodeType":"YulExpressionStatement","src":"1916:15:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1947:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1950:4:44","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1940:6:44"},"nodeType":"YulFunctionCall","src":"1940:15:44"},"nodeType":"YulExpressionStatement","src":"1940:15:44"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1777:184:44"},{"body":{"nodeType":"YulBlock","src":"2019:666:44","statements":[{"body":{"nodeType":"YulBlock","src":"2068:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2077:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2080:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2070:6:44"},"nodeType":"YulFunctionCall","src":"2070:12:44"},"nodeType":"YulExpressionStatement","src":"2070:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2047:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2055:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2043:3:44"},"nodeType":"YulFunctionCall","src":"2043:17:44"},{"name":"end","nodeType":"YulIdentifier","src":"2062:3:44"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2039:3:44"},"nodeType":"YulFunctionCall","src":"2039:27:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2032:6:44"},"nodeType":"YulFunctionCall","src":"2032:35:44"},"nodeType":"YulIf","src":"2029:55:44"},{"nodeType":"YulVariableDeclaration","src":"2093:30:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2116:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2103:12:44"},"nodeType":"YulFunctionCall","src":"2103:20:44"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2097:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2132:28:44","value":{"kind":"number","nodeType":"YulLiteral","src":"2142:18:44","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2136:2:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2183:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2185:16:44"},"nodeType":"YulFunctionCall","src":"2185:18:44"},"nodeType":"YulExpressionStatement","src":"2185:18:44"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2175:2:44"},{"name":"_2","nodeType":"YulIdentifier","src":"2179:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2172:2:44"},"nodeType":"YulFunctionCall","src":"2172:10:44"},"nodeType":"YulIf","src":"2169:36:44"},{"nodeType":"YulVariableDeclaration","src":"2214:17:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2228:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2224:3:44"},"nodeType":"YulFunctionCall","src":"2224:7:44"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2218:2:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2240:23:44","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2260:2:44","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2254:5:44"},"nodeType":"YulFunctionCall","src":"2254:9:44"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2244:6:44","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2272:71:44","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2294:6:44"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2318:2:44"},{"kind":"number","nodeType":"YulLiteral","src":"2322:4:44","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:44"},"nodeType":"YulFunctionCall","src":"2314:13:44"},{"name":"_3","nodeType":"YulIdentifier","src":"2329:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2310:3:44"},"nodeType":"YulFunctionCall","src":"2310:22:44"},{"kind":"number","nodeType":"YulLiteral","src":"2334:2:44","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2306:3:44"},"nodeType":"YulFunctionCall","src":"2306:31:44"},{"name":"_3","nodeType":"YulIdentifier","src":"2339:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2302:3:44"},"nodeType":"YulFunctionCall","src":"2302:40:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2290:3:44"},"nodeType":"YulFunctionCall","src":"2290:53:44"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2276:10:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"2402:22:44","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2404:16:44"},"nodeType":"YulFunctionCall","src":"2404:18:44"},"nodeType":"YulExpressionStatement","src":"2404:18:44"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2361:10:44"},{"name":"_2","nodeType":"YulIdentifier","src":"2373:2:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2358:2:44"},"nodeType":"YulFunctionCall","src":"2358:18:44"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2381:10:44"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2393:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2378:2:44"},"nodeType":"YulFunctionCall","src":"2378:22:44"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2355:2:44"},"nodeType":"YulFunctionCall","src":"2355:46:44"},"nodeType":"YulIf","src":"2352:72:44"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2440:2:44","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2444:10:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2433:6:44"},"nodeType":"YulFunctionCall","src":"2433:22:44"},"nodeType":"YulExpressionStatement","src":"2433:22:44"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2471:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2479:2:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2464:6:44"},"nodeType":"YulFunctionCall","src":"2464:18:44"},"nodeType":"YulExpressionStatement","src":"2464:18:44"},{"body":{"nodeType":"YulBlock","src":"2530:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2539:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2542:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2532:6:44"},"nodeType":"YulFunctionCall","src":"2532:12:44"},"nodeType":"YulExpressionStatement","src":"2532:12:44"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2505:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2513:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2501:3:44"},"nodeType":"YulFunctionCall","src":"2501:15:44"},{"kind":"number","nodeType":"YulLiteral","src":"2518:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2497:3:44"},"nodeType":"YulFunctionCall","src":"2497:26:44"},{"name":"end","nodeType":"YulIdentifier","src":"2525:3:44"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2494:2:44"},"nodeType":"YulFunctionCall","src":"2494:35:44"},"nodeType":"YulIf","src":"2491:55:44"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2572:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2580:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:44"},"nodeType":"YulFunctionCall","src":"2568:17:44"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2591:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2587:3:44"},"nodeType":"YulFunctionCall","src":"2587:17:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2606:2:44"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2555:12:44"},"nodeType":"YulFunctionCall","src":"2555:54:44"},"nodeType":"YulExpressionStatement","src":"2555:54:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2633:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"2641:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2629:3:44"},"nodeType":"YulFunctionCall","src":"2629:15:44"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:44","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2625:3:44"},"nodeType":"YulFunctionCall","src":"2625:26:44"},{"kind":"number","nodeType":"YulLiteral","src":"2653:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2618:6:44"},"nodeType":"YulFunctionCall","src":"2618:37:44"},"nodeType":"YulExpressionStatement","src":"2618:37:44"},{"nodeType":"YulAssignment","src":"2664:15:44","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2673:6:44"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2664:5:44"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1993:6:44","type":""},{"name":"end","nodeType":"YulTypedName","src":"2001:3:44","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2009:5:44","type":""}],"src":"1966:719:44"},{"body":{"nodeType":"YulBlock","src":"2821:609:44","statements":[{"body":{"nodeType":"YulBlock","src":"2868:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2877:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2880:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2870:6:44"},"nodeType":"YulFunctionCall","src":"2870:12:44"},"nodeType":"YulExpressionStatement","src":"2870:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2842:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"2851:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2838:3:44"},"nodeType":"YulFunctionCall","src":"2838:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"2863:3:44","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2834:3:44"},"nodeType":"YulFunctionCall","src":"2834:33:44"},"nodeType":"YulIf","src":"2831:53:44"},{"nodeType":"YulVariableDeclaration","src":"2893:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2919:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2906:12:44"},"nodeType":"YulFunctionCall","src":"2906:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2897:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2963:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2938:24:44"},"nodeType":"YulFunctionCall","src":"2938:31:44"},"nodeType":"YulExpressionStatement","src":"2938:31:44"},{"nodeType":"YulAssignment","src":"2978:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"2988:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2978:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3002:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3034:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3045:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3030:3:44"},"nodeType":"YulFunctionCall","src":"3030:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3017:12:44"},"nodeType":"YulFunctionCall","src":"3017:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3006:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3083:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3058:24:44"},"nodeType":"YulFunctionCall","src":"3058:33:44"},"nodeType":"YulExpressionStatement","src":"3058:33:44"},{"nodeType":"YulAssignment","src":"3100:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3110:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3100:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3126:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3158:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3169:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3154:3:44"},"nodeType":"YulFunctionCall","src":"3154:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3141:12:44"},"nodeType":"YulFunctionCall","src":"3141:32:44"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"3130:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"3207:7:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3182:24:44"},"nodeType":"YulFunctionCall","src":"3182:33:44"},"nodeType":"YulExpressionStatement","src":"3182:33:44"},{"nodeType":"YulAssignment","src":"3224:17:44","value":{"name":"value_2","nodeType":"YulIdentifier","src":"3234:7:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3224:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"3250:46:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3281:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3292:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3277:3:44"},"nodeType":"YulFunctionCall","src":"3277:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3264:12:44"},"nodeType":"YulFunctionCall","src":"3264:32:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3254:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"3339:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3348:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3351:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3341:6:44"},"nodeType":"YulFunctionCall","src":"3341:12:44"},"nodeType":"YulExpressionStatement","src":"3341:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3311:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3319:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3308:2:44"},"nodeType":"YulFunctionCall","src":"3308:30:44"},"nodeType":"YulIf","src":"3305:50:44"},{"nodeType":"YulAssignment","src":"3364:60:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3396:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"3407:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3392:3:44"},"nodeType":"YulFunctionCall","src":"3392:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3416:7:44"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"3374:17:44"},"nodeType":"YulFunctionCall","src":"3374:50:44"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3364:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2763:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2774:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2786:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2794:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2802:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2810:6:44","type":""}],"src":"2690:740:44"},{"body":{"nodeType":"YulBlock","src":"3557:125:44","statements":[{"nodeType":"YulAssignment","src":"3567:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3579:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3590:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3575:3:44"},"nodeType":"YulFunctionCall","src":"3575:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3567:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3609:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3624:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3632:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3620:3:44"},"nodeType":"YulFunctionCall","src":"3620:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3602:6:44"},"nodeType":"YulFunctionCall","src":"3602:74:44"},"nodeType":"YulExpressionStatement","src":"3602:74:44"}]},"name":"abi_encode_tuple_t_contract$_NameResolver_$5733__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3526:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3537:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3548:4:44","type":""}],"src":"3435:247:44"},{"body":{"nodeType":"YulBlock","src":"3788:125:44","statements":[{"nodeType":"YulAssignment","src":"3798:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3810:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"3821:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3806:3:44"},"nodeType":"YulFunctionCall","src":"3806:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3798:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3840:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3855:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"3863:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3851:3:44"},"nodeType":"YulFunctionCall","src":"3851:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3833:6:44"},"nodeType":"YulFunctionCall","src":"3833:74:44"},"nodeType":"YulExpressionStatement","src":"3833:74:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3757:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3768:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3779:4:44","type":""}],"src":"3687:226:44"},{"body":{"nodeType":"YulBlock","src":"3998:242:44","statements":[{"body":{"nodeType":"YulBlock","src":"4044:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4053:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4056:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4046:6:44"},"nodeType":"YulFunctionCall","src":"4046:12:44"},"nodeType":"YulExpressionStatement","src":"4046:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4019:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4028:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4015:3:44"},"nodeType":"YulFunctionCall","src":"4015:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4011:3:44"},"nodeType":"YulFunctionCall","src":"4011:32:44"},"nodeType":"YulIf","src":"4008:52:44"},{"nodeType":"YulVariableDeclaration","src":"4069:37:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4096:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4083:12:44"},"nodeType":"YulFunctionCall","src":"4083:23:44"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4073:6:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"4149:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4158:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4161:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4151:6:44"},"nodeType":"YulFunctionCall","src":"4151:12:44"},"nodeType":"YulExpressionStatement","src":"4151:12:44"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4121:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"4129:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4118:2:44"},"nodeType":"YulFunctionCall","src":"4118:30:44"},"nodeType":"YulIf","src":"4115:50:44"},{"nodeType":"YulAssignment","src":"4174:60:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4206:9:44"},{"name":"offset","nodeType":"YulIdentifier","src":"4217:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4202:3:44"},"nodeType":"YulFunctionCall","src":"4202:22:44"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4226:7:44"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4184:17:44"},"nodeType":"YulFunctionCall","src":"4184:50:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4174:6:44"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3964:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3975:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3987:6:44","type":""}],"src":"3918:322:44"},{"body":{"nodeType":"YulBlock","src":"4340:92:44","statements":[{"nodeType":"YulAssignment","src":"4350:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4362:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4373:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4358:3:44"},"nodeType":"YulFunctionCall","src":"4358:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4350:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4392:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4417:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4410:6:44"},"nodeType":"YulFunctionCall","src":"4410:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4403:6:44"},"nodeType":"YulFunctionCall","src":"4403:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4385:6:44"},"nodeType":"YulFunctionCall","src":"4385:41:44"},"nodeType":"YulExpressionStatement","src":"4385:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4309:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4320:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4331:4:44","type":""}],"src":"4245:187:44"},{"body":{"nodeType":"YulBlock","src":"4479:76:44","statements":[{"body":{"nodeType":"YulBlock","src":"4533:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4542:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4545:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4535:6:44"},"nodeType":"YulFunctionCall","src":"4535:12:44"},"nodeType":"YulExpressionStatement","src":"4535:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4502:5:44"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4523:5:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4516:6:44"},"nodeType":"YulFunctionCall","src":"4516:13:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4509:6:44"},"nodeType":"YulFunctionCall","src":"4509:21:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4499:2:44"},"nodeType":"YulFunctionCall","src":"4499:32:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4492:6:44"},"nodeType":"YulFunctionCall","src":"4492:40:44"},"nodeType":"YulIf","src":"4489:60:44"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4468:5:44","type":""}],"src":"4437:118:44"},{"body":{"nodeType":"YulBlock","src":"4644:298:44","statements":[{"body":{"nodeType":"YulBlock","src":"4690:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4699:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4702:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4692:6:44"},"nodeType":"YulFunctionCall","src":"4692:12:44"},"nodeType":"YulExpressionStatement","src":"4692:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4665:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"4674:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4661:3:44"},"nodeType":"YulFunctionCall","src":"4661:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"4686:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4657:3:44"},"nodeType":"YulFunctionCall","src":"4657:32:44"},"nodeType":"YulIf","src":"4654:52:44"},{"nodeType":"YulVariableDeclaration","src":"4715:36:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4741:9:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4728:12:44"},"nodeType":"YulFunctionCall","src":"4728:23:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4719:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4785:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4760:24:44"},"nodeType":"YulFunctionCall","src":"4760:31:44"},"nodeType":"YulExpressionStatement","src":"4760:31:44"},{"nodeType":"YulAssignment","src":"4800:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"4810:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4800:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"4824:47:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4856:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"4867:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4852:3:44"},"nodeType":"YulFunctionCall","src":"4852:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4839:12:44"},"nodeType":"YulFunctionCall","src":"4839:32:44"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4828:7:44","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4902:7:44"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"4880:21:44"},"nodeType":"YulFunctionCall","src":"4880:30:44"},"nodeType":"YulExpressionStatement","src":"4880:30:44"},{"nodeType":"YulAssignment","src":"4919:17:44","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4929:7:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4919:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4602:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4613:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4625:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4633:6:44","type":""}],"src":"4560:382:44"},{"body":{"nodeType":"YulBlock","src":"5076:198:44","statements":[{"nodeType":"YulAssignment","src":"5086:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5098:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5109:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5094:3:44"},"nodeType":"YulFunctionCall","src":"5094:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5086:4:44"}]},{"nodeType":"YulVariableDeclaration","src":"5121:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"5131:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5125:2:44","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5189:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5204:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"5212:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5200:3:44"},"nodeType":"YulFunctionCall","src":"5200:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5182:6:44"},"nodeType":"YulFunctionCall","src":"5182:34:44"},"nodeType":"YulExpressionStatement","src":"5182:34:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5236:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5247:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5232:3:44"},"nodeType":"YulFunctionCall","src":"5232:18:44"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5256:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"5264:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5252:3:44"},"nodeType":"YulFunctionCall","src":"5252:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5225:6:44"},"nodeType":"YulFunctionCall","src":"5225:43:44"},"nodeType":"YulExpressionStatement","src":"5225:43:44"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5037:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5048:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5056:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5067:4:44","type":""}],"src":"4947:327:44"},{"body":{"nodeType":"YulBlock","src":"5357:167:44","statements":[{"body":{"nodeType":"YulBlock","src":"5403:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5412:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5415:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5405:6:44"},"nodeType":"YulFunctionCall","src":"5405:12:44"},"nodeType":"YulExpressionStatement","src":"5405:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5378:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"5387:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5374:3:44"},"nodeType":"YulFunctionCall","src":"5374:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"5399:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5370:3:44"},"nodeType":"YulFunctionCall","src":"5370:32:44"},"nodeType":"YulIf","src":"5367:52:44"},{"nodeType":"YulVariableDeclaration","src":"5428:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5447:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5441:5:44"},"nodeType":"YulFunctionCall","src":"5441:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5432:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5488:5:44"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"5466:21:44"},"nodeType":"YulFunctionCall","src":"5466:28:44"},"nodeType":"YulExpressionStatement","src":"5466:28:44"},{"nodeType":"YulAssignment","src":"5503:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"5513:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5503:6:44"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5323:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5334:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5346:6:44","type":""}],"src":"5279:245:44"},{"body":{"nodeType":"YulBlock","src":"5703:321:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5720:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5731:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5713:6:44"},"nodeType":"YulFunctionCall","src":"5713:21:44"},"nodeType":"YulExpressionStatement","src":"5713:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5754:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5765:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5750:3:44"},"nodeType":"YulFunctionCall","src":"5750:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"5770:2:44","type":"","value":"91"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5743:6:44"},"nodeType":"YulFunctionCall","src":"5743:30:44"},"nodeType":"YulExpressionStatement","src":"5743:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5793:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5804:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5789:3:44"},"nodeType":"YulFunctionCall","src":"5789:18:44"},{"hexValue":"526576657273655265676973747261723a2043616c6c6572206973206e6f7420","kind":"string","nodeType":"YulLiteral","src":"5809:34:44","type":"","value":"ReverseRegistrar: Caller is not "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:44"},"nodeType":"YulFunctionCall","src":"5782:62:44"},"nodeType":"YulExpressionStatement","src":"5782:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5864:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5875:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5860:3:44"},"nodeType":"YulFunctionCall","src":"5860:18:44"},{"hexValue":"6120636f6e74726f6c6c6572206f7220617574686f7269736564206279206164","kind":"string","nodeType":"YulLiteral","src":"5880:34:44","type":"","value":"a controller or authorised by ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5853:6:44"},"nodeType":"YulFunctionCall","src":"5853:62:44"},"nodeType":"YulExpressionStatement","src":"5853:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5935:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"5946:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:44"},"nodeType":"YulFunctionCall","src":"5931:19:44"},{"hexValue":"6472657373206f7220746865206164647265737320697473656c66","kind":"string","nodeType":"YulLiteral","src":"5952:29:44","type":"","value":"dress or the address itself"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5924:6:44"},"nodeType":"YulFunctionCall","src":"5924:58:44"},"nodeType":"YulExpressionStatement","src":"5924:58:44"},{"nodeType":"YulAssignment","src":"5991:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6003:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6014:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5999:3:44"},"nodeType":"YulFunctionCall","src":"5999:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5991:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_fe4e6cb0d911fbb084bbc1b17d0a5ac5b55e0dd119afa63b9e266f785db0c22d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5680:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5694:4:44","type":""}],"src":"5529:495:44"},{"body":{"nodeType":"YulBlock","src":"6176:100:44","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6193:3:44"},{"name":"value0","nodeType":"YulIdentifier","src":"6198:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6186:6:44"},"nodeType":"YulFunctionCall","src":"6186:19:44"},"nodeType":"YulExpressionStatement","src":"6186:19:44"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6225:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"6230:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6221:3:44"},"nodeType":"YulFunctionCall","src":"6221:12:44"},{"name":"value1","nodeType":"YulIdentifier","src":"6235:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6214:6:44"},"nodeType":"YulFunctionCall","src":"6214:28:44"},"nodeType":"YulExpressionStatement","src":"6214:28:44"},{"nodeType":"YulAssignment","src":"6251:19:44","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6262:3:44"},{"kind":"number","nodeType":"YulLiteral","src":"6267:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6258:3:44"},"nodeType":"YulFunctionCall","src":"6258:12:44"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6251:3:44"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6144:3:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6149:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6157:6:44","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6168:3:44","type":""}],"src":"6029:247:44"},{"body":{"nodeType":"YulBlock","src":"6501:354:44","statements":[{"nodeType":"YulAssignment","src":"6511:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6523:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6534:3:44","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6519:3:44"},"nodeType":"YulFunctionCall","src":"6519:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6511:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6554:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"6565:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6547:6:44"},"nodeType":"YulFunctionCall","src":"6547:25:44"},"nodeType":"YulExpressionStatement","src":"6547:25:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6592:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6603:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6588:3:44"},"nodeType":"YulFunctionCall","src":"6588:18:44"},{"name":"value1","nodeType":"YulIdentifier","src":"6608:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6581:6:44"},"nodeType":"YulFunctionCall","src":"6581:34:44"},"nodeType":"YulExpressionStatement","src":"6581:34:44"},{"nodeType":"YulVariableDeclaration","src":"6624:52:44","value":{"kind":"number","nodeType":"YulLiteral","src":"6634:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6628:2:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6696:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6707:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6692:3:44"},"nodeType":"YulFunctionCall","src":"6692:18:44"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6716:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"6724:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6712:3:44"},"nodeType":"YulFunctionCall","src":"6712:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6685:6:44"},"nodeType":"YulFunctionCall","src":"6685:43:44"},"nodeType":"YulExpressionStatement","src":"6685:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6748:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6759:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6744:3:44"},"nodeType":"YulFunctionCall","src":"6744:18:44"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6768:6:44"},{"name":"_1","nodeType":"YulIdentifier","src":"6776:2:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6764:3:44"},"nodeType":"YulFunctionCall","src":"6764:15:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6737:6:44"},"nodeType":"YulFunctionCall","src":"6737:43:44"},"nodeType":"YulExpressionStatement","src":"6737:43:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6800:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"6811:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6796:3:44"},"nodeType":"YulFunctionCall","src":"6796:19:44"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"6821:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"6829:18:44","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6817:3:44"},"nodeType":"YulFunctionCall","src":"6817:31:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6789:6:44"},"nodeType":"YulFunctionCall","src":"6789:60:44"},"nodeType":"YulExpressionStatement","src":"6789:60:44"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_address_t_rational_0_by_1__to_t_bytes32_t_bytes32_t_address_t_address_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6438:9:44","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6449:6:44","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6457:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6465:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6473:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6481:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6492:4:44","type":""}],"src":"6281:574:44"},{"body":{"nodeType":"YulBlock","src":"7009:470:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7026:9:44"},{"name":"value0","nodeType":"YulIdentifier","src":"7037:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7019:6:44"},"nodeType":"YulFunctionCall","src":"7019:25:44"},"nodeType":"YulExpressionStatement","src":"7019:25:44"},{"nodeType":"YulVariableDeclaration","src":"7053:12:44","value":{"kind":"number","nodeType":"YulLiteral","src":"7063:2:44","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7057:2:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7085:9:44"},{"name":"_1","nodeType":"YulIdentifier","src":"7096:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7081:3:44"},"nodeType":"YulFunctionCall","src":"7081:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"7101:2:44","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7074:6:44"},"nodeType":"YulFunctionCall","src":"7074:30:44"},"nodeType":"YulExpressionStatement","src":"7074:30:44"},{"nodeType":"YulVariableDeclaration","src":"7113:27:44","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7133:6:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7127:5:44"},"nodeType":"YulFunctionCall","src":"7127:13:44"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7117:6:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7160:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7171:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7156:3:44"},"nodeType":"YulFunctionCall","src":"7156:18:44"},{"name":"length","nodeType":"YulIdentifier","src":"7176:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7149:6:44"},"nodeType":"YulFunctionCall","src":"7149:34:44"},"nodeType":"YulExpressionStatement","src":"7149:34:44"},{"nodeType":"YulVariableDeclaration","src":"7192:10:44","value":{"kind":"number","nodeType":"YulLiteral","src":"7201:1:44","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7196:1:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"7261:90:44","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7290:9:44"},{"name":"i","nodeType":"YulIdentifier","src":"7301:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7286:3:44"},"nodeType":"YulFunctionCall","src":"7286:17:44"},{"kind":"number","nodeType":"YulLiteral","src":"7305:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7282:3:44"},"nodeType":"YulFunctionCall","src":"7282:26:44"},{"arguments":[{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7324:6:44"},{"name":"i","nodeType":"YulIdentifier","src":"7332:1:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7320:3:44"},"nodeType":"YulFunctionCall","src":"7320:14:44"},{"name":"_1","nodeType":"YulIdentifier","src":"7336:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7316:3:44"},"nodeType":"YulFunctionCall","src":"7316:23:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7310:5:44"},"nodeType":"YulFunctionCall","src":"7310:30:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7275:6:44"},"nodeType":"YulFunctionCall","src":"7275:66:44"},"nodeType":"YulExpressionStatement","src":"7275:66:44"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7222:1:44"},{"name":"length","nodeType":"YulIdentifier","src":"7225:6:44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7219:2:44"},"nodeType":"YulFunctionCall","src":"7219:13:44"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7233:19:44","statements":[{"nodeType":"YulAssignment","src":"7235:15:44","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7244:1:44"},{"name":"_1","nodeType":"YulIdentifier","src":"7247:2:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7240:3:44"},"nodeType":"YulFunctionCall","src":"7240:10:44"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7235:1:44"}]}]},"pre":{"nodeType":"YulBlock","src":"7215:3:44","statements":[]},"src":"7211:140:44"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7375:9:44"},{"name":"length","nodeType":"YulIdentifier","src":"7386:6:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7371:3:44"},"nodeType":"YulFunctionCall","src":"7371:22:44"},{"kind":"number","nodeType":"YulLiteral","src":"7395:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7367:3:44"},"nodeType":"YulFunctionCall","src":"7367:31:44"},{"kind":"number","nodeType":"YulLiteral","src":"7400:1:44","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7360:6:44"},"nodeType":"YulFunctionCall","src":"7360:42:44"},"nodeType":"YulExpressionStatement","src":"7360:42:44"},{"nodeType":"YulAssignment","src":"7411:62:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7427:9:44"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7446:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"7454:2:44","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7442:3:44"},"nodeType":"YulFunctionCall","src":"7442:15:44"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7463:2:44","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7459:3:44"},"nodeType":"YulFunctionCall","src":"7459:7:44"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7438:3:44"},"nodeType":"YulFunctionCall","src":"7438:29:44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7423:3:44"},"nodeType":"YulFunctionCall","src":"7423:45:44"},{"kind":"number","nodeType":"YulLiteral","src":"7470:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7419:3:44"},"nodeType":"YulFunctionCall","src":"7419:54:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7411:4:44"}]}]},"name":"abi_encode_tuple_t_bytes32_t_string_memory_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6970:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6981:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6989:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7000:4:44","type":""}],"src":"6860:619:44"},{"body":{"nodeType":"YulBlock","src":"7658:238:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7675:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7686:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7668:6:44"},"nodeType":"YulFunctionCall","src":"7668:21:44"},"nodeType":"YulExpressionStatement","src":"7668:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7709:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7720:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7705:3:44"},"nodeType":"YulFunctionCall","src":"7705:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"7725:2:44","type":"","value":"48"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7698:6:44"},"nodeType":"YulFunctionCall","src":"7698:30:44"},"nodeType":"YulExpressionStatement","src":"7698:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7748:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7759:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7744:3:44"},"nodeType":"YulFunctionCall","src":"7744:18:44"},{"hexValue":"526576657273655265676973747261723a205265736f6c766572206164647265","kind":"string","nodeType":"YulLiteral","src":"7764:34:44","type":"","value":"ReverseRegistrar: Resolver addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7737:6:44"},"nodeType":"YulFunctionCall","src":"7737:62:44"},"nodeType":"YulExpressionStatement","src":"7737:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7819:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7830:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7815:3:44"},"nodeType":"YulFunctionCall","src":"7815:18:44"},{"hexValue":"7373206d757374206e6f742062652030","kind":"string","nodeType":"YulLiteral","src":"7835:18:44","type":"","value":"ss must not be 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7808:6:44"},"nodeType":"YulFunctionCall","src":"7808:46:44"},"nodeType":"YulExpressionStatement","src":"7808:46:44"},{"nodeType":"YulAssignment","src":"7863:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7875:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"7886:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7871:3:44"},"nodeType":"YulFunctionCall","src":"7871:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7863:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_eb02bca886b66c8cccb8ebdd5f9e523f0cb437ea36db9ae94c35db86f94aa5fa__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7635:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7649:4:44","type":""}],"src":"7484:412:44"},{"body":{"nodeType":"YulBlock","src":"8075:228:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8092:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8103:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8085:6:44"},"nodeType":"YulFunctionCall","src":"8085:21:44"},"nodeType":"YulExpressionStatement","src":"8085:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8126:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8137:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8122:3:44"},"nodeType":"YulFunctionCall","src":"8122:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"8142:2:44","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8115:6:44"},"nodeType":"YulFunctionCall","src":"8115:30:44"},"nodeType":"YulExpressionStatement","src":"8115:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8165:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8176:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:44"},"nodeType":"YulFunctionCall","src":"8161:18:44"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"8181:34:44","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8154:6:44"},"nodeType":"YulFunctionCall","src":"8154:62:44"},"nodeType":"YulExpressionStatement","src":"8154:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8236:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8247:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8232:3:44"},"nodeType":"YulFunctionCall","src":"8232:18:44"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"8252:8:44","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8225:6:44"},"nodeType":"YulFunctionCall","src":"8225:36:44"},"nodeType":"YulExpressionStatement","src":"8225:36:44"},{"nodeType":"YulAssignment","src":"8270:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8282:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8293:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8278:3:44"},"nodeType":"YulFunctionCall","src":"8278:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8270:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8052:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8066:4:44","type":""}],"src":"7901:402:44"},{"body":{"nodeType":"YulBlock","src":"8389:170:44","statements":[{"body":{"nodeType":"YulBlock","src":"8435:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8444:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8447:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8437:6:44"},"nodeType":"YulFunctionCall","src":"8437:12:44"},"nodeType":"YulExpressionStatement","src":"8437:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8410:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"8419:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8406:3:44"},"nodeType":"YulFunctionCall","src":"8406:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"8431:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8402:3:44"},"nodeType":"YulFunctionCall","src":"8402:32:44"},"nodeType":"YulIf","src":"8399:52:44"},{"nodeType":"YulVariableDeclaration","src":"8460:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8479:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8473:5:44"},"nodeType":"YulFunctionCall","src":"8473:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8464:5:44","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8523:5:44"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8498:24:44"},"nodeType":"YulFunctionCall","src":"8498:31:44"},"nodeType":"YulExpressionStatement","src":"8498:31:44"},{"nodeType":"YulAssignment","src":"8538:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"8548:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8538:6:44"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8355:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8366:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8378:6:44","type":""}],"src":"8308:251:44"},{"body":{"nodeType":"YulBlock","src":"8738:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8755:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8766:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8748:6:44"},"nodeType":"YulFunctionCall","src":"8748:21:44"},"nodeType":"YulExpressionStatement","src":"8748:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8789:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8800:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8785:3:44"},"nodeType":"YulFunctionCall","src":"8785:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"8805:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8778:6:44"},"nodeType":"YulFunctionCall","src":"8778:30:44"},"nodeType":"YulExpressionStatement","src":"8778:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8828:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8839:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8824:3:44"},"nodeType":"YulFunctionCall","src":"8824:18:44"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8844:34:44","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8817:6:44"},"nodeType":"YulFunctionCall","src":"8817:62:44"},"nodeType":"YulExpressionStatement","src":"8817:62:44"},{"nodeType":"YulAssignment","src":"8888:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8900:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"8911:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8896:3:44"},"nodeType":"YulFunctionCall","src":"8896:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8888:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8715:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8729:4:44","type":""}],"src":"8564:356:44"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ENS_$5200__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_NameResolver_$5733__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_fe4e6cb0d911fbb084bbc1b17d0a5ac5b55e0dd119afa63b9e266f785db0c22d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 91)\n        mstore(add(headStart, 64), \"ReverseRegistrar: Caller is not \")\n        mstore(add(headStart, 96), \"a controller or authorised by ad\")\n        mstore(add(headStart, 128), \"dress or the address itself\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_address_t_rational_0_by_1__to_t_bytes32_t_bytes32_t_address_t_address_t_uint64__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_string_memory_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        let _1 := 32\n        mstore(add(headStart, _1), 64)\n        let length := mload(value1)\n        mstore(add(headStart, 64), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 96), mload(add(add(value1, i), _1)))\n        }\n        mstore(add(add(headStart, length), 96), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eb02bca886b66c8cccb8ebdd5f9e523f0cb437ea36db9ae94c35db86f94aa5fa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"ReverseRegistrar: Resolver addre\")\n        mstore(add(headStart, 96), \"ss must not be 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"5748":[{"length":32,"start":301},{"length":32,"start":752},{"length":32,"start":1287}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c66485b211610066578063c66485b2146101e1578063da8c229e146101f4578063e0dba60f14610227578063f2fde38b1461023a57600080fd5b80638da5cb5b146101aa578063bffbe61c146101bb578063c47f0027146101ce57600080fd5b806365669631116100c85780636566963114610167578063715018a61461017a5780637a806d6b14610184578063828eab0e1461019757600080fd5b80630f5a5466146100ef5780631e83409a146101155780633f15457f14610128575b600080fd5b6101026100fd366004610a25565b61024d565b6040519081526020015b60405180910390f35b610102610123366004610a5e565b610261565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010c565b610102610175366004610a7b565b610283565b61018261056e565b005b610102610192366004610b82565b610582565b60025461014f906001600160a01b031681565b6000546001600160a01b031661014f565b6101026101c9366004610a5e565b610616565b6101026101dc366004610bf7565b610671565b6101826101ef366004610a5e565b61068e565b610217610202366004610a5e565b60016020526000908152604090205460ff1681565b604051901515815260200161010c565b610182610235366004610c42565b610769565b610182610248366004610a5e565b6107d0565b600061025a338484610283565b9392505050565b60025460009061027d90339084906001600160a01b0316610283565b92915050565b6000836001600160a01b0381163314806102ac57503360009081526001602052604090205460ff165b8061035b57506040517fe985e9c50000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b9190610c70565b8061036a575061036a81610860565b6104075760405162461bcd60e51b815260206004820152605b60248201527f526576657273655265676973747261723a2043616c6c6572206973206e6f742060448201527f6120636f6e74726f6c6c6572206f7220617574686f726973656420627920616460648201527f6472657373206f7220746865206164647265737320697473656c660000000000608482015260a4015b60405180910390fd5b6000610412866108d9565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2602080830191909152818301849052825180830384018152606090920192839052815191012091925081906001600160a01b038916907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a36040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152602481018390526001600160a01b0387811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561054b57600080fd5b505af115801561055f573d6000803e3d6000fd5b50929998505050505050505050565b610576610959565b61058060006109b3565b565b600080610590868686610283565b6040517f773722130000000000000000000000000000000000000000000000000000000081529091506001600160a01b038516906377372213906105da9084908790600401610c8d565b600060405180830381600087803b1580156105f457600080fd5b505af1158015610608573d6000803e3d6000fd5b509298975050505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610642836108d9565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b60025460009061027d90339081906001600160a01b031685610582565b610696610959565b6001600160a01b0381166107125760405162461bcd60e51b815260206004820152603060248201527f526576657273655265676973747261723a205265736f6c76657220616464726560448201527f7373206d757374206e6f7420626520300000000000000000000000000000000060648201526084016103fe565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517feae17a84d9eb83d8c8eb317f9e7d64857bc363fa51674d996c023f4340c577cf90600090a250565b610771610959565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b6107d8610959565b6001600160a01b0381166108545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103fe565b61085d816109b3565b50565b6000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156108bc575060408051601f3d908101601f191682019092526108b991810190610ce3565b60015b6108c857506000919050565b6001600160a01b0316331492915050565b600060285b801561094d57600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506108de565b50506028600020919050565b6000546001600160a01b031633146105805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103fe565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461085d57600080fd5b60008060408385031215610a3857600080fd5b8235610a4381610a10565b91506020830135610a5381610a10565b809150509250929050565b600060208284031215610a7057600080fd5b813561025a81610a10565b600080600060608486031215610a9057600080fd5b8335610a9b81610a10565b92506020840135610aab81610a10565b91506040840135610abb81610a10565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610b0657600080fd5b813567ffffffffffffffff80821115610b2157610b21610ac6565b604051601f8301601f19908116603f01168101908282118183101715610b4957610b49610ac6565b81604052838152866020858801011115610b6257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610b9857600080fd5b8435610ba381610a10565b93506020850135610bb381610a10565b92506040850135610bc381610a10565b9150606085013567ffffffffffffffff811115610bdf57600080fd5b610beb87828801610af5565b91505092959194509250565b600060208284031215610c0957600080fd5b813567ffffffffffffffff811115610c2057600080fd5b610c2c84828501610af5565b949350505050565b801515811461085d57600080fd5b60008060408385031215610c5557600080fd5b8235610c6081610a10565b91506020830135610a5381610c34565b600060208284031215610c8257600080fd5b815161025a81610c34565b82815260006020604081840152835180604085015260005b81811015610cc157858101830151858201606001528201610ca5565b506000606082860101526060601f19601f830116850101925050509392505050565b600060208284031215610cf557600080fd5b815161025a81610a1056fea26469706673582212202410376252cdd0e99cb7aab6ba74c080f86351748fc640a4cea28f4475e0a03664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC66485B2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC66485B2 EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xDA8C229E EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xE0DBA60F EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0xBFFBE61C EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xC47F0027 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65669631 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x65669631 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x7A806D6B EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x828EAB0E EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF5A5466 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x1E83409A EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x3F15457F EQ PUSH2 0x128 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0x123 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x261 JUMP JUMPDEST PUSH2 0x14F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10C JUMP JUMPDEST PUSH2 0x102 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xA7B JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x56E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x102 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xB82 JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x14F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14F JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x616 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0xBF7 JUMP JUMPDEST PUSH2 0x671 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST PUSH2 0x217 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10C JUMP JUMPDEST PUSH2 0x182 PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0xC42 JUMP JUMPDEST PUSH2 0x769 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x7D0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25A CALLER DUP5 DUP5 PUSH2 0x283 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x27D SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x283 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x2AC JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x35B JUMPI POP PUSH1 0x40 MLOAD PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xE985E9C5 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x337 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35B SWAP2 SWAP1 PUSH2 0xC70 JUMP JUMPDEST DUP1 PUSH2 0x36A JUMPI POP PUSH2 0x36A DUP2 PUSH2 0x860 JUMP JUMPDEST PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526576657273655265676973747261723A2043616C6C6572206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6120636F6E74726F6C6C6572206F7220617574686F7269736564206279206164 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6472657373206F7220746865206164647265737320697473656C660000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x412 DUP7 PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP4 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 SWAP3 POP DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH32 0x6ADA868DD3058CF77A48A74489FD7963688E5464B2B0FA957ACE976243270E92 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x40 MLOAD PUSH32 0x5EF2C7F000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5EF2C7F0 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x55F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x576 PUSH2 0x959 JUMP JUMPDEST PUSH2 0x580 PUSH1 0x0 PUSH2 0x9B3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x590 DUP7 DUP7 DUP7 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7737221300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x77372213 SWAP1 PUSH2 0x5DA SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xC8D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x608 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH2 0x642 DUP4 PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x27D SWAP1 CALLER SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x582 JUMP JUMPDEST PUSH2 0x696 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x712 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526576657273655265676973747261723A205265736F6C766572206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373206D757374206E6F74206265203000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xEAE17A84D9EB83D8C8EB317F9E7D64857BC363FA51674D996C023F4340C577CF SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x771 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x4C97694570A07277810AF7E5669FFD5F6A2D6B74B6E9A274B8B870FD5114CF87 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x7D8 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x854 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3FE JUMP JUMPDEST PUSH2 0x85D DUP2 PUSH2 0x9B3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8BC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8B9 SWAP2 DUP2 ADD SWAP1 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8C8 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x28 JUMPDEST DUP1 ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP5 AND BYTE DUP2 MSTORE8 PUSH1 0x10 SWAP1 SWAP3 DIV SWAP2 PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP5 AND BYTE DUP2 MSTORE8 PUSH1 0x10 DUP4 DIV SWAP3 POP PUSH2 0x8DE JUMP JUMPDEST POP POP PUSH1 0x28 PUSH1 0x0 KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x580 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x85D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA43 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xA53 DUP2 PUSH2 0xA10 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x25A DUP2 PUSH2 0xA10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xA9B DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xAAB DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xABB DUP2 PUSH2 0xA10 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB21 JUMPI PUSH2 0xB21 PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xB49 JUMPI PUSH2 0xB49 PUSH2 0xAC6 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0xB62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xBA3 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0xBB3 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xBC3 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBEB DUP8 DUP3 DUP9 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC2C DUP5 DUP3 DUP6 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x85D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xC60 DUP2 PUSH2 0xA10 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xA53 DUP2 PUSH2 0xC34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x25A DUP2 PUSH2 0xC34 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCC1 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0xCA5 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x25A DUP2 PUSH2 0xA10 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 LT CALLDATACOPY PUSH3 0x52CDD0 0xE9 SWAP13 0xB7 0xAA 0xB6 0xBA PUSH21 0xC080F86351748FC640A4CEA28F4475E0A03664736F PUSH13 0x63430008110033000000000000 ","sourceMap":"516:5995:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3542:183;;;;;;:::i;:::-;;:::i;:::-;;;712:25:44;;;700:2;685:18;3542:183:38;;;;;;;;2201:147;;;;;;:::i;:::-;;:::i;592:24::-;;;;;;;;-1:-1:-1;;;;;1176:55:44;;;1158:74;;1146:2;1131:18;592:24:38;1000:238:44;2717:476:38;;;;;;:::i;:::-;;:::i;1824:101:0:-;;;:::i;:::-;;4794:305:38;;;;;;:::i;:::-;;:::i;622:35::-;;;;;-1:-1:-1;;;;;622:35:38;;;1201:85:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;5267:201:38;;;;;;:::i;:::-;;:::i;4044:255::-;;;;;;:::i;:::-;;:::i;1607:326::-;;;;;;:::i;:::-;;:::i;118:43:39:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4410:14:44;;4403:22;4385:41;;4373:2;4358:18;118:43:39;4245:187:44;410:177:39;;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;:::i;:::-;;:::i;3542:183:38:-;3650:7;3676:42;3689:10;3701:6;3709:8;3676:12;:42::i;:::-;3669:49;3542:183;-1:-1:-1;;;3542:183:38:o;2201:147::-;2324:15;;2257:7;;2283:58;;2296:10;;2308:6;;-1:-1:-1;;;;;2324:15:38;2283:12;:58::i;:::-;2276:65;2201:147;-1:-1:-1;;2201:147:38:o;2717:476::-;2859:7;2844:4;-1:-1:-1;;;;;1309:18:38;;1317:10;1309:18;;:61;;-1:-1:-1;1359:10:38;1347:23;;;;:11;:23;;;;;;;;1309:61;:119;;;-1:-1:-1;1390:38:38;;;;;-1:-1:-1;;;;;5200:15:44;;;1390:38:38;;;5182:34:44;1417:10:38;5232:18:44;;;5225:43;1390:3:38;:20;;;;5094:18:44;;1390:38:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1309:157;;;;1448:18;1461:4;1448:12;:18::i;:::-;1288:295;;;;-1:-1:-1;;;1288:295:38;;5731:2:44;1288:295:38;;;5713:21:44;5770:2;5750:18;;;5743:30;5809:34;5789:18;;;5782:62;5880:34;5860:18;;;5853:62;5952:29;5931:19;;;5924:58;5999:19;;1288:295:38;;;;;;;;;2878:17:::1;2898:20;2913:4;2898:14;:20::i;:::-;2973:46;::::0;;418:66:::1;2973:46;::::0;;::::1;6186:19:44::0;;;;6221:12;;;6214:28;;;2973:46:38;;;;;;;;;6258:12:44;;;;2973:46:38;;;;2950:79;;;::::1;::::0;6214:28:44;;-1:-1:-1;2950:79:38;;-1:-1:-1;;;;;3044:33:38;::::1;::::0;::::1;::::0;-1:-1:-1;;3044:33:38::1;3087:71;::::0;;;;418:66:::1;3087:71;::::0;::::1;6547:25:44::0;6588:18;;;6581:34;;;-1:-1:-1;;;;;6712:15:44;;;6692:18;;;6685:43;6764:15;;;6744:18;;;6737:43;3108:17:38::1;6796:19:44::0;;;6789:60;3087:3:38::1;:20;::::0;::::1;::::0;6519:19:44;;3087:71:38::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;3175:11:38;;2717:476;-1:-1:-1;;;;;;;;;2717:476:38:o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;4794:305:38:-;4949:7;4968:12;4983:36;4996:4;5002:6;5010:8;4983:12;:36::i;:::-;5029:42;;;;;4968:51;;-1:-1:-1;;;;;;5029:30:38;;;;;:42;;4968:51;;5066:4;;5029:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5088:4:38;;4794:305;-1:-1:-1;;;;;;;;4794:305:38:o;5267:201::-;5325:7;418:66;5426:20;5441:4;5426:14;:20::i;:::-;5390:57;;;;;;6186:19:44;;;;6221:12;;6214:28;6258:12;;5390:57:38;;;;;;;;;;;;5363:98;;;;;;5344:117;;5267:201;;;:::o;4044:255::-;4240:15;;4106:7;;4144:148;;4176:10;;;;-1:-1:-1;;;;;4240:15:38;4274:4;4144:14;:148::i;1607:326::-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1710:31:38;::::1;1689:126;;;::::0;-1:-1:-1;;;1689:126:38;;7686:2:44;1689:126:38::1;::::0;::::1;7668:21:44::0;7725:2;7705:18;;;7698:30;7764:34;7744:18;;;7737:62;7835:18;7815;;;7808:46;7871:19;;1689:126:38::1;7484:412:44::0;1689:126:38::1;1825:15;:40:::0;;-1:-1:-1;;1825:40:38::1;-1:-1:-1::0;;;;;1825:40:38;::::1;::::0;;::::1;::::0;;;1880:46:::1;::::0;::::1;::::0;-1:-1:-1;;1880:46:38::1;1607:326:::0;:::o;410:177:39:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;494:23:39;::::1;;::::0;;;:11:::1;:23;::::0;;;;;;;;:33;;-1:-1:-1;;494:33:39::1;::::0;::::1;;::::0;;::::1;::::0;;;542:38;;4385:41:44;;;542:38:39::1;::::0;4358:18:44;542:38:39::1;;;;;;;410:177:::0;;:::o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;8103:2:44;2154:73:0::1;::::0;::::1;8085:21:44::0;8142:2;8122:18;;;8115:30;8181:34;8161:18;;;8154:62;8252:8;8232:18;;;8225:36;8278:19;;2154:73:0::1;7901:402:44::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;6283:226:38:-;6342:4;6370;-1:-1:-1;;;;;6362:19:38;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6362:21:38;;;;;;;;-1:-1:-1;;6362:21:38;;;;;;;;;;;;:::i;:::-;;;6358:145;;-1:-1:-1;6487:5:38;;6283:226;-1:-1:-1;6283:226:38:o;6358:145::-;-1:-1:-1;;;;;6429:19:38;6438:10;6429:19;;6283:226;-1:-1:-1;;6283:226:38:o;5773:504::-;5833:11;5910:2;5879:345;5927:8;;5879:345;;-1:-1:-1;;5976:9:38;6034:6;6028:3;6018:14;;6013:28;5976:9;6002:40;6077:4;6067:15;;;;-1:-1:-1;;6104:9:38;6162:6;6156:3;6146:14;;6141:28;6104:9;6130:40;6205:4;6199;6195:15;6187:23;;5879:345;;;-1:-1:-1;;6258:2:38;6255:1;6245:16;;5773:504;-1:-1:-1;5773:504:38:o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;8766:2:44;1414:68:0;;;8748:21:44;;;8785:18;;;8778:30;8844:34;8824:18;;;8817:62;8896:18;;1414:68:0;8564:356:44;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:154:44:-;-1:-1:-1;;;;;93:5:44;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:388;241:6;249;302:2;290:9;281:7;277:23;273:32;270:52;;;318:1;315;308:12;270:52;357:9;344:23;376:31;401:5;376:31;:::i;:::-;426:5;-1:-1:-1;483:2:44;468:18;;455:32;496:33;455:32;496:33;:::i;:::-;548:7;538:17;;;173:388;;;;;:::o;748:247::-;807:6;860:2;848:9;839:7;835:23;831:32;828:52;;;876:1;873;866:12;828:52;915:9;902:23;934:31;959:5;934:31;:::i;1243:529::-;1320:6;1328;1336;1389:2;1377:9;1368:7;1364:23;1360:32;1357:52;;;1405:1;1402;1395:12;1357:52;1444:9;1431:23;1463:31;1488:5;1463:31;:::i;:::-;1513:5;-1:-1:-1;1570:2:44;1555:18;;1542:32;1583:33;1542:32;1583:33;:::i;:::-;1635:7;-1:-1:-1;1694:2:44;1679:18;;1666:32;1707:33;1666:32;1707:33;:::i;:::-;1759:7;1749:17;;;1243:529;;;;;:::o;1777:184::-;1829:77;1826:1;1819:88;1926:4;1923:1;1916:15;1950:4;1947:1;1940:15;1966:719;2009:5;2062:3;2055:4;2047:6;2043:17;2039:27;2029:55;;2080:1;2077;2070:12;2029:55;2116:6;2103:20;2142:18;2179:2;2175;2172:10;2169:36;;;2185:18;;:::i;:::-;2260:2;2254:9;2228:2;2314:13;;-1:-1:-1;;2310:22:44;;;2334:2;2306:31;2302:40;2290:53;;;2358:18;;;2378:22;;;2355:46;2352:72;;;2404:18;;:::i;:::-;2444:10;2440:2;2433:22;2479:2;2471:6;2464:18;2525:3;2518:4;2513:2;2505:6;2501:15;2497:26;2494:35;2491:55;;;2542:1;2539;2532:12;2491:55;2606:2;2599:4;2591:6;2587:17;2580:4;2572:6;2568:17;2555:54;2653:1;2646:4;2641:2;2633:6;2629:15;2625:26;2618:37;2673:6;2664:15;;;;;;1966:719;;;;:::o;2690:740::-;2786:6;2794;2802;2810;2863:3;2851:9;2842:7;2838:23;2834:33;2831:53;;;2880:1;2877;2870:12;2831:53;2919:9;2906:23;2938:31;2963:5;2938:31;:::i;:::-;2988:5;-1:-1:-1;3045:2:44;3030:18;;3017:32;3058:33;3017:32;3058:33;:::i;:::-;3110:7;-1:-1:-1;3169:2:44;3154:18;;3141:32;3182:33;3141:32;3182:33;:::i;:::-;3234:7;-1:-1:-1;3292:2:44;3277:18;;3264:32;3319:18;3308:30;;3305:50;;;3351:1;3348;3341:12;3305:50;3374;3416:7;3407:6;3396:9;3392:22;3374:50;:::i;:::-;3364:60;;;2690:740;;;;;;;:::o;3918:322::-;3987:6;4040:2;4028:9;4019:7;4015:23;4011:32;4008:52;;;4056:1;4053;4046:12;4008:52;4096:9;4083:23;4129:18;4121:6;4118:30;4115:50;;;4161:1;4158;4151:12;4115:50;4184;4226:7;4217:6;4206:9;4202:22;4184:50;:::i;:::-;4174:60;3918:322;-1:-1:-1;;;;3918:322:44:o;4437:118::-;4523:5;4516:13;4509:21;4502:5;4499:32;4489:60;;4545:1;4542;4535:12;4560:382;4625:6;4633;4686:2;4674:9;4665:7;4661:23;4657:32;4654:52;;;4702:1;4699;4692:12;4654:52;4741:9;4728:23;4760:31;4785:5;4760:31;:::i;:::-;4810:5;-1:-1:-1;4867:2:44;4852:18;;4839:32;4880:30;4839:32;4880:30;:::i;5279:245::-;5346:6;5399:2;5387:9;5378:7;5374:23;5370:32;5367:52;;;5415:1;5412;5405:12;5367:52;5447:9;5441:16;5466:28;5488:5;5466:28;:::i;6860:619::-;7037:6;7026:9;7019:25;7000:4;7063:2;7101;7096;7085:9;7081:18;7074:30;7133:6;7127:13;7176:6;7171:2;7160:9;7156:18;7149:34;7201:1;7211:140;7225:6;7222:1;7219:13;7211:140;;;7320:14;;;7316:23;;7310:30;7286:17;;;7305:2;7282:26;7275:66;7240:10;;7211:140;;;7215:3;7400:1;7395:2;7386:6;7375:9;7371:22;7367:31;7360:42;7470:2;7463;7459:7;7454:2;7446:6;7442:15;7438:29;7427:9;7423:45;7419:54;7411:62;;;;6860:619;;;;;:::o;8308:251::-;8378:6;8431:2;8419:9;8410:7;8406:23;8402:32;8399:52;;;8447:1;8444;8437:12;8399:52;8479:9;8473:16;8498:31;8523:5;8498:31;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"676400","executionCost":"infinite","totalCost":"infinite"},"external":{"claim(address)":"infinite","claimForAddr(address,address,address)":"infinite","claimWithResolver(address,address)":"infinite","controllers(address)":"2569","defaultResolver()":"2426","ens()":"infinite","node(address)":"infinite","owner()":"2354","renounceOwnership()":"infinite","setController(address,bool)":"infinite","setDefaultResolver(address)":"27913","setName(string)":"infinite","setNameForAddr(address,address,address,string)":"infinite","transferOwnership(address)":"infinite"},"internal":{"ownsContract(address)":"infinite","sha3HexAddress(address)":"infinite"}},"methodIdentifiers":{"claim(address)":"1e83409a","claimForAddr(address,address,address)":"65669631","claimWithResolver(address,address)":"0f5a5466","controllers(address)":"da8c229e","defaultResolver()":"828eab0e","ens()":"3f15457f","node(address)":"bffbe61c","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setController(address,bool)":"e0dba60f","setDefaultResolver(address)":"c66485b2","setName(string)":"c47f0027","setNameForAddr(address,address,address,string)":"7a806d6b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract NameResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"DefaultResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ReverseClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultResolver\",\"outputs\":[{\"internalType\":\"contract NameResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setDefaultResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"_owner\":\"The address to set as the owner of the reverse record in ENS.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"claimForAddr(address,address,address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"_owner\":\"The address to set as the owner of the reverse record in ENS.\",\"addr\":\"The reverse record to set\",\"resolver\":\"The resolver of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"claimWithResolver(address,address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"_owner\":\"The address to set as the owner of the reverse record in ENS.\",\"resolver\":\"The address of the resolver to set; 0 to leave unchanged.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"ensAddr\":\"The address of the ENS registry.\"}},\"node(address)\":{\"details\":\"Returns the node hash for a given account's reverse records.\",\"params\":{\"addr\":\"The address to hash\"},\"returns\":{\"_0\":\"The ENS node hash.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setName(string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddr(address,address,address,string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the account provided. Updates the resolver to a designated resolver Only callable by controllers and authorised users\",\"params\":{\"_owner\":\"The owner of the reverse node\",\"addr\":\"The reverse record to set\",\"name\":\"The name to set for this address.\",\"resolver\":\"The resolver of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/ReverseRegistrar.sol\":\"ReverseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address _owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, _owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param _owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(\\n        address _owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, _owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param _owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address _owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, _owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a94f7a4478af1bcc9d3ac657dece4df9f0134cff1c1b52e0f230998fdd154b7\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/reverseRegistrar/ReverseRegistrar.sol:ReverseRegistrar","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":6079,"contract":"contracts/reverseRegistrar/ReverseRegistrar.sol:ReverseRegistrar","label":"controllers","offset":0,"slot":"1","type":"t_mapping(t_address,t_bool)"},{"astId":5751,"contract":"contracts/reverseRegistrar/ReverseRegistrar.sol:ReverseRegistrar","label":"defaultResolver","offset":0,"slot":"2","type":"t_contract(NameResolver)5733"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(NameResolver)5733":{"encoding":"inplace","label":"contract NameResolver","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/root/Controllable.sol":{"Controllable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"},{"indexed":false,"internalType":"bool","name":"enabled","type":"bool"}],"name":"ControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"controllers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"},{"internalType":"bool","name":"enabled","type":"bool"}],"name":"setController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":31,"id":111,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103bf8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063da8c229e11610050578063da8c229e146100a3578063e0dba60f146100d6578063f2fde38b146100e957600080fd5b8063715018a61461006c5780638da5cb5b14610076575b600080fd5b6100746100fc565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c66100b136600461032b565b60016020526000908152604090205460ff1681565b604051901515815260200161009a565b6100746100e436600461034d565b610110565b6100746100f736600461032b565b610184565b610104610226565b61010e600061028d565b565b610118610226565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b61018c610226565b73ffffffffffffffffffffffffffffffffffffffff811661021a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102238161028d565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461010e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610211565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461032657600080fd5b919050565b60006020828403121561033d57600080fd5b61034682610302565b9392505050565b6000806040838503121561036057600080fd5b61036983610302565b91506020830135801515811461037e57600080fd5b80915050925092905056fea2646970667358221220048951b330ea5d16f9c3fa15a10e59790159073c628f809682ad8e8aa5257eff64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x3BF DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDA8C229E GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xDA8C229E EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0xE0DBA60F EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x76 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xFC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9A JUMP JUMPDEST PUSH2 0x74 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x34D JUMP JUMPDEST PUSH2 0x110 JUMP JUMPDEST PUSH2 0x74 PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x32B JUMP JUMPDEST PUSH2 0x184 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x226 JUMP JUMPDEST PUSH2 0x10E PUSH1 0x0 PUSH2 0x28D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x118 PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x4C97694570A07277810AF7E5669FFD5F6A2D6B74B6E9A274B8B870FD5114CF87 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x18C PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x21A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x223 DUP2 PUSH2 0x28D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x211 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x346 DUP3 PUSH2 0x302 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x369 DUP4 PUSH2 0x302 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV DUP10 MLOAD 0xB3 ADDRESS 0xEA 0x5D AND 0xF9 0xC3 STATICCALL ISZERO LOG1 0xE MSIZE PUSH26 0x159073C628F809682AD8E8AA5257EFF64736F6C634300081100 CALLER ","sourceMap":"79:510:39:-:0;;;;;;;;;;;;-1:-1:-1;936:32:0;719:10:8;936:18:0;:32::i;:::-;79:510:39;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;79:510:39:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":550,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":653,"id":111,"parameterSlots":1,"returnSlots":0},"@controllers_6079":{"entryPoint":null,"id":6079,"parameterSlots":0,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":252,"id":68,"parameterSlots":0,"returnSlots":0},"@setController_6118":{"entryPoint":272,"id":6118,"parameterSlots":2,"returnSlots":0},"@transferOwnership_91":{"entryPoint":388,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":770,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":811,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bool":{"entryPoint":845,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1946:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:125:44","statements":[{"nodeType":"YulAssignment","src":"125:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:44"},"nodeType":"YulFunctionCall","src":"133:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"190:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:44"},"nodeType":"YulFunctionCall","src":"178:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:44"},"nodeType":"YulFunctionCall","src":"160:74:44"},"nodeType":"YulExpressionStatement","src":"160:74:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:44","type":""}],"src":"14:226:44"},{"body":{"nodeType":"YulBlock","src":"294:147:44","statements":[{"nodeType":"YulAssignment","src":"304:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"326:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"313:12:44"},"nodeType":"YulFunctionCall","src":"313:20:44"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"304:5:44"}]},{"body":{"nodeType":"YulBlock","src":"419:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"428:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"431:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"421:6:44"},"nodeType":"YulFunctionCall","src":"421:12:44"},"nodeType":"YulExpressionStatement","src":"421:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"355:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"366:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"373:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"362:3:44"},"nodeType":"YulFunctionCall","src":"362:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"352:2:44"},"nodeType":"YulFunctionCall","src":"352:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"345:6:44"},"nodeType":"YulFunctionCall","src":"345:73:44"},"nodeType":"YulIf","src":"342:93:44"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"273:6:44","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"284:5:44","type":""}],"src":"245:196:44"},{"body":{"nodeType":"YulBlock","src":"516:116:44","statements":[{"body":{"nodeType":"YulBlock","src":"562:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"571:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"574:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"564:6:44"},"nodeType":"YulFunctionCall","src":"564:12:44"},"nodeType":"YulExpressionStatement","src":"564:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"537:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"546:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"533:3:44"},"nodeType":"YulFunctionCall","src":"533:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"558:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"529:3:44"},"nodeType":"YulFunctionCall","src":"529:32:44"},"nodeType":"YulIf","src":"526:52:44"},{"nodeType":"YulAssignment","src":"587:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"616:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"597:18:44"},"nodeType":"YulFunctionCall","src":"597:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"587:6:44"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"482:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"493:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"505:6:44","type":""}],"src":"446:186:44"},{"body":{"nodeType":"YulBlock","src":"732:92:44","statements":[{"nodeType":"YulAssignment","src":"742:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"754:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"765:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"750:3:44"},"nodeType":"YulFunctionCall","src":"750:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"742:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"784:9:44"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"809:6:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"802:6:44"},"nodeType":"YulFunctionCall","src":"802:14:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"795:6:44"},"nodeType":"YulFunctionCall","src":"795:22:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"777:6:44"},"nodeType":"YulFunctionCall","src":"777:41:44"},"nodeType":"YulExpressionStatement","src":"777:41:44"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"701:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"712:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"723:4:44","type":""}],"src":"637:187:44"},{"body":{"nodeType":"YulBlock","src":"913:263:44","statements":[{"body":{"nodeType":"YulBlock","src":"959:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"968:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"971:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"961:6:44"},"nodeType":"YulFunctionCall","src":"961:12:44"},"nodeType":"YulExpressionStatement","src":"961:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"934:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"943:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"930:3:44"},"nodeType":"YulFunctionCall","src":"930:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"955:2:44","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"926:3:44"},"nodeType":"YulFunctionCall","src":"926:32:44"},"nodeType":"YulIf","src":"923:52:44"},{"nodeType":"YulAssignment","src":"984:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1013:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"994:18:44"},"nodeType":"YulFunctionCall","src":"994:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"984:6:44"}]},{"nodeType":"YulVariableDeclaration","src":"1032:45:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1062:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1073:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1058:3:44"},"nodeType":"YulFunctionCall","src":"1058:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1045:12:44"},"nodeType":"YulFunctionCall","src":"1045:32:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1036:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1130:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1139:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1142:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1132:6:44"},"nodeType":"YulFunctionCall","src":"1132:12:44"},"nodeType":"YulExpressionStatement","src":"1132:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1099:5:44"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1120:5:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1113:6:44"},"nodeType":"YulFunctionCall","src":"1113:13:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1106:6:44"},"nodeType":"YulFunctionCall","src":"1106:21:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1096:2:44"},"nodeType":"YulFunctionCall","src":"1096:32:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1089:6:44"},"nodeType":"YulFunctionCall","src":"1089:40:44"},"nodeType":"YulIf","src":"1086:60:44"},{"nodeType":"YulAssignment","src":"1155:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1165:5:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1155:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"871:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"882:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"894:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"902:6:44","type":""}],"src":"829:347:44"},{"body":{"nodeType":"YulBlock","src":"1355:228:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1372:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1383:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1365:6:44"},"nodeType":"YulFunctionCall","src":"1365:21:44"},"nodeType":"YulExpressionStatement","src":"1365:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1402:3:44"},"nodeType":"YulFunctionCall","src":"1402:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"1422:2:44","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1395:6:44"},"nodeType":"YulFunctionCall","src":"1395:30:44"},"nodeType":"YulExpressionStatement","src":"1395:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1445:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1456:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1441:3:44"},"nodeType":"YulFunctionCall","src":"1441:18:44"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"1461:34:44","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1434:6:44"},"nodeType":"YulFunctionCall","src":"1434:62:44"},"nodeType":"YulExpressionStatement","src":"1434:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1516:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1527:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1512:3:44"},"nodeType":"YulFunctionCall","src":"1512:18:44"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"1532:8:44","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1505:6:44"},"nodeType":"YulFunctionCall","src":"1505:36:44"},"nodeType":"YulExpressionStatement","src":"1505:36:44"},{"nodeType":"YulAssignment","src":"1550:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1562:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1573:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1558:3:44"},"nodeType":"YulFunctionCall","src":"1558:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1550:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1332:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1346:4:44","type":""}],"src":"1181:402:44"},{"body":{"nodeType":"YulBlock","src":"1762:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1779:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1790:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1772:6:44"},"nodeType":"YulFunctionCall","src":"1772:21:44"},"nodeType":"YulExpressionStatement","src":"1772:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1813:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1824:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1809:3:44"},"nodeType":"YulFunctionCall","src":"1809:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"1829:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1802:6:44"},"nodeType":"YulFunctionCall","src":"1802:30:44"},"nodeType":"YulExpressionStatement","src":"1802:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1852:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1863:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1848:3:44"},"nodeType":"YulFunctionCall","src":"1848:18:44"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1868:34:44","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1841:6:44"},"nodeType":"YulFunctionCall","src":"1841:62:44"},"nodeType":"YulExpressionStatement","src":"1841:62:44"},{"nodeType":"YulAssignment","src":"1912:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1924:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1935:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1920:3:44"},"nodeType":"YulFunctionCall","src":"1920:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1912:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1739:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1753:4:44","type":""}],"src":"1588:356:44"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100675760003560e01c8063da8c229e11610050578063da8c229e146100a3578063e0dba60f146100d6578063f2fde38b146100e957600080fd5b8063715018a61461006c5780638da5cb5b14610076575b600080fd5b6100746100fc565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c66100b136600461032b565b60016020526000908152604090205460ff1681565b604051901515815260200161009a565b6100746100e436600461034d565b610110565b6100746100f736600461032b565b610184565b610104610226565b61010e600061028d565b565b610118610226565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b61018c610226565b73ffffffffffffffffffffffffffffffffffffffff811661021a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102238161028d565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461010e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610211565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461032657600080fd5b919050565b60006020828403121561033d57600080fd5b61034682610302565b9392505050565b6000806040838503121561036057600080fd5b61036983610302565b91506020830135801515811461037e57600080fd5b80915050925092905056fea2646970667358221220048951b330ea5d16f9c3fa15a10e59790159073c628f809682ad8e8aa5257eff64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDA8C229E GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xDA8C229E EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0xE0DBA60F EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x76 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xFC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9A JUMP JUMPDEST PUSH2 0x74 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x34D JUMP JUMPDEST PUSH2 0x110 JUMP JUMPDEST PUSH2 0x74 PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x32B JUMP JUMPDEST PUSH2 0x184 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x226 JUMP JUMPDEST PUSH2 0x10E PUSH1 0x0 PUSH2 0x28D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x118 PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x4C97694570A07277810AF7E5669FFD5F6A2D6B74B6E9A274B8B870FD5114CF87 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x18C PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x21A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x223 DUP2 PUSH2 0x28D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x211 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x346 DUP3 PUSH2 0x302 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x369 DUP4 PUSH2 0x302 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV DUP10 MLOAD 0xB3 ADDRESS 0xEA 0x5D AND 0xF9 0xC3 STATICCALL ISZERO LOG1 0xE MSIZE PUSH26 0x159073C628F809682AD8E8AA5257EFF64736F6C634300081100 CALLER ","sourceMap":"79:510:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1824:101:0;;;:::i;:::-;;1201:85;1247:7;1273:6;1201:85;;1273:6;;;;160:74:44;;148:2;133:18;1201:85:0;;;;;;;;118:43:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;802:14:44;;795:22;777:41;;765:2;750:18;118:43:39;637:187:44;410:177:39;;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;:::i;:::-;;:::i;1824:101::-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;410:177:39:-;1094:13:0;:11;:13::i;:::-;494:23:39::1;::::0;::::1;;::::0;;;:11:::1;:23;::::0;;;;;;;;:33;;-1:-1:-1;;494:33:39::1;::::0;::::1;;::::0;;::::1;::::0;;;542:38;;777:41:44;;;542:38:39::1;::::0;750:18:44;542:38:39::1;;;;;;;410:177:::0;;:::o;2074:198:0:-;1094:13;:11;:13::i;:::-;2162:22:::1;::::0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;1383:2:44;2154:73:0::1;::::0;::::1;1365:21:44::0;1422:2;1402:18;;;1395:30;1461:34;1441:18;;;1434:62;1532:8;1512:18;;;1505:36;1558:19;;2154:73:0::1;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;1359:130::-;1247:7;1273:6;1422:23;1273:6;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;1790:2:44;1414:68:0;;;1772:21:44;;;1809:18;;;1802:30;1868:34;1848:18;;;1841:62;1920:18;;1414:68:0;1588:356:44;2426:187:0;2499:16;2518:6;;;2534:17;;;;;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;245:196:44:-;313:20;;373:42;362:54;;352:65;;342:93;;431:1;428;421:12;342:93;245:196;;;:::o;446:186::-;505:6;558:2;546:9;537:7;533:23;529:32;526:52;;;574:1;571;564:12;526:52;597:29;616:9;597:29;:::i;:::-;587:39;446:186;-1:-1:-1;;;446:186:44:o;829:347::-;894:6;902;955:2;943:9;934:7;930:23;926:32;923:52;;;971:1;968;961:12;923:52;994:29;1013:9;994:29;:::i;:::-;984:39;;1073:2;1062:9;1058:18;1045:32;1120:5;1113:13;1106:21;1099:5;1096:32;1086:60;;1142:1;1139;1132:12;1086:60;1165:5;1155:15;;;829:347;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"191800","executionCost":"26073","totalCost":"217873"},"external":{"controllers(address)":"2519","owner()":"2301","renounceOwnership()":"infinite","setController(address,bool)":"28283","transferOwnership(address)":"28314"}},"methodIdentifiers":{"controllers(address)":"da8c229e","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setController(address,bool)":"e0dba60f","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/root/Controllable.sol\":\"Controllable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/root/Controllable.sol:Controllable","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":6079,"contract":"contracts/root/Controllable.sol:Controllable","label":"controllers","offset":0,"slot":"1","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/ERC20Recoverable.sol":{"ERC20Recoverable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"recoverFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"recoverFunds(address,address,uint256)":{"details":"The contract is Ownable and only the owner can call the recover function.","params":{"_amount":"The amount of tokens to recover.","_to":"The address to send the tokens to.","_token":"The address of the ERC20 token to recover"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":31,"id":111,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103c58061007e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635d3590d514610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461009a575b600080fd5b61006461005f36600461030f565b6100ad565b005b610064610154565b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100646100a836600461034b565b610168565b6100b561020a565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561012a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014e919061036d565b50505050565b61015c61020a565b6101666000610271565b565b61017061020a565b73ffffffffffffffffffffffffffffffffffffffff81166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61020781610271565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461030a57600080fd5b919050565b60008060006060848603121561032457600080fd5b61032d846102e6565b925061033b602085016102e6565b9150604084013590509250925092565b60006020828403121561035d57600080fd5b610366826102e6565b9392505050565b60006020828403121561037f57600080fd5b8151801515811461036657600080fdfea2646970667358221220948af424260e51fce86359f2de15e368a4ce97d80e01828cfc670bd7ad56b4d864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x3C5 DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5D3590D5 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x9A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x30F JUMP JUMPDEST PUSH2 0xAD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x154 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0xA8 CALLDATASIZE PUSH1 0x4 PUSH2 0x34B JUMP JUMPDEST PUSH2 0x168 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x20A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E SWAP2 SWAP1 PUSH2 0x36D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x15C PUSH2 0x20A JUMP JUMPDEST PUSH2 0x166 PUSH1 0x0 PUSH2 0x271 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x170 PUSH2 0x20A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x207 DUP2 PUSH2 0x271 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x166 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32D DUP5 PUSH2 0x2E6 JUMP JUMPDEST SWAP3 POP PUSH2 0x33B PUSH1 0x20 DUP6 ADD PUSH2 0x2E6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x366 DUP3 PUSH2 0x2E6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x366 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 DUP11 DELEGATECALL 0x24 0x26 0xE MLOAD 0xFC 0xE8 PUSH4 0x59F2DE15 0xE3 PUSH9 0xA4CE97D80E01828CFC PUSH8 0xBD7AD56B4D86473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"271:535:40:-:0;;;;;;;;;;;;-1:-1:-1;936:32:0;719:10:8;936:18:0;:32::i;:::-;271:535:40;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;271:535:40:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":522,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1742":{"entryPoint":null,"id":1742,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":625,"id":111,"parameterSlots":1,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@recoverFunds_6147":{"entryPoint":173,"id":6147,"parameterSlots":3,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":340,"id":68,"parameterSlots":0,"returnSlots":0},"@transferOwnership_91":{"entryPoint":360,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":742,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":843,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":877,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2319:44","statements":[{"nodeType":"YulBlock","src":"6:3:44","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:44","statements":[{"nodeType":"YulAssignment","src":"73:29:44","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:44"},"nodeType":"YulFunctionCall","src":"82:20:44"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:44"}]},{"body":{"nodeType":"YulBlock","src":"188:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:44"},"nodeType":"YulFunctionCall","src":"190:12:44"},"nodeType":"YulExpressionStatement","src":"190:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:44"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:44"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:44"},"nodeType":"YulFunctionCall","src":"131:54:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:44"},"nodeType":"YulFunctionCall","src":"121:65:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:44"},"nodeType":"YulFunctionCall","src":"114:73:44"},"nodeType":"YulIf","src":"111:93:44"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:44","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:44","type":""}],"src":"14:196:44"},{"body":{"nodeType":"YulBlock","src":"319:224:44","statements":[{"body":{"nodeType":"YulBlock","src":"365:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"374:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"377:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"367:6:44"},"nodeType":"YulFunctionCall","src":"367:12:44"},"nodeType":"YulExpressionStatement","src":"367:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"340:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"336:3:44"},"nodeType":"YulFunctionCall","src":"336:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:44","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"332:3:44"},"nodeType":"YulFunctionCall","src":"332:32:44"},"nodeType":"YulIf","src":"329:52:44"},{"nodeType":"YulAssignment","src":"390:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"419:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"400:18:44"},"nodeType":"YulFunctionCall","src":"400:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"390:6:44"}]},{"nodeType":"YulAssignment","src":"438:48:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"471:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"482:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"467:3:44"},"nodeType":"YulFunctionCall","src":"467:18:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"448:18:44"},"nodeType":"YulFunctionCall","src":"448:38:44"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"438:6:44"}]},{"nodeType":"YulAssignment","src":"495:42:44","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"522:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"533:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"518:3:44"},"nodeType":"YulFunctionCall","src":"518:18:44"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"505:12:44"},"nodeType":"YulFunctionCall","src":"505:32:44"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"495:6:44"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"269:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"280:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"292:6:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"300:6:44","type":""},{"name":"value2","nodeType":"YulTypedName","src":"308:6:44","type":""}],"src":"215:328:44"},{"body":{"nodeType":"YulBlock","src":"649:125:44","statements":[{"nodeType":"YulAssignment","src":"659:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"671:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"682:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"667:3:44"},"nodeType":"YulFunctionCall","src":"667:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"659:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"701:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"716:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"724:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"712:3:44"},"nodeType":"YulFunctionCall","src":"712:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"694:6:44"},"nodeType":"YulFunctionCall","src":"694:74:44"},"nodeType":"YulExpressionStatement","src":"694:74:44"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"618:9:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"629:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"640:4:44","type":""}],"src":"548:226:44"},{"body":{"nodeType":"YulBlock","src":"849:116:44","statements":[{"body":{"nodeType":"YulBlock","src":"895:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"904:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"907:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"897:6:44"},"nodeType":"YulFunctionCall","src":"897:12:44"},"nodeType":"YulExpressionStatement","src":"897:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"870:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"879:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"866:3:44"},"nodeType":"YulFunctionCall","src":"866:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"891:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"862:3:44"},"nodeType":"YulFunctionCall","src":"862:32:44"},"nodeType":"YulIf","src":"859:52:44"},{"nodeType":"YulAssignment","src":"920:39:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"949:9:44"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"930:18:44"},"nodeType":"YulFunctionCall","src":"930:29:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"920:6:44"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"815:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"826:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"838:6:44","type":""}],"src":"779:186:44"},{"body":{"nodeType":"YulBlock","src":"1099:168:44","statements":[{"nodeType":"YulAssignment","src":"1109:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1121:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1132:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1117:3:44"},"nodeType":"YulFunctionCall","src":"1117:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1109:4:44"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1151:9:44"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1166:6:44"},{"kind":"number","nodeType":"YulLiteral","src":"1174:42:44","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1162:3:44"},"nodeType":"YulFunctionCall","src":"1162:55:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1144:6:44"},"nodeType":"YulFunctionCall","src":"1144:74:44"},"nodeType":"YulExpressionStatement","src":"1144:74:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1238:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1249:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1234:3:44"},"nodeType":"YulFunctionCall","src":"1234:18:44"},{"name":"value1","nodeType":"YulIdentifier","src":"1254:6:44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1227:6:44"},"nodeType":"YulFunctionCall","src":"1227:34:44"},"nodeType":"YulExpressionStatement","src":"1227:34:44"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1060:9:44","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1071:6:44","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1079:6:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1090:4:44","type":""}],"src":"970:297:44"},{"body":{"nodeType":"YulBlock","src":"1350:199:44","statements":[{"body":{"nodeType":"YulBlock","src":"1396:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1405:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1408:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1398:6:44"},"nodeType":"YulFunctionCall","src":"1398:12:44"},"nodeType":"YulExpressionStatement","src":"1398:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1371:7:44"},{"name":"headStart","nodeType":"YulIdentifier","src":"1380:9:44"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1367:3:44"},"nodeType":"YulFunctionCall","src":"1367:23:44"},{"kind":"number","nodeType":"YulLiteral","src":"1392:2:44","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1363:3:44"},"nodeType":"YulFunctionCall","src":"1363:32:44"},"nodeType":"YulIf","src":"1360:52:44"},{"nodeType":"YulVariableDeclaration","src":"1421:29:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1440:9:44"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1434:5:44"},"nodeType":"YulFunctionCall","src":"1434:16:44"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1425:5:44","type":""}]},{"body":{"nodeType":"YulBlock","src":"1503:16:44","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1512:1:44","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1515:1:44","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1505:6:44"},"nodeType":"YulFunctionCall","src":"1505:12:44"},"nodeType":"YulExpressionStatement","src":"1505:12:44"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1472:5:44"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1493:5:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1486:6:44"},"nodeType":"YulFunctionCall","src":"1486:13:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1479:6:44"},"nodeType":"YulFunctionCall","src":"1479:21:44"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1469:2:44"},"nodeType":"YulFunctionCall","src":"1469:32:44"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1462:6:44"},"nodeType":"YulFunctionCall","src":"1462:40:44"},"nodeType":"YulIf","src":"1459:60:44"},{"nodeType":"YulAssignment","src":"1528:15:44","value":{"name":"value","nodeType":"YulIdentifier","src":"1538:5:44"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1528:6:44"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1316:9:44","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1327:7:44","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1339:6:44","type":""}],"src":"1272:277:44"},{"body":{"nodeType":"YulBlock","src":"1728:228:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1745:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1756:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1738:6:44"},"nodeType":"YulFunctionCall","src":"1738:21:44"},"nodeType":"YulExpressionStatement","src":"1738:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1779:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1790:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1775:3:44"},"nodeType":"YulFunctionCall","src":"1775:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"1795:2:44","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1768:6:44"},"nodeType":"YulFunctionCall","src":"1768:30:44"},"nodeType":"YulExpressionStatement","src":"1768:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1818:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1829:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1814:3:44"},"nodeType":"YulFunctionCall","src":"1814:18:44"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"1834:34:44","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1807:6:44"},"nodeType":"YulFunctionCall","src":"1807:62:44"},"nodeType":"YulExpressionStatement","src":"1807:62:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1889:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1900:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1885:3:44"},"nodeType":"YulFunctionCall","src":"1885:18:44"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"1905:8:44","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1878:6:44"},"nodeType":"YulFunctionCall","src":"1878:36:44"},"nodeType":"YulExpressionStatement","src":"1878:36:44"},{"nodeType":"YulAssignment","src":"1923:27:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1935:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"1946:3:44","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1931:3:44"},"nodeType":"YulFunctionCall","src":"1931:19:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1923:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1705:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1719:4:44","type":""}],"src":"1554:402:44"},{"body":{"nodeType":"YulBlock","src":"2135:182:44","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2145:6:44"},"nodeType":"YulFunctionCall","src":"2145:21:44"},"nodeType":"YulExpressionStatement","src":"2145:21:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2186:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2197:2:44","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2182:3:44"},"nodeType":"YulFunctionCall","src":"2182:18:44"},{"kind":"number","nodeType":"YulLiteral","src":"2202:2:44","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2175:6:44"},"nodeType":"YulFunctionCall","src":"2175:30:44"},"nodeType":"YulExpressionStatement","src":"2175:30:44"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2225:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2236:2:44","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2221:3:44"},"nodeType":"YulFunctionCall","src":"2221:18:44"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"2241:34:44","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2214:6:44"},"nodeType":"YulFunctionCall","src":"2214:62:44"},"nodeType":"YulExpressionStatement","src":"2214:62:44"},{"nodeType":"YulAssignment","src":"2285:26:44","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2297:9:44"},{"kind":"number","nodeType":"YulLiteral","src":"2308:2:44","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2293:3:44"},"nodeType":"YulFunctionCall","src":"2293:18:44"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2285:4:44"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2112:9:44","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2126:4:44","type":""}],"src":"1961:356:44"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":44,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061004c5760003560e01c80635d3590d514610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461009a575b600080fd5b61006461005f36600461030f565b6100ad565b005b610064610154565b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100646100a836600461034b565b610168565b6100b561020a565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561012a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014e919061036d565b50505050565b61015c61020a565b6101666000610271565b565b61017061020a565b73ffffffffffffffffffffffffffffffffffffffff81166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61020781610271565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461030a57600080fd5b919050565b60008060006060848603121561032457600080fd5b61032d846102e6565b925061033b602085016102e6565b9150604084013590509250925092565b60006020828403121561035d57600080fd5b610366826102e6565b9392505050565b60006020828403121561037f57600080fd5b8151801515811461036657600080fdfea2646970667358221220948af424260e51fce86359f2de15e368a4ce97d80e01828cfc670bd7ad56b4d864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5D3590D5 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x9A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x30F JUMP JUMPDEST PUSH2 0xAD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x154 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0xA8 CALLDATASIZE PUSH1 0x4 PUSH2 0x34B JUMP JUMPDEST PUSH2 0x168 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x20A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E SWAP2 SWAP1 PUSH2 0x36D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x15C PUSH2 0x20A JUMP JUMPDEST PUSH2 0x166 PUSH1 0x0 PUSH2 0x271 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x170 PUSH2 0x20A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x207 DUP2 PUSH2 0x271 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x166 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32D DUP5 PUSH2 0x2E6 JUMP JUMPDEST SWAP3 POP PUSH2 0x33B PUSH1 0x20 DUP6 ADD PUSH2 0x2E6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x366 DUP3 PUSH2 0x2E6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x366 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 DUP11 DELEGATECALL 0x24 0x26 0xE MLOAD 0xFC 0xE8 PUSH4 0x59F2DE15 0xE3 PUSH9 0xA4CE97D80E01828CFC PUSH8 0xBD7AD56B4D86473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"271:535:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;633:171;;;;;;:::i;:::-;;:::i;:::-;;1824:101:0;;;:::i;1201:85::-;1247:7;1273:6;1201:85;;;1273:6;;;;694:74:44;;1201:85:0;;;;;682:2:44;1201:85:0;;;2074:198;;;;;;:::i;:::-;;:::i;633:171:40:-;1094:13:0;:11;:13::i;:::-;760:37:40::1;::::0;;;;:23:::1;1162:55:44::0;;;760:37:40::1;::::0;::::1;1144:74:44::0;1234:18;;;1227:34;;;760:23:40;::::1;::::0;::::1;::::0;1117:18:44;;760:37:40::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;633:171:::0;;;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;2074:198::-;1094:13;:11;:13::i;:::-;2162:22:::1;::::0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;1756:2:44;2154:73:0::1;::::0;::::1;1738:21:44::0;1795:2;1775:18;;;1768:30;1834:34;1814:18;;;1807:62;1905:8;1885:18;;;1878:36;1931:19;;2154:73:0::1;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;1359:130::-;1247:7;1273:6;1422:23;1273:6;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;2163:2:44;1414:68:0;;;2145:21:44;;;2182:18;;;2175:30;2241:34;2221:18;;;2214:62;2293:18;;1414:68:0;1961:356:44;2426:187:0;2499:16;2518:6;;;2534:17;;;;;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:196:44:-;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:328::-;292:6;300;308;361:2;349:9;340:7;336:23;332:32;329:52;;;377:1;374;367:12;329:52;400:29;419:9;400:29;:::i;:::-;390:39;;448:38;482:2;471:9;467:18;448:38;:::i;:::-;438:48;;533:2;522:9;518:18;505:32;495:42;;215:328;;;;;:::o;779:186::-;838:6;891:2;879:9;870:7;866:23;862:32;859:52;;;907:1;904;897:12;859:52;930:29;949:9;930:29;:::i;:::-;920:39;779:186;-1:-1:-1;;;779:186:44:o;1272:277::-;1339:6;1392:2;1380:9;1371:7;1367:23;1363:32;1360:52;;;1408:1;1405;1398:12;1360:52;1440:9;1434:16;1493:5;1486:13;1479:21;1472:5;1469:32;1459:60;;1515:1;1512;1505:12"},"gasEstimates":{"creation":{"codeDepositCost":"193000","executionCost":"26079","totalCost":"219079"},"external":{"owner()":"2302","recoverFunds(address,address,uint256)":"infinite","renounceOwnership()":"infinite","transferOwnership(address)":"28314"}},"methodIdentifiers":{"owner()":"8da5cb5b","recoverFunds(address,address,uint256)":"5d3590d5","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverFunds(address,address,uint256)\":{\"details\":\"The contract is Ownable and only the owner can call the recover function.\",\"params\":{\"_amount\":\"The amount of tokens to recover.\",\"_to\":\"The address to send the tokens to.\",\"_token\":\"The address of the ERC20 token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverFunds(address,address,uint256)\":{\"notice\":\"Recover ERC20 tokens sent to the contract by mistake.\"}},\"notice\":\"Contract is used to recover ERC20 tokens sent to the contract by mistake.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/ERC20Recoverable.sol\":\"ERC20Recoverable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/utils/ERC20Recoverable.sol:ERC20Recoverable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"recoverFunds(address,address,uint256)":{"notice":"Recover ERC20 tokens sent to the contract by mistake."}},"notice":"Contract is used to recover ERC20 tokens sent to the contract by mistake.","version":1}}},"contracts/wrapper/IMetadataService.sol":{"IMetadataService":{"abi":[{"inputs":[{"internalType":"address","name":"nft","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uri(address,uint256)":"28205a93"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/IMetadataService.sol\":\"IMetadataService\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(address nft,uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6249b6a2195ec9aa5d87f5abddac5d0de45aa3ac067fb969e4bc096226f4c246\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/wrapper/INameWrapper.sol":{"INameWrapper":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"ExpiryExtended","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"fuses","type":"uint32"}],"name":"FusesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NameUnwrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint32","name":"fuses","type":"uint32"},{"indexed":false,"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"NameWrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint32","name":"fuseMask","type":"uint32"}],"name":"allFusesBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"canModifyName","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"extendExpiry","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getData","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"isWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"isWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataService","outputs":[{"internalType":"contract IMetadataService","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"names","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"registerAndWrapETH2LD","outputs":[{"internalType":"uint256","name":"registrarExpiry","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"registrar","outputs":[{"internalType":"contract IBaseRegistrar","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"labelHash","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[{"internalType":"uint256","name":"expires","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setChildFuses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"setFuses","outputs":[{"internalType":"uint32","name":"newFuses","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IMetadataService","name":"_metadataService","type":"address"}],"name":"setMetadataService","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setSubnodeRecord","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract INameWrapperUpgrade","name":"_upgradeAddress","type":"address"}],"name":"setUpgradeContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"unwrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"newRegistrant","type":"address"},{"internalType":"address","name":"newController","type":"address"}],"name":"unwrapETH2LD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"upgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"upgradeContract","outputs":[{"internalType":"contract INameWrapperUpgrade","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"wrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"},{"internalType":"address","name":"resolver","type":"address"}],"name":"wrapETH2LD","outputs":[{"internalType":"uint64","name":"expires","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allFusesBurned(bytes32,uint32)":"adf4960a","approve(address,uint256)":"095ea7b3","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","canModifyName(bytes32,address)":"41415eab","ens()":"3f15457f","extendExpiry(bytes32,bytes32,uint64)":"6e5d6ad2","getApproved(uint256)":"081812fc","getData(uint256)":"0178fe3f","isApprovedForAll(address,address)":"e985e9c5","isWrapped(bytes32)":"fd0cd0d9","isWrapped(bytes32,bytes32)":"d9a50c12","metadataService()":"53095467","name()":"06fdde03","names(bytes32)":"20c38e2b","ownerOf(uint256)":"6352211e","registerAndWrapETH2LD(string,address,uint256,address,uint16)":"a4014982","registrar()":"2b20e397","renew(uint256,uint256)":"c475abff","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setChildFuses(bytes32,bytes32,uint32,uint64)":"33c69ea9","setFuses(bytes32,uint16)":"402906fc","setMetadataService(address)":"1534e177","setRecord(bytes32,address,address,uint64)":"cf408823","setResolver(bytes32,address)":"1896f70a","setSubnodeOwner(bytes32,string,address,uint32,uint64)":"c658e086","setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)":"24c1af44","setTTL(bytes32,uint64)":"14ab9038","setUpgradeContract(address)":"b6bcad26","supportsInterface(bytes4)":"01ffc9a7","unwrap(bytes32,bytes32,address)":"d8c9921a","unwrapETH2LD(bytes32,address,address)":"8b4dfa75","upgrade(bytes,bytes)":"c93ab3fd","upgradeContract()":"1f4e1504","uri(uint256)":"0e89341c","wrap(bytes,address,address)":"eb8ae530","wrapETH2LD(string,address,uint16,address)":"8cf8b41e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"ExpiryExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"}],\"name\":\"FusesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"NameWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fuseMask\",\"type\":\"uint32\"}],\"name\":\"allFusesBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canModifyName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"extendExpiry\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataService\",\"outputs\":[{\"internalType\":\"contract IMetadataService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"registerAndWrapETH2LD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"registrarExpiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract IBaseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"labelHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setChildFuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"setFuses\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"newFuses\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataService\",\"name\":\"_metadataService\",\"type\":\"address\"}],\"name\":\"setMetadataService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"_upgradeAddress\",\"type\":\"address\"}],\"name\":\"setUpgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newRegistrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"unwrapETH2LD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"wrapETH2LD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/INameWrapper.sol\":\"INameWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(address nft,uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6249b6a2195ec9aa5d87f5abddac5d0de45aa3ac067fb969e4bc096226f4c246\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/wrapper/INameWrapperUpgrade.sol":{"INameWrapperUpgrade":{"abi":[{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"address","name":"approved","type":"address"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"wrapFromUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"wrapFromUpgrade(bytes,address,uint32,uint64,address,bytes)":"9198c276"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"wrapFromUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/INameWrapperUpgrade.sol\":\"INameWrapperUpgrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}